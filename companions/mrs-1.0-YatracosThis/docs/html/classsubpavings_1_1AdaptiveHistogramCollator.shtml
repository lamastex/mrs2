<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: subpavings::AdaptiveHistogramCollator Class Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classsubpavings_1_1AdaptiveHistogramCollator.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a>  </div>
  <div class="headertitle">
<div class="title">subpavings::AdaptiveHistogramCollator Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="subpavings::AdaptiveHistogramCollator" -->
<p>A wrapper or manager for a CollatorSPSnode.  
 <a href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="adaptivehistogramcollator_8hpp_source.shtml">adaptivehistogramcollator.hpp</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Collaboration diagram for subpavings::AdaptiveHistogramCollator:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><img src="classsubpavings_1_1AdaptiveHistogramCollator__coll__graph.png" border="0" usemap="#subpavings_1_1AdaptiveHistogramCollator_coll__map" alt="Collaboration graph"/></div>
<map name="subpavings_1_1AdaptiveHistogramCollator_coll__map" id="subpavings_1_1AdaptiveHistogramCollator_coll__map">
</map>
<center><span class="legend">[<a target="top" href="graph_legend.shtml">legend</a>]</span></center></div>

<p><a href="classsubpavings_1_1AdaptiveHistogramCollator-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0f1938c3bdc24026c034be889fd2bfe6">AdaptiveHistogramCollator</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#a0f1938c3bdc24026c034be889fd2bfe6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a51aba61f8db338d32c2fa5a4de9648f6">AdaptiveHistogramCollator</a> (const <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">AdaptiveHistogram</a> &amp;adh)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">initialised constructor. Initialised with an <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> object.  <a href="#a51aba61f8db338d32c2fa5a4de9648f6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aca2fcef56fc73925701375fa0e551d8b">AdaptiveHistogramCollator</a> (const <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a> &amp;other)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor.  <a href="#aca2fcef56fc73925701375fa0e551d8b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a812e5e60dd3d233274738d823c9010b2">operator=</a> (const <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a> &amp;rhs)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy assignment operator.  <a href="#a812e5e60dd3d233274738d823c9010b2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a487740c9ae8d812861ff7847718924ff">~AdaptiveHistogramCollator</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#a487740c9ae8d812861ff7847718924ff"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a25deb4940f2a4df6ea84ad6ffe5090d3">operator+</a> (const <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a> &amp;rhs) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ab1c2f300d93647faa0ca12e52b6405f0">operator+=</a> (const <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a> &amp;rhs)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa7ed65f2fced9b8e9e727876e84661c5">operator-</a> (const <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a> &amp;rhs) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294">getSubPaving</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a pointer to the CollatorPSnode this manages.  <a href="#ac7545dd3425c4570bd9e0fde17ad9294"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">makeAverage</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486">addToCollation</a> (const <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">AdaptiveHistogram</a> &amp;adh)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Add an <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> object to the data collation.  <a href="#ade34068ac64cc1bd36781350b28a4486"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa6e9f2b8750f087a86ac72fe6e1487a9">addNegationToCollation</a> (const <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">AdaptiveHistogram</a> &amp;adh, double c)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Add the negation of an <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> object to data collation.  <a href="#aa6e9f2b8750f087a86ac72fe6e1487a9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a4aeff90166d5791306cddff68289cd22">collateFromRVecSplitNow</a> (size_t samplesize, size_t numberSamples, const <a class="el" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68">RVecData</a> rv, ivector pavingBox, const <a class="el" href="classsubpavings_1_1SplitDecisionObj.shtml">SplitDecisionObj</a> &amp;boolTest)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Collate samples from container of rvectors, immediate splitting.  <a href="#a4aeff90166d5791306cddff68289cd22"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa529397618b12232af3dc816957a5180">collateFromRVecSplitPQ</a> (size_t samplesize, size_t numberSamples, const <a class="el" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68">RVecData</a> rv, ivector pavingBox, const <a class="el" href="classsubpavings_1_1NodeCompObj.shtml">NodeCompObj</a> &amp;compTest, const <a class="el" href="classsubpavings_1_1HistEvalObj.shtml">HistEvalObj</a> &amp;he, size_t minChildPoints, double minVolB)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Collate samples from container of rvectors, priority queue split.  <a href="#aa529397618b12232af3dc816957a5180"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2e8d1edcfe594020e1dfa8135dd20f9d">collateFromRSSampleSplitNow</a> (size_t samplesize, size_t numberSamples, const <a class="el" href="classRSSample.shtml">RSSample</a> rss, ivector pavingBox, const <a class="el" href="classsubpavings_1_1SplitDecisionObj.shtml">SplitDecisionObj</a> &amp;boolTest, int label=0)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Collate samples from an <a class="el" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> object, immediate splitting.  <a href="#a2e8d1edcfe594020e1dfa8135dd20f9d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a3ba2c0211c575d8564050292e2b00640">collateFromRSSampleSplitPQ</a> (size_t samplesize, size_t numberSamples, const <a class="el" href="classRSSample.shtml">RSSample</a> rss, ivector pavingBox, const <a class="el" href="classsubpavings_1_1NodeCompObj.shtml">NodeCompObj</a> &amp;compTest, const <a class="el" href="classsubpavings_1_1HistEvalObj.shtml">HistEvalObj</a> &amp;he, size_t minChildPoints, double minVolB, int label=0)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Collate samples from <a class="el" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> object, priority queue splitting.  <a href="#a3ba2c0211c575d8564050292e2b00640"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5">getNumberCollated</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of Adaptive Histogram objects collated.  <a href="#a37b31db56cc701fdd997eafb59bda4f5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a421a5769038047a2a9867235e8fd95a1">getNumLeaves</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get number of leaf nodes.  <a href="#a421a5769038047a2a9867235e8fd95a1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a130fc9b9b02214769aece5969de0d8fc">outputGraphDot</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Make a .dot graph file from collated histogram structure.  <a href="#a130fc9b9b02214769aece5969de0d8fc"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a514f2ebc1857e531b629f0ff3508b04b">outputAverageToTxtTabs</a> (const std::string &amp;s, bool confirm=false) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Output average normalised histogram over collation to a txt file.  <a href="#a514f2ebc1857e531b629f0ff3508b04b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352">outputToTxtTabs</a> (const std::string &amp;s, bool confirm=false) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Output the collated information to a txt file.  <a href="#aab47793e8362245a28a7ec3090da5352"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0">publicOutputLog</a> (const std::string &amp;s, const int i) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Add current state of collation to a log file.  <a href="#aa477e8c6da033d93b212076630d3eec0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a4fab24a598b5d30ff259e71d29e2aebd">outputAccumulationToTxtTabs</a> (const std::string &amp;s) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Output the accumulated data over the collation to a txt file.  <a href="#a4fab24a598b5d30ff259e71d29e2aebd"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#afd34a4c6b449b8f870b6414e7a1c9ef5">getEstLogLikelihoodFromRSSample</a> (<a class="el" href="classRSSample.shtml">RSSample</a> &amp;labSampledData, double dx, double wt)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the estimated log likelihood from <a class="el" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>.  <a href="#afd34a4c6b449b8f870b6414e7a1c9ef5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2c32c30f302a52df863a05f852dd7ea8">getEstLogLikelihoodFromRSSample</a> (<a class="el" href="classRSSample.shtml">RSSample</a> &amp;labSampledData, double dx, double wt, double WeightHist, std::map&lt; rvector, double, std::less&lt; rvector &gt; &gt; &amp;WeightsPM)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2f8ce51da9658ebc8a10a7823366d8ab">marginalise</a> (const std::vector&lt; int &gt; &amp;reqDims) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Make a marginalised version of this histogram collator.  <a href="#a2f8ce51da9658ebc8a10a7823366d8ab"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2f477d16af1646398813009e1dabe2c2">findDensityRegion</a> (double cov, double weightPM, vector&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> * &gt; &amp;covNodes, string covFileName)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the coverage value for boxes.  <a href="#a2f477d16af1646398813009e1dabe2c2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2a2da27e64f75b4080d6a967544872e0">getLeafLevelsString</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">get leaf levels string  <a href="#a2a2da27e64f75b4080d6a967544872e0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a46980f85ee8842fc66fd5e2db8aab12e">getSumVarianceAreaScalar</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the sum of the variances for an area-related scalar summary.  <a href="#a46980f85ee8842fc66fd5e2db8aab12e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aefbffc32c2919a65a8a8f67b74416766">getSampleVarianceAreaScalar</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the sample variance for an area-related scalar summary.  <a href="#aefbffc32c2919a65a8a8f67b74416766"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#af968e5158500b2413e4c4075cdcd15b2">getSumVarianceTotalHeightScalar</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the sum of the variances for scalar summary total height.  <a href="#af968e5158500b2413e4c4075cdcd15b2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0a561a7f838b46985865c6fea1593829">getSampleVarianceTotalHeightScalar</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the sample variance for scalar summary total height.  <a href="#a0a561a7f838b46985865c6fea1593829"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a123342d0bc1e6b05ef6c8ed32eb3cff7">makeDifferencesToAverage</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f">RealVec</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2b77dad7572df40d94ed62868834f3ae">getL1DistancesToAverage</a> (<a class="el" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f">RealVec</a> &amp;container) const </td></tr>
<tr><td colspan="2"><div class="groupHeader">Get the IAE of a distribution</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>Get the integrated absolute error of the specified distribution. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>the integrated absolute error for this realization </dd></dl>
</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">cxsc::real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a46870c2d282efef091dfb1b3477aba4f">getUnifIAE</a> (<a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">AdaptiveHistogram</a> &amp;myPart, std::vector&lt; int &gt; holesLoc, double weight)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">cxsc::real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ad9bbae8e4f70d6c40684ab60038807bc">getUnifIAE</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">cxsc::interval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2173c80c47c7758c67e5f014f92893e3">getFinMixIntervalIAE</a> (<a class="el" href="structFinMix.shtml">FinMix</a> &amp;mixt, double tol, int deg)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">cxsc::interval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a878b3126be081b4551a802de5d7863b3">getLaplaceIntervalIAE</a> (double tol, int deg)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">cxsc::interval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a85c00aa2a7bdff2b4796c62d052e1447">getLognormalIntervalIAE</a> (double tol, int deg)</td></tr>
<tr><td colspan="2"><div class="groupHeader">Get the Scheffe Tournament Winner</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>Get the IAE between an <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> and a <a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>.</p>
<p>Exhaustive and bisection search. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">listScheffeSet</td><td>the list of set of pointers to sets of <a class="el" href="classsubpavings_1_1CollatorSPVnode.shtml">CollatorSPVnode </a> (pointers to the leaf boxes) </td></tr>
    <tr><td class="paramname">vecScheffeSet</td><td>the current vector of pointers to sets of <a class="el" href="classsubpavings_1_1CollatorSPVnode.shtml">CollatorSPVnode </a> (pointers to the leaf boxes) </td></tr>
    <tr><td class="paramname">vecWinnerVec</td><td>the updated vector of vectors of tournament winners </td></tr>
    <tr><td class="paramname">vecDeltaWinnerVec</td><td>the updated vector of vectors of delta of winners </td></tr>
  </table>
  </dd>
</dl>
</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#af9464148c1e5161940b6d6f3c5b2f965">getHistScheffeSet</a> (std::vector&lt; std::vector&lt; std::set&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> *, std::less&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> * &gt; &gt; &gt; &gt; &amp;vecScheffeSetVec)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a60443f6dfa512a30c4b8fb0ee96072b9">getHistYatSet</a> (std::vector&lt; std::set&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> *, std::less&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> * &gt; &gt; &gt; &amp;vecYatSet)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ae4dd25063cc945058665a4b0a3150c89">getHistScheffeWinner</a> (std::vector&lt; std::vector&lt; std::set&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> *, std::less&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> * &gt; &gt; &gt; &gt; &amp;vecScheffeSetVec, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;vecWinnerVec, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;vecDeltaWinnerVec)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a79cc72c5021db50aa53b13f12f8fd234">getNodesDelta</a> (std::set&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> *, std::less&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> * &gt; &gt; &amp;YatSet, int thisTheta, size_t sizeColl)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Returns the IAE between an <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> object and a <a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>.  <a href="#a79cc72c5021db50aa53b13f12f8fd234"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">double&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a9ad5434670b0c8d57c7c3b9a7b9d006e">getNodesMaxDelta</a> (vector&lt; set&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> *, less&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> * &gt; &gt; &gt; &amp;vecYatSet, int thisTheta)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#af45e40508aa9d729f5923787c3717a40">getMinDistEst</a> (vector&lt; double &gt; &amp;maxDelta, vector&lt; set&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> *, less&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> * &gt; &gt; &gt; &amp;vecYatSet)</td></tr>
<tr><td colspan="2"><h2><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa088409e6777f2364f4e096faf309e56">AdaptiveHistogramCollator</a> (<a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> *spn)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Private initialised constructor.  <a href="#aa088409e6777f2364f4e096faf309e56"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a31596539864bb359dbe1246fdebf3cb6">collateFromRVec</a> (size_t samplesize, size_t numberSamples, const <a class="el" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68">RVecData</a> rv, ivector pavingBox, int indImmedSplit, const <a class="el" href="classsubpavings_1_1SplitDecisionObj.shtml">SplitDecisionObj</a> &amp;boolTest, const <a class="el" href="classsubpavings_1_1NodeCompObj.shtml">NodeCompObj</a> &amp;compTest, const <a class="el" href="classsubpavings_1_1HistEvalObj.shtml">HistEvalObj</a> &amp;he, size_t minChildPoints, double minVolB)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Private method for making a collation histogram from RVecData.  <a href="#a31596539864bb359dbe1246fdebf3cb6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ae83b213dd864bca295dd85fd1f63dbaa">collateFromRSSample</a> (size_t samplesize, size_t numberSamples, const <a class="el" href="classRSSample.shtml">RSSample</a> rss, ivector pavingBox, int indImmedSplit, const <a class="el" href="classsubpavings_1_1SplitDecisionObj.shtml">SplitDecisionObj</a> &amp;boolTest, const <a class="el" href="classsubpavings_1_1NodeCompObj.shtml">NodeCompObj</a> &amp;compTest, const <a class="el" href="classsubpavings_1_1HistEvalObj.shtml">HistEvalObj</a> &amp;he, size_t minChildPoints, double minVolB, int label)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Private method for making a collation histogram from <a class="el" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>.  <a href="#ae83b213dd864bca295dd85fd1f63dbaa"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aad6e5e6bd009ca64209c471c55a8d43e">outputLog</a> (const std::string &amp;s, const int i) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Add current state of collation to a log file.  <a href="#aad6e5e6bd009ca64209c471c55a8d43e"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60">rootCollator</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Pointer to the root <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>.  <a href="#a5ae0bb810e0f19142964b9508f799b60"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>A wrapper or manager for a CollatorSPSnode. </p>
<p><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> class objects manage <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode </a> objects for the purpose of collating information from a number of <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> objects.</p>
<p>The <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>'s <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> tree represents the subpaving that is the union of all the subpavings associated with each <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> in the collation. Each node in the tree has a data member which is a container structure holding one value for each collated histogram. For a collation of histograms the container holds the <b>normalised height</b>, for each collated histogram, of the histogram bin represented by the box of that node.</p>
<p>(The normalised height associated with a bin which is represented by the box of a leaf node of a tree managed by an <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> object is the number of data points associated with that bin divided by (the total number of data points in the histogram x the volume of the bin). Thus the areas (heights x volumes) of the bins sum to 1.</p>
<p>Since the tree represents the union of the subpavings associated with each <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> in the collation, the collation tree will have at least as many and usually more bins than any of the collated histograms.</p>
<p>Each collated histogram will be represented in the summaries in the order in which it was added to the collation. Eg, the heights of the bins of the first histogram to be collated will be first (index [1]) in the summary container.</p>
<p>If the collated AdaptiveHistograms have been properly formed and added to the collation, the sum, over all the leaf nodes of the collation, of the volume of the box of the leaf node multiplied by the values of the leaf node summary corresponding a particular collated histogram will be 1 for each collated histogram. </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8hpp_source.shtml#l00071">71</a> of file <a class="el" href="adaptivehistogramcollator_8hpp_source.shtml">adaptivehistogramcollator.hpp</a>.</p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="aa088409e6777f2364f4e096faf309e56"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::AdaptiveHistogramCollator" ref="aa088409e6777f2364f4e096faf309e56" args="(CollatorSPnode *spn)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa088409e6777f2364f4e096faf309e56">AdaptiveHistogramCollator::AdaptiveHistogramCollator</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> *&#160;</td>
          <td class="paramname"><em>spn</em></td><td>)</td>
          <td><code> [explicit, private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Private initialised constructor. </p>
<p>Initialised with pointer to subpaving. </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00071">71</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">if</span> (NULL == spn) {
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Null CollatorSPnode pointer in constructor&quot;</span>);
    }
    <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a> = spn;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0f1938c3bdc24026c034be889fd2bfe6"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::AdaptiveHistogramCollator" ref="a0f1938c3bdc24026c034be889fd2bfe6" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa088409e6777f2364f4e096faf309e56">AdaptiveHistogramCollator::AdaptiveHistogramCollator</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [explicit]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Default constructor. </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00240">240</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">try</span> {
        <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a> = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>();
    }
    <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
        <span class="keywordtype">string</span> msg(ba.what());
        std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in constructor: original error &quot;</span>
                            &lt;&lt; msg &lt;&lt; std::endl;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }

}
</pre></div>
</div>
</div>
<a class="anchor" id="a51aba61f8db338d32c2fa5a4de9648f6"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::AdaptiveHistogramCollator" ref="a51aba61f8db338d32c2fa5a4de9648f6" args="(const AdaptiveHistogram &amp;adh)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa088409e6777f2364f4e096faf309e56">AdaptiveHistogramCollator::AdaptiveHistogramCollator</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">AdaptiveHistogram</a> &amp;&#160;</td>
          <td class="paramname"><em>adh</em></td><td>)</td>
          <td><code> [explicit]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>initialised constructor. Initialised with an <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> object. </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00256">256</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01216">subpavings::AdaptiveHistogram::getSubPaving()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">try</span> {
        <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a> = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>(adh.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>());
    }
    <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
        <span class="keywordtype">string</span> msg(ba.what());
        std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in constructor: original error &quot;</span>
                            &lt;&lt; msg &lt;&lt; std::endl;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="aca2fcef56fc73925701375fa0e551d8b"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::AdaptiveHistogramCollator" ref="aca2fcef56fc73925701375fa0e551d8b" args="(const AdaptiveHistogramCollator &amp;other)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa088409e6777f2364f4e096faf309e56">AdaptiveHistogramCollator::AdaptiveHistogramCollator</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy constructor. </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00272">272</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="adaptivehistogramcollator_8hpp_source.shtml#l00089">rootCollator</a>, and <a class="el" href="spnode_8cpp_source.shtml#l02148">subpavings::SPnodeException::what()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">try</span> {
        <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a> = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>(*(other.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>));
    }
    <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
        <span class="keywordtype">string</span> msg(ba.what());
        std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in constructor: original error &quot;</span>
                                            &lt;&lt; msg &lt;&lt; std:: endl;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Memory allocation error in constructor: &quot;</span> + msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
        <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
        std::cerr &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in constructor: original error &quot;</span>
                                            &lt;&lt; msg &lt;&lt; std::endl;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;SPnodeException in constructor: &quot;</span> + msg);
    }
    <span class="keywordflow">catch</span> (exception&amp; e) {
        <span class="keywordtype">string</span> msg(e.what());
        std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in constructor: original error &quot;</span>
                                            &lt;&lt; msg &lt;&lt; std::endl;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error in constructor: &quot;</span> + msg);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a487740c9ae8d812861ff7847718924ff"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::~AdaptiveHistogramCollator" ref="a487740c9ae8d812861ff7847718924ff" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a487740c9ae8d812861ff7847718924ff">AdaptiveHistogramCollator::~AdaptiveHistogramCollator</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Destructor. </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00336">336</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{ <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>; }
</pre></div>
</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="aa6e9f2b8750f087a86ac72fe6e1487a9"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::addNegationToCollation" ref="aa6e9f2b8750f087a86ac72fe6e1487a9" args="(const AdaptiveHistogram &amp;adh, double c)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa6e9f2b8750f087a86ac72fe6e1487a9">AdaptiveHistogramCollator::addNegationToCollation</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">AdaptiveHistogram</a> &amp;&#160;</td>
          <td class="paramname"><em>adh</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Add the negation of an <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> object to data collation. </p>
<p>Attempts to add an <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> object into the collation of <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> information.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">adh</td><td>the <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> to be negated and included in the collation. </td></tr>
  </table>
  </dd>
</dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>This will include negated summary data from the adh. </dd></dl>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00564">564</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="collatorspnode_8cpp_source.shtml#l01323">subpavings::CollatorSPnode::addNegatedPaving()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01216">subpavings::AdaptiveHistogram::getSubPaving()</a>, <a class="el" href="spnode_8cpp_source.shtml#l02148">subpavings::SPnodeException::what()</a>, and <a class="el" href="adaptivehistogram_8cpp_source.shtml#l05922">subpavings::HistException::what()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">try</span> {
        <span class="comment">// make the AdaptiveHistogram into a new CollatorSPnode</span>
        <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> toNeg(adh.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>());
       <span class="comment">// put the negation of the new CollatorSPnode into the collation</span>
       <span class="comment">// note that addNegatedPaving will alter toNeg, but that is okay because</span>
       <span class="comment">// toNeg is a temporary object created and deleted in this procedure</span>
        <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a48244aa234b59b624ec681eaf966cfe4" title="Incorporate negation of a Collator subpaving to this summmary.">addNegatedPaving</a>(&amp;toNeg, c);
    }
    <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
        <span class="keywordtype">string</span> oldmsg(ba.what());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory adding negation to collation. &quot;</span>;
        msg += <span class="stringliteral">&quot;Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
        <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error adding negation to collation. &quot;</span>;
        msg += <span class="stringliteral">&quot;Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
        <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException adding negation to collation. &quot;</span>;
        msg += <span class="stringliteral">&quot;Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (exception&amp; e) {
        <span class="keywordtype">string</span> oldmsg(e.what());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error adding negation to collation. &quot;</span>;
        msg += <span class="stringliteral">&quot;Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ade34068ac64cc1bd36781350b28a4486"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::addToCollation" ref="ade34068ac64cc1bd36781350b28a4486" args="(const AdaptiveHistogram &amp;adh)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486">AdaptiveHistogramCollator::addToCollation</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">AdaptiveHistogram</a> &amp;&#160;</td>
          <td class="paramname"><em>adh</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Add an <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> object to the data collation. </p>
<p>Attempts to add an <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> object into the collation of <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> information.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">adh</td><td>the <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> to be included in the collation. </td></tr>
  </table>
  </dd>
</dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>This will include summary data from the adh. </dd></dl>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00521">521</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="collatorspnode_8cpp_source.shtml#l01211">subpavings::CollatorSPnode::addPaving()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01216">subpavings::AdaptiveHistogram::getSubPaving()</a>, <a class="el" href="spnode_8cpp_source.shtml#l02148">subpavings::SPnodeException::what()</a>, and <a class="el" href="adaptivehistogram_8cpp_source.shtml#l05922">subpavings::HistException::what()</a>.</p>

<p>Referenced by <a class="el" href="AHABCObsMCMCDblHurdle_8cpp_source.shtml#l00140">doMCMCGRAuto()</a>, <a class="el" href="AHABCSimThreeMethods_8cpp_source.shtml#l00044">main()</a>, and <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03044">subpavings::AdaptiveHistogram::MCMC()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">try</span> {
        <span class="comment">// get the subpaving out of adh to form a new CollatorSPnode</span>
        <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> toAdd(adh.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>());
        <span class="comment">// add the new CollatorSPnode into the collation</span>
        <span class="comment">// note that addPaving will alter toAdd, but that is okay because</span>
        <span class="comment">// toAdd is a temporary object created and deleted in this procedure</span>

        <span class="comment">//rootCollator-&gt;addPaving(&amp;toAdd);</span>

        <span class="keywordtype">bool</span> successfullyAdded = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab32959b197c529211921f3dab4e28177" title="Incorporate a Collator subpaving to this summmary.">addPaving</a>(&amp;toAdd);
        <span class="keywordflow">if</span> (!successfullyAdded) { <span class="comment">// addition returned false</span>
            std::cout &lt;&lt; <span class="stringliteral">&quot;Nothing added - check console output &quot;</span>
                &lt;&lt; <span class="stringliteral">&quot;for error messages&quot;</span> &lt;&lt; std::endl;
        }
    }
    <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
        <span class="keywordtype">string</span> oldmsg(ba.what());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory adding to collation.  Orginal error: &quot;</span>
                                            + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
        <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error adding to collation.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
        <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException adding to collation.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (exception&amp; e) {
        <span class="keywordtype">string</span> oldmsg(e.what());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error adding to collation.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae83b213dd864bca295dd85fd1f63dbaa"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::collateFromRSSample" ref="ae83b213dd864bca295dd85fd1f63dbaa" args="(size_t samplesize, size_t numberSamples, const RSSample rss, ivector pavingBox, int indImmedSplit, const SplitDecisionObj &amp;boolTest, const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, size_t minChildPoints, double minVolB, int label)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ae83b213dd864bca295dd85fd1f63dbaa">AdaptiveHistogramCollator::collateFromRSSample</a> </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>samplesize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>numberSamples</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classRSSample.shtml">RSSample</a>&#160;</td>
          <td class="paramname"><em>rss</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ivector&#160;</td>
          <td class="paramname"><em>pavingBox</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>indImmedSplit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1SplitDecisionObj.shtml">SplitDecisionObj</a> &amp;&#160;</td>
          <td class="paramname"><em>boolTest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1NodeCompObj.shtml">NodeCompObj</a> &amp;&#160;</td>
          <td class="paramname"><em>compTest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1HistEvalObj.shtml">HistEvalObj</a> &amp;&#160;</td>
          <td class="paramname"><em>he</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>minChildPoints</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>minVolB</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>label</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Private method for making a collation histogram from <a class="el" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">samplesize</td><td>is the number of datapoints in each sample to draw. </td></tr>
    <tr><td class="paramname">numberSamples</td><td>is the number samples to draw (number of histograms to make and include in this collator). </td></tr>
    <tr><td class="paramname">rss</td><td>is the <a class="el" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> object to draw samples from. </td></tr>
    <tr><td class="paramname">pavingBox</td><td>is the box to be used as the root box for all histograms </td></tr>
    <tr><td class="paramname">indImmedSplit</td><td>is an indicator for immediate splitting, =1 if we split as data comes (no priority queue) =0 otherwise (priority queue splitting). </td></tr>
    <tr><td class="paramname">boolTest</td><td>is a reference to an object providing a function operator determining whether to split a node when a data point arrives. </td></tr>
    <tr><td class="paramname">compTest</td><td>is an instance of a class providing a function for comparing spsnodes, to order the nodes to prioitise splitting. </td></tr>
    <tr><td class="paramname">he</td><td>is an instance of a class which provides a function to control when to stop splitting. </td></tr>
    <tr><td class="paramname">minChildPoints</td><td>is the minimum number of points any prospective child must have for a leaf node to be splittable. </td></tr>
    <tr><td class="paramname">minVolB</td><td>is a multiplier applied to (log n)^2/n to give the the minimum volume for a splittable node. A node with volume &lt; minVolB(log n)^2/n is not splittable. Important with AIC or COPERR. </td></tr>
    <tr><td class="paramname">label</td><td>is the label for the labeled points in the rss sample which we want to draw our samples from. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if the collation process successful, false otherwise. </dd></dl>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00184">184</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="sptools_8cpp_source.shtml#l01021">subpavings::getRvectorsFromRSSample()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="comment">// container to put the rvectors into</span>
    <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> allData;

    <span class="comment">//get the container of rvectors</span>
    <span class="comment">//use getRvectorsFromRSSample to put rvectors from labeled points in</span>
    <span class="comment">// rss.Samples into allData where the labeled point label matches label</span>
    <span class="keywordtype">size_t</span> numberFound = <a class="code" href="namespacesubpavings.shtml#ad435f1951db3078702d178b718018651" title="Get all rvectors from an RSSample object.">getRvectorsFromRSSample</a>(allData, rss, label);

    <span class="keywordtype">bool</span> cancontinue = (numberFound &gt; 0);
    <span class="comment">// cancontinue will be false if there was a problem getting data points</span>
    <span class="comment">// if cancontinue is true data should contain at least some data points</span>

    <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;

    <span class="keywordflow">if</span> (cancontinue) {

        <span class="comment">// use the RVec method to complete the process of histogram</span>
        <span class="comment">// creation and averaging</span>
        retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a31596539864bb359dbe1246fdebf3cb6" title="Private method for making a collation histogram from RVecData.">collateFromRVec</a>(samplesize, numberSamples, allData,
                                pavingBox, indImmedSplit, boolTest,
                                compTest, he, minChildPoints, minVolB);
    }

    <span class="keywordflow">return</span> retValue;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2e8d1edcfe594020e1dfa8135dd20f9d"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::collateFromRSSampleSplitNow" ref="a2e8d1edcfe594020e1dfa8135dd20f9d" args="(size_t samplesize, size_t numberSamples, const RSSample rss, ivector pavingBox, const SplitDecisionObj &amp;boolTest, int label=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2e8d1edcfe594020e1dfa8135dd20f9d">AdaptiveHistogramCollator::collateFromRSSampleSplitNow</a> </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>samplesize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>numberSamples</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classRSSample.shtml">RSSample</a>&#160;</td>
          <td class="paramname"><em>rss</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ivector&#160;</td>
          <td class="paramname"><em>pavingBox</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1SplitDecisionObj.shtml">SplitDecisionObj</a> &amp;&#160;</td>
          <td class="paramname"><em>boolTest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>label</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Collate samples from an <a class="el" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> object, immediate splitting. </p>
<p>A method to find the average histogram from a specified number of samples of specifed size from a given <a class="el" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> object.</p>
<p>Sampling from the <a class="el" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> object's samples for each histogram is with replacement and different samples can are drawn independently: one data point in the <a class="el" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> object's samples can be included in more than one histogram and more than once in any one histogram.</p>
<p>Splitting takes place immediately as the data is inserted.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">samplesize</td><td>is the size of each sample. </td></tr>
    <tr><td class="paramname">numberSamples</td><td>is the number of samples to draw. </td></tr>
    <tr><td class="paramname">rss</td><td>is the <a class="el" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> object to draw samples from. </td></tr>
    <tr><td class="paramname">pavingBox</td><td>is the box to use for all subpaving created. </td></tr>
    <tr><td class="paramname">boolTest</td><td>is a reference to an object providing a function operator determining whether to split a node when a data point arrives. </td></tr>
    <tr><td class="paramname">label</td><td>is the label of the labeled points in the <a class="el" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> object which we want to use to take samples from. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if data was found and collation created. </dd></dl>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00694">694</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="spnode_8cpp_source.shtml#l02148">subpavings::SPnodeException::what()</a>, and <a class="el" href="adaptivehistogram_8cpp_source.shtml#l05922">subpavings::HistException::what()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;

    <span class="keywordflow">try</span> {

        <span class="keywordtype">int</span> indImmedSplit = 1; <span class="comment">// immediate splitting</span>

        <a class="code" href="classsubpavings_1_1CompNothing.shtml" title="Class comparing nodes to give no change in ordering.">CompNothing</a> compTest; <span class="comment">// dummy comparison test</span>
        <a class="code" href="classsubpavings_1_1CritStopAll.shtml" title="Class to bale out of priority queue splitting.">CritStopAll</a> he; <span class="comment">// dummy stopping function object</span>
        <span class="keywordtype">size_t</span> minPoints = 0; <span class="comment">// dummy minPoints</span>
        <span class="keywordtype">double</span> minVolB = 0.0; <span class="comment">// dummy minVolB</span>

        retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ae83b213dd864bca295dd85fd1f63dbaa" title="Private method for making a collation histogram from RSSample.">collateFromRSSample</a>(samplesize, numberSamples, rss,
                                    pavingBox, indImmedSplit, boolTest,
                                    compTest, he, minPoints, minVolB, label);
    }
    <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
        <span class="keywordtype">string</span> oldmsg(ba.what());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory averaging.  Orginal error: &quot;</span>
                                            + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
        <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error averaging.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
        <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException averaging.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (exception&amp; e) {
        <span class="keywordtype">string</span> oldmsg(e.what());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error averaging.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }

    <span class="keywordflow">return</span> retValue;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3ba2c0211c575d8564050292e2b00640"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::collateFromRSSampleSplitPQ" ref="a3ba2c0211c575d8564050292e2b00640" args="(size_t samplesize, size_t numberSamples, const RSSample rss, ivector pavingBox, const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, size_t minChildPoints, double minVolB, int label=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a3ba2c0211c575d8564050292e2b00640">AdaptiveHistogramCollator::collateFromRSSampleSplitPQ</a> </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>samplesize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>numberSamples</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classRSSample.shtml">RSSample</a>&#160;</td>
          <td class="paramname"><em>rss</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ivector&#160;</td>
          <td class="paramname"><em>pavingBox</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1NodeCompObj.shtml">NodeCompObj</a> &amp;&#160;</td>
          <td class="paramname"><em>compTest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1HistEvalObj.shtml">HistEvalObj</a> &amp;&#160;</td>
          <td class="paramname"><em>he</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>minChildPoints</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>minVolB</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>label</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Collate samples from <a class="el" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> object, priority queue splitting. </p>
<p>A method to find the average histogram from a specified number of samples of specifed size from a given <a class="el" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> object.</p>
<p>Sampling from the <a class="el" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> object's samples for each histogram is with replacement and different samples can are drawn independently: one data point in the <a class="el" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> object's samples can be included in more than one histogram and more than once in any one histogram.</p>
<p>The histograms are created with priority queue splitting once data is initially inserted into the root box of each histogram.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">samplesize</td><td>is the size of each sample. </td></tr>
    <tr><td class="paramname">numberSamples</td><td>is the number of samples to draw. </td></tr>
    <tr><td class="paramname">rss</td><td>is the <a class="el" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> object to draw samples from. </td></tr>
    <tr><td class="paramname">pavingBox</td><td>is the box to use for all subpaving created. </td></tr>
    <tr><td class="paramname">compTest</td><td>is an instance of a class providing a function for comparing spsnodes, to order the nodes to prioitise splitting. </td></tr>
    <tr><td class="paramname">he</td><td>is an instance of a class which provides a function to control when to stop splitting. </td></tr>
    <tr><td class="paramname">minChildPoints</td><td>is the minimum number of points any prospective child must have for a leaf node to be splittable. </td></tr>
    <tr><td class="paramname">minVolB</td><td>is a multiplier applied to (log n)^2/n to give the the minimum volume for a splittable node. A node with volume &lt; minVolB(log n)^2/n is not splittable. Important with AIC or COPERR. </td></tr>
    <tr><td class="paramname">label</td><td>is the label of the labeled points in the <a class="el" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> object which we want to use to take samples from. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if data was found and collation created. </dd></dl>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00740">740</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="spnode_8cpp_source.shtml#l02148">subpavings::SPnodeException::what()</a>, and <a class="el" href="adaptivehistogram_8cpp_source.shtml#l05922">subpavings::HistException::what()</a>.</p>

<p>Referenced by <a class="el" href="LevyTest_8cpp_source.shtml#l00044">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;

    <span class="keywordflow">try</span> {
        <span class="keywordtype">int</span> indImmedSplit = 0; <span class="comment">// pq rather than immediate splitting</span>

        <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn; <span class="comment">// dummy</span>

        retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ae83b213dd864bca295dd85fd1f63dbaa" title="Private method for making a collation histogram from RSSample.">collateFromRSSample</a>(samplesize, numberSamples, rss,
                                    pavingBox, indImmedSplit, sn,
                                    compTest, he, minChildPoints, minVolB, label);
    }
    <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
        <span class="keywordtype">string</span> oldmsg(ba.what());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory averaging.  Orginal error: &quot;</span>
                                            + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
        <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error averaging.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
        <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException averaging.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (exception&amp; e) {
        <span class="keywordtype">string</span> oldmsg(e.what());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error averaging.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }

    <span class="keywordflow">return</span> retValue;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a31596539864bb359dbe1246fdebf3cb6"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::collateFromRVec" ref="a31596539864bb359dbe1246fdebf3cb6" args="(size_t samplesize, size_t numberSamples, const RVecData rv, ivector pavingBox, int indImmedSplit, const SplitDecisionObj &amp;boolTest, const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, size_t minChildPoints, double minVolB)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a31596539864bb359dbe1246fdebf3cb6">AdaptiveHistogramCollator::collateFromRVec</a> </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>samplesize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>numberSamples</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68">RVecData</a>&#160;</td>
          <td class="paramname"><em>rv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ivector&#160;</td>
          <td class="paramname"><em>pavingBox</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>indImmedSplit</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1SplitDecisionObj.shtml">SplitDecisionObj</a> &amp;&#160;</td>
          <td class="paramname"><em>boolTest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1NodeCompObj.shtml">NodeCompObj</a> &amp;&#160;</td>
          <td class="paramname"><em>compTest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1HistEvalObj.shtml">HistEvalObj</a> &amp;&#160;</td>
          <td class="paramname"><em>he</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>minChildPoints</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>minVolB</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Private method for making a collation histogram from RVecData. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">samplesize</td><td>is the number of datapoints in each sample to draw. </td></tr>
    <tr><td class="paramname">numberSamples</td><td>is the number samples to draw (number of histograms to make and include in this collator). </td></tr>
    <tr><td class="paramname">rv</td><td>is the container of rvectors to draw samples from. </td></tr>
    <tr><td class="paramname">pavingBox</td><td>is the box to be used as the root box for all histograms </td></tr>
    <tr><td class="paramname">indImmedSplit</td><td>is an indicator for immediate splitting, =1 if we split as data comes (no priority queue) =0 otherwise (priority queue splitting). </td></tr>
    <tr><td class="paramname">boolTest</td><td>is a reference to an object providing a function operator determining whether to split a node when a data point arrives. </td></tr>
    <tr><td class="paramname">compTest</td><td>is an instance of a class providing a function for comparing spsnodes, to order the nodes to prioitise splitting. </td></tr>
    <tr><td class="paramname">he</td><td>is an instance of a class which provides a function to control when to stop splitting. </td></tr>
    <tr><td class="paramname">minChildPoints</td><td>is the minimum number of points any prospective child must have for a leaf node to be splittable. </td></tr>
    <tr><td class="paramname">minVolB</td><td>is a multiplier applied to (log n)^2/n to give the the minimum volume for a splittable node. A node with volume &lt; minVolB(log n)^2/n is not splittable. Important with AIC or COPERR. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if the collation process successful, false otherwise. </dd></dl>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00080">80</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="adaptivehistogram_8hpp_source.shtml#l00959">subpavings::AdaptiveHistogram::insertSampleFromRVec()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03546">subpavings::AdaptiveHistogram::outputToTxtTabs()</a>, and <a class="el" href="adaptivehistogram_8hpp_source.shtml#l01150">subpavings::AdaptiveHistogram::prioritySplit()</a>.</p>
<div class="fragment"><pre class="fragment">{

    <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
    gsl_rng * rgsl = NULL;

    <span class="keywordflow">try</span> {

        <span class="keywordtype">size_t</span> countIn = 0; <span class="comment">// track the number of histograms made and added</span>

        <span class="comment">// set up a random number sampler</span>
        <span class="keyword">const</span> gsl_rng_type * tgsl;

        <span class="comment">// set the library variables *gsl_rng_default and</span>
        <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
        gsl_rng_env_setup();

        tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
        rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>

        std::string fileName; <span class="comment">// a name for the files to use</span>


        <span class="comment">// for loop to generate histograms and add to collation</span>
        <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j=1; j&lt;=numberSamples; j++) {

            <span class="keywordtype">bool</span> successfulInsertion; <span class="comment">// recognise successes</span>

            <span class="comment">// make an Adaptive Histogram object with a specified box</span>
            <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist(pavingBox);

            <span class="keywordflow">if</span> (indImmedSplit == 1) { <span class="comment">// doing immediate splitting</span>

                successfulInsertion = myHist.insertSampleFromRVec(samplesize,
                    rgsl, rv, boolTest);
            }

            <span class="keywordflow">if</span> (indImmedSplit == 0) { <span class="comment">// doing priority queue splitting</span>

                successfulInsertion = myHist.insertSampleFromRVec(samplesize,
                    rgsl, rv);

                <span class="keywordtype">bool</span> successfulPQSplit;

                <span class="keywordflow">if</span> (successfulInsertion) {

                    successfulPQSplit = myHist.prioritySplit(compTest, he,
                                                    <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minChildPoints, minVolB);
                }

                successfulInsertion = successfulInsertion &amp;&amp; successfulPQSplit;

            }

            <span class="comment">// only do more if some data was fed in</span>
            <span class="keywordflow">if</span>(successfulInsertion) {

                <span class="comment">// create a name for the file to output</span>
                fileName = <span class="stringliteral">&quot;Hist&quot;</span>;
                <span class="comment">//convert j to a string</span>
                std::ostringstream stm2;
                stm2 &lt;&lt; j;
                <span class="comment">// add the stringed j to the filename</span>
                fileName += stm2.str();
                fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>


                <span class="comment">// To realize a file output</span>
                myHist.outputToTxtTabs(fileName);

                <span class="comment">// add the histogram to the collection represented by this</span>
                <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(myHist);

                countIn++; <span class="comment">// increment the counter</span>
            }
        } <span class="comment">// end of for loop creating histograms</span>

        <span class="keywordflow">if</span> (countIn == numberSamples) {

            retValue = <span class="keyword">true</span>;
        }
        <span class="keywordflow">else</span> { <span class="comment">// did not add required number of histograms</span>
            std::cerr &lt;&lt; <span class="stringliteral">&quot;Problem in collateFromRVec(): check &quot;</span>
                    &lt;&lt; <span class="stringliteral">&quot;console for error reports &quot;</span> &lt;&lt; std::endl;
        }
        <span class="comment">// free the random number generator</span>
        gsl_rng_free (rgsl);

    }
    <span class="keywordflow">catch</span> (exception&amp;) {
        <span class="keywordflow">if</span> (NULL != rgsl) <span class="comment">// free the random number generator</span>
            gsl_rng_free (rgsl);
        <span class="keywordflow">throw</span>;
    }

    <span class="keywordflow">return</span> retValue;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4aeff90166d5791306cddff68289cd22"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::collateFromRVecSplitNow" ref="a4aeff90166d5791306cddff68289cd22" args="(size_t samplesize, size_t numberSamples, const RVecData rv, ivector pavingBox, const SplitDecisionObj &amp;boolTest)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a4aeff90166d5791306cddff68289cd22">AdaptiveHistogramCollator::collateFromRVecSplitNow</a> </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>samplesize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>numberSamples</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68">RVecData</a>&#160;</td>
          <td class="paramname"><em>rv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ivector&#160;</td>
          <td class="paramname"><em>pavingBox</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1SplitDecisionObj.shtml">SplitDecisionObj</a> &amp;&#160;</td>
          <td class="paramname"><em>boolTest</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Collate samples from container of rvectors, immediate splitting. </p>
<p>A method to find the collated histograms from a specified number of samples of specifed size from a given container of rvectors.</p>
<p>Sampling from the container for each histogram is with replacement and different samples can are drawn independently: one data point in the container can be included in more than one histogram and more than once in any one histogram.</p>
<p>Splitting takes place immediately as the data is inserted.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">samplesize</td><td>is the size of each sample. </td></tr>
    <tr><td class="paramname">numberSamples</td><td>is the number of samples to draw. </td></tr>
    <tr><td class="paramname">rv</td><td>is the container of rvectors to draw samples from. </td></tr>
    <tr><td class="paramname">pavingBox</td><td>is the box to use for all subpaving created. </td></tr>
    <tr><td class="paramname">boolTest</td><td>is a reference to an object providing a function operator determining whether to split a node when a data point arrives. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if data was found and the collation created. </dd></dl>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00604">604</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="spnode_8cpp_source.shtml#l02148">subpavings::SPnodeException::what()</a>, and <a class="el" href="adaptivehistogram_8cpp_source.shtml#l05922">subpavings::HistException::what()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;

    <span class="keywordflow">try</span> {
        <span class="keywordtype">int</span> indImmedSplit = 1; <span class="comment">// immediate splitting</span>

        <a class="code" href="classsubpavings_1_1CompNothing.shtml" title="Class comparing nodes to give no change in ordering.">CompNothing</a> compTest; <span class="comment">// dummy comparison test</span>
        <a class="code" href="classsubpavings_1_1CritStopAll.shtml" title="Class to bale out of priority queue splitting.">CritStopAll</a> he; <span class="comment">// dummy stopping function object</span>
        <span class="keywordtype">size_t</span> minPoints = 0; <span class="comment">// dummy minPoints</span>
        <span class="keywordtype">double</span> minVolB = 0.0; <span class="comment">// dummy minVolB</span>


        retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a31596539864bb359dbe1246fdebf3cb6" title="Private method for making a collation histogram from RVecData.">collateFromRVec</a>(samplesize, numberSamples, rv,
                                    pavingBox, indImmedSplit, boolTest,
                                    compTest, he, minPoints, minVolB);
    }
    <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
        <span class="keywordtype">string</span> oldmsg(ba.what());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory averaging.  Orginal error: &quot;</span>
                                            + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
        <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error averaging.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
        <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException averaging.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (exception&amp; e) {
        <span class="keywordtype">string</span> oldmsg(e.what());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error averaging.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }

    <span class="keywordflow">return</span> retValue;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa529397618b12232af3dc816957a5180"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::collateFromRVecSplitPQ" ref="aa529397618b12232af3dc816957a5180" args="(size_t samplesize, size_t numberSamples, const RVecData rv, ivector pavingBox, const NodeCompObj &amp;compTest, const HistEvalObj &amp;he, size_t minChildPoints, double minVolB)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa529397618b12232af3dc816957a5180">AdaptiveHistogramCollator::collateFromRVecSplitPQ</a> </td>
          <td>(</td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>samplesize</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>numberSamples</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68">RVecData</a>&#160;</td>
          <td class="paramname"><em>rv</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ivector&#160;</td>
          <td class="paramname"><em>pavingBox</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1NodeCompObj.shtml">NodeCompObj</a> &amp;&#160;</td>
          <td class="paramname"><em>compTest</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1HistEvalObj.shtml">HistEvalObj</a> &amp;&#160;</td>
          <td class="paramname"><em>he</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>minChildPoints</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>minVolB</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Collate samples from container of rvectors, priority queue split. </p>
<p>A method to find the collated histograms from a specified number of samples of specifed size from a given container of rvectors.</p>
<p>Sampling from the container's samples for each histogram is with replacement and different samples can are drawn independently: one data point in the container's samples can be included in more than one histogram and more than once in any one histogram.</p>
<p>The histograms are created with priority queue splitting once data is initially inserted into the root box of each histogram.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">samplesize</td><td>is the size of each sample. </td></tr>
    <tr><td class="paramname">numberSamples</td><td>is the number of samples to draw. </td></tr>
    <tr><td class="paramname">rv</td><td>is the container of rvectors to draw samples from. </td></tr>
    <tr><td class="paramname">pavingBox</td><td>is the box to use for all subpaving created. </td></tr>
    <tr><td class="paramname">compTest</td><td>is an instance of a class providing a function for comparing spsnodes, to order the nodes to prioitise splitting. </td></tr>
    <tr><td class="paramname">he</td><td>is an instance of a class which provides a function to control when to stop splitting. </td></tr>
    <tr><td class="paramname">minChildPoints</td><td>is the minimum number of points any prospective child must have for a leaf node to be splittable. </td></tr>
    <tr><td class="paramname">minVolB</td><td>is a multiplier applied to (log n)^2/n to give the the minimum volume for a splittable node. A node with volume &lt; minVolB(log n)^2/n is not splittable. Important with AIC or COPERR. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>True if data was found and average created. </dd></dl>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00650">650</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="spnode_8cpp_source.shtml#l02148">subpavings::SPnodeException::what()</a>, and <a class="el" href="adaptivehistogram_8cpp_source.shtml#l05922">subpavings::HistException::what()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;

    <span class="keywordflow">try</span> {

        <span class="keywordtype">int</span> indImmedSplit = 0; <span class="comment">// pq rather than immediate splitting</span>

        <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn; <span class="comment">// dummy</span>

        retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a31596539864bb359dbe1246fdebf3cb6" title="Private method for making a collation histogram from RVecData.">collateFromRVec</a>(samplesize, numberSamples, rv,
                                    pavingBox, indImmedSplit, sn,
                                    compTest, he, minChildPoints, minVolB);
    }
    <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
        <span class="keywordtype">string</span> oldmsg(ba.what());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory averaging.  Orginal error: &quot;</span>
                                            + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
        <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error averaging.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
        <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException averaging.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (exception&amp; e) {
        <span class="keywordtype">string</span> oldmsg(e.what());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error averaging.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }

    <span class="keywordflow">return</span> retValue;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2f477d16af1646398813009e1dabe2c2"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::findDensityRegion" ref="a2f477d16af1646398813009e1dabe2c2" args="(double cov, double weightPM, vector&lt; CollatorSPnode * &gt; &amp;covNodes, string covFileName)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2f477d16af1646398813009e1dabe2c2">AdaptiveHistogramCollator::findDensityRegion</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>cov</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>weightPM</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> * &gt; &amp;&#160;</td>
          <td class="paramname"><em>covNodes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string&#160;</td>
          <td class="paramname"><em>covFileName</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Find the coverage value for boxes. </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00987">987</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="collatorspnode_8cpp_source.shtml#l01970">subpavings::nodeCompTotalSummaryAv()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>.</p>

<p>Referenced by <a class="el" href="AHABCSimMCMCDblHurdle_8cpp_source.shtml#l00146">doMCMCGRAuto()</a>, and <a class="el" href="AHABCSimThreeMethods_8cpp_source.shtml#l00044">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">try</span> {
      
      <span class="keywordflow">if</span> ( (cov - weightPM) &lt;= 0) {
        cout &lt;&lt; cov &lt;&lt; <span class="stringliteral">&quot; percent of the mass are already covered by the point masses&quot;</span> &lt;&lt; endl;
      }
      <span class="keywordflow">else</span> {
      
        <span class="comment">// put the leaves into a vector and sort it, smallest to largest</span>
        vector&lt;CollatorSPnode*&gt; leaves;
        <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a827a6e8b21b3c6e8e8f8e9aeca4b622b">getLeaves</a>(leaves);
        <a class="code" href="classsubpavings_1_1CompHeight.shtml" title="Class comparing on count/volume (ie histogram height) of box of node.">CompHeight</a> compheight;  
        <span class="comment">//sort according to average height</span>
        sort(leaves.begin(), leaves.end(), <a class="code" href="namespacesubpavings.shtml#a3580c30693d7d662e28a0fa26f45f837" title="Comparison of CollatorSPnodes using the average of the total of summaries.">nodeCompTotalSummaryAv</a>);
      
        <span class="comment">//start iterating from the largest</span>
        vector&lt;CollatorSPnode*&gt;::reverse_iterator rit = leaves.rbegin();
        <span class="keywordtype">bool</span> found = FALSE; <span class="comment">//found the boxes that gives cov density region</span>
        
        dotprecision totalCov;
        totalCov = 0.0;
        
        <span class="keywordflow">while</span> (!found &amp;&amp; rit &lt; leaves.rend()) {
          <span class="comment">// double check this:</span>
          <span class="comment">// height is box counts/box vol</span>
          <span class="comment">// ie count is unnormalised vol of an individual element of histogram</span>
          <span class="comment">// box vol * height == box vol * (count / box vol) == count</span>
        
          <span class="comment">//accumulate the summary * box vol</span>
          accumulate(totalCov, (*rit)-&gt;getTotalSummaryAv()*(*rit)-&gt;nodeVolume(), 1); 

          <span class="comment">//push back the node that fulfill the condition totalCov &lt;= cov </span>
          <span class="comment">//into the container covNodes</span>
          <span class="keywordflow">if</span> (totalCov &lt;= (cov - weightPM) ) { 
            covNodes.push_back((*rit)); 
          } 
          
          <span class="comment">// check that totalCov is at most cov</span>
          <span class="keywordflow">if</span> (totalCov &gt;= (cov - weightPM) ) { found = TRUE; } <span class="comment">// break out of loop</span>
          ++rit;        
        } <span class="comment">// end while </span>
      
      <span class="comment">//output covNodes to .txt </span>
        ofstream os;
        os.open(covFileName.c_str());   
        vector&lt;CollatorSPnode*&gt;::iterator vit;
        <span class="keywordflow">for</span> (vit = covNodes.begin(); vit &lt; covNodes.end(); vit++) {
          ivector thisBox = (*vit)-&gt;getBox(); <span class="comment">// copy theBox         </span>
          <span class="keywordtype">double</span> vol = (*vit)-&gt;nodeVolume();
          <span class="comment">// output the nodeName, nodeVolume</span>
          os &lt;&lt; (*vit)-&gt;getNodeName();
          os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; vol;
          <span class="comment">// followed by the average</span>
          os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; (*vit)-&gt;getTotalSummaryAv();
          <span class="comment">// followed by intervals making up box using Inf &amp; Sup</span>
          <span class="comment">// ie unlike cxsc output, there is no [  ] around them</span>
          <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i= <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
             os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(thisBox[i]) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(thisBox[i]);
          }
          os &lt;&lt; endl;
        }
        os &lt;&lt; flush;
        os.close();
      } 
    } <span class="comment">// end of try     </span>
  <span class="keywordflow">catch</span> (exception&amp; e) {
    <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(
    <span class="stringliteral">&quot;Error in AdaptiveHistogramCollation::coverage :\n&quot;</span>
    + <span class="keywordtype">string</span>( e.what() ) );
  }
}
</pre></div>
</div>
</div>
<a class="anchor" id="afd34a4c6b449b8f870b6414e7a1c9ef5"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::getEstLogLikelihoodFromRSSample" ref="afd34a4c6b449b8f870b6414e7a1c9ef5" args="(RSSample &amp;labSampledData, double dx, double wt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#afd34a4c6b449b8f870b6414e7a1c9ef5">subpavings::AdaptiveHistogramCollator::getEstLogLikelihoodFromRSSample</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classRSSample.shtml">RSSample</a> &amp;&#160;</td>
          <td class="paramname"><em>labSampledData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>wt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the estimated log likelihood from <a class="el" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>. </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8hpp_source.shtml#l00454">454</a> of file <a class="el" href="adaptivehistogramcollator_8hpp_source.shtml">adaptivehistogramcollator.hpp</a>.</p>

<p>Referenced by <a class="el" href="AHABCObsMCMCDblHurdle_8cpp_source.shtml#l00140">doMCMCGRAuto()</a>.</p>
<div class="fragment"><pre class="fragment">  { <span class="keywordtype">double</span> WeightHist = 1.0;
    std::map&lt;rvector, double, std::less&lt;rvector&gt; &gt; WeightsPM;
    <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#afd34a4c6b449b8f870b6414e7a1c9ef5" title="Get the estimated log likelihood from RSSample.">getEstLogLikelihoodFromRSSample</a>(labSampledData,
                    dx, wt, WeightHist, WeightsPM); }
</pre></div>
</div>
</div>
<a class="anchor" id="a2c32c30f302a52df863a05f852dd7ea8"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::getEstLogLikelihoodFromRSSample" ref="a2c32c30f302a52df863a05f852dd7ea8" args="(RSSample &amp;labSampledData, double dx, double wt, double WeightHist, std::map&lt; rvector, double, std::less&lt; rvector &gt; &gt; &amp;WeightsPM)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#afd34a4c6b449b8f870b6414e7a1c9ef5">AdaptiveHistogramCollator::getEstLogLikelihoodFromRSSample</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classRSSample.shtml">RSSample</a> &amp;&#160;</td>
          <td class="paramname"><em>labSampledData</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>dx</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>wt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>WeightHist</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::map&lt; rvector, double, std::less&lt; rvector &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>WeightsPM</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Distribution-free Likelihood Estimation </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00904">904</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="spsnode_8cpp_source.shtml#l02568">subpavings::SPSnode::nodeContains()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00082">subpavings::ON_PARENT</a>, and <a class="el" href="SmallClasses_8hpp_source.shtml#l00241">RSSample::Samples</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>) {     
    <span class="comment">// container to store heights</span>
    vector&lt;double&gt; fhatNew;         
      <span class="comment">// make new fhat by adding some mass</span>
      <span class="comment">// maybe can update the summary instead of outputting as vector of</span>
      <span class="comment">// doubles</span>
    <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a236e44d75b1cf0988a014f7ae33c55b6">leavesMakeNewFhat</a>(wt, fhatNew);

    <span class="comment">// get pointers to the leaf nodes</span>
    vector&lt;CollatorSPnode*&gt; leaves;
    vector&lt;CollatorSPnode*&gt;::iterator it;
    <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a827a6e8b21b3c6e8e8f8e9aeca4b622b">getLeaves</a>(leaves); 
    vector&lt;LabPnt&gt;::iterator dataIt;

    dotprecision dpEstLogLik;
    dpEstLogLik = 0.0;
    <span class="comment">//iterated through labSampledData</span>
    <span class="keywordflow">for</span> (dataIt = labSampledData.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.begin(); 
      dataIt &lt; labSampledData.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.end(); dataIt++) {
      <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;
      <span class="keywordflow">while</span> ( !done ) {
        <span class="comment">// start the counts for the leaves so that it corresponds to the </span>
        <span class="comment">// right fhat</span>
        <span class="keywordtype">size_t</span> pos = 0;
        <span class="comment">//iterate through the leaves</span>
        <span class="keywordflow">for</span> (it = leaves.begin(); it &lt; leaves.end(); it++) {
          <span class="comment">//get the box of this leaf node</span>
          ivector theBox = (*it)-&gt;getBox();
          <span class="comment">//make a pointer to an SPSnode with the box</span>
          <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* newNode = NULL;
          newNode = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(theBox, 0);
        
          <span class="comment">//now check if this data is inside the box</span>
          <span class="keywordflow">if</span> ( newNode-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a918067afb150c053f7450fd18c6ecd22" title="Check if the box a node represents contains a datapoint p.">nodeContains</a>((*dataIt).Pnt, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a4863db89a4712e90bb113f9acf898781">ON_PARENT</a>) ) {  
            
            <span class="comment">//if data is a point mass in current simulated dataset from theta</span>
            <span class="keywordflow">if</span> ( (*dataIt).L == 0 &amp;&amp; WeightsPM[(*dataIt).Pnt] != 0 ) {       
              accumulate(dpEstLogLik, 
              log(WeightsPM[(*dataIt).Pnt] + dx*WeightHist*fhatNew[pos]), 1);       
            }
            
            <span class="comment">//if data is a point mass but not in current simulated dataset from theta</span>
            <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( (*dataIt).L == 0 &amp;&amp; WeightsPM[(*dataIt).Pnt] == 0 ) {      
              accumulate(dpEstLogLik, log(dx*WeightHist*fhatNew[pos]), 1);        
            } 

            <span class="comment">//if data is unique</span>
            <span class="keywordflow">else</span> {
              accumulate(dpEstLogLik, log(dx*WeightHist*fhatNew[pos]), 1);
            }
            
            done = <span class="keyword">true</span>; <span class="comment">//so that don&#39;t have to iterate through ALL the leaves</span>
                      <span class="comment">//just for this data</span>
            <span class="keywordflow">break</span>;
          }
          pos++; <span class="comment">// increment position</span>
          <span class="keyword">delete</span> newNode; <span class="comment">//free memory</span>
        } <span class="comment">// end of iterating though leaves</span>
      } <span class="comment">// end of while loop </span>
      
    } <span class="comment">// end of going through the data</span>
      
    real estLogLik = rnd(dpEstLogLik);
    <span class="keywordflow">return</span> estLogLik;
  } <span class="comment">// end of if NULL != rootCollator</span>
  <span class="keywordflow">else</span> { cerr &lt;&lt; <span class="stringliteral">&quot;Empty collator&quot;</span> &lt;&lt; endl; exit(1); }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a2173c80c47c7758c67e5f014f92893e3"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::getFinMixIntervalIAE" ref="a2173c80c47c7758c67e5f014f92893e3" args="(FinMix &amp;mixt, double tol, int deg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cxsc::interval <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2173c80c47c7758c67e5f014f92893e3">AdaptiveHistogramCollator::getFinMixIntervalIAE</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="structFinMix.shtml">FinMix</a> &amp;&#160;</td>
          <td class="paramname"><em>mixt</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>tol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>deg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the IAE for a finite gaussian mixture distribution using interval techniques. </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01391">1391</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="errorfunc_8cpp_source.shtml#l01432">bisect()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01504">getL1error()</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00221">FinMix::M</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00222">FinMix::S</a>, and <a class="el" href="errorfunc_8hpp_source.shtml#l00220">FinMix::W</a>.</p>

<p>Referenced by <a class="el" href="MCMCGRSimsDbl_8cpp_source.shtml#l00133">doMCMCGRAuto()</a>.</p>
<div class="fragment"><pre class="fragment">{
  interval totalArea(0.0); <span class="comment">//initialize</span>
  
  <span class="comment">// need to iterate through the leaves</span>
  vector&lt;CollatorSPnode*&gt; leaves; <span class="comment">// set up empty container for leaf node pointers</span>
  vector&lt;CollatorSPnode*&gt;::iterator it; <span class="comment">// and an iterator over the container</span>
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a827a6e8b21b3c6e8e8f8e9aeca4b622b">getLeaves</a>(leaves); <span class="comment">// fill the container</span>
  
  <span class="comment">// container is filled by reading leaves off tree from left to right</span>
  <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
    <span class="comment">//cout &lt;&lt; &quot;-----------------&quot; &lt;&lt; endl;</span>
    <span class="comment">//a container for the roots at this leaf node</span>
    vector&lt;intervalw&gt; rootVec;
    
    <span class="comment">//get the height in this leaf node</span>
    <span class="keywordtype">double</span> fhat = ((*it)-&gt;getSummary())[0];
    <span class="comment">//get the box of this leaf node</span>
    ivector thisBox = (*it)-&gt;getBox();
    <span class="comment">//cout &lt;&lt; (*it)-&gt;getBox() &lt;&lt; endl;</span>
    
    <span class="comment">//---------find the root at this domain</span>
    <span class="comment">// make an intervalw object using thisBox</span>
    rvector lb = Inf(thisBox);
    rvector ub = Sup(thisBox);
    <a class="code" href="classintervalw.shtml">intervalw</a> thisIntW(_double(lb[1]), _double(ub[1]));
    interval thisInt(_double(lb[1]), _double(ub[1]));
    
    <span class="comment">// find the root</span>
    <span class="comment">//cout &lt;&lt; &quot;finding roots at this node &quot; &lt;&lt; thisInt &lt;&lt; endl;</span>
    <a class="code" href="errorfunc_8cpp.shtml#a4a991d5ab1bd0a117e02af6f83369bab">bisect</a>(thisIntW, tol, fhat, rootVec, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>); 

    <span class="comment">//---------find the area at this domain and take the absolute value</span>
    <span class="comment">//if rootVec is empty, there are no roots - so we can integrate over</span>
    <span class="comment">//this domain</span>
    <span class="keywordflow">if</span> ((rootVec.size() == 0)) { 
      <span class="comment">//cout &lt;&lt; &quot;no roots at &quot; &lt;&lt; thisInt &lt;&lt; endl;</span>
      <span class="comment">//get the L1 error</span>
      interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
      <span class="comment">//add to totalArea</span>
      totalArea += diffArea;
    } <span class="comment">//end of rootVec is empty</span>

    <span class="keywordflow">else</span> { <span class="comment">//if rootVec is not empty</span>
      vector&lt;intervalw&gt; uniqueRootVec;
      <span class="comment">// make the elements in vector unique</span>
      <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; (rootVec.size()); i++) {
        <span class="comment">//cout &lt;&lt; &quot;root &quot; &lt;&lt; i &lt;&lt; &quot;: &quot; &lt;&lt; rootVec[i] &lt;&lt; endl;</span>
        <span class="comment">//first insert into uniqueRootVec</span>
        uniqueRootVec.push_back(rootVec[i]);
        <span class="comment">//cout &lt;&lt; i-1 &lt;&lt; &quot;\t&quot; &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; i+1 &lt;&lt; endl;</span>
        <span class="comment">//now check for uniqueness</span>
        <span class="keywordflow">if</span> (((i-1) &gt;= 0) &amp;&amp; (i &lt; rootVec.size())) {
          <span class="comment">//cout &lt;&lt; rootVec[i] &lt;&lt; &quot;\t&quot; &lt;&lt; rootVec[i-1] &lt;&lt; endl;</span>
          <span class="keywordtype">bool</span> uniq = (subset(abs(rootVec[i] - rootVec[i-1]), <a class="code" href="classintervalw.shtml">intervalw</a>(0, 1e-10)));
          <span class="keywordflow">if</span> ( uniq ) { 
            <span class="comment">//cout &lt;&lt; &quot;this root has a duplicate&quot; &lt;&lt; endl;</span>
            uniqueRootVec.pop_back(); }
        }
      }
      <span class="comment">//cout &lt;&lt; &quot;==There are &quot; &lt;&lt; uniqueRootVec.size() &lt;&lt; &quot; unique root(s)==&quot; &lt;&lt; endl;</span>

      <span class="comment">// if there&#39;s only 1 root</span>
      <span class="keywordflow">if</span> (uniqueRootVec.size() == 1) {
        <span class="comment">//cout &lt;&lt; &quot;there is only one root..&quot; &lt;&lt; endl;</span>
        <span class="comment">// is the root at the left or right boundary?</span>
        <span class="keywordflow">if</span> ( (abs(Inf(thisInt) - inf(rootVec[0])) &lt; 1e-10) || 
            (abs(Sup(thisInt) - inf(rootVec[0])) &lt; 1e-10) ) {
          <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the left/right boundary:&quot; &lt;&lt; rootVec[0] &lt;&lt; endl;</span>
          interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
          totalArea += diffArea;
        }
        <span class="keywordflow">else</span> { <span class="comment">// the root is not at the boundaries</span>
          <span class="comment">//cout &lt;&lt; &quot;no root at the boundaries&quot; &lt;&lt; endl;</span>
          <span class="comment">//get the left sub-interval</span>
          interval thisSubIntLeft = interval(Inf(thisInt), sup(uniqueRootVec[0]));
          <span class="comment">//cout &lt;&lt; &quot;left interval: &quot; &lt;&lt; thisSubIntLeft &lt;&lt; endl; </span>
          interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLeft, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
          totalArea += diffArea;
          
          <span class="comment">//get the right sub-interval</span>
          <span class="comment">//get the left sub-interval</span>
          interval thisSubIntRight = interval(inf(uniqueRootVec[0]), Sup(thisInt));
          <span class="comment">//cout &lt;&lt; &quot;right interval: &quot; &lt;&lt; thisSubIntRight &lt;&lt; endl; </span>
          diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntRight, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
          totalArea += diffArea;
        }
      } <span class="comment">// end of rootVec.size() == 1</span>

        <span class="comment">// if there is more than 1 root</span>
      <span class="keywordflow">else</span> {
        <span class="comment">//cout &lt;&lt; &quot;let&#39;s have a look at all the roots:&quot; &lt;&lt; endl;</span>
        <span class="comment">//for (size_t i = 0; i &lt; uniqueRootVec.size(); i++) {</span>
          <span class="comment">//cout &lt;&lt; uniqueRootVec[i] &lt;&lt; endl;</span>
        <span class="comment">//}</span>

        <span class="comment">//first check if the first root is at the boundary</span>
        <span class="comment">//cout &lt;&lt; &quot;check boundaries: &quot; &lt;&lt; Inf(thisInt) &lt;&lt; &quot;\t&quot; &lt;&lt; inf(rootVec[0]) &lt;&lt; endl;</span>
        <span class="keywordflow">if</span> ( abs(Inf(thisInt) - inf(uniqueRootVec[0])) &lt; 1e-10 ) {
          <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the leftmost boundary:&quot; &lt;&lt; endl;</span>
          interval thisSubIntFirst = interval(Inf(thisInt), sup(uniqueRootVec[1]));
          <span class="comment">//cout &lt;&lt; &quot;0-th interval:&quot; &lt;&lt; thisSubIntFirst &lt;&lt; endl; </span>
          interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntFirst, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
          totalArea += diffArea;
          
          <span class="comment">// now iterate through each root (except the first and last) and </span>
          <span class="comment">// get the sub-itnervals</span>
          <span class="comment">//cout &lt;&lt; &quot;iterating through each root&quot; &lt;&lt; endl;</span>
          <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (uniqueRootVec.size() - 1); i++) {
            <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i+1 &lt;&lt; &quot;-th root is: &quot; &lt;&lt; rootVec[i+1] &lt;&lt; endl;</span>
            <span class="keywordflow">if</span> ( (i+1) &gt; uniqueRootVec.size() ) { <span class="comment">// already no more roots</span>
              interval thisSubInt = interval(inf(uniqueRootVec[i]), Sup(thisInt));
              <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
              interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
              totalArea += diffArea;
            }
            <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
              interval thisSubInt = interval(inf(uniqueRootVec[i]), sup(uniqueRootVec[i+1]));
              <span class="comment">//cout &lt;&lt; i+1 &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
              interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
              totalArea += diffArea;
            }
          } <span class="comment">// end of iterate through each root (excep the first and last)</span>
          
          <span class="comment">// now check if the last root is at the boundary</span>
          <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(uniqueRootVec[uniqueRootVec.size()-1])) &lt; 1e-10 ) {
            <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the rightmost boundary:&quot; &lt;&lt; endl;</span>
            interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-2]), Sup(thisInt));
            <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
            interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast,deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
            totalArea += diffArea;
          }
          <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
            interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-1]), Sup(thisInt));
            <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
            interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
            totalArea += diffArea;
          } 
        } <span class="comment">// end of if first root is the boundary</span>
        
        <span class="keywordflow">else</span> {
          <span class="comment">//cout &lt;&lt; &quot;root not at boundary&quot; &lt;&lt; endl;</span>
          <span class="comment">//if it is not the boundary, make the first sub-interval</span>
          interval thisSubIntFirst = interval(Inf(thisInt), sup(rootVec[0]));
          <span class="comment">//cout &lt;&lt; &quot;0-th interval: &quot; &lt;&lt; thisSubIntFirst &lt;&lt; endl; </span>
          interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntFirst, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
          totalArea += diffArea;
          
          <span class="comment">// now iterate through each root (except the first and last) and </span>
          <span class="comment">// get the sub-itnervals</span>
          <span class="comment">//cout &lt;&lt; &quot;iterating through each root&quot; &lt;&lt; endl;</span>
          <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (uniqueRootVec.size() - 1); i++) {
            <span class="keywordflow">if</span> ( (i+1) &gt; uniqueRootVec.size() ) { <span class="comment">// already no more roots</span>
              <span class="comment">//cout &lt;&lt; inf(rootVec[i]) &lt;&lt; &quot;\t&quot; &lt;&lt; Sup(thisInt) &lt;&lt; endl;</span>
              interval thisSubInt = interval(inf(uniqueRootVec[i]), Sup(thisInt));
              <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
              interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
              totalArea += diffArea;
            }
            <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
              <span class="comment">//cout &lt;&lt; inf(rootVec[i]) &lt;&lt; &quot;\t&quot; &lt;&lt; sup(rootVec[i+1]) &lt;&lt; endl;</span>
              interval thisSubInt = interval(inf(uniqueRootVec[i]), sup(uniqueRootVec[i+1]));
              <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i+1 &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
              interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
              totalArea += diffArea;
            }
          } <span class="comment">// end of iterate through each root (except the first and last)</span>
          
          <span class="comment">// now check if the last root is at the boundary</span>
          <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(uniqueRootVec[uniqueRootVec.size()-1])) &lt; 1e-10 ) {
            <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the rightmost boundary:&quot; &lt;&lt; endl;</span>
            interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-2]), Sup(thisInt));
            <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
            interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
          }
          <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
            interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-1]), Sup(thisInt));
            <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
            interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
            totalArea += diffArea;
          } 
        } <span class="comment">// end of first root is not the boundary</span>
      } <span class="comment">// end of rootVec.size() &gt; 1</span>
    } <span class="comment">// end of rootVec is not empty</span>

  } <span class="comment">// end of iterating through the leaf nodes</span>
  
  <span class="comment">//cout &lt;&lt; &quot;IAE: &quot; &lt;&lt; totalArea &lt;&lt; endl;</span>
  <span class="keywordflow">return</span> totalArea;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af9464148c1e5161940b6d6f3c5b2f965"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::getHistScheffeSet" ref="af9464148c1e5161940b6d6f3c5b2f965" args="(std::vector&lt; std::vector&lt; std::set&lt; CollatorSPnode *, std::less&lt; CollatorSPnode * &gt; &gt; &gt; &gt; &amp;vecScheffeSetVec)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#af9464148c1e5161940b6d6f3c5b2f965">AdaptiveHistogramCollator::getHistScheffeSet</a> </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; std::set&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> *, std::less&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> * &gt; &gt; &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>vecScheffeSetVec</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the Scheffe set from subpavings </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01658">1658</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>Referenced by <a class="el" href="GeneralScheffe_8cpp_source.shtml#l00042">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
   <span class="comment">//=============end of setting up containers================================// </span>
  <span class="keywordtype">int</span> numAdd = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>()-1; <span class="comment">// the number of histograms collated including the 0-th histogram</span>
  <span class="comment">//cout &lt;&lt; &quot;getNumberCollated: &quot; &lt;&lt; numAdd &lt;&lt; endl;</span>
  <span class="keywordtype">size_t</span> theta = numAdd-1; <span class="comment">// the current number of splits</span>

    <span class="comment">//============begin pairwise comparisons===================================//</span>
    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> k=0; k &lt; numAdd; k++) {
    vector&lt; set&lt;CollatorSPnode*, less&lt;CollatorSPnode*&gt; &gt; &gt; vecScheffeSet;
      <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 1; j &lt; numAdd; j++) {
      <span class="keywordflow">if</span> ( (k != j) &amp;&amp; (k &lt; j) ) {
        set&lt;CollatorSPnode*, less &lt; CollatorSPnode* &gt; &gt; currentScheffeSet;
        cout &lt;&lt; <span class="stringliteral">&quot;k= &quot;</span> &lt;&lt; k &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; <span class="stringliteral">&quot;theta = &quot;</span> &lt;&lt; j &lt;&lt; endl;
        <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a3c3d4df6f965a2eee9b4c517eb045246" title="Get the Scheffe set for a particular pair.">getScheffeSet</a>(currentScheffeSet, k, j);
        <span class="comment">//if (currentScheffeSet.empty()) { cout &lt;&lt; &quot;nothing here&quot; &lt;&lt; endl; }</span>
        vecScheffeSet.push_back(currentScheffeSet);
      }
    }
    vecScheffeSetVec.push_back(vecScheffeSet);
  } <span class="comment">// end of pairwise comparisons</span>
} <span class="comment">// end of function getHistScheffeSet</span>
</pre></div>
</div>
</div>
<a class="anchor" id="ae4dd25063cc945058665a4b0a3150c89"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::getHistScheffeWinner" ref="ae4dd25063cc945058665a4b0a3150c89" args="(std::vector&lt; std::vector&lt; std::set&lt; CollatorSPnode *, std::less&lt; CollatorSPnode * &gt; &gt; &gt; &gt; &amp;vecScheffeSetVec, std::vector&lt; std::vector&lt; int &gt; &gt; &amp;vecWinnerVec, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;vecDeltaWinnerVec)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ae4dd25063cc945058665a4b0a3150c89">AdaptiveHistogramCollator::getHistScheffeWinner</a> </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::vector&lt; std::set&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> *, std::less&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> * &gt; &gt; &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>vecScheffeSetVec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; int &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>vecWinnerVec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; std::vector&lt; double &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>vecDeltaWinnerVec</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01683">1683</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>Referenced by <a class="el" href="GeneralScheffe_8cpp_source.shtml#l00042">main()</a>.</p>
<div class="fragment"><pre class="fragment">{ 
  <span class="keywordtype">size_t</span> sizeColl = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>();
  <span class="comment">// go through each ordered pair to get the winner</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; vecScheffeSetVec.size(); i++) {
    
    vector&lt;int&gt; WinnerVec(vecScheffeSetVec[i].size());
    vector&lt;double&gt; DeltaVec;

    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; vecScheffeSetVec[i].size(); j++) {

      <span class="keywordflow">if</span> ( vecScheffeSetVec[i][j].empty() ) {
        <span class="comment">//size_t cand1 = i;</span>
        <span class="comment">//size_t cand2 = j+i+1;</span>
        WinnerVec[j] = (-1);
        DeltaVec.push_back(-1*(numeric_limits&lt;double&gt;::infinity()));
        <span class="comment">//cout &lt;&lt; &quot;no scheffe set at position &quot; &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; endl;</span>
        <span class="comment">//cout &lt;&lt; &quot;========&quot; &lt;&lt; endl;</span>
      } 
    
      <span class="keywordflow">else</span> {
        <span class="comment">//cout &lt;&lt; &quot;scheffe at position &quot; &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; j &lt;&lt; endl;</span>
        <span class="keywordtype">size_t</span> cand1 = i;
        <span class="keywordtype">size_t</span> cand2 = j+i+1;
        cout &lt;&lt; cand1 &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; cand2 &lt;&lt; endl;

        <span class="comment">//cout &lt;&lt; &quot;----------get delta for &quot; &lt;&lt; cand1 &lt;&lt; endl;</span>
        <span class="keywordtype">double</span> deltaI = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a79cc72c5021db50aa53b13f12f8fd234" title="Returns the IAE between an AdaptiveHistogram object and a RealMappedSPnode.">getNodesDelta</a>(vecScheffeSetVec[i][j], cand1, sizeColl);
        <span class="comment">//cout &lt;&lt; &quot;---------get delta for &quot; &lt;&lt; cand2 &lt;&lt; endl;</span>
        <span class="keywordtype">double</span> deltaJ = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a79cc72c5021db50aa53b13f12f8fd234" title="Returns the IAE between an AdaptiveHistogram object and a RealMappedSPnode.">getNodesDelta</a>(vecScheffeSetVec[i][j], cand2, sizeColl);

        <span class="comment">// perform competition</span>
        <span class="keywordflow">if</span> ( deltaI &lt; deltaJ ) {
          <span class="comment">//cout &lt;&lt; cand1 &lt;&lt; &quot;\t&quot; &lt;&lt; deltaI &lt;&lt; &quot;\n&quot; &lt;&lt; cand2 &lt;&lt; &quot;\t&quot; &lt;&lt; deltaJ &lt;&lt; endl;</span>
          cout &lt;&lt; <span class="stringliteral">&quot;Winner is: &quot;</span> &lt;&lt; cand1 &lt;&lt; endl;
          <span class="comment">// winner is i</span>
          WinnerVec[j] = (1);
          DeltaVec.push_back(deltaI);
        }
        <span class="keywordflow">else</span> { <span class="comment">// deltaTheta &gt;= delta </span>
          <span class="comment">//cout &lt;&lt; cand1 &lt;&lt; &quot;\t&quot; &lt;&lt; deltaI &lt;&lt; &quot;\n&quot; &lt;&lt; cand2 &lt;&lt; &quot;\t&quot; &lt;&lt; deltaJ &lt;&lt; endl;</span>
          cout &lt;&lt; <span class="stringliteral">&quot;Winner is: &quot;</span> &lt;&lt; cand2 &lt;&lt; endl;
          WinnerVec[j] = (0);
          DeltaVec.push_back(deltaJ);
        }  <span class="comment">// end</span>
      } <span class="comment">// end of set not empty</span>
    } <span class="comment">// end of going through j</span>
    vecWinnerVec.push_back(WinnerVec);
    vecDeltaWinnerVec.push_back(DeltaVec);
  } <span class="comment">// end of going through vecScheffeSet</span>

} <span class="comment">// end of getHistScheffeWinner</span>
</pre></div>
</div>
</div>
<a class="anchor" id="a60443f6dfa512a30c4b8fb0ee96072b9"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::getHistYatSet" ref="a60443f6dfa512a30c4b8fb0ee96072b9" args="(std::vector&lt; std::set&lt; CollatorSPnode *, std::less&lt; CollatorSPnode * &gt; &gt; &gt; &amp;vecYatSet)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a60443f6dfa512a30c4b8fb0ee96072b9">AdaptiveHistogramCollator::getHistYatSet</a> </td>
          <td>(</td>
          <td class="paramtype">std::vector&lt; std::set&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> *, std::less&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> * &gt; &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>vecYatSet</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01740">1740</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>Referenced by <a class="el" href="GeneralScheffe_8cpp_source.shtml#l00042">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
   <span class="comment">//=============end of setting up containers================================// </span>
  <span class="keywordtype">int</span> numAdd = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>()-1; <span class="comment">// the number of histograms collated including the 0-th histogram</span>
  <span class="comment">// but not the last histogram as it is the validatino histogram</span>
  <span class="comment">//============begin pairwise comparisons===================================//</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> k= 0; k &lt; numAdd; k++) {
    <span class="comment">// get A_ij</span>
      <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; numAdd; j++) {
      <span class="keywordflow">if</span> ( (k != j) &amp;&amp; (k&lt;j) ) {
        set&lt;CollatorSPnode*, less &lt; CollatorSPnode* &gt; &gt; RowSet;
        set&lt;CollatorSPnode*, less &lt; CollatorSPnode* &gt; &gt; ColSet;
        <span class="comment">//cout &lt;&lt; &quot;k= &quot; &lt;&lt; k &lt;&lt; &quot;\t&quot; &lt;&lt; &quot;theta = &quot; &lt;&lt; j &lt;&lt; endl;</span>
        <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aaf5207af98f7fac37ffe63ab3aec15b9" title="Get the Yatracos set for a particular pair.">getYatSet</a>(RowSet, ColSet, k, j);
        vecYatSet.push_back(RowSet);
        vecYatSet.push_back(ColSet);
      }
    }
  } <span class="comment">// end of pairwise comparisons</span>
} <span class="comment">// end of function getHistScheffeSet</span>
</pre></div>
</div>
</div>
<a class="anchor" id="a2b77dad7572df40d94ed62868834f3ae"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::getL1DistancesToAverage" ref="a2b77dad7572df40d94ed62868834f3ae" args="(RealVec &amp;container) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f">RealVec</a> &amp; <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2b77dad7572df40d94ed62868834f3ae">AdaptiveHistogramCollator::getL1DistancesToAverage</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f">RealVec</a> &amp;&#160;</td>
          <td class="paramname"><em>container</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01245">1245</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">try</span> {
    <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>()) {
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot get L1 distances for this: rootCollator is NULL&quot;</span>;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }

    container = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a944e27bc584e24e630411e787456ffe0">getL1DistancesToAverage</a>(container);
     
    <span class="keywordflow">return</span> container;

    }
    
    <span class="keywordflow">catch</span> (exception&amp; e) {
        <span class="keywordtype">string</span> oldmsg(e.what());
        <span class="keywordtype">string</span> msg = string(<span class="stringliteral">&quot;Error in AdaptiveHistogramCollator::getL1DistancesToAverage.&quot;</span>)
        +  string(<span class="stringliteral">&quot;Orginal error: &quot;</span>) + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }

}
</pre></div>
</div>
</div>
<a class="anchor" id="a878b3126be081b4551a802de5d7863b3"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::getLaplaceIntervalIAE" ref="a878b3126be081b4551a802de5d7863b3" args="(double tol, int deg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cxsc::interval <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a878b3126be081b4551a802de5d7863b3">subpavings::AdaptiveHistogramCollator::getLaplaceIntervalIAE</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>tol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>deg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the IAE for a laplace distribution with mu=0 and b=1 using interval techniques. </p>

</div>
</div>
<a class="anchor" id="a2a2da27e64f75b4080d6a967544872e0"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::getLeafLevelsString" ref="a2a2da27e64f75b4080d6a967544872e0" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2a2da27e64f75b4080d6a967544872e0">AdaptiveHistogramCollator::getLeafLevelsString</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>get leaf levels string </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01063">1063</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>Referenced by <a class="el" href="GeneralScheffe_8cpp_source.shtml#l00042">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordtype">string</span> retValue = <span class="stringliteral">&quot;&quot;</span>;
    <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>)
        retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a7ea8cd3649cbf13d5743d3cb23315d72" title="Get a string of leaf node levels.">getLeafNodeLevelsString</a>();

    <span class="keywordflow">return</span> retValue;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a85c00aa2a7bdff2b4796c62d052e1447"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::getLognormalIntervalIAE" ref="a85c00aa2a7bdff2b4796c62d052e1447" args="(double tol, int deg)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cxsc::interval <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a85c00aa2a7bdff2b4796c62d052e1447">subpavings::AdaptiveHistogramCollator::getLognormalIntervalIAE</a> </td>
          <td>(</td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>tol</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>deg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the IAE for a laplace distribution with mu=0 and b=1 using interval techniques. </p>

</div>
</div>
<a class="anchor" id="af45e40508aa9d729f5923787c3717a40"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::getMinDistEst" ref="af45e40508aa9d729f5923787c3717a40" args="(vector&lt; double &gt; &amp;maxDelta, vector&lt; set&lt; CollatorSPnode *, less&lt; CollatorSPnode * &gt; &gt; &gt; &amp;vecYatSet)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#af45e40508aa9d729f5923787c3717a40">AdaptiveHistogramCollator::getMinDistEst</a> </td>
          <td>(</td>
          <td class="paramtype">vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>maxDelta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; set&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> *, less&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> * &gt; &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>vecYatSet</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01762">1762</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">//get the yatracos class for ALL the candidates</span>
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a60443f6dfa512a30c4b8fb0ee96072b9">getHistYatSet</a>(vecYatSet); 
  
  <span class="comment">//get the maximum delta at each &quot;theta&quot; - here theta refers to the position of the</span>
  <span class="comment">//candidate in the collator</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>(); i++) {
    <span class="comment">//get the maximum delta at this candidate</span>
    <span class="keywordtype">double</span> deltaMax = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a9ad5434670b0c8d57c7c3b9a7b9d006e">getNodesMaxDelta</a>(vecYatSet, i);
    maxDelta.push_back(deltaMax);
  }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a79cc72c5021db50aa53b13f12f8fd234"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::getNodesDelta" ref="a79cc72c5021db50aa53b13f12f8fd234" args="(std::set&lt; CollatorSPnode *, std::less&lt; CollatorSPnode * &gt; &gt; &amp;YatSet, int thisTheta, size_t sizeColl)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a79cc72c5021db50aa53b13f12f8fd234">AdaptiveHistogramCollator::getNodesDelta</a> </td>
          <td>(</td>
          <td class="paramtype">std::set&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> *, std::less&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> * &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>YatSet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>thisTheta</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>sizeColl</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Returns the IAE between an <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> object and a <a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>. </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01631">1631</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">// iterator for Yatracos set</span>
  set&lt;CollatorSPnode*, less&lt;CollatorSPnode*&gt; &gt;::iterator YatSetIt;  

  <span class="comment">//gloria - think about dotprecision summation</span>
  
  <span class="comment">//initialization</span>
  <span class="keywordtype">double</span> delta = 0;
  <span class="comment">//dotprecision deltaDP = 0;</span>
  
  <span class="comment">//go through each node in this set to get delta</span>
  <span class="keywordflow">for</span> (YatSetIt = YatSet.begin(); YatSetIt != YatSet.end(); YatSetIt++) {
    <span class="comment">//cout &lt;&lt; (*YatSetIt)-&gt;getNodeName() &lt;&lt; endl;</span>
    <span class="comment">//cout &lt;&lt; &quot;union &quot; &lt;&lt; endl;</span>
    delta += (*YatSetIt)-&gt;getNodeDelta(thisTheta, sizeColl);
    <span class="comment">//accumulate(deltaDP, (*YatSetIt)-&gt;getNodeDelta(k, thisTheta), 1.0);</span>
   }
   <span class="comment">//cout &lt;&lt; &quot;end of union&quot; &lt;&lt; endl;</span>

  <span class="comment">// take the absolute value of the sums</span>
  <span class="comment">//cout &lt;&lt; &quot;Delta: &quot; &lt;&lt; fabs(delta) &lt;&lt; endl;</span>
  <span class="keywordflow">return</span> fabs(delta);
}
</pre></div>
</div>
</div>
<a class="anchor" id="a9ad5434670b0c8d57c7c3b9a7b9d006e"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::getNodesMaxDelta" ref="a9ad5434670b0c8d57c7c3b9a7b9d006e" args="(vector&lt; set&lt; CollatorSPnode *, less&lt; CollatorSPnode * &gt; &gt; &gt; &amp;vecYatSet, int thisTheta)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">double <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a9ad5434670b0c8d57c7c3b9a7b9d006e">AdaptiveHistogramCollator::getNodesMaxDelta</a> </td>
          <td>(</td>
          <td class="paramtype">vector&lt; set&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> *, less&lt; <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> * &gt; &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>vecYatSet</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>thisTheta</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01778">1778</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">// iterators  </span>
  vector&lt; set&lt;CollatorSPnode*, less&lt;CollatorSPnode*&gt; &gt; &gt;::iterator YatSetIt;  

  <span class="keywordtype">double</span> DeltaMax = 0;
  <span class="comment">//dotprecision deltaDP = 0;</span>
  set&lt;CollatorSPnode*, less&lt;CollatorSPnode*&gt; &gt; YatSet;
  
  <span class="comment">//go through each node in this set to get delta</span>
  <span class="keywordflow">for</span> (YatSetIt = vecYatSet.begin(); YatSetIt &lt; vecYatSet.end(); YatSetIt++){
    <span class="keywordtype">double</span> delta = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a79cc72c5021db50aa53b13f12f8fd234" title="Returns the IAE between an AdaptiveHistogram object and a RealMappedSPnode.">getNodesDelta</a>((*YatSetIt), thisTheta, <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>());
    <span class="comment">//accumulate(deltaDP, (*YatSetIt)-&gt;getNodeDelta(k, thisTheta), 1.0);</span>
    delta = fabs(delta);
    DeltaMax = (delta &gt; DeltaMax) ? delta : DeltaMax; 
    <span class="comment">//cout &lt;&lt; &quot;DeltaMax: &quot; &lt;&lt; DeltaMax &lt;&lt; endl;</span>
  }

  <span class="comment">// take the absolute value of the sums</span>
  <span class="keywordflow">return</span> fabs(DeltaMax);
  
}
</pre></div>
</div>
</div>
<a class="anchor" id="a37b31db56cc701fdd997eafb59bda4f5"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::getNumberCollated" ref="a37b31db56cc701fdd997eafb59bda4f5" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5">AdaptiveHistogramCollator::getNumberCollated</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the number of Adaptive Histogram objects collated. </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00798">798</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>Referenced by <a class="el" href="AHABCObsMCMCDblHurdle_8cpp_source.shtml#l00140">doMCMCGRAuto()</a>, and <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00077">main()</a>.</p>
<div class="fragment"><pre class="fragment">{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a6470a98dd502247ca9e86582b3c422eb" title="Get number of subpavings summarised.">getNumberSummarised</a>(); }
</pre></div>
</div>
</div>
<a class="anchor" id="a421a5769038047a2a9867235e8fd95a1"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::getNumLeaves" ref="a421a5769038047a2a9867235e8fd95a1" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a421a5769038047a2a9867235e8fd95a1">AdaptiveHistogramCollator::getNumLeaves</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get number of leaf nodes. </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00817">817</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>Referenced by <a class="el" href="MCMCGRSimsUniform_8cpp_source.shtml#l00118">doMCMCGRAuto()</a>.</p>
<div class="fragment"><pre class="fragment">{
  vector&lt;CollatorSPnode*&gt; leaves;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a827a6e8b21b3c6e8e8f8e9aeca4b622b">getLeaves</a>(leaves); 

  <span class="keywordflow">return</span> leaves.size();
}
</pre></div>
</div>
</div>
<a class="anchor" id="aefbffc32c2919a65a8a8f67b74416766"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::getSampleVarianceAreaScalar" ref="aefbffc32c2919a65a8a8f67b74416766" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aefbffc32c2919a65a8a8f67b74416766">AdaptiveHistogramCollator::getSampleVarianceAreaScalar</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the sample variance for an area-related scalar summary. </p>
<p>Treats the collation as representing a sample of histograms.</p>
<p>The scalar summary is defined so that the variance for a histogram in the sample is the square of the sum of the areas of difference between a histogram sample and the average histogram over the sample.</p>
<p>'Area', for a particular box, is the height of the bin multiplied by the box volume.</p>
<p>The sample variance is: (sum of the variances over each histogram collated)/(number collated - 1).</p>
<p>The sample variance is only defined in the number collated is &gt; 1.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>The sample variance of the area-related scalar summary over the sample held in the collation. </dd></dl>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01130">1130</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    real sumVars = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a46980f85ee8842fc66fd5e2db8aab12e" title="Get the sum of the variances for an area-related scalar summary.">getSumVarianceAreaScalar</a>();
    <span class="keywordtype">size_t</span> numberColl = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>();

    <span class="keywordflow">if</span> (numberColl &lt; 2) {
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Cannot do sample variance for sample size &lt; 2&quot;</span>);
    }

    <span class="keywordflow">return</span> sumVars/(1.0*(numberColl - 1));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0a561a7f838b46985865c6fea1593829"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::getSampleVarianceTotalHeightScalar" ref="a0a561a7f838b46985865c6fea1593829" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0a561a7f838b46985865c6fea1593829">AdaptiveHistogramCollator::getSampleVarianceTotalHeightScalar</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the sample variance for scalar summary total height. </p>
<p>Treats the collation as representing a sample of histograms.</p>
<p>The scalar summary is the sum of the heights of the bins over the histogram.</p>
<p>The sample variance is: (sum of the variances over each histogram collated)/(number collated - 1).</p>
<p>The sample variance is only defined in the number collated is &gt; 1.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>The sample variance of the total height scalar summary over the sample held in the collation. </dd></dl>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01202">1202</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    real sumVars = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#af968e5158500b2413e4c4075cdcd15b2" title="Get the sum of the variances for scalar summary total height.">getSumVarianceTotalHeightScalar</a>();
    <span class="keywordtype">size_t</span> numberColl = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>();

    <span class="keywordflow">if</span> (numberColl &lt; 2) {
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Cannot do sample variance for sample size &lt; 2&quot;</span>);
    }

    <span class="keywordflow">return</span> sumVars/(1.0*(numberColl - 1));
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac7545dd3425c4570bd9e0fde17ad9294"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::getSubPaving" ref="ac7545dd3425c4570bd9e0fde17ad9294" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a> * <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294">AdaptiveHistogramCollator::getSubPaving</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return a pointer to the CollatorPSnode this manages. </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00465">465</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>Referenced by <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00381">operator+=()</a>, and <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01807">subpavings::operator&lt;&lt;()</a>.</p>
<div class="fragment"><pre class="fragment">{<span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>;} <span class="comment">// boost::shared_ptr might be better</span>
</pre></div>
</div>
</div>
<a class="anchor" id="a46980f85ee8842fc66fd5e2db8aab12e"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::getSumVarianceAreaScalar" ref="a46980f85ee8842fc66fd5e2db8aab12e" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a46980f85ee8842fc66fd5e2db8aab12e">AdaptiveHistogramCollator::getSumVarianceAreaScalar</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the sum of the variances for an area-related scalar summary. </p>
<p>Treats the collation as representing a sample of histograms.</p>
<p>The scalar summary is defined so that the variance for a histogram in the sample is the square of the sum of the areas of difference between a histogram sample and the average histogram over the sample.</p>
<p>'Area', for a particular box, is the height of the bin multiplied by the box volume.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>The sum of the variances of the area-related scalar summary over each histogram collated. </dd></dl>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01076">1076</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="spnode_8cpp_source.shtml#l02148">subpavings::SPnodeException::what()</a>, and <a class="el" href="adaptivehistogram_8cpp_source.shtml#l05922">subpavings::HistException::what()</a>.</p>

<p>Referenced by <a class="el" href="MCMCGRAuto_8cpp_source.shtml#l00038">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>()) {
            <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot get variances for this: rootCollator is NULL&quot;</span>;
            <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }

    <span class="comment">//variances only makes sense if all values in the summary are positive</span>
    <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> mySummary = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aecf22d39cbb7289355a08cec62749800" title="Accessor for the summary.">getSummary</a>();
    <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it = find_if(mySummary.begin(), mySummary.end(),
                                        bind2nd(less&lt;double&gt;(), 0.0));
    <span class="keywordflow">if</span> (it &lt; mySummary.end()) {
            <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot get variances: collation contains negatives&quot;</span>;
            <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }

    real sumVars = 0.0;
    <span class="comment">// take this collation</span>
    <span class="keywordflow">try</span> {
        sumVars = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a700f585b2b61663330b999f459045822" title="Sum of variances of a scalar value.">getSumVarsAreaScalar</a>();
        <span class="comment">//cout &lt;&lt; &quot;sumVars: &quot; &lt;&lt; sumVars &lt;&lt; endl;</span>
    }
    <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
        <span class="keywordtype">string</span> oldmsg(ba.what());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory summing variances.  Orginal error: &quot;</span>
                                            + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
        <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error summing variances.  Orginal error: &quot;</span>
                                            + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
        <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException summing variances.  Orginal error: &quot;</span>
                                            + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (exception&amp; e) {
        <span class="keywordtype">string</span> oldmsg(e.what());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error summing variances.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">return</span> sumVars;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af968e5158500b2413e4c4075cdcd15b2"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::getSumVarianceTotalHeightScalar" ref="af968e5158500b2413e4c4075cdcd15b2" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#af968e5158500b2413e4c4075cdcd15b2">AdaptiveHistogramCollator::getSumVarianceTotalHeightScalar</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the sum of the variances for scalar summary total height. </p>
<p>Treats the collation as representing a sample of histograms.</p>
<p>The scalar summary is the sum of the heights of the bins over the histogram.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>The sum of the variances of the total height scalar summary over each histogram collated. </dd></dl>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01146">1146</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="spnode_8cpp_source.shtml#l02148">subpavings::SPnodeException::what()</a>, and <a class="el" href="adaptivehistogram_8cpp_source.shtml#l05922">subpavings::HistException::what()</a>.</p>

<p>Referenced by <a class="el" href="MCMCGRAuto_8cpp_source.shtml#l00038">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>()) {
            <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot get variances for this: rootCollator is NULL&quot;</span>;
            <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }

    <span class="comment">//variances only make sense if all values in the summary are positive</span>
    <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> mySummary = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aecf22d39cbb7289355a08cec62749800" title="Accessor for the summary.">getSummary</a>();

    <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it = find_if(mySummary.begin(), mySummary.end(),
                                            bind2nd(less&lt;double&gt;(), 0.0));
    <span class="keywordflow">if</span> (it &lt; mySummary.end()) {
            <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot get variances: collation contains negatives&quot;</span>;
            <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }

    real sumVars = 0.0;

    <span class="comment">// take this collation</span>
    <span class="keywordflow">try</span> {
        sumVars = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a4c623e6456d3ced424aebba699c33fd9" title="Sum of variances of a scalar value.">getSumVarsTotalSummarisedValueScalar</a>();
    }
    <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
        <span class="keywordtype">string</span> oldmsg(ba.what());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory summing variances.  Orginal error: &quot;</span>
                                            + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
        <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error summing variances.  Orginal error: &quot;</span>
                                            + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
        <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException summing variances.  Orginal error: &quot;</span>
                                            + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (exception&amp; e) {
        <span class="keywordtype">string</span> oldmsg(e.what());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error summing variances.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }

    <span class="keywordflow">return</span> sumVars;

}
</pre></div>
</div>
</div>
<a class="anchor" id="a46870c2d282efef091dfb1b3477aba4f"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::getUnifIAE" ref="a46870c2d282efef091dfb1b3477aba4f" args="(AdaptiveHistogram &amp;myPart, std::vector&lt; int &gt; holesLoc, double weight)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a46870c2d282efef091dfb1b3477aba4f">AdaptiveHistogramCollator::getUnifIAE</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">AdaptiveHistogram</a> &amp;&#160;</td>
          <td class="paramname"><em>myPart</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::vector&lt; int &gt;&#160;</td>
          <td class="paramname"><em>holesLoc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>weight</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the IAE for a uniform (mixture) distribution.</p>
<p>Get the IAE for a uniform mixture. </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01271">1271</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00500">dpIAE</a>, <a class="el" href="toolz_8cpp_source.shtml#l00203">Intersection()</a>, and <a class="el" href="AIAsubpaving_8cpp_source.shtml#l00077">Volume()</a>.</p>

<p>Referenced by <a class="el" href="MCMCGRSimsLeaves_8cpp_source.shtml#l00108">doMCMCGRAuto()</a>.</p>
<div class="fragment"><pre class="fragment">{                                               
   <span class="comment">// get the true height, f of the corresponding box in myPart</span>
  <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> trueLeaves;
  <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> trueIt;
  <span class="comment">//AdaptiveHistogram * adhPtr;</span>
  <span class="comment">//adhPtr = &amp;myPart;</span>
  (myPart).<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a827a6e8b21b3c6e8e8f8e9aeca4b622b">getLeaves</a>(trueLeaves);

  <span class="comment">// setting up containers for the leaves</span>
  vector&lt;CollatorSPnode*&gt; leaves; <span class="comment">// set up empty container for leaf node pointers</span>
  vector&lt;CollatorSPnode*&gt;::iterator it; <span class="comment">// and an iterator over the container</span>
  (*this).getSubPaving()-&gt;getLeaves(leaves); <span class="comment">// fill the container</span>

  <span class="keywordtype">double</span> trueF; <span class="comment">//true density</span>
  ivector temp;
  
   dotprecision <a class="code" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a>;    <span class="comment">// use type dotprecision for summation  </span>
   dpIAE=0.0;

  
  <span class="comment">//go through all the leaves in this</span>
  <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
    ivector thisBox = (*it)-&gt;getBox();
    <span class="comment">//cout &lt;&lt; &quot;====checking &quot; &lt;&lt; (*it)-&gt;getBox() &lt;&lt; endl;</span>
      
    <span class="comment">// get the height of this leaf</span>
    <span class="keywordtype">double</span> fhat = (*it)-&gt;getSummary()[0]; <span class="comment">//hopefully this is a robust way to</span>
                              <span class="comment">//get the needed value</span>
    
    <span class="comment">//cout &lt;&lt; &quot;fhat for box &quot; &lt;&lt; &quot;:&quot; &lt;&lt; fhat &lt;&lt; endl;</span>

    <span class="keywordtype">size_t</span> L = 0;
    <span class="keywordflow">for</span> (trueIt = trueLeaves.begin(); trueIt &lt; trueLeaves.end(); trueIt++) {
      <span class="comment">//cout &lt;&lt; &quot;----True leaf: &quot; &lt;&lt; (*trueIt)-&gt;getBox() &lt;&lt; &quot;\t&quot; &lt;&lt; endl;</span>
      ivector trueBox = (*trueIt)-&gt;getBox();

      <span class="keywordflow">if</span> (  holesLoc[L] == 0 ) { trueF = 0; }
      <span class="keywordflow">else</span> { trueF = weight/((*trueIt)-&gt;nodeVolume()); }
      <span class="comment">//cout &lt;&lt; &quot;pdf: &quot; &lt;&lt; trueF &lt;&lt; &quot;------&quot; &lt;&lt; endl;</span>
      
      <span class="comment">// if this is contained in trueBox</span>
      <span class="keywordflow">if</span> ( (*it)-&gt;getBox() &lt;= (*trueIt)-&gt;getBox() || (*it)-&gt;getBox() == (*trueIt)-&gt;getBox() ) {
        <span class="comment">//use the volume of this</span>
        real r = ((*it)-&gt;nodeVolume())*(fhat - trueF);
        <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; &quot;\t&quot; &lt;&lt; abs(r) &lt;&lt; endl;</span>
        accumulate(dpIAE, abs(r), 1.0);
        <span class="comment">//can move on to next leaf rather than iterating thru all trueBoxes</span>
        <span class="comment">//think about this later</span>
      } <span class="comment">//end of if this box is in trueBox</span>
      
      <span class="comment">// if this contains trueBox</span>
      <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((*trueIt)-&gt;getBox() &lt;= (*it)-&gt;getBox()) {
        <span class="comment">//use the volume of trueBox</span>
        real r = ((*trueIt)-&gt;nodeVolume())*(fhat - trueF);
        <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; &quot;\t&quot; &lt;&lt; abs(r) &lt;&lt; endl;</span>
        accumulate(dpIAE, abs(r), 1.0);
      } <span class="comment">//end of if trueBox is in this box</span>
      
      <span class="comment">// if this is partially contained in trueBox </span>
      <span class="keywordflow">else</span> <span class="keywordflow">if</span>   (<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(temp, thisBox, trueBox)) {
        <span class="keywordflow">if</span> (Inf(temp) != Sup(temp)){
          <span class="keywordtype">double</span> volume = <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(temp);
          real r = volume*(fhat - trueF);
          <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; &quot;\t&quot; &lt;&lt; abs(r) &lt;&lt; endl;</span>
          accumulate(dpIAE, abs(r), 1.0);
        }
      }
      L++;
    } <span class="comment">// end of going through trueBoxes</span>
  } <span class="comment">// end of going through thisBoxes</span>
  
   <span class="comment">//cast dotprecision to real</span>
   real unifIAE = rnd(dpIAE);
  <span class="keywordflow">return</span> unifIAE;                             

} <span class="comment">//end of function getUnifIAE()</span>
</pre></div>
</div>
</div>
<a class="anchor" id="ad9bbae8e4f70d6c40684ab60038807bc"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::getUnifIAE" ref="ad9bbae8e4f70d6c40684ab60038807bc" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a46870c2d282efef091dfb1b3477aba4f">AdaptiveHistogramCollator::getUnifIAE</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get the IAE for the standard uniform distribution. Note: later could add arguments for specific boundaries.</p>
<p>Get the IAE for a standard uniform distribution. </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01352">1352</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="HoldOutFinMix_8cpp_source.shtml#l00500">dpIAE</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">// setting up containers for the leaves</span>
  vector&lt;CollatorSPnode*&gt; leaves; <span class="comment">// set up empty container for leaf node pointers</span>
  vector&lt;CollatorSPnode*&gt;::iterator it; <span class="comment">// and an iterator over the container</span>
  (*this).getSubPaving()-&gt;getLeaves(leaves); <span class="comment">// fill the container</span>

   dotprecision <a class="code" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a>;    <span class="comment">// use type dotprecision for summation  </span>
   dpIAE=0.0;
   <span class="comment">//go through all the leaves in this</span>
   <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
      <span class="comment">// get the height of this leaf</span>
      <span class="comment">// the height is contained in the first position of the summary vector</span>
      <span class="comment">// so we need to access the vector</span>
      <span class="keywordtype">double</span> fhat = (*it)-&gt;getSummary()[0]; <span class="comment">//hopefully this is a robust way to</span>
                              <span class="comment">//get the needed value</span>
    <span class="comment">// cout &lt;&lt; &quot;fhat for box &quot; &lt;&lt; (*it)-&gt;getNodeName() &lt;&lt; &quot;:&quot; &lt;&lt; fhat &lt;&lt; endl;</span>

    <span class="comment">//now calculate the IAE</span>
      <span class="keywordflow">if</span> ((1 - fhat) &lt; 0.0){
      real r = ((*it)-&gt;nodeVolume())*(fhat - 1);
      <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; endl;</span>
      accumulate(dpIAE, r, 1.0);
    }

    <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((1 - fhat) &gt; 0.0){
      real r = ((*it)-&gt;nodeVolume())*(1 - fhat);
      <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; endl;</span>
      accumulate(dpIAE, r, 1.0);
    }
  } <span class="comment">// end of going through all the leaves in this</span>

   <span class="comment">//cast dotprecision to real</span>
   real unifIAE = rnd(dpIAE);
  <span class="keywordflow">return</span> unifIAE;
} <span class="comment">//end of function getUnifIAE()</span>
</pre></div>
</div>
</div>
<a class="anchor" id="a0437fe89f5ca716f729c7406ca218d3e"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::makeAverage" ref="a0437fe89f5ca716f729c7406ca218d3e" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a> <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">AdaptiveHistogramCollator::makeAverage</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>An <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> which is the average over this collation.</p>
<p>Makes and returns an <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> which is the average over the collation of histograms represented by this. The tree managed by the average has structure exactly the same as the tree managed by this and one value in the summary for each node where that value is the average of the summary of the corresponding node in this.</p>
<p>This method can only be performed on summaries which do not include negated </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00470">470</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="adaptivehistogramcollator_8hpp_source.shtml#l00089">rootCollator</a>, <a class="el" href="spnode_8cpp_source.shtml#l02148">subpavings::SPnodeException::what()</a>, and <a class="el" href="adaptivehistogram_8cpp_source.shtml#l05922">subpavings::HistException::what()</a>.</p>

<p>Referenced by <a class="el" href="AHABCObsMCMCDblHurdle_8cpp_source.shtml#l00140">doMCMCGRAuto()</a>, and <a class="el" href="Averaging_8cpp_source.shtml#l00038">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>) {
            <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot average this: rootCollator is NULL&quot;</span>;
            <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }

    <span class="comment">//average only makes sense if all values in the summary are positive</span>
    <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> mySummary = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aecf22d39cbb7289355a08cec62749800" title="Accessor for the summary.">getSummary</a>();

    <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it = find_if(mySummary.begin(), mySummary.end(),
                    bind2nd(less&lt;double&gt;(), 0.0));
    <span class="keywordflow">if</span> (it &lt; mySummary.end()) {
            <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot average this: the collation contains negatives&quot;</span>;
            <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }

    <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> newCollator;
    <span class="keywordflow">try</span> {
        newCollator.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a> = (<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>())-&gt;makeAverageCollation();
    }
    <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
        <span class="keywordtype">string</span> oldmsg(ba.what());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory making average.  Orginal error: &quot;</span>
                                            + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
        <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error making average.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
        <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException making average.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (exception&amp; e) {
        <span class="keywordtype">string</span> oldmsg(e.what());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error making average.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }


    <span class="keywordflow">return</span> newCollator;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a123342d0bc1e6b05ef6c8ed32eb3cff7"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::makeDifferencesToAverage" ref="a123342d0bc1e6b05ef6c8ed32eb3cff7" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a> <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a123342d0bc1e6b05ef6c8ed32eb3cff7">AdaptiveHistogramCollator::makeDifferencesToAverage</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01217">1217</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="adaptivehistogramcollator_8hpp_source.shtml#l00089">rootCollator</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">try</span> {
    <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>()) {
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot make differences to average for this: rootCollator is NULL&quot;</span>;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }

    <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> newCollator;
    
        newCollator.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a> = (<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>())-&gt;makeDifferencesToAveragePaving();
    
    <span class="keywordflow">return</span> newCollator;

    }
    
    <span class="keywordflow">catch</span> (exception&amp; e) {
        <span class="keywordtype">string</span> oldmsg(e.what());
        <span class="keywordtype">string</span> msg = string(<span class="stringliteral">&quot;Error in AdaptiveHistogramCollator::getL1DistancesToAverage.&quot;</span>)
        +  string(<span class="stringliteral">&quot;Orginal error: &quot;</span>) + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
} <span class="comment">//end of function makeDifferencesToAverage()</span>
</pre></div>
</div>
</div>
<a class="anchor" id="a2f8ce51da9658ebc8a10a7823366d8ab"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::marginalise" ref="a2f8ce51da9658ebc8a10a7823366d8ab" args="(const std::vector&lt; int &gt; &amp;reqDims) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a> <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2f8ce51da9658ebc8a10a7823366d8ab">AdaptiveHistogramCollator::marginalise</a> </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>reqDims</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Make a marginalised version of this histogram collator. </p>
<p>Marginalises to take out the unwanted dimensions and adjust summaries so that overall sum of (node vol x accumulated summaries) is the same as for this.</p>
<p>is a vector of the dimensions to include in marginal. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>An <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> managing a subpaving which is the marginalised version of the subpaving managed by this. </dd></dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd><em>reqDims</em> must be compatible with current dimensions. </dd></dl>
<dl class="note"><dt><b>Note:</b></dt><dd>allowed dimensions start at 1, ie dimensions to marginalise on can include 1, 2, ... #dimensions of this. </dd></dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>returned histogram will have one summary value for each node and have sum of (node vol x accumulated summaries) = that for this. </dd></dl>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00978">978</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="collatorspnode_8cpp_source.shtml#l01636">subpavings::CollatorSPnode::marginalise()</a>.</p>

<p>Referenced by <a class="el" href="AHABCSimThreeMethods_8cpp_source.shtml#l00044">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">// take the root of the other and marginalise it</span>
  <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0f1938c3bdc24026c034be889fd2bfe6" title="Default constructor.">AdaptiveHistogramCollator</a>(<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aec7d6bcee79660a09914100f9b878611" title="Make a marginalised version of subpaving with root node rhs.">CollatorSPnode::marginalise</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>(),
  reqDims));
}
</pre></div>
</div>
</div>
<a class="anchor" id="a25deb4940f2a4df6ea84ad6ffe5090d3"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::operator+" ref="a25deb4940f2a4df6ea84ad6ffe5090d3" args="(const AdaptiveHistogramCollator &amp;rhs) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a> AdaptiveHistogramCollator::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Addition operator.</p>
<p>Addition gives a histogram collator managing a tree which represents a subpaving which is the union of the subpavings represented by the operand collators. The summary for each node in the tree contains all the values from the summaries of the corresponding nodes in the trees managed by the operand AdaptiveHistogramCollators. </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00340">340</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="collatorspnode_8cpp_source.shtml#l00912">subpavings::CollatorSPnode::addPavings()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00387">subpavings::SPnode::getBox()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="adaptivehistogramcollator_8hpp_source.shtml#l00089">rootCollator</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>, and <a class="el" href="spnode_8cpp_source.shtml#l02148">subpavings::SPnodeException::what()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">if</span> ((NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>) &amp;&amp; (NULL != rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>) &amp;&amp;
    ((<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()) != <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()))
    || (<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()) != <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()))))
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Added histogram collators have unequal dimensions&quot;</span>);

    <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* newnode = NULL;

    <span class="keywordflow">try</span> {

        newnode =
            <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a66a0f1bc3a886c904f8192774b531437" title="Add two collator subpavings together.">CollatorSPnode::addPavings</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>, rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>);
    }
    <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
        <span class="keywordtype">string</span> msg(ba.what());
        std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in addition: original error &quot;</span>
                                    &lt;&lt; msg &lt;&lt; std::endl;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Memory allocation error in addition: &quot;</span> + msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
        <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
        std::cerr &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in addition: original error &quot;</span>
                                            &lt;&lt; msg &lt;&lt; std::endl;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;SPnodeException in addition: &quot;</span> + msg);
    }
    <span class="keywordflow">catch</span> (exception&amp; e) {
        <span class="keywordtype">string</span> msg(e.what());
        std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in addition: original error &quot;</span>
                                            &lt;&lt; msg &lt;&lt; std::endl;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error in addition: &quot;</span> + msg);
    }


    <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> newCollatorHist(newnode);

    <span class="keywordflow">return</span> newCollatorHist;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab1c2f300d93647faa0ca12e52b6405f0"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::operator+=" ref="ab1c2f300d93647faa0ca12e52b6405f0" args="(const AdaptiveHistogramCollator &amp;rhs)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a> &amp; AdaptiveHistogramCollator::operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Incremental or inplace addition operator.</p>
<p>Addition gives this histogram collator an expaned tree which represents a subpaving which is the union of the subpavings represented by the this's original tree and the tree represented by the rhs collator. The summary for each node in the expandd tree contains all the values from the summaries of the original nodes and the summaries of the corresponding nodes in the tree managed by the rhs collator. </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00381">381</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="collatorspnode_8cpp_source.shtml#l01211">subpavings::CollatorSPnode::addPaving()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00465">getSubPaving()</a>, <a class="el" href="spnode_8cpp_source.shtml#l02148">subpavings::SPnodeException::what()</a>, and <a class="el" href="adaptivehistogram_8cpp_source.shtml#l05922">subpavings::HistException::what()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">try</span> {
        <span class="comment">// get the subpaving out of rhs to form a new CollatorSPnode</span>
        <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> toAdd(*rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>());
        <span class="comment">// add the new CollatorSPnode into the collation</span>
        <span class="comment">// note that addPaving will alter toAdd, but that is okay because</span>
        <span class="comment">// toAdd is a temporary object created and deleted in this procedure</span>
        <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ab32959b197c529211921f3dab4e28177" title="Incorporate a Collator subpaving to this summmary.">addPaving</a>(&amp;toAdd);
    }


    <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
        <span class="keywordtype">string</span> oldmsg(ba.what());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory adding to collation.  Orginal error: &quot;</span>
                                            + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
        <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error adding to collation.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
        <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException adding to collation.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (exception&amp; e) {
        <span class="keywordtype">string</span> oldmsg(e.what());
        <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error adding to collation.  Orginal error: &quot;</span> + oldmsg;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">return</span> *<span class="keyword">this</span>;

}
</pre></div>
</div>
</div>
<a class="anchor" id="aa7ed65f2fced9b8e9e727876e84661c5"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::operator&#45;" ref="aa7ed65f2fced9b8e9e727876e84661c5" args="(const AdaptiveHistogramCollator &amp;rhs) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a> AdaptiveHistogramCollator::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Subtraction operator.</p>
<p>Subtraction gives a histogram collator managing a tree which represents a subpaving which is the union of the subpavings represented by the operand collators. The summary for each node in the tree contains all the values from the summary of the corresponding node in the trees managed by the left hand side operand and the negation of the values from the summary of the corresponding node in the trees managed by the right hand side operand. </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00422">422</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="spnode_8cpp_source.shtml#l00387">subpavings::SPnode::getBox()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="adaptivehistogramcollator_8hpp_source.shtml#l00089">rootCollator</a>, <a class="el" href="collatorspnode_8cpp_source.shtml#l00984">subpavings::CollatorSPnode::subtractPavings()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>, and <a class="el" href="spnode_8cpp_source.shtml#l02148">subpavings::SPnodeException::what()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">if</span> ((NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>) &amp;&amp; (NULL != rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>) &amp;&amp;
    ((<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()) != <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()))
    || (<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()) != <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()))))
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Histogram collators have unequal dimensions&quot;</span>);

    <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>* newnode = NULL;

    <span class="keywordflow">try</span> {

        <span class="keywordtype">double</span> c = -1.0;
        newnode =
            <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a79e263c5e6b22baeb2f4e543f33f6d5e" title="Subtract one collator subpavings from another together.">CollatorSPnode::subtractPavings</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>, rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>, c);
    }
    <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
        <span class="keywordtype">string</span> msg(ba.what());
        std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in subtraction: original error &quot;</span>
                                    &lt;&lt; msg &lt;&lt; std::endl;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Memory allocation error in subtraction: &quot;</span> + msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
        <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
        std::cerr &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in subtraction: original error &quot;</span>
                                            &lt;&lt; msg &lt;&lt; std::endl;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;SPnodeException in subtraction: &quot;</span> + msg);
    }
    <span class="keywordflow">catch</span> (exception&amp; e) {
        <span class="keywordtype">string</span> msg(e.what());
        std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in subtraction: original error &quot;</span>
                                            &lt;&lt; msg &lt;&lt; std::endl;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error in subtraction: &quot;</span> + msg);
    }


    <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> newCollatorHist(newnode);

    <span class="keywordflow">return</span> newCollatorHist;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a812e5e60dd3d233274738d823c9010b2"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::operator=" ref="a812e5e60dd3d233274738d823c9010b2" args="(const AdaptiveHistogramCollator &amp;rhs)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a> &amp; AdaptiveHistogramCollator::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy assignment operator. </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00299">299</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="adaptivehistogramcollator_8hpp_source.shtml#l00089">rootCollator</a>, and <a class="el" href="spnode_8cpp_source.shtml#l02148">subpavings::SPnodeException::what()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">try</span> {

        <span class="comment">// we have to make sure we delete the current paving</span>
        <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>) {
            <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>;
            <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a> = NULL;
        }

        <span class="keywordflow">if</span> (NULL != rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>)
            <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a> = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>(*(rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>));
    }
    <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
        <span class="keywordtype">string</span> msg(ba.what());
        std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in assignment: original error &quot;</span>
                            &lt;&lt; msg &lt;&lt; std::endl;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
        <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
        std::cerr &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in assignment: original error &quot;</span>
                                            &lt;&lt; msg &lt;&lt; std::endl;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;SPnodeException in assignment: &quot;</span> + msg);
    }
    <span class="keywordflow">catch</span> (exception&amp; e) {
        <span class="keywordtype">string</span> msg(e.what());
        std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in assignment: original error &quot;</span>
                                            &lt;&lt; msg &lt;&lt; std::endl;
        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error in assignment: &quot;</span> + msg);
    }

}
</pre></div>
</div>
</div>
<a class="anchor" id="a4fab24a598b5d30ff259e71d29e2aebd"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::outputAccumulationToTxtTabs" ref="a4fab24a598b5d30ff259e71d29e2aebd" args="(const std::string &amp;s) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a4fab24a598b5d30ff259e71d29e2aebd">AdaptiveHistogramCollator::outputAccumulationToTxtTabs</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Output the accumulated data over the collation to a txt file. </p>
<p>Output tab delimited data on the average to a text file. Outputs the accumulation over the collation of data summarised in this.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>the name of the file to send the output to. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00877">877</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>References <a class="el" href="spnode_8cpp_source.shtml#l02148">subpavings::SPnodeException::what()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">try</span> {
         <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>) {

            <span class="comment">// To generate a file output of the AdaptiveHistogramVCollator object</span>
            ofstream os(s.c_str());         <span class="comment">// Filename, c-string version</span>

            <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>) {
                <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a406e23c3f85680631bd30897fb1cfdc2" title="Output for for all leaves of a binary tree.">leavesAccumulationOutputTabs</a>(os);
                std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the accumulated AdaptiveHistograms &quot;</span>
                    &lt;&lt; <span class="stringliteral">&quot;has been written to &quot;</span> &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
            }
            <span class="keywordflow">else</span> {
                std::cout &lt;&lt; <span class="stringliteral">&quot;Sorry, nothing is in collation to accumulate&quot;</span>
                    &lt;&lt; std::endl;
            }
        }
    }
    <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; e) {
        std::cout &lt;&lt; <span class="stringliteral">&quot;Problem acccumulating: &quot;</span> &lt;&lt; e.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>() &lt;&lt; std::endl;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a514f2ebc1857e531b629f0ff3508b04b"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::outputAverageToTxtTabs" ref="a514f2ebc1857e531b629f0ff3508b04b" args="(const std::string &amp;s, bool confirm=false) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a514f2ebc1857e531b629f0ff3508b04b">AdaptiveHistogramCollator::outputAverageToTxtTabs</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>confirm</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Output average normalised histogram over collation to a txt file. </p>
<p>This method does not make the average histogram directly but, for each leaf node in the collated tree, calculates and outputs the average of the summary associated with that leaf node.</p>
<p>Output tab delimited data on the average to a text file. Outputs the normalised average histogram bins and heights.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>the name of the file to send the output to. </td></tr>
    <tr><td class="paramname">confirm</td><td>is a boolean controlling whether confirmation goes to console output (defaults to false). </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00827">827</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>Referenced by <a class="el" href="AHABCObsMCMCDblHurdle_8cpp_source.shtml#l00140">doMCMCGRAuto()</a>, <a class="el" href="AHABCSimThreeMethods_8cpp_source.shtml#l00044">main()</a>, and <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03044">subpavings::AdaptiveHistogram::MCMC()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="keywordflow">try</span> {

        <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>) {

            <span class="comment">//average only makes sense if all values in the summary are positive</span>
            <a class="code" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37" title="Define type VecDbl as a container of doubles.">VecDbl</a> mySummary = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#aecf22d39cbb7289355a08cec62749800" title="Accessor for the summary.">getSummary</a>();

            <a class="code" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab" title="Define type VecDblIt as an iterator over VecDbl/.">VecDblIt</a> it = find_if(mySummary.begin(), mySummary.end(),
                                                bind2nd(less&lt;double&gt;(), 0.0));
            <span class="keywordflow">if</span> (it &lt; mySummary.end()) {
                    <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Cannot average this: the collation contains negatives&quot;</span>;
                    std::cerr &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; msg &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; std::endl;
            }
            <span class="keywordflow">else</span> {

                <span class="comment">// To generate a file output of the AdaptiveHistogramCollator object</span>
                ofstream os(s.c_str());         <span class="comment">// Filename, c-string version</span>

                <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>) {
                    <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#a0f37c9801d51df76b2acf7ea4c45e122" title="Output for for all leaves of a binary tree.">leavesAverageOutputTabs</a>(os);
                    <span class="keywordflow">if</span> (confirm)
                        std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the average AdaptiveHistogram has been &quot;</span>
                            &lt;&lt; <span class="stringliteral">&quot;written to &quot;</span> &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
                }
                <span class="keywordflow">else</span> {
                    std::cerr &lt;&lt; <span class="stringliteral">&quot;Sorry, nothing is in collation to average&quot;</span>
                        &lt;&lt; std::endl;
                }
            }
        }
    }

    <span class="keywordflow">catch</span> (exception&amp; e) {
        std::cerr &lt;&lt; <span class="stringliteral">&quot;Problem averaging: &quot;</span> &lt;&lt; e.what() &lt;&lt; std::endl;
    }

}
</pre></div>
</div>
</div>
<a class="anchor" id="a130fc9b9b02214769aece5969de0d8fc"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::outputGraphDot" ref="a130fc9b9b02214769aece5969de0d8fc" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a130fc9b9b02214769aece5969de0d8fc">AdaptiveHistogramCollator::outputGraphDot</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Make a .dot graph file from collated histogram structure. </p>
<p>Makes a simple .dot graph from the histogram using node names and the .png image for this graph.</p>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>a constructed histogram </dd></dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>a .dot file and a .png in the same directory as the program creating it was run in. </dd></dl>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00783">783</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{


    <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>) {

        <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No root paving for graph output&quot;</span>);
    }

    <span class="keywordtype">bool</span> success = <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#aaaf0891a67e056e19f8e086c0139fd96" title="Make a .dot graph file from an SPnode tree structure.">outputGraphDot</a>();

    <span class="keywordflow">return</span> success;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aad6e5e6bd009ca64209c471c55a8d43e"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::outputLog" ref="aad6e5e6bd009ca64209c471c55a8d43e" args="(const std::string &amp;s, const int i) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aad6e5e6bd009ca64209c471c55a8d43e">AdaptiveHistogramCollator::outputLog</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>i</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Add current state of collation to a log file. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>is the name of the file to log to. </td></tr>
    <tr><td class="paramname">i</td><td>is a number representing the index of this state in a sequence. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00218">218</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="comment">// To add output of the AdaptiveHistogramCollator object to file</span>
    ofstream os(s.c_str(), ios::app);         <span class="comment">// append</span>
    <span class="keywordflow">if</span> (os.is_open()) {
        os &lt;&lt; std::endl;
        os &lt;&lt; <span class="stringliteral">&quot;Pass &quot;</span> &lt;&lt; i &lt;&lt; std::endl; <span class="comment">// numbering</span>
        <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ac7545dd3425c4570bd9e0fde17ad9294" title="Return a pointer to the CollatorPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ad54a1befc9cff87c02237caeabe84ea5" title="Output for for all leaves of a binary tree.">leavesOutputTabs</a>(os); <span class="comment">// the output</span>
        os.close();
    }
    <span class="keywordflow">else</span> {
        std::cerr &lt;&lt; <span class="stringliteral">&quot;Error: could not open file named &quot;</span>
            &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="aab47793e8362245a28a7ec3090da5352"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::outputToTxtTabs" ref="aab47793e8362245a28a7ec3090da5352" args="(const std::string &amp;s, bool confirm=false) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352">AdaptiveHistogramCollator::outputToTxtTabs</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>confirm</em> = <code>false</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Output the collated information to a txt file. </p>
<p>Output tab delimited data on the collation to a text file.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>the name of the file to send the output to. </td></tr>
    <tr><td class="paramname">confirm</td><td>is a boolean controlling whether confirmation goes to console output (defaults to false). </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00802">802</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>Referenced by <a class="el" href="AHABCObsMCMCDblHurdle_8cpp_source.shtml#l00140">doMCMCGRAuto()</a>, <a class="el" href="AHABCObsMCMCDblHurdle_8cpp_source.shtml#l00065">main()</a>, and <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03044">subpavings::AdaptiveHistogram::MCMC()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="comment">// To generate a file output of the AdaptiveHistogramCollator object</span>
    ofstream os(s.c_str());         <span class="comment">// Filename, c-string version</span>

    <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60" title="Pointer to the root CollatorSPnode.">rootCollator</a>-&gt;<a class="code" href="classsubpavings_1_1CollatorSPnode.shtml#ad54a1befc9cff87c02237caeabe84ea5" title="Output for for all leaves of a binary tree.">leavesOutputTabs</a>(os);
    <span class="keywordflow">if</span> (confirm)
        std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the AdaptiveHistogramCollator has been &quot;</span>
            &lt;&lt; <span class="stringliteral">&quot;written to &quot;</span> &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;

}
</pre></div>
</div>
</div>
<a class="anchor" id="aa477e8c6da033d93b212076630d3eec0"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::publicOutputLog" ref="aa477e8c6da033d93b212076630d3eec0" args="(const std::string &amp;s, const int i) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0">AdaptiveHistogramCollator::publicOutputLog</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>i</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Add current state of collation to a log file. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>is the name of the file to log to. </td></tr>
    <tr><td class="paramname">i</td><td>is a number representing the index of this state in a sequence. </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00868">868</a> of file <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a>.</p>

<p>Referenced by <a class="el" href="AHABCObsMCMCDblHurdle_8cpp_source.shtml#l00140">doMCMCGRAuto()</a>, and <a class="el" href="MCMCGRAuto_8cpp_source.shtml#l00038">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="comment">// use the private version</span>
    <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aad6e5e6bd009ca64209c471c55a8d43e" title="Add current state of collation to a log file.">outputLog</a>(s, i);
}
</pre></div>
</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="a5ae0bb810e0f19142964b9508f799b60"></a><!-- doxytag: member="subpavings::AdaptiveHistogramCollator::rootCollator" ref="a5ae0bb810e0f19142964b9508f799b60" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1CollatorSPnode.shtml">CollatorSPnode</a>* <a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a5ae0bb810e0f19142964b9508f799b60">subpavings::AdaptiveHistogramCollator::rootCollator</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Pointer to the root <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a>. </p>
<p>A CollatorSPSnode is a binary tree representation of information from a number of subpavings.</p>
<p>The summary information held by the <a class="el" href="classsubpavings_1_1CollatorSPnode.shtml" title="A derived class based on SPnode for creating summaries.">CollatorSPnode</a> for an <a class="el" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> is the count/(total count in tree * volume), ie the normalised histogram height for a bin corresponding the box of that <a class="el" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>. </p>

<p>Definition at line <a class="el" href="adaptivehistogramcollator_8hpp_source.shtml#l00089">89</a> of file <a class="el" href="adaptivehistogramcollator_8hpp_source.shtml">adaptivehistogramcollator.hpp</a>.</p>

<p>Referenced by <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00272">AdaptiveHistogramCollator()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00470">makeAverage()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01217">makeDifferencesToAverage()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00340">operator+()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00422">operator-()</a>, and <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00299">operator=()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="adaptivehistogramcollator_8hpp_source.shtml">adaptivehistogramcollator.hpp</a></li>
<li><a class="el" href="adaptivehistogramcollator_8cpp_source.shtml">adaptivehistogramcollator.cpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespacesubpavings.shtml">subpavings</a>      </li>
      <li class="navelem"><a class="el" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml">AdaptiveHistogramCollator</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:32 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
