<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: multitreemanager.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('multitreemanager_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">multitreemanager.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="multitreemanager_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="multitreemanager_8hpp.shtml" title="MultiTreeManager declarations.">multitreemanager.hpp</a>&quot;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;gsl/gsl_rng.h&gt;</span>    <span class="comment">// to use the gsl random number generator</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;map&gt;</span>              <span class="comment">// to use maps</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="sptools_8hpp.shtml" title="General tools for subpavings.">sptools.hpp</a>&quot;</span>      <span class="comment">// to use the subpaving tools</span>
<a name="l00033"></a>00033 
<a name="l00036"></a>00036 <span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;
<a name="l00037"></a><a class="code" href="classLexicoSorting.shtml">00037</a> <span class="keyword">class </span><a class="code" href="classLexicoSorting.shtml">LexicoSorting</a>
<a name="l00038"></a>00038 {
<a name="l00039"></a>00039   <span class="keyword">public</span>:
<a name="l00040"></a><a class="code" href="classLexicoSorting.shtml#ab411e7952cbda7be9138cf5704dfb453">00040</a>     <span class="keywordtype">bool</span> <a class="code" href="classLexicoSorting.shtml#ab411e7952cbda7be9138cf5704dfb453">operator() </a>(<span class="keyword">const</span> T&amp; t1, <span class="keyword">const</span> T&amp; t2)<span class="keyword"> const </span>{
<a name="l00041"></a>00041       <span class="keywordflow">return</span> std::lexicographical_compare(&amp;t1[0], &amp;t1[t1.size()-1], &amp;t2[0], &amp;t2[t2.size()-1]);
<a name="l00042"></a>00042       <span class="comment">//return lexicographical_compare(t1.begin(), t1.end(), t2.begin(), t2.end());</span>
<a name="l00043"></a>00043     }
<a name="l00044"></a>00044 };
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="comment">// a map for counting visits to states of Histograms encoded</span>
<a name="l00048"></a>00048     <span class="comment">// as OrderedLeafDepths</span>
<a name="l00049"></a><a class="code" href="multitreemanager_8cpp.shtml#a3ea630ec466288ccd6a700e1693615a7">00049</a>     <span class="keyword">typedef</span> map&lt; IntVec, int, LexicoSorting&lt;IntVec &gt; &gt; <a class="code" href="multitreemanager_8cpp.shtml#a3ea630ec466288ccd6a700e1693615a7">OrdLeafDepthsMap</a>;
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 
<a name="l00052"></a>00052 <span class="comment">// ---------- implementation of MultiTreeManager class -------------</span>
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 <span class="comment">// ---------------- private methods</span>
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 <span class="comment">// recursively accumulate splitting outcomes</span>
<a name="l00058"></a><a class="code" href="classMultiTreeManager.shtml#abb477bda6e195ddd91b4f4cf41f90114">00058</a> <span class="keywordtype">bool</span> <a class="code" href="classMultiTreeManager.shtml#abb477bda6e195ddd91b4f4cf41f90114" title="Accumulate splitting outcomes in pavings and add to graph.">MultiTreeManager::addToOutcomeSpaceAndGraph</a>(<span class="keyword">const</span> <span class="keywordtype">string</span> s, <span class="keywordtype">int</span> toLevel,
<a name="l00059"></a>00059             <span class="keywordtype">int</span> thisLevel, <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * tree, set&lt;string&gt;&amp; lines)
<a name="l00060"></a>00060 {
<a name="l00061"></a>00061     <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;
<a name="l00062"></a>00062 
<a name="l00063"></a>00063     <span class="keywordflow">if</span> (thisLevel &lt;= toLevel) {
<a name="l00064"></a>00064 
<a name="l00065"></a>00065         <span class="comment">// get how many leaves n there are on the tree</span>
<a name="l00066"></a>00066         <span class="keywordtype">size_t</span> n = <a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>(tree);
<a name="l00067"></a>00067 
<a name="l00068"></a>00068         <span class="comment">// make a temporary collection container</span>
<a name="l00069"></a>00069         <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> container;
<a name="l00070"></a>00070         container.reserve(n); <span class="comment">// reserve space</span>
<a name="l00071"></a>00071         <span class="keywordtype">string</span> parent = <span class="stringliteral">&quot;\&quot;&quot;</span> + <a class="code" href="classMultiTreeManager.shtml#aa0eccb6e029837f3b25c5a80f55e9990" title="get a string of the leaf levels of given subpaving">getLeafLevelsString</a>(tree) + <span class="stringliteral">&quot;\&quot;&quot;</span>;
<a name="l00072"></a>00072 
<a name="l00073"></a>00073         <span class="comment">// make one copy of the tree for each leaf</span>
<a name="l00074"></a>00074         <span class="comment">// put each copy in the temporary container</span>
<a name="l00075"></a>00075         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; n; i++) {
<a name="l00076"></a>00076             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* copyTree = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(*tree);
<a name="l00077"></a>00077             container.push_back(copyTree);
<a name="l00078"></a>00078             <span class="comment">// take the jth copy of tree and find its leaves</span>
<a name="l00079"></a>00079             <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
<a name="l00080"></a>00080             copyTree-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l00081"></a>00081             <span class="comment">// split the ith leaf of this copy of tree</span>
<a name="l00082"></a>00082             leaves[i]-&gt;nodeExpand();
<a name="l00083"></a>00083             <span class="comment">// add the parent child connection to the dot graph</span>
<a name="l00084"></a>00084             <span class="keywordtype">string</span> segment = <span class="stringliteral">&quot;\&quot;&quot;</span> + <a class="code" href="classMultiTreeManager.shtml#aa0eccb6e029837f3b25c5a80f55e9990" title="get a string of the leaf levels of given subpaving">getLeafLevelsString</a>(copyTree) + <span class="stringliteral">&quot;\&quot;&quot;</span>;
<a name="l00085"></a>00085             <span class="keywordtype">string</span> line = <span class="stringliteral">&quot;\t &quot;</span> + parent + <span class="stringliteral">&quot; -&gt; &quot;</span> + segment + <span class="stringliteral">&quot;;&quot;</span>;
<a name="l00086"></a>00086 
<a name="l00087"></a>00087             pair&lt;set&lt;string&gt;::iterator, <span class="keywordtype">bool</span>&gt; ret;
<a name="l00088"></a>00088 
<a name="l00089"></a>00089             ret = lines.insert(line); <span class="comment">// try and see if the line is a new one</span>
<a name="l00090"></a>00090             <span class="keywordflow">if</span> (ret.second==<span class="keyword">true</span>) <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, line);  <span class="comment">// output if new line</span>
<a name="l00091"></a>00091         }
<a name="l00092"></a>00092 
<a name="l00093"></a>00093         <span class="comment">// copy the contents of the temporary container to pavings</span>
<a name="l00094"></a>00094         <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.insert(<a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.end(), container.begin(),container.end());
<a name="l00095"></a>00095 
<a name="l00096"></a>00096         <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it;
<a name="l00097"></a>00097         <span class="comment">// for each copy in the temporary container</span>
<a name="l00098"></a>00098 
<a name="l00099"></a>00099         <span class="keywordflow">for</span> (it = container.begin(); it &lt; container.end(); it++) {
<a name="l00100"></a>00100             <span class="comment">// recurse addToOutComeSpace(toLevel, thisLevel+1, copy)</span>
<a name="l00101"></a>00101             done = <a class="code" href="classMultiTreeManager.shtml#abb477bda6e195ddd91b4f4cf41f90114" title="Accumulate splitting outcomes in pavings and add to graph.">addToOutcomeSpaceAndGraph</a>(s, toLevel,
<a name="l00102"></a>00102                                             thisLevel + 1, *it, lines);
<a name="l00103"></a>00103         }
<a name="l00104"></a>00104 
<a name="l00105"></a>00105     }
<a name="l00106"></a>00106     <span class="keywordflow">else</span> {
<a name="l00107"></a>00107         done = <span class="keyword">true</span>;
<a name="l00108"></a>00108     }
<a name="l00109"></a>00109     <span class="keywordflow">return</span> done;
<a name="l00110"></a>00110 
<a name="l00111"></a>00111 }
<a name="l00112"></a>00112 
<a name="l00113"></a>00113 <span class="comment">// recursively accumulate splitting outcomes</span>
<a name="l00114"></a><a class="code" href="classMultiTreeManager.shtml#a6661b18a6941311bb5c7ca2d7c6ee10a">00114</a> <span class="keywordtype">bool</span> <a class="code" href="classMultiTreeManager.shtml#a6661b18a6941311bb5c7ca2d7c6ee10a" title="Accumulate splitting outcomes in pavings.">MultiTreeManager::addToOutcomeSpace</a>(<span class="keywordtype">int</span> toLevel,
<a name="l00115"></a>00115             <span class="keywordtype">int</span> thisLevel, <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * tree)
<a name="l00116"></a>00116 {
<a name="l00117"></a>00117     <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;
<a name="l00118"></a>00118 
<a name="l00119"></a>00119     <span class="keywordflow">if</span> (thisLevel &lt;= toLevel) {
<a name="l00120"></a>00120 
<a name="l00121"></a>00121         <span class="comment">// get how many leaves n there are on the tree</span>
<a name="l00122"></a>00122         <span class="keywordtype">size_t</span> n = <a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>(tree);
<a name="l00123"></a>00123 
<a name="l00124"></a>00124         <span class="comment">// make a temporary collection container</span>
<a name="l00125"></a>00125         <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> container;
<a name="l00126"></a>00126         container.reserve(n); <span class="comment">// reserve space</span>
<a name="l00127"></a>00127 
<a name="l00128"></a>00128         <span class="comment">// make one copy of the tree for each leaf</span>
<a name="l00129"></a>00129         <span class="comment">// put each copy in the temporary container</span>
<a name="l00130"></a>00130         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; n; i++) {
<a name="l00131"></a>00131 
<a name="l00132"></a>00132             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* copyTree = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(*tree);
<a name="l00133"></a>00133             container.push_back(copyTree);
<a name="l00134"></a>00134             <span class="comment">// take the jth copy of tree and find its leaves</span>
<a name="l00135"></a>00135             <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
<a name="l00136"></a>00136             copyTree-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l00137"></a>00137             <span class="comment">// split the ith leaf of this copy of tree</span>
<a name="l00138"></a>00138             leaves[i]-&gt;nodeExpand();
<a name="l00139"></a>00139 
<a name="l00140"></a>00140         }
<a name="l00141"></a>00141 
<a name="l00142"></a>00142         <span class="comment">// copy the contents of the temporary container to pavings</span>
<a name="l00143"></a>00143         <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.insert(<a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.end(), container.begin(),container.end());
<a name="l00144"></a>00144 
<a name="l00145"></a>00145         <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it;
<a name="l00146"></a>00146 
<a name="l00147"></a>00147         <span class="comment">// for each copy in the temporary container</span>
<a name="l00148"></a>00148         <span class="keywordflow">for</span> (it = container.begin(); it &lt; container.end(); it++) {
<a name="l00149"></a>00149             <span class="comment">// recurse addToOutComeSpace(toLevel, thisLevel+1, copy)</span>
<a name="l00150"></a>00150             done = <a class="code" href="classMultiTreeManager.shtml#a6661b18a6941311bb5c7ca2d7c6ee10a" title="Accumulate splitting outcomes in pavings.">addToOutcomeSpace</a>(toLevel, thisLevel + 1, *it);
<a name="l00151"></a>00151         }
<a name="l00152"></a>00152 
<a name="l00153"></a>00153     }
<a name="l00154"></a>00154     <span class="keywordflow">else</span> {
<a name="l00155"></a>00155         done = <span class="keyword">true</span>;
<a name="l00156"></a>00156     }
<a name="l00157"></a>00157     <span class="keywordflow">return</span> done;
<a name="l00158"></a>00158 
<a name="l00159"></a>00159 }
<a name="l00160"></a>00160 
<a name="l00161"></a>00161 <span class="comment">// ---------------- public methods</span>
<a name="l00162"></a>00162 
<a name="l00163"></a>00163 
<a name="l00164"></a>00164 <span class="comment">// Destructor</span>
<a name="l00165"></a><a class="code" href="classMultiTreeManager.shtml#a75d0b2730d19db22c94702097138c56a">00165</a> <a class="code" href="classMultiTreeManager.shtml#a75d0b2730d19db22c94702097138c56a" title="Destructor.">MultiTreeManager::~MultiTreeManager</a>()
<a name="l00166"></a>00166 {
<a name="l00167"></a>00167     <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it;
<a name="l00168"></a>00168     <span class="keywordflow">for</span> (it = <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.begin(); it &lt; <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.end(); it++) {
<a name="l00169"></a>00169         <span class="keyword">delete</span> *it;
<a name="l00170"></a>00170         *it = NULL;
<a name="l00171"></a>00171     }
<a name="l00172"></a>00172     <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.clear();
<a name="l00173"></a>00173 }
<a name="l00174"></a>00174 
<a name="l00175"></a>00175 
<a name="l00176"></a>00176 <span class="comment">// recursively accumulate splitting outcomes</span>
<a name="l00177"></a><a class="code" href="classMultiTreeManager.shtml#ae81995550988df35d1dcb7f0c14b5872">00177</a> <span class="keywordtype">void</span> <a class="code" href="classMultiTreeManager.shtml#ae81995550988df35d1dcb7f0c14b5872">MultiTreeManager::mapPavings</a>()
<a name="l00178"></a>00178 {
<a name="l00179"></a>00179     <span class="comment">// don&#39;t clear the current pavings! - that&#39;s what we use here</span>
<a name="l00180"></a>00180 
<a name="l00181"></a>00181     <span class="comment">// go through the pavings and record into the vector of shape count maps</span>
<a name="l00182"></a>00182     <span class="keywordflow">if</span> (!<a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.empty()) {
<a name="l00183"></a>00183 
<a name="l00184"></a>00184          <span class="keywordtype">size_t</span> numberPavings = <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.size();
<a name="l00185"></a>00185 
<a name="l00186"></a>00186         cout &lt;&lt; <span class="stringliteral">&quot; mapping outcomes... there are &quot;</span> &lt;&lt; numberPavings
<a name="l00187"></a>00187                         &lt;&lt; <span class="stringliteral">&quot; outcomes &quot;</span> &lt;&lt; endl;
<a name="l00188"></a>00188 
<a name="l00189"></a>00189         std::pair&lt; OrdLeafDepthsMap::iterator, bool &gt; mapBool;
<a name="l00190"></a>00190 
<a name="l00191"></a>00191         <span class="comment">// what is the maximum number of leaves we have?</span>
<a name="l00192"></a>00192         set&lt;size_t&gt; leafSet;
<a name="l00193"></a>00193         <span class="keywordtype">size_t</span> count = 0;
<a name="l00194"></a>00194         <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> sit = <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.begin(); sit &lt; <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.end(); sit++) {
<a name="l00195"></a>00195             leafSet.insert(<a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>(*sit));
<a name="l00196"></a>00196             count ++;
<a name="l00197"></a>00197         }
<a name="l00198"></a>00198 
<a name="l00199"></a>00199         <span class="keywordtype">size_t</span> uniqueLeaves = leafSet.size();
<a name="l00200"></a>00200 
<a name="l00201"></a>00201         vector&lt; OrdLeafDepthsMap &gt; vecMaps(uniqueLeaves); <span class="comment">// vector of maps</span>
<a name="l00202"></a>00202 
<a name="l00203"></a>00203         <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it = <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.begin(); it &lt; <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.end(); it++) {
<a name="l00204"></a>00204 
<a name="l00205"></a>00205             <span class="keywordtype">size_t</span> thisLeaves = <a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>((*it));
<a name="l00206"></a>00206 
<a name="l00207"></a>00207             <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> thisLevels;
<a name="l00208"></a>00208             thisLevels  = (*it)-&gt;getLeafNodeLevels(thisLevels);
<a name="l00209"></a>00209 
<a name="l00210"></a>00210             <span class="keywordtype">int</span> indexer = 0; <span class="comment">// need to find index for maps with this no. leaves</span>
<a name="l00211"></a>00211             <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 1; j &lt; thisLeaves; j++) {
<a name="l00212"></a>00212                 <span class="keywordflow">if</span> (leafSet.count(j)) indexer++;
<a name="l00213"></a>00213             }
<a name="l00214"></a>00214 
<a name="l00215"></a>00215             mapBool = vecMaps[indexer].insert(pair&lt;IntVec, int&gt; (thisLevels,1));
<a name="l00216"></a>00216 
<a name="l00217"></a>00217             <span class="keywordflow">if</span>(!(mapBool.second)) <span class="comment">// if its a new one, add</span>
<a name="l00218"></a>00218                 (mapBool.first)-&gt;second +=1; <span class="comment">// else increment count</span>
<a name="l00219"></a>00219         }
<a name="l00220"></a>00220 
<a name="l00221"></a>00221         <span class="keywordtype">string</span> basefilename = <span class="stringliteral">&quot;multimanager&quot;</span>;
<a name="l00222"></a>00222         <span class="keywordtype">string</span> filename = <a class="code" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609" title="Construct a unique filename from base and timestamp number.">getUniqueFilename</a> (basefilename);
<a name="l00223"></a>00223 
<a name="l00224"></a>00224         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(filename,
<a name="l00225"></a>00225             <span class="stringliteral">&quot;tree shape frequencies and relative frequencies in outcomes&quot;</span>);
<a name="l00226"></a>00226         std::ostringstream stm;
<a name="l00227"></a>00227         stm &lt;&lt; numberPavings &lt;&lt; <span class="stringliteral">&quot; outcomes altogether&quot;</span>;
<a name="l00228"></a>00228         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(filename, stm.str());
<a name="l00229"></a>00229 
<a name="l00230"></a>00230         <span class="comment">// print out the results</span>
<a name="l00231"></a>00231         std::cout &lt;&lt; <span class="stringliteral">&quot;tree shape frequencies (relative frequencies) in outcomes&quot;</span>
<a name="l00232"></a>00232                 &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00233"></a>00233 
<a name="l00234"></a>00234         vector&lt; OrdLeafDepthsMap &gt;::iterator vecMapsIt = vecMaps.begin();
<a name="l00235"></a>00235 
<a name="l00236"></a>00236         <span class="keywordflow">for</span> (set&lt;size_t&gt;::iterator lit = leafSet.begin(); lit != leafSet.end();
<a name="l00237"></a>00237                                         lit++) {
<a name="l00238"></a>00238 
<a name="l00239"></a>00239             OrdLeafDepthsMap::iterator mapIt;
<a name="l00240"></a>00240 
<a name="l00241"></a>00241             cout &lt;&lt; <span class="stringliteral">&quot;Leaves : &quot;</span> &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; *lit &lt;&lt; <span class="stringliteral">&quot;\t(&quot;</span>
<a name="l00242"></a>00242                             &lt;&lt; (*vecMapsIt).size() &lt;&lt; <span class="stringliteral">&quot; unique outcomes)\n&quot;</span>;
<a name="l00243"></a>00243 
<a name="l00244"></a>00244             std::ostringstream stm1;
<a name="l00245"></a>00245             stm1 &lt;&lt; <span class="stringliteral">&quot;Leaves : \t&quot;</span> &lt;&lt; (*lit) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; (*vecMapsIt).size()
<a name="l00246"></a>00246                             &lt;&lt; <span class="stringliteral">&quot;\tunique outcomes&quot;</span>;
<a name="l00247"></a>00247             <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(filename, stm1.str());
<a name="l00248"></a>00248 
<a name="l00249"></a>00249             <span class="keywordflow">for</span>(mapIt = (*vecMapsIt).begin(); mapIt != (*vecMapsIt).end();
<a name="l00250"></a>00250                                         mapIt++) {
<a name="l00251"></a>00251 
<a name="l00252"></a>00252                 <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> levels = mapIt-&gt;first;
<a name="l00253"></a>00253 
<a name="l00254"></a>00254                 <span class="keywordtype">size_t</span> freq = (mapIt-&gt;second);
<a name="l00255"></a>00255                 <span class="keywordtype">double</span> relfreq = (1.0*(mapIt-&gt;second))/numberPavings;
<a name="l00256"></a>00256 
<a name="l00257"></a>00257                 cout &lt;&lt; freq &lt;&lt; <span class="stringliteral">&quot; : &quot;</span> &lt;&lt; <span class="stringliteral">&quot;(\t&quot;</span>
<a name="l00258"></a>00258                     &lt;&lt; relfreq &lt;&lt; <span class="stringliteral">&quot;)\t&quot;</span>;
<a name="l00259"></a>00259 
<a name="l00260"></a>00260                 std::ostringstream stm2;
<a name="l00261"></a>00261                 stm2 &lt;&lt; <span class="stringliteral">&quot;\t\t\t\t&quot;</span> &lt;&lt; freq &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>
<a name="l00262"></a>00262                     &lt;&lt; relfreq &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00263"></a>00263                 <span class="keywordtype">string</span> thisline =  stm2.str();
<a name="l00264"></a>00264 
<a name="l00265"></a>00265                 <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(filename, thisline, levels);
<a name="l00266"></a>00266 
<a name="l00267"></a>00267                 copy (levels.begin(), levels.end(),
<a name="l00268"></a>00268                       ostream_iterator&lt;int&gt;(cout, <span class="stringliteral">&quot;;&quot;</span>));
<a name="l00269"></a>00269                 cout &lt;&lt; <span class="charliteral">&#39;\n&#39;</span>;
<a name="l00270"></a>00270             }
<a name="l00271"></a>00271             vecMapsIt++; <span class="comment">// move the iterator to the vec maps in step</span>
<a name="l00272"></a>00272         }
<a name="l00273"></a>00273         std::cout &lt;&lt; <span class="stringliteral">&quot;Output file in &quot;</span> &lt;&lt; filename &lt;&lt; std::endl;
<a name="l00274"></a>00274     }
<a name="l00275"></a>00275     <span class="keywordflow">else</span> std::cout &lt;&lt; <span class="stringliteral">&quot;There are no pavings in the outcome space to map&quot;</span>
<a name="l00276"></a>00276                 &lt;&lt; std::endl;
<a name="l00277"></a>00277 
<a name="l00278"></a>00278 }
<a name="l00279"></a>00279 
<a name="l00280"></a>00280 
<a name="l00281"></a>00281 <span class="comment">// recursively accumulate splitting outcomes</span>
<a name="l00282"></a><a class="code" href="classMultiTreeManager.shtml#ab1524c6866c35ce2cafad068792ec5de">00282</a> <span class="keywordtype">void</span> <a class="code" href="classMultiTreeManager.shtml#ab1524c6866c35ce2cafad068792ec5de">MultiTreeManager::makeAndMapOutcomeSpace</a>(<span class="keywordtype">int</span> toLevel)
<a name="l00283"></a>00283 {
<a name="l00284"></a>00284     <a class="code" href="classMultiTreeManager.shtml#a5feeb102bc4ffb52cf5fc11327499a1d">makeOutcomeSpace</a>(toLevel);
<a name="l00285"></a>00285     <a class="code" href="classMultiTreeManager.shtml#ae81995550988df35d1dcb7f0c14b5872">mapPavings</a>();
<a name="l00286"></a>00286 
<a name="l00287"></a>00287 }
<a name="l00288"></a>00288 
<a name="l00289"></a>00289 
<a name="l00290"></a>00290 <span class="comment">// get the outcome space from continual splitting to level toLevel</span>
<a name="l00291"></a>00291 <span class="comment">// and do the graph</span>
<a name="l00292"></a><a class="code" href="classMultiTreeManager.shtml#af09e6377690a9ebffc9b141532cb07b2">00292</a> <span class="keywordtype">void</span> <a class="code" href="classMultiTreeManager.shtml#af09e6377690a9ebffc9b141532cb07b2">MultiTreeManager::makeAndGraphOutcomeSpace</a>(<span class="keywordtype">int</span> toLevel)
<a name="l00293"></a>00293 {
<a name="l00294"></a>00294 
<a name="l00295"></a>00295     <span class="comment">// clear the pavings</span>
<a name="l00296"></a>00296     <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.clear();
<a name="l00297"></a>00297 
<a name="l00298"></a>00298     std::cout &lt;&lt; <span class="stringliteral">&quot;Making and graphing the outcome space&quot;</span> &lt;&lt; std::endl;
<a name="l00299"></a>00299 
<a name="l00300"></a>00300     <span class="comment">//Make a node with a dummy box</span>
<a name="l00301"></a>00301     ivector pavingBox(1);
<a name="l00302"></a>00302     interval pavingInterval(0,1);
<a name="l00303"></a>00303     pavingBox[1] = pavingInterval;
<a name="l00304"></a>00304     <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* root = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(pavingBox);
<a name="l00305"></a>00305 
<a name="l00306"></a>00306     <span class="keywordtype">int</span> i = 0;
<a name="l00307"></a>00307     <span class="keywordtype">string</span> baseFileName = <span class="stringliteral">&quot;outputGraph&quot;</span>;
<a name="l00308"></a>00308     <span class="keywordtype">string</span> suffix = <span class="stringliteral">&quot;.dot&quot;</span>;
<a name="l00309"></a>00309     <span class="keywordtype">string</span> s = <a class="code" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609" title="Construct a unique filename from base and timestamp number.">getUniqueFilename</a>(baseFileName, suffix);
<a name="l00310"></a>00310     <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, <span class="stringliteral">&quot;digraph G {&quot;</span>); <span class="comment">// opening line</span>
<a name="l00311"></a>00311 
<a name="l00312"></a>00312     <span class="comment">// add it to the pavings data member collection</span>
<a name="l00313"></a>00313     <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.push_back(root);
<a name="l00314"></a>00314 
<a name="l00315"></a>00315     <span class="comment">// Send it into addtoOutComeSpace</span>
<a name="l00316"></a>00316     <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;
<a name="l00317"></a>00317     set&lt;string&gt; lines; <span class="comment">// to check on uniqueness of lines for graph</span>
<a name="l00318"></a>00318     done = <a class="code" href="classMultiTreeManager.shtml#abb477bda6e195ddd91b4f4cf41f90114" title="Accumulate splitting outcomes in pavings and add to graph.">addToOutcomeSpaceAndGraph</a>(s, toLevel, 1, root, lines);
<a name="l00319"></a>00319     <span class="keywordflow">while</span> (!done) {}
<a name="l00320"></a>00320 
<a name="l00321"></a>00321     <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, <span class="stringliteral">&quot;}&quot;</span>); <span class="comment">// closing line</span>
<a name="l00322"></a>00322 
<a name="l00323"></a>00323     <span class="comment">// make the image of the graph</span>
<a name="l00324"></a>00324     <a class="code" href="namespacesubpavings.shtml#abb4671c14005974aeea8f0dd39600ec6" title="make a Dot graph png image given a dot file.">makeDotImage</a>(s);
<a name="l00325"></a>00325 
<a name="l00326"></a>00326 }
<a name="l00327"></a>00327 
<a name="l00328"></a>00328 <span class="comment">// get the outcome space from continual splitting to level toLevel</span>
<a name="l00329"></a><a class="code" href="classMultiTreeManager.shtml#a5feeb102bc4ffb52cf5fc11327499a1d">00329</a> <span class="keywordtype">void</span> <a class="code" href="classMultiTreeManager.shtml#a5feeb102bc4ffb52cf5fc11327499a1d">MultiTreeManager::makeOutcomeSpace</a>(<span class="keywordtype">int</span> toLevel)
<a name="l00330"></a>00330 {
<a name="l00331"></a>00331 
<a name="l00332"></a>00332     <span class="comment">// clear the pavings</span>
<a name="l00333"></a>00333     <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.clear();
<a name="l00334"></a>00334 
<a name="l00335"></a>00335     std::cout &lt;&lt; <span class="stringliteral">&quot;Making the outcome space&quot;</span> &lt;&lt; std::endl;
<a name="l00336"></a>00336 
<a name="l00337"></a>00337     <span class="comment">//Make a node with a dummy box</span>
<a name="l00338"></a>00338     ivector pavingBox(1);
<a name="l00339"></a>00339     interval pavingInterval(0,1);
<a name="l00340"></a>00340     pavingBox[1] = pavingInterval;
<a name="l00341"></a>00341     <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* root = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(pavingBox);
<a name="l00342"></a>00342 
<a name="l00343"></a>00343     <span class="keywordtype">int</span> i = 0;
<a name="l00344"></a>00344     <span class="comment">// add it to the pavings data member collection</span>
<a name="l00345"></a>00345     <a class="code" href="classMultiTreeManager.shtml#a69e27576dc42a5433ecc8723503638d0" title="vector of pointers to subpavings managed by this object">pavings</a>.push_back(root);
<a name="l00346"></a>00346 
<a name="l00347"></a>00347     <span class="comment">// Send it into addtoOutComeSpace</span>
<a name="l00348"></a>00348     <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;
<a name="l00349"></a>00349     done = <a class="code" href="classMultiTreeManager.shtml#a6661b18a6941311bb5c7ca2d7c6ee10a" title="Accumulate splitting outcomes in pavings.">addToOutcomeSpace</a>(toLevel, 1, root);
<a name="l00350"></a>00350     <span class="keywordflow">while</span> (!done) {}
<a name="l00351"></a>00351 
<a name="l00352"></a>00352 }
<a name="l00353"></a>00353 
<a name="l00354"></a>00354 <span class="comment">// ----------- end of implementation of MultiTreeManager class ---------------</span>
<a name="l00355"></a>00355 
<a name="l00356"></a>00356 
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="multitreemanager_8cpp.shtml">multitreemanager.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:16 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
