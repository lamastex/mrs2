<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: Exr_11_33.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('Exr__11__33_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">Exr_11_33.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="Exr__11__33_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* </span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2008, 2009 Raazesh Sainudiin and Jennifer Harlow</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment"> * your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00020"></a>00020 
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="Exr__11__33_8hpp.shtml">Exr_11_33.hpp</a>&quot;</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="comment">// These AIASubPavings are declared as global</span>
<a name="l00031"></a><a class="code" href="Exr__11__33_8cpp.shtml#a16765ea8c433ea86ad0e3ae0e36685c7">00031</a> <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASubPaving</a> <a class="code" href="Exm__3__3_8cpp.shtml#a61a4b8518251e3f73c3e1951e3c733ec">Sc</a>, <a class="code" href="Exr__11__33_8cpp.shtml#a6f925a28990597524155ac8e7381d5fa">Sc1</a>, <a class="code" href="Exr__11__33_8cpp.shtml#a16765ea8c433ea86ad0e3ae0e36685c7">Sc2</a>;
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="comment">// specifications of example interval boolean tests</span>
<a name="l00034"></a>00034 <span class="comment">// The boolean interval test can return BI_TRUE, BI_FALSE, or BI_INDET</span>
<a name="l00035"></a>00035 
<a name="l00036"></a><a class="code" href="Exr__11__33_8cpp.shtml#ad4bce9ed969316e3fb7c990094be55a7">00036</a> <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6" title="Define type &quot;Interval Booleans&quot; This is used to extend the usual booleans TRUE and FALSE for use with...">AIA_BOOL_INTERVAL</a> <a class="code" href="Exm__3__3_8cpp.shtml#ad4bce9ed969316e3fb7c990094be55a7">IBTAnnular</a>(<span class="keyword">const</span> ivector&amp; x)
<a name="l00037"></a>00037 {
<a name="l00038"></a>00038   <span class="comment">// here we test a 2-d box for inclusion in the area between circles centred </span>
<a name="l00039"></a>00039   <span class="comment">// on the origin with radii 1 and 2</span>
<a name="l00040"></a>00040   interval ToInvert(1.0,2.0),Temp;
<a name="l00041"></a>00041   interval Img = <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x[1]) + <a class="code" href="namespacetaylor.shtml#ad814819d656f5760e836bfa130f1d3a4">sqr</a>(x[2]);
<a name="l00042"></a>00042 
<a name="l00043"></a>00043   <span class="keywordflow">if</span> (!<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(Temp,Img,ToInvert)) <span class="keywordflow">return</span> <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6a57a124e19ed919ea8c7a944c309d7636">BI_FALSE</a>;
<a name="l00044"></a>00044   <span class="keywordflow">if</span> ( Img&lt;=ToInvert ) <span class="keywordflow">return</span> <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6a966ca7244fcb98834f2b3afbb5d32ac2">BI_TRUE</a>;
<a name="l00045"></a>00045 
<a name="l00046"></a>00046   <span class="keywordflow">return</span> <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6aa43b2bfa91b022f8aa5c08a522eb4fce">BI_INDET</a>;
<a name="l00047"></a>00047 }
<a name="l00048"></a>00048 
<a name="l00049"></a><a class="code" href="Exr__11__33_8cpp.shtml#a20b13850dd9692440454d010da913e98">00049</a> <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6" title="Define type &quot;Interval Booleans&quot; This is used to extend the usual booleans TRUE and FALSE for use with...">AIA_BOOL_INTERVAL</a> <a class="code" href="Exr__11__33_8cpp.shtml#a20b13850dd9692440454d010da913e98">IBTFdirect</a>(<span class="keyword">const</span> ivector&amp; x)
<a name="l00050"></a>00050 {
<a name="l00051"></a>00051   <span class="comment">// A boolean interval test to illustrate SIVIA being used to evaluate the </span>
<a name="l00052"></a>00052   <span class="comment">// direct image of a set by a function provided the function is invertible</span>
<a name="l00053"></a>00053   <span class="comment">// ie SIVIA will invert inverse_f</span>
<a name="l00054"></a>00054 
<a name="l00055"></a>00055   interval Temp;
<a name="l00056"></a>00056   ivector Img(2);
<a name="l00057"></a>00057 
<a name="l00058"></a>00058   <span class="comment">// taking the function f : (x1,x2) -&gt; (2x1-x2,-x1+2x2)</span>
<a name="l00059"></a>00059   <span class="comment">// f is invertible and the inverse is </span>
<a name="l00060"></a>00060   <span class="comment">// inverse_f : (x1,x2) -&gt; (2x1 + x2,x1+2x2)/3</span>
<a name="l00061"></a>00061   <span class="comment">// this is an inclusion function for inverse_f</span>
<a name="l00062"></a>00062 
<a name="l00063"></a>00063   Img[1] = (2.0*x[1]+x[2]) / 3.0;
<a name="l00064"></a>00064   Img[2] = (x[1]+2.0*x[2]) / 3.0;
<a name="l00065"></a>00065 
<a name="l00066"></a>00066   <span class="keywordflow">return</span> (Img&lt;=Sc); <span class="comment">// Sc is an AIASubPaving set up by the first example</span>
<a name="l00067"></a>00067 }
<a name="l00068"></a>00068 
<a name="l00069"></a><a class="code" href="Exr__11__33_8cpp.shtml#ad999a60ef78af33c65610c301d3c57dc">00069</a> <a class="code" href="AIAsubpaving_8hpp.shtml#a04a5da87f7c1570d6ef4843fb476d1a6" title="Define type &quot;Interval Booleans&quot; This is used to extend the usual booleans TRUE and FALSE for use with...">AIA_BOOL_INTERVAL</a> <a class="code" href="Exr__11__33_8cpp.shtml#ad999a60ef78af33c65610c301d3c57dc">IBTFinverse</a>(<span class="keyword">const</span> ivector&amp; x)
<a name="l00070"></a>00070 {
<a name="l00071"></a>00071   interval Temp;
<a name="l00072"></a>00072   ivector Img(2);
<a name="l00073"></a>00073 
<a name="l00074"></a>00074   <span class="comment">// the function f is f : (x1,x2) -&gt; (2x1-x2,-x1+2x2)</span>
<a name="l00075"></a>00075 
<a name="l00076"></a>00076   Img[1] = 2.0*x[1]-x[2];
<a name="l00077"></a>00077   Img[2] = -x[1]+2.0*x[2];
<a name="l00078"></a>00078 
<a name="l00079"></a>00079   <span class="keywordflow">return</span> (Img&lt;=Sc1);
<a name="l00080"></a>00080 }
<a name="l00081"></a>00081 
<a name="l00082"></a>00082 <span class="comment">// end specification of example boolean interval tests</span>
<a name="l00083"></a>00083 
<a name="l00084"></a>00084 <span class="keyword">using namespace </span>cxsc;
<a name="l00085"></a>00085 <span class="keyword">using namespace </span>std;
<a name="l00086"></a>00086 
<a name="l00087"></a><a class="code" href="Exr__11__33_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">00087</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>()
<a name="l00088"></a>00088 {
<a name="l00089"></a>00089   <span class="keywordtype">double</span> prec;
<a name="l00090"></a>00090   clock_t start, end;
<a name="l00091"></a>00091 
<a name="l00092"></a>00092   ivector x(2);
<a name="l00093"></a>00093   x[1] = interval(-5.0,5.0);
<a name="l00094"></a>00094   x[2] = interval(-5.0,5.0);
<a name="l00095"></a>00095 
<a name="l00096"></a>00096   <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASubPaving</a> A;
<a name="l00097"></a>00097   A = <span class="keyword">new</span> <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASPnode</a>(x);
<a name="l00098"></a>00098 
<a name="l00099"></a>00099   <span class="comment">// Using SIVIA for set inversion</span>
<a name="l00100"></a>00100   <span class="comment">//find an AIASubPaving characterisation Sc containing the area between </span>
<a name="l00101"></a>00101   <span class="comment">// circles centred on the origin</span>
<a name="l00102"></a>00102   <span class="comment">// with radii 1 and 2 (in 2 dimensional space)</span>
<a name="l00103"></a>00103   cout &lt;&lt; <span class="stringliteral">&quot;Characterization of the set Sc={(x1,x2) | 1 &lt;= x1^2+x2^2 &lt;= 2 }&quot;</span> 
<a name="l00104"></a>00104        &lt;&lt; endl;
<a name="l00105"></a>00105   cout &lt;&lt; <span class="stringliteral">&quot;Enter a precision (between 1 and 0.001): &quot;</span>;
<a name="l00106"></a>00106   cin &gt;&gt; prec;
<a name="l00107"></a>00107 
<a name="l00108"></a>00108   start = clock();
<a name="l00109"></a>00109 
<a name="l00110"></a>00110   <span class="comment">// when we start we give A a box big enough to guarantee to contain </span>
<a name="l00111"></a>00111   <span class="comment">// the characterisation of Sc</span>
<a name="l00112"></a>00112 
<a name="l00113"></a>00113   Sc = <a class="code" href="AIAsubpaving_8cpp.shtml#a9bc7ba1f54979fabaf0f0ffeab245234">Sivia</a>(<a class="code" href="Exm__3__3_8cpp.shtml#ad4bce9ed969316e3fb7c990094be55a7">IBTAnnular</a>,A,prec);
<a name="l00114"></a>00114   end = clock();
<a name="l00115"></a>00115 
<a name="l00116"></a>00116   cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> 
<a name="l00117"></a>00117        &lt;&lt; ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC) &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00118"></a>00118   cout &lt;&lt; <span class="stringliteral">&quot;Volume: &quot;</span> &lt;&lt; <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(Sc) &lt;&lt; endl;
<a name="l00119"></a>00119   cout &lt;&lt; <span class="stringliteral">&quot;Number of leaves: &quot;</span> &lt;&lt; <a class="code" href="AIAsubpaving_8cpp.shtml#a6cc4fba2aef7df53e990c5348f84bd3b">NbLeaves</a>(Sc) &lt;&lt; endl;
<a name="l00120"></a>00120 
<a name="l00121"></a>00121   <span class="comment">// To realize a file output of the AIASubPaving Sc</span>
<a name="l00122"></a>00122                     <span class="comment">// Filename</span>
<a name="l00123"></a>00123   ofstream os(<span class="stringliteral">&quot;AIAannular.txt&quot;</span>);
<a name="l00124"></a>00124   os &lt;&lt; 2 &lt;&lt; endl;  <span class="comment">// Dimension of the AIASubPaving</span>
<a name="l00125"></a>00125                     <span class="comment">// Root box</span>
<a name="l00126"></a>00126   os &lt;&lt; interval(-5.0,5.0) &lt;&lt; <span class="stringliteral">&quot; &quot;</span>
<a name="l00127"></a>00127     &lt;&lt; interval(-5.0,5.0) &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; endl;
<a name="l00128"></a>00128                     <span class="comment">// Precision used</span>
<a name="l00129"></a>00129   os &lt;&lt; <span class="stringliteral">&quot;Precision is &quot;</span> &lt;&lt; prec &lt;&lt; endl;
<a name="l00130"></a>00130   os &lt;&lt; Sc &lt;&lt; endl; <span class="comment">// AIASubPaving itself</span>
<a name="l00131"></a>00131   cout &lt;&lt; <span class="stringliteral">&quot;The output AIASubPaving has been written to AIAannular.txt&quot;</span> 
<a name="l00132"></a>00132        &lt;&lt; endl &lt;&lt; endl;
<a name="l00133"></a>00133 
<a name="l00134"></a>00134   <span class="comment">// end of testing to find reciprocal image</span>
<a name="l00135"></a>00135 
<a name="l00136"></a>00136   <span class="comment">// the AIASubPaving Sc that we have created is the regular AIASubPaving </span>
<a name="l00137"></a>00137   <span class="comment">// that covers the set</span>
<a name="l00138"></a>00138   <span class="comment">// X = {(x1,x2) in R2 | sqr(x1) + sqr(x2) is in [1,2]} </span>
<a name="l00139"></a>00139   <span class="comment">// (remember that it contains this area rather than being this area, </span>
<a name="l00140"></a>00140   <span class="comment">// and that eps has determined how small we go in the AIASubPaving </span>
<a name="l00141"></a>00141   <span class="comment">// characterisation)</span>
<a name="l00142"></a>00142 
<a name="l00143"></a>00143   <span class="comment">// make a new AIASubPaving to provide an initial source box for the test next</span>
<a name="l00144"></a>00144   <span class="keyword">delete</span> A;
<a name="l00145"></a>00145 
<a name="l00146"></a>00146   x[1] = interval(-5.0,5.0);
<a name="l00147"></a>00147   x[2] = interval(-5.0,5.0);
<a name="l00148"></a>00148 
<a name="l00149"></a>00149   A = <span class="keyword">new</span> <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASPnode</a>(x);
<a name="l00150"></a>00150 
<a name="l00151"></a>00151   <span class="comment">// testing using SIVIA to find the direct image of an invertible function</span>
<a name="l00152"></a>00152   <span class="comment">// remember that we are only finding some upper enclosure of the direct </span>
<a name="l00153"></a>00153   <span class="comment">// image really</span>
<a name="l00154"></a>00154   <span class="comment">// Note that this example will use the AIASubPaving Sc we created </span>
<a name="l00155"></a>00155   <span class="comment">// above - see IBTFdirect</span>
<a name="l00156"></a>00156 
<a name="l00157"></a>00157   <span class="comment">// ie create an AIASubPaving Sc1 containing f(Sc), where Sc was found above</span>
<a name="l00158"></a>00158 
<a name="l00159"></a>00159   cout &lt;&lt; <span class="stringliteral">&quot;Characterization of the set Sc1=f(Sc)&quot;</span> &lt;&lt; endl
<a name="l00160"></a>00160     &lt;&lt; <span class="stringliteral">&quot;with f1(x) = 2*x1-x2,&quot;</span> &lt;&lt; endl
<a name="l00161"></a>00161     &lt;&lt; <span class="stringliteral">&quot;      f2(x) = -x1+2*x2,&quot;</span> &lt;&lt; endl;
<a name="l00162"></a>00162   cout &lt;&lt; <span class="stringliteral">&quot;by realizing the inversion of f-1 by Sivia&quot;</span> &lt;&lt; endl;
<a name="l00163"></a>00163   cout &lt;&lt; <span class="stringliteral">&quot;Enter a precision (between 1 and 0.01): &quot;</span>;
<a name="l00164"></a>00164   cin &gt;&gt; prec;
<a name="l00165"></a>00165 
<a name="l00166"></a>00166   start = clock();
<a name="l00167"></a>00167                     <span class="comment">// Sc1 will be used by the following example</span>
<a name="l00168"></a>00168   Sc1 = <a class="code" href="AIAsubpaving_8cpp.shtml#a9bc7ba1f54979fabaf0f0ffeab245234">Sivia</a>(<a class="code" href="Exr__11__33_8cpp.shtml#a20b13850dd9692440454d010da913e98">IBTFdirect</a>,A,prec);
<a name="l00169"></a>00169   end = clock();
<a name="l00170"></a>00170 
<a name="l00171"></a>00171   cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> 
<a name="l00172"></a>00172        &lt;&lt; ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC) &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00173"></a>00173   cout &lt;&lt; <span class="stringliteral">&quot;Volume: &quot;</span> &lt;&lt; <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(Sc1) &lt;&lt; endl;
<a name="l00174"></a>00174   cout &lt;&lt; <span class="stringliteral">&quot;Number of leaves: &quot;</span> &lt;&lt; <a class="code" href="AIAsubpaving_8cpp.shtml#a6cc4fba2aef7df53e990c5348f84bd3b">NbLeaves</a>(Sc1) &lt;&lt; endl;
<a name="l00175"></a>00175 
<a name="l00176"></a>00176   <span class="comment">// To realize a file output of the AIASubPaving Sc1</span>
<a name="l00177"></a>00177                     <span class="comment">// Filename</span>
<a name="l00178"></a>00178   ofstream os1(<span class="stringliteral">&quot;AIAdirect.txt&quot;</span>);
<a name="l00179"></a>00179   os1 &lt;&lt; 2 &lt;&lt; endl; <span class="comment">// Dimension of the AIASubPaving</span>
<a name="l00180"></a>00180                     <span class="comment">// Root box</span>
<a name="l00181"></a>00181   os1 &lt;&lt; interval(-5.0,5.0) &lt;&lt; <span class="stringliteral">&quot; &quot;</span>
<a name="l00182"></a>00182     &lt;&lt; interval(-5.0,5.0) &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; endl;
<a name="l00183"></a>00183                     <span class="comment">// Precision used</span>
<a name="l00184"></a>00184   os1 &lt;&lt; <span class="stringliteral">&quot;Precision is &quot;</span> &lt;&lt; prec &lt;&lt; endl;
<a name="l00185"></a>00185                     <span class="comment">// AIASubPaving itself</span>
<a name="l00186"></a>00186   os1 &lt;&lt; Sc1 &lt;&lt; endl;
<a name="l00187"></a>00187 
<a name="l00188"></a>00188   cout &lt;&lt; <span class="stringliteral">&quot;The output AIASubPaving has been written to AIAdirect.txt&quot;</span> 
<a name="l00189"></a>00189        &lt;&lt; endl &lt;&lt; endl;
<a name="l00190"></a>00190 
<a name="l00191"></a>00191   <span class="comment">// end of example for finding direct image</span>
<a name="l00192"></a>00192 
<a name="l00193"></a>00193   <span class="comment">// get a new AIASubPaving A to provide initial source box for next example</span>
<a name="l00194"></a>00194   <span class="keyword">delete</span> A;
<a name="l00195"></a>00195 
<a name="l00196"></a>00196   x[1] = interval(-5.0,5.0);
<a name="l00197"></a>00197   x[2] = interval(-5.0,5.0);
<a name="l00198"></a>00198 
<a name="l00199"></a>00199   A = <span class="keyword">new</span> <a class="code" href="classAIASPnode.shtml" title="AIASubPaving node class.">AIASPnode</a>(x);
<a name="l00200"></a>00200 
<a name="l00201"></a>00201   <span class="comment">// Image evaluation using set inversion</span>
<a name="l00202"></a>00202   <span class="comment">// this uses the AIASubPaving Sc1 created by the above example</span>
<a name="l00203"></a>00203   <span class="comment">// create an AIASubPaving Sc2 which contains inverse_f(Sc1)</span>
<a name="l00204"></a>00204 
<a name="l00205"></a>00205   cout &lt;&lt; <span class="stringliteral">&quot;Characterization of the set Sc2=f-1(Sc1)&quot;</span> &lt;&lt; endl
<a name="l00206"></a>00206     &lt;&lt; <span class="stringliteral">&quot;with f^-1_1(x) = (2*x1+x2)/3,&quot;</span> &lt;&lt; endl
<a name="l00207"></a>00207     &lt;&lt; <span class="stringliteral">&quot;     f^-1_2(x) = (x1+2*x2)/3,&quot;</span> &lt;&lt; endl;
<a name="l00208"></a>00208   cout &lt;&lt; <span class="stringliteral">&quot;by realizing the inversion of f by Sivia&quot;</span> &lt;&lt; endl;
<a name="l00209"></a>00209   cout &lt;&lt; <span class="stringliteral">&quot;Enter a precision (between 1 and 0.01): &quot;</span>;
<a name="l00210"></a>00210   cin &gt;&gt; prec;
<a name="l00211"></a>00211 
<a name="l00212"></a>00212   start = clock();
<a name="l00213"></a>00213   Sc2 = <a class="code" href="AIAsubpaving_8cpp.shtml#a9bc7ba1f54979fabaf0f0ffeab245234">Sivia</a>(<a class="code" href="Exr__11__33_8cpp.shtml#ad999a60ef78af33c65610c301d3c57dc">IBTFinverse</a>,A,prec);
<a name="l00214"></a>00214   end = clock();
<a name="l00215"></a>00215 
<a name="l00216"></a>00216   cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> 
<a name="l00217"></a>00217        &lt;&lt; ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC) &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00218"></a>00218   cout &lt;&lt; <span class="stringliteral">&quot;Volume: &quot;</span> &lt;&lt; <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(Sc2) &lt;&lt; endl;
<a name="l00219"></a>00219   cout &lt;&lt; <span class="stringliteral">&quot;Number of leaves: &quot;</span> &lt;&lt; <a class="code" href="AIAsubpaving_8cpp.shtml#a6cc4fba2aef7df53e990c5348f84bd3b">NbLeaves</a>(Sc2) &lt;&lt; endl;
<a name="l00220"></a>00220 
<a name="l00221"></a>00221   <span class="comment">// To realize a file output of the AIASubPaving Sc</span>
<a name="l00222"></a>00222                     <span class="comment">// Filename</span>
<a name="l00223"></a>00223   ofstream os2(<span class="stringliteral">&quot;AIAinverse.txt&quot;</span>);
<a name="l00224"></a>00224   os2 &lt;&lt; 2 &lt;&lt; endl; <span class="comment">// Dimension of the AIASubPaving</span>
<a name="l00225"></a>00225                     <span class="comment">// Root box</span>
<a name="l00226"></a>00226   os2 &lt;&lt; interval(-5.0,5.0) &lt;&lt; <span class="stringliteral">&quot; &quot;</span>
<a name="l00227"></a>00227     &lt;&lt; interval(-5.0,5.0) &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; endl;
<a name="l00228"></a>00228                     <span class="comment">// Precision used</span>
<a name="l00229"></a>00229   os2 &lt;&lt; <span class="stringliteral">&quot;Precision is &quot;</span> &lt;&lt; prec &lt;&lt; endl;
<a name="l00230"></a>00230                     <span class="comment">// AIASubPaving itself</span>
<a name="l00231"></a>00231   os2 &lt;&lt; Sc2 &lt;&lt; endl;
<a name="l00232"></a>00232 
<a name="l00233"></a>00233   cout &lt;&lt; <span class="stringliteral">&quot;The output AIASubPaving has been written to AIAinverse.txt&quot;</span> 
<a name="l00234"></a>00234        &lt;&lt; endl &lt;&lt; endl;
<a name="l00235"></a>00235 
<a name="l00236"></a>00236   <span class="comment">// end of testing SIVIA for set inversion</span>
<a name="l00237"></a>00237   <span class="comment">// we should compare Sc2 to Sc in terms of volume and look at the effects of </span>
<a name="l00238"></a>00238   <span class="comment">// the precision variable</span>
<a name="l00239"></a>00239 
<a name="l00240"></a>00240   <span class="keyword">delete</span> A;         <span class="comment">// delete subpavings newed in dyamic memory</span>
<a name="l00241"></a>00241   <span class="keyword">delete</span> <a class="code" href="Exm__3__3_8cpp.shtml#a61a4b8518251e3f73c3e1951e3c733ec">Sc</a>;
<a name="l00242"></a>00242   <span class="keyword">delete</span> <a class="code" href="Exr__11__33_8cpp.shtml#a6f925a28990597524155ac8e7381d5fa">Sc1</a>;
<a name="l00243"></a>00243   <span class="keyword">delete</span> <a class="code" href="Exr__11__33_8cpp.shtml#a16765ea8c433ea86ad0e3ae0e36685c7">Sc2</a>;
<a name="l00244"></a>00244 
<a name="l00245"></a>00245   <span class="keywordflow">return</span> 0;
<a name="l00246"></a>00246 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="Exr__11__33_8cpp.shtml">Exr_11_33.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:12 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
