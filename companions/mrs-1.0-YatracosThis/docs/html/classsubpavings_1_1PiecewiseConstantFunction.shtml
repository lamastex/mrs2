<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: subpavings::PiecewiseConstantFunction Class Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classsubpavings_1_1PiecewiseConstantFunction.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">subpavings::PiecewiseConstantFunction Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="subpavings::PiecewiseConstantFunction" -->
<p>A wrapper or manager for an <a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> tree representing a piecewise constant function.  
 <a href="classsubpavings_1_1PiecewiseConstantFunction.shtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="piecewise__constant__function_8hpp_source.shtml">piecewise_constant_function.hpp</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Collaboration diagram for subpavings::PiecewiseConstantFunction:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><img src="classsubpavings_1_1PiecewiseConstantFunction__coll__graph.png" border="0" usemap="#subpavings_1_1PiecewiseConstantFunction_coll__map" alt="Collaboration graph"/></div>
<map name="subpavings_1_1PiecewiseConstantFunction_coll__map" id="subpavings_1_1PiecewiseConstantFunction_coll__map">
</map>
<center><span class="legend">[<a target="top" href="graph_legend.shtml">legend</a>]</span></center></div>

<p><a href="classsubpavings_1_1PiecewiseConstantFunction-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a5532cf41ae985d1de4601826f6fd33c7">PiecewiseConstantFunction</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">No argument constructor.  <a href="#a5532cf41ae985d1de4601826f6fd33c7"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a4642d25f6dc9d2f4d6f31d9ff81f3741">PiecewiseConstantFunction</a> (const ivector &amp;v, int lab=0)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialised constructor.  <a href="#a4642d25f6dc9d2f4d6f31d9ff81f3741"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#adb90004f77b865413b3c66878422c53a">PiecewiseConstantFunction</a> (const <a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">RealMappedSPnode</a> &amp;rmspn, int lab=0)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialised constructor.  <a href="#adb90004f77b865413b3c66878422c53a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a00b18c179aab77dba47a6a6df9c5684f">PiecewiseConstantFunction</a> (const <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">AdaptiveHistogram</a> &amp;adh)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Initialised constructor.  <a href="#a00b18c179aab77dba47a6a6df9c5684f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a7bfe6205559abfdfe8bce89f7ae90760">PiecewiseConstantFunction</a> (const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;other)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor.  <a href="#a7bfe6205559abfdfe8bce89f7ae90760"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a16194266ecbed94003ea484cb8b70610">~PiecewiseConstantFunction</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#a16194266ecbed94003ea484cb8b70610"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#afb1b70cb3d82858719f489e6cc239115">operator=</a> (<a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> rhs)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy assignment operator.  <a href="#afb1b70cb3d82858719f489e6cc239115"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a50b455741489ca51374faee1dca38d61">getLabel</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the label.  <a href="#a50b455741489ca51374faee1dca38d61"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a7b71fbda0321a5272e92f652119f9aa3">setLabel</a> (int lab)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Set the label.  <a href="#a7b71fbda0321a5272e92f652119f9aa3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">RealMappedSPnode</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad0419b40b47ffa5bb70af1f9cfe86062">getCopySubPaving</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a copy of the subpaving managed by this.  <a href="#ad0419b40b47ffa5bb70af1f9cfe86062"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#afecdfb659b961eab7f8d18160bea7296">hasSubPaving</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get whether this has a subpaving to manage.  <a href="#afecdfb659b961eab7f8d18160bea7296"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a892d2caaed6213ae262f2a0b1dba27b5">hasNegativePiecewiseConstantValues</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get whether the subpaving managed by this has negative range values.  <a href="#a892d2caaed6213ae262f2a0b1dba27b5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a06b96fb88f394c3b65af65e6eff44e7a">hasInfinitePiecewiseConstantValues</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get whether the subpaving managed by this has infinite range values.  <a href="#a06b96fb88f394c3b65af65e6eff44e7a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">cxsc::ivector&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a2ca8259389efd2797732caeeab988b3d">getRootBox</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the box of the subpaving managed by this.  <a href="#a2ca8259389efd2797732caeeab988b3d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a08cecaf3025aeeeea90b26acbe87ce24">getDimensions</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">get the dimensions of the subpaving this manages.  <a href="#a08cecaf3025aeeeea90b26acbe87ce24"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">cxsc::real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a2bc216ff479f7edc61e1ef8619c27214">getDomainVolume</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">get volume of the root box of the subpaving this manages.  <a href="#a2bc216ff479f7edc61e1ef8619c27214"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a938b27618e6805bc57e70ab8f0e6280d">getRootLeaves</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Gets number of leaf nodes in the root paving.  <a href="#a938b27618e6805bc57e70ab8f0e6280d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e">IntVec</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#aad0a7c30389235a8fa0a36fc0a1d2c7a">getLeafLevels</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#aa27d2f72b0d1edcddd73929a69b44dfb">getLeafLevelsString</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a6d0382e5493bd90cb80a823e567cab4f">splitToShape</a> (std::string instruction)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Split this to a specified shape.  <a href="#a6d0382e5493bd90cb80a823e567cab4f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a24005b5dad3a4417de9d6fc68462258f">allocateRanges</a> (const std::vector&lt; cxsc::real &gt; &amp;rangesToAllocate)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Recursively allocate a collection of ranges to this and children.  <a href="#a24005b5dad3a4417de9d6fc68462258f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a95d2cd2a73cf7a3ac06a433a35098179">reshapeToUnion</a> (const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;other)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Change this so that the subpaving it manages is the union of this's subpaving and the subpaving of another PiecewiseConstantFunction.  <a href="#a95d2cd2a73cf7a3ac06a433a35098179"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#adb8c06d489bebfe579823751033b7bcd">makeShapeToUnion</a> (const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;other)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return a PiecewiseConstantFunction that has subpaving that is the union of this's subpaving and the subpaving of another PiecewiseConstantFunction.  <a href="#adb8c06d489bebfe579823751033b7bcd"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">cxsc::real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ade6c94a0c5b7ffc5ec2ca5ab5e9c6375">getTotalIntegral</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the total integral of the piecewise constant function represented by this.  <a href="#ade6c94a0c5b7ffc5ec2ca5ab5e9c6375"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">cxsc::real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a2499c322fa30a4f07d8ad7360a8d7d95">getIAE</a> (const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;pcf) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the total integrated absolute error (IAE) between this and another PiecewiseConstantFunction.  <a href="#a2499c322fa30a4f07d8ad7360a8d7d95"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a13d88986c0752e996fced71cae4e3034">operator+=</a> (const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;rhs)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Addition to self operator.  <a href="#a13d88986c0752e996fced71cae4e3034"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a324236b21b578ef2176a487d10b986b5">operator+</a> (const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;rhs) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Addition operator.  <a href="#a324236b21b578ef2176a487d10b986b5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#afb8037a02dafaab611e4aac28a7326ab">operator+=</a> (const cxsc::real &amp;add)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Self-scalar addition operator.  <a href="#afb8037a02dafaab611e4aac28a7326ab"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a63956842071d1e793d54ddc6cf759970">operator+</a> (const cxsc::real &amp;add) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Scalar addition operator.  <a href="#a63956842071d1e793d54ddc6cf759970"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ae64b7e32740671dd8fb0f0905f958de5">operator-=</a> (const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;rhs)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtraction from self operator.  <a href="#ae64b7e32740671dd8fb0f0905f958de5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a52b02b0ec1773ae11c4d986dd56a69f8">operator-</a> (const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;rhs) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Subtraction operator.  <a href="#a52b02b0ec1773ae11c4d986dd56a69f8"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a83ceb8a2a57cb475b400c8436ef79831">operator-=</a> (const cxsc::real &amp;sub)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Self-scalar subtraction operator.  <a href="#a83ceb8a2a57cb475b400c8436ef79831"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad2c304191876befbd35fac6a07dedd74">operator-</a> (const cxsc::real &amp;sub) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Scalar subtraction operator.  <a href="#ad2c304191876befbd35fac6a07dedd74"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#af353f8623ce62aa2bf7e87942d5e89f7">operator*=</a> (const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;rhs)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplication of self operator.  <a href="#af353f8623ce62aa2bf7e87942d5e89f7"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a64722ca127c5169779463574a35d661d">operator*</a> (const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;rhs) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Multiplication operator.  <a href="#a64722ca127c5169779463574a35d661d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#aa7c90fe41fba228dbe5cbe01878e1d54">operator*=</a> (const cxsc::real &amp;mult)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Self-scalar multiplication operator.  <a href="#aa7c90fe41fba228dbe5cbe01878e1d54"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a2c2c76a16d5ca85d74e00a61502f31d5">operator*</a> (const cxsc::real &amp;mult) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Scalar multiplication operator.  <a href="#a2c2c76a16d5ca85d74e00a61502f31d5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a6167942675f27eaab9a2b858375d9bf9">operator/=</a> (const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;rhs)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Division of self operator.  <a href="#a6167942675f27eaab9a2b858375d9bf9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a3bdc0d055a65d5785c87f77ae30b2512">operator/</a> (const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;rhs) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Division operator.  <a href="#a3bdc0d055a65d5785c87f77ae30b2512"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a43f950b15d9de80ae4e88353f9d63abb">operator/=</a> (const cxsc::real &amp;div)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Self-scalar division operator.  <a href="#a43f950b15d9de80ae4e88353f9d63abb"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ae7f061e72dc60d46956bfa0f6b4f2b4e">operator/</a> (const cxsc::real &amp;div) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Scalar division operator.  <a href="#ae7f061e72dc60d46956bfa0f6b4f2b4e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#aae1c0cd836577f309def9d7a8d9a534a">normalise</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ae18f9fc32df16470d268b2bd70b32e9f">makeNormalised</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a501a9760b607f3275e9ce85eb5cae136">makeMarginal</a> (const std::vector&lt; int &gt; &amp;reqDims) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Make a marginalised version of this.  <a href="#a501a9760b607f3275e9ce85eb5cae136"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a414799df36e8a5aea60b6ae9b3713cf8">makeSlice</a> (const std::vector&lt; int &gt; &amp;sliceDims, const std::vector&lt; cxsc::real &gt; &amp;slicePts) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">cxsc::real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#adb4501feb027c37159cf926195e1cd44">findCoverage</a> (const rvector &amp;pt) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the coverage value for a data point.  <a href="#adb4501feb027c37159cf926195e1cd44"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">cxsc::real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#abf81273304c10947eab9f5523abbd21b">pointwiseExtension</a> (const rvector &amp;pt) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Find the pointwise extension of the piecewise constant function for a given data point.  <a href="#abf81273304c10947eab9f5523abbd21b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">cxsc::real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ac1b7749f4bf0240e24517d87a832dbd7">getL1Distance</a> (const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;other) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a7253ce68ea35a9fb37fd8873ca0c23ef">outputToStreamTabs</a> (std::ostream &amp;os, int prec=5) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Output the subpaving managed by this to a given stream.  <a href="#a7253ce68ea35a9fb37fd8873ca0c23ef"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a779f82e68a07656a602089a25e994748">outputGraphDot</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Make a .dot graph file.  <a href="#a779f82e68a07656a602089a25e994748"></a><br/></td></tr>
<tr><td colspan="2"><div class="groupHeader">Output the nodes constituting coverage region \a cov</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>to a file called <em>covFileName</em>.</p>
<p>The coverage region is the smallest subset of the boxes of the leaf nodes of the subpaving managed by this such that the sum of the "areas" of those leaf boxes is &gt;= cov * total sum of the "areas" of the leaf nodes of the subpaving managed by this.</p>
<p>ie it is the elements of the partition whose integral is at least cov% of the integral of the whole when the elements are chosen in order from "tallest" first downwards.</p>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>This must have a subpaving to manage. </dd>
<dd>
0.0 =&lt; cov &lt;= 1.0. </dd>
<dd>
The subpaving managed by this must have no negative ranges, ie <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a892d2caaed6213ae262f2a0b1dba27b5" title="Get whether the subpaving managed by this has negative range values.">hasNegativePiecewiseConstantValues()</a> = false. </dd>
<dd>
The subpaving managed by this must have no infinite ranges, ie <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a06b96fb88f394c3b65af65e6eff44e7a" title="Get whether the subpaving managed by this has infinite range values.">hasInfinitePiecewiseConstantValues()</a> = false. </dd></dl>
</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a86b60ec6a406396eafd09123c20deedf">outputCoverageRegion</a> (std::ostream &amp;os, cxsc::real cov, int prec) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a213cebe89d7510df1b0e0c3790c9e33a">outputCoverageRegion</a> (std::ostream &amp;os, cxsc::real cov) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a4208d0549a7254c38af194e1953c6cc7">outputCoverageRegion</a> (const std::string &amp;covFileName, cxsc::real cov, int prec, bool confirm=true) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a38e6bded7df5f65184c4fc5a9b3997f8">outputCoverageRegion</a> (const std::string &amp;covFileName, cxsc::real cov, bool confirm=true) const </td></tr>
<tr><td colspan="2"><div class="groupHeader">Simulate some data from this.</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>Data is simulated from this according to a uniform mixture distribution where each leaf box of the subpaving managed by this a component in the mixture with weight equal to contribtuion to the total integral over this. The result should be equivalent to simulating the by, for each data point, choosing a leaf box randomly with probability according to the relative "areas" (value x volume) of the leaves and then randomly selecting a data point within that box (ie uniform probability of selection over the entire box).</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">container</td><td>is a reference to a container for the data. </td></tr>
    <tr><td class="paramname">numberToSimulate</td><td>is the number of data points to simulate. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the reference to <em>container</em>. </dd></dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>This has a subpaving to manage. </dd></dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd><em>container</em> contains any data it had before the operation and then <em>numberToSimulate</em> data points simulated from this. </dd></dl>
</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68">RVecData</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a3fd630a95c48dda0a828bb2229c9d854">simulateData</a> (<a class="el" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68">RVecData</a> &amp;container, size_t numberToSimulate, gsl_rng *r) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Simulator taking a random number generator argument.  <a href="#a3fd630a95c48dda0a828bb2229c9d854"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68">RVecData</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad818b3800904d40fbee121f0bea973b5">simulateData</a> (<a class="el" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68">RVecData</a> &amp;container, size_t numberToSimulate, long unsigned int seed) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Simulator taking a random number generator seed argument.  <a href="#ad818b3800904d40fbee121f0bea973b5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68">RVecData</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#abe41e3bc175dbb124d40e242e2ee6b06">simulateData</a> (<a class="el" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68">RVecData</a> &amp;container, size_t numberToSimulate) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Simulator using default random number generator.  <a href="#abe41e3bc175dbb124d40e242e2ee6b06"></a><br/></td></tr>
<tr><td colspan="2"><div class="groupHeader">Output the subpaving managed by this to a txt file.</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>Format is a tab-delimited file of numeric data starting with nodeName, then the node box volume, then the node counter, then the description of the node box as a tab-delimited list of interval upper and lower bounds.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>the name of the txt file to send output to. </td></tr>
    <tr><td class="paramname">prec</td><td>the precision for output formatting. ie, number of decimal places. </td></tr>
    <tr><td class="paramname">confirm</td><td>is a boolean controlling whether confirmation goes to console output. </td></tr>
  </table>
  </dd>
</dl>
</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad542b85e0f7364a34a6504721d65c1b3">outputToTxtTabs</a> (const std::string &amp;s, int prec=5) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a8080671674947611b47430996d91413a">outputToTxtTabs</a> (const std::string &amp;s, int prec, bool confirm) const </td></tr>
<tr><td colspan="2"><div class="groupHeader">Output details of full sample (from root) to txt file.</div></td></tr>
<tr><td colspan="2"><div class="groupText"><p>Format is a mixture of alpha and numeric data.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>the name of the txt file to send output to. </td></tr>
    <tr><td class="paramname">prec</td><td>the precision for output formatting. ie, number of decimal places. </td></tr>
    <tr><td class="paramname">confirm</td><td>is a boolean controlling whether confirmation goes to console output. </td></tr>
  </table>
  </dd>
</dl>
</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a9e8783522bdfd696bee2403b867c50d3">outputRootToTxt</a> (const std::string &amp;s, int prec=5) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a581599becf533c7fbe4fbccdfb6df4ee">outputRootToTxt</a> (const std::string &amp;s, int prec, bool confirm) const </td></tr>
<tr><td colspan="2"><h2><a name="member-group"></a>
Output all nodes of the subpaving managed by this to</h2></td></tr>
<tr><td class="ititle" colspan="2"><p><a class="anchor" id="amgrpe3da267e02faa91f65dbf8a3d7dd03f3"></a> a given stream.</p>
<p>Format is a tab-delimited data giving details of all nodes.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">os</td><td>is a reference to the stream to output to. </td></tr>
    <tr><td class="paramname">prec</td><td>the precision for output formatting. ie, number of decimal places, defaulting to 5. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>a reference to the given stream. </dd></dl>
</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">RealMappedSPnode</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#aef23daaf4b73237b67ed40985b3038a3">rootPaving</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Pointer to the root node of the subpaving tree.  <a href="#aef23daaf4b73237b67ed40985b3038a3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a622a9d3b705f1c81cd7a5a7b95e8d4c8">label</a></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::ostream &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a94a4166cf5d3a009021be8b43e41f9ed">outputRootToStreamTabs</a> (std::ostream &amp;os, int prec=5) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a411e285d0cc7c8de1f6ac29706ddb2d4">outputLog</a> (const std::string &amp;s, int i, int prec=5) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Append current state of estimator to a txt log file.  <a href="#a411e285d0cc7c8de1f6ac29706ddb2d4"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#abb23fd1b7e0dc5ee81c976c23c1452a0">stringSummary</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get a string summary of this estimator's properties.  <a href="#abb23fd1b7e0dc5ee81c976c23c1452a0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a5b106e9526613ce2a0f81bd4e303b6cf">swap</a> (<a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;pcf)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">RealMappedSPnode</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a88d23ec0f66eef3215b2081cec17815c">getSubPaving</a> () const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a9327e86ac242a9af67266686cc107370">outputLogStart</a> (const std::string &amp;s) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ae3058b35de92dbf4f0606e9a51012373">_normalise</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a893720267a24aa9cf6dbabbcc9e92b4a">_marginalise</a> (const std::vector&lt; int &gt; &amp;reqDims)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">cxsc::real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a00ec6162ad7be5fd75b9f71df9e6010e">_coverage</a> (const rvector &amp;pt) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml#a5fc20ec0cd33f031e874f50251156e65">subpavings::RealMappedSPnode::ConstPtrs</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a739e54236b59b4c1cbe8d5d20f5f4950">findCoverageRegion</a> (<a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml#a5fc20ec0cd33f031e874f50251156e65">subpavings::RealMappedSPnode::ConstPtrs</a> &amp;covNodes, cxsc::real cov) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ac6bc781088b8a8554bc6598f25e75988">handleSPError</a> (<a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">RealMappedSPnode</a> &amp;spn)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a498990673c6fb4821bbfa6e26f3ebc04">constructor_error_handler</a> ()</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a2dfb56b2c05c101ea7a27781e37762ee">checkBox</a> (const cxsc::ivector &amp;box)</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>A wrapper or manager for an <a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> tree representing a piecewise constant function. </p>

<p>Definition at line <a class="el" href="piecewise__constant__function_8hpp_source.shtml#l00044">44</a> of file <a class="el" href="piecewise__constant__function_8hpp_source.shtml">piecewise_constant_function.hpp</a>.</p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a5532cf41ae985d1de4601826f6fd33c7"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::PiecewiseConstantFunction" ref="a5532cf41ae985d1de4601826f6fd33c7" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a5532cf41ae985d1de4601826f6fd33c7">subpavings::PiecewiseConstantFunction::PiecewiseConstantFunction</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [explicit]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>No argument constructor. </p>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>This has no subpaving and label 0. </dd></dl>

</div>
</div>
<a class="anchor" id="a4642d25f6dc9d2f4d6f31d9ff81f3741"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::PiecewiseConstantFunction" ref="a4642d25f6dc9d2f4d6f31d9ff81f3741" args="(const ivector &amp;v, int lab=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a5532cf41ae985d1de4601826f6fd33c7">subpavings::PiecewiseConstantFunction::PiecewiseConstantFunction</a> </td>
          <td>(</td>
          <td class="paramtype">const ivector &amp;&#160;</td>
          <td class="paramname"><em>v</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>lab</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [explicit]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Initialised constructor. </p>
<p>Initialised with domain box and label.</p>
<p>Constructor to be used if piecewise constant function is to be subsequently formed by, for example, splitToShape and allocateRanges.</p>
<p>Throws a <a class="el" href="classsubpavings_1_1MalconstructedBox__Error.shtml">MalconstructedBox_Error</a> if the box is not suitable as the basis of a subpaving (eg, box has no dimensions, or the box has a thin interval on at least one dimension).</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">v</td><td>The box to use for the subpaving to be managed. </td></tr>
    <tr><td class="paramname">lab</td><td>The label for this (defaults to 0). </td></tr>
  </table>
  </dd>
</dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>This has subpaving that consists of single leaf node (the root) with a box like <em>v</em>) and the range on that single node is 0.0. </dd></dl>

</div>
</div>
<a class="anchor" id="adb90004f77b865413b3c66878422c53a"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::PiecewiseConstantFunction" ref="adb90004f77b865413b3c66878422c53a" args="(const RealMappedSPnode &amp;rmspn, int lab=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a5532cf41ae985d1de4601826f6fd33c7">subpavings::PiecewiseConstantFunction::PiecewiseConstantFunction</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">RealMappedSPnode</a> &amp;&#160;</td>
          <td class="paramname"><em>rmspn</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>lab</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Initialised constructor. </p>
<p>Initialised with a subpaving.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">spn</td><td>A subpaving to copy as the subpaving to be managed. </td></tr>
    <tr><td class="paramname">lab</td><td>The label for this (defaults to 0). </td></tr>
  </table>
  </dd>
</dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd><em>rmspn</em> has a box. </dd></dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>The piecewise constant function constructed has label <em>lab</em>, and a subpaving that is a copy of <em>rmspn</em>. </dd></dl>

</div>
</div>
<a class="anchor" id="a00b18c179aab77dba47a6a6df9c5684f"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::PiecewiseConstantFunction" ref="a00b18c179aab77dba47a6a6df9c5684f" args="(const AdaptiveHistogram &amp;adh)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a5532cf41ae985d1de4601826f6fd33c7">subpavings::PiecewiseConstantFunction::PiecewiseConstantFunction</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml">AdaptiveHistogram</a> &amp;&#160;</td>
          <td class="paramname"><em>adh</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Initialised constructor. </p>
<p>Initialised with an <a class="el" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">adh</td><td>A subpaving to copy as the subpaving to be managed. </td></tr>
  </table>
  </dd>
</dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd><em>adh</em> has a subpaving. </dd></dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>The piecewise constant function constructed has a subpaving that is a copy of the subpaving managed by adh and label the same as the label for <em>adh</em>. The value mapped onto each node of this is equal to the count/(volume) of the equivalent node of the subpaving managed by <em>adh</em> <b>after</b> normalising for the total count in the whole histogram, ie the <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ade6c94a0c5b7ffc5ec2ca5ab5e9c6375" title="Get the total integral of the piecewise constant function represented by this.">getTotalIntegral()</a> = 1.0. </dd></dl>

</div>
</div>
<a class="anchor" id="a7bfe6205559abfdfe8bce89f7ae90760"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::PiecewiseConstantFunction" ref="a7bfe6205559abfdfe8bce89f7ae90760" args="(const PiecewiseConstantFunction &amp;other)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a5532cf41ae985d1de4601826f6fd33c7">subpavings::PiecewiseConstantFunction::PiecewiseConstantFunction</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy constructor. </p>

</div>
</div>
<a class="anchor" id="a16194266ecbed94003ea484cb8b70610"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::~PiecewiseConstantFunction" ref="a16194266ecbed94003ea484cb8b70610" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a16194266ecbed94003ea484cb8b70610">subpavings::PiecewiseConstantFunction::~PiecewiseConstantFunction</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Destructor. </p>

</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a00ec6162ad7be5fd75b9f71df9e6010e"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::_coverage" ref="a00ec6162ad7be5fd75b9f71df9e6010e" args="(const rvector &amp;pt) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cxsc::real <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a00ec6162ad7be5fd75b9f71df9e6010e">subpavings::PiecewiseConstantFunction::_coverage</a> </td>
          <td>(</td>
          <td class="paramtype">const rvector &amp;&#160;</td>
          <td class="paramname"><em>pt</em></td><td>)</td>
          <td> const<code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a893720267a24aa9cf6dbabbcc9e92b4a"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::_marginalise" ref="a893720267a24aa9cf6dbabbcc9e92b4a" args="(const std::vector&lt; int &gt; &amp;reqDims)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a893720267a24aa9cf6dbabbcc9e92b4a">subpavings::PiecewiseConstantFunction::_marginalise</a> </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>reqDims</em></td><td>)</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ae3058b35de92dbf4f0606e9a51012373"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::_normalise" ref="ae3058b35de92dbf4f0606e9a51012373" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ae3058b35de92dbf4f0606e9a51012373">subpavings::PiecewiseConstantFunction::_normalise</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a24005b5dad3a4417de9d6fc68462258f"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::allocateRanges" ref="a24005b5dad3a4417de9d6fc68462258f" args="(const std::vector&lt; cxsc::real &gt; &amp;rangesToAllocate)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a24005b5dad3a4417de9d6fc68462258f">subpavings::PiecewiseConstantFunction::allocateRanges</a> </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; cxsc::real &gt; &amp;&#160;</td>
          <td class="paramname"><em>rangesToAllocate</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Recursively allocate a collection of ranges to this and children. </p>
<p>Allocation order is this, left child with remainder of allocation, right child with remainder. </p>

</div>
</div>
<a class="anchor" id="a2dfb56b2c05c101ea7a27781e37762ee"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::checkBox" ref="a2dfb56b2c05c101ea7a27781e37762ee" args="(const cxsc::ivector &amp;box)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">static bool <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a2dfb56b2c05c101ea7a27781e37762ee">subpavings::PiecewiseConstantFunction::checkBox</a> </td>
          <td>(</td>
          <td class="paramtype">const cxsc::ivector &amp;&#160;</td>
          <td class="paramname"><em>box</em></td><td>)</td>
          <td><code> [static, private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a498990673c6fb4821bbfa6e26f3ebc04"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::constructor_error_handler" ref="a498990673c6fb4821bbfa6e26f3ebc04" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a498990673c6fb4821bbfa6e26f3ebc04">subpavings::PiecewiseConstantFunction::constructor_error_handler</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="adb4501feb027c37159cf926195e1cd44"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::findCoverage" ref="adb4501feb027c37159cf926195e1cd44" args="(const rvector &amp;pt) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cxsc::real <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#adb4501feb027c37159cf926195e1cd44">subpavings::PiecewiseConstantFunction::findCoverage</a> </td>
          <td>(</td>
          <td class="paramtype">const rvector &amp;&#160;</td>
          <td class="paramname"><em>pt</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Find the coverage value for a data point. </p>
<p>The coverage value refers to the subpaving managed by this and is 1 - (sum of "area" of all leaf nodes with value &gt; the value of the leaf node whose box contains <em>pt</em>)/ (sum of "area" of all leaf nodes) .</p>
<p>If the point is not in the root box of the subpaving managed by this, coverage = 0.0; If the point is in the box of the node associated with the lowest value in this, coverage = area lowest node / total area; If the point is in the box of the node associated with the highest value in this, coverage = 1.0.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>The coverage value returned will be in the interval [0,1] whether this is normalised or not (ie it is a adjusted if necessary to be a proportion of the total integral).</dd></dl>
<dl class="warning"><dt><b>Warning:</b></dt><dd>Coverage only makes sense for piecewise constant functions with non-negative values associated with all boxes (eg density estimates).</dd></dl>
<p>Throws a <a class="el" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a> if the dimensions of this and <em>pt</em> are not equal.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">pt</td><td>the point to find coverage for </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>coverage for the point given. </dd></dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>This must have a subpaving to manage. </dd>
<dd>
Dimensions of <em>pt</em> and this must match. </dd>
<dd>
<a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a892d2caaed6213ae262f2a0b1dba27b5" title="Get whether the subpaving managed by this has negative range values.">hasNegativePiecewiseConstantValues()</a> = false. </dd>
<dd>
<a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a06b96fb88f394c3b65af65e6eff44e7a" title="Get whether the subpaving managed by this has infinite range values.">hasInfinitePiecewiseConstantValues()</a> = false. </dd></dl>

</div>
</div>
<a class="anchor" id="a739e54236b59b4c1cbe8d5d20f5f4950"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::findCoverageRegion" ref="a739e54236b59b4c1cbe8d5d20f5f4950" args="(subpavings::RealMappedSPnode::ConstPtrs &amp;covNodes, cxsc::real cov) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml#a5fc20ec0cd33f031e874f50251156e65">subpavings::RealMappedSPnode::ConstPtrs</a>&amp; <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a739e54236b59b4c1cbe8d5d20f5f4950">subpavings::PiecewiseConstantFunction::findCoverageRegion</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml#a5fc20ec0cd33f031e874f50251156e65">subpavings::RealMappedSPnode::ConstPtrs</a> &amp;&#160;</td>
          <td class="paramname"><em>covNodes</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cxsc::real&#160;</td>
          <td class="paramname"><em>cov</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ad0419b40b47ffa5bb70af1f9cfe86062"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::getCopySubPaving" ref="ad0419b40b47ffa5bb70af1f9cfe86062" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">RealMappedSPnode</a> <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad0419b40b47ffa5bb70af1f9cfe86062">subpavings::PiecewiseConstantFunction::getCopySubPaving</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get a copy of the subpaving managed by this. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>a copy of the subpaving managed by this. </dd></dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#afecdfb659b961eab7f8d18160bea7296" title="Get whether this has a subpaving to manage.">hasSubPaving()</a> == true. </dd></dl>

<p>Referenced by <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03611">subpavings::AdaptiveHistogram::reshapeToUnion()</a>.</p>

</div>
</div>
<a class="anchor" id="a08cecaf3025aeeeea90b26acbe87ce24"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::getDimensions" ref="a08cecaf3025aeeeea90b26acbe87ce24" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a08cecaf3025aeeeea90b26acbe87ce24">subpavings::PiecewiseConstantFunction::getDimensions</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>get the dimensions of the subpaving this manages. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>0 if this does not have a subpaving, else returns the dimensions of the subpaving. </dd></dl>

</div>
</div>
<a class="anchor" id="a2bc216ff479f7edc61e1ef8619c27214"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::getDomainVolume" ref="a2bc216ff479f7edc61e1ef8619c27214" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cxsc::real <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a2bc216ff479f7edc61e1ef8619c27214">subpavings::PiecewiseConstantFunction::getDomainVolume</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>get volume of the root box of the subpaving this manages. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>volume of the root box of the subpaving this manages, or 0.0 if this has no subpaving. </dd></dl>

</div>
</div>
<a class="anchor" id="a2499c322fa30a4f07d8ad7360a8d7d95"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::getIAE" ref="a2499c322fa30a4f07d8ad7360a8d7d95" args="(const PiecewiseConstantFunction &amp;pcf) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cxsc::real <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a2499c322fa30a4f07d8ad7360a8d7d95">subpavings::PiecewiseConstantFunction::getIAE</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>pcf</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the total integrated absolute error (IAE) between this and another PiecewiseConstantFunction. </p>
<p>The IAE is the total of the absolute value of the differences in the integrals of this and the other PiecewiseConstantFunction <em>pcf</em>.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>that this method does not check that either this or <em>rmsp</em> have the same total integrals nor does it check that either is normalised.</dd></dl>
<p>If any of the values on the leaf nodes of the subpaving managed by this or <em>pcf</em> is Infinity, the value returned will be Infinity.</p>
<p>This method is symmetric, ie getIAE(pcf) == pcf.getIAE(*this).</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">pcf</td><td>the PiecewiseConstantFunction against which to calculate the IAE. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>total absolute area of the difference between function represented by this and function represented by <em>pcf</em>. </dd></dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>this and <em>pcf</em> have the same domain box. </dd>
<dd>
Both this and <em>pcf</em> must have a subpaving to manage. </dd></dl>

<p>Referenced by <a class="el" href="MCMCFunctionSimGaussianQueue_8cpp_source.shtml#l00046">main()</a>.</p>

</div>
</div>
<a class="anchor" id="ac1b7749f4bf0240e24517d87a832dbd7"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::getL1Distance" ref="ac1b7749f4bf0240e24517d87a832dbd7" args="(const PiecewiseConstantFunction &amp;other) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cxsc::real <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ac1b7749f4bf0240e24517d87a832dbd7">subpavings::PiecewiseConstantFunction::getL1Distance</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Gets the L1 distance between this and another PiecewiseConstantFunction.</p>
<p>The L1 distance is defined as the sum of the absolute values of the differences in 'area' represented by this and <em>other</em> over the union of their partitions (leaf nodes in subpaving managed).</p>
<p>Throws the following exceptions: </p>
<ul>
<li>
Throws a NullSubpaving_Error if either this or by <em>other</em> have no subpaving. </li>
<li>
Throws a <a class="el" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a> if the dimensions and sizes of the root boxes of this and <em>other</em> are not the same. </li>
</ul>
<dl class="note"><dt><b>Note:</b></dt><dd>this will not attempt to adjust for any difference in total integral between this and <em>other:</em> the L1 distance is simply taken as the difference between the 'areas' of the leaf boxes.</dd>
<dd>
If this or <em>other</em> manages a subpaving in which there are leaf nodes with infinite value then the L1 distance between them will be infinite (cxsc::Infinity).</dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">other</td><td>the PiecewiseConstantFunction to calculate the L1 distance against. </td></tr>
  </table>
  </dd>
</dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>Both this and <em>other</em> must have subpavings to manage and the root boxes of those subpavings must be the same. </dd></dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>this will be unchanged. </dd></dl>

</div>
</div>
<a class="anchor" id="a50b455741489ca51374faee1dca38d61"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::getLabel" ref="a50b455741489ca51374faee1dca38d61" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a50b455741489ca51374faee1dca38d61">subpavings::PiecewiseConstantFunction::getLabel</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the label. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>the label for this. </dd></dl>

</div>
</div>
<a class="anchor" id="aad0a7c30389235a8fa0a36fc0a1d2c7a"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::getLeafLevels" ref="aad0a7c30389235a8fa0a36fc0a1d2c7a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e">IntVec</a> <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#aad0a7c30389235a8fa0a36fc0a1d2c7a">subpavings::PiecewiseConstantFunction::getLeafLevels</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get a vector of the leaf node levels.</p>
<p>Root is level 0, next level down is 1, etc.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>a vector of leaf levels, left to right order, </dd></dl>

</div>
</div>
<a class="anchor" id="aa27d2f72b0d1edcddd73929a69b44dfb"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::getLeafLevelsString" ref="aa27d2f72b0d1edcddd73929a69b44dfb" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#aa27d2f72b0d1edcddd73929a69b44dfb">subpavings::PiecewiseConstantFunction::getLeafLevelsString</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Get a string of the leaf node levels.</p>
<p>Root is level 0, next level down is 1, etc. Example return string "3,3,2,1"</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>a comma separated string of leaf levels, left to right order </dd></dl>

</div>
</div>
<a class="anchor" id="a2ca8259389efd2797732caeeab988b3d"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::getRootBox" ref="a2ca8259389efd2797732caeeab988b3d" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cxsc::ivector <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a2ca8259389efd2797732caeeab988b3d">subpavings::PiecewiseConstantFunction::getRootBox</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the box of the subpaving managed by this. </p>
<dl class="note"><dt><b>Note:</b></dt><dd>with the present constructors, it is impossible for this to have a subpaving but for the subpaving to have no box.</dd></dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>copy of the box of the subpaving managed by this. </dd></dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#afecdfb659b961eab7f8d18160bea7296" title="Get whether this has a subpaving to manage.">hasSubPaving()</a> == true. </dd></dl>

</div>
</div>
<a class="anchor" id="a938b27618e6805bc57e70ab8f0e6280d"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::getRootLeaves" ref="a938b27618e6805bc57e70ab8f0e6280d" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a938b27618e6805bc57e70ab8f0e6280d">subpavings::PiecewiseConstantFunction::getRootLeaves</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Gets number of leaf nodes in the root paving. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>the total number of leaves in the subpaving managed by this. Returns 0 if this has no subpaving to manage. </dd></dl>

</div>
</div>
<a class="anchor" id="a88d23ec0f66eef3215b2081cec17815c"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::getSubPaving" ref="a88d23ec0f66eef3215b2081cec17815c" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">RealMappedSPnode</a>* <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a88d23ec0f66eef3215b2081cec17815c">subpavings::PiecewiseConstantFunction::getSubPaving</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="ade6c94a0c5b7ffc5ec2ca5ab5e9c6375"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::getTotalIntegral" ref="ade6c94a0c5b7ffc5ec2ca5ab5e9c6375" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cxsc::real <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ade6c94a0c5b7ffc5ec2ca5ab5e9c6375">subpavings::PiecewiseConstantFunction::getTotalIntegral</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the total integral of the piecewise constant function represented by this. </p>
<p>The integral is calculated as the sum over all the leaves of the subpaving managed by this of the absolute value of the real range on the leaf multiplied by the volume of the box represented by the leaf.</p>
<p>If any of the values on the leaf nodes of the subpaving managed by this is Infinity, the value returned will be Infinity.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>total area between function and 0 for the function as represented by this. </dd></dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>This must have a subpaving to manage. </dd></dl>

<p>Referenced by <a class="el" href="HellingerFunctionSimRosen_8cpp_source.shtml#l00116">main()</a>.</p>

</div>
</div>
<a class="anchor" id="ac6bc781088b8a8554bc6598f25e75988"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::handleSPError" ref="ac6bc781088b8a8554bc6598f25e75988" args="(RealMappedSPnode &amp;spn)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ac6bc781088b8a8554bc6598f25e75988">subpavings::PiecewiseConstantFunction::handleSPError</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">RealMappedSPnode</a> &amp;&#160;</td>
          <td class="paramname"><em>spn</em></td><td>)</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a06b96fb88f394c3b65af65e6eff44e7a"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::hasInfinitePiecewiseConstantValues" ref="a06b96fb88f394c3b65af65e6eff44e7a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a06b96fb88f394c3b65af65e6eff44e7a">subpavings::PiecewiseConstantFunction::hasInfinitePiecewiseConstantValues</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get whether the subpaving managed by this has infinite range values. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if the subpaving managed by this has infinite ranges, false otherwise. Returns false if this has no subpaving to manage. </dd></dl>

</div>
</div>
<a class="anchor" id="a892d2caaed6213ae262f2a0b1dba27b5"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::hasNegativePiecewiseConstantValues" ref="a892d2caaed6213ae262f2a0b1dba27b5" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a892d2caaed6213ae262f2a0b1dba27b5">subpavings::PiecewiseConstantFunction::hasNegativePiecewiseConstantValues</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get whether the subpaving managed by this has negative range values. </p>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if the subpaving managed by this has negative ranges, false otherwise. Returns false if this has no subpaving to manage. </dd></dl>

</div>
</div>
<a class="anchor" id="afecdfb659b961eab7f8d18160bea7296"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::hasSubPaving" ref="afecdfb659b961eab7f8d18160bea7296" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#afecdfb659b961eab7f8d18160bea7296">subpavings::PiecewiseConstantFunction::hasSubPaving</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get whether this has a subpaving to manage. </p>
<dl class="note"><dt><b>Note:</b></dt><dd>with the present constructors, it is impossible for this to have a subpaving but for the subpaving to have no box.</dd></dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if this has a subpaving to manage. false otherwise. </dd></dl>

<p>Referenced by <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03611">subpavings::AdaptiveHistogram::reshapeToUnion()</a>.</p>

</div>
</div>
<a class="anchor" id="a501a9760b607f3275e9ce85eb5cae136"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::makeMarginal" ref="a501a9760b607f3275e9ce85eb5cae136" args="(const std::vector&lt; int &gt; &amp;reqDims) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a501a9760b607f3275e9ce85eb5cae136">subpavings::PiecewiseConstantFunction::makeMarginal</a> </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>reqDims</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Make a marginalised version of this. </p>
<p>Marginalises to take out the given dimensions and adjusts the constant values for each node of the subpaving managed by this so that the node vol x node value is the same as before marginalisation, and hence that the overall sum of (node vol x valu3) over all leaf nodes (<a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ade6c94a0c5b7ffc5ec2ca5ab5e9c6375" title="Get the total integral of the piecewise constant function represented by this.">getTotalIntegral()</a>) is the same as before marginalisation.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>allowed dimensions start at 1, ie dimensions to marginalise on can include 1, 2, ... dimensions of this.</dd></dl>
<p>Throws a NullSubpavings_Error if the subpaving that this manages is a NULL pointer.</p>
<p>Throws a <a class="el" href="classsubpavings_1_1NoBox__Error.shtml">NoBox_Error</a> if the subpaving box is empty.</p>
<p>Throws an std::invalid_argument if the required dimensions <em>reqDim</em> is empty or contains dimensions outside the range of the dimensions of this.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">reqDims</td><td>is a vector of the dimensions to include in marginal. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a> managing a subpaving which is the marginalised version of the subpaving managed by this. </dd></dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>This has a subpaving to manage and <em>reqDims</em> must be compatible with current dimensions. </dd></dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>returned estimator will have sum over leaf nodes of (node vol x value) equal to that for this. </dd></dl>

</div>
</div>
<a class="anchor" id="ae18f9fc32df16470d268b2bd70b32e9f"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::makeNormalised" ref="ae18f9fc32df16470d268b2bd70b32e9f" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ae18f9fc32df16470d268b2bd70b32e9f">subpavings::PiecewiseConstantFunction::makeNormalised</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Make a normalised version of this.</p>
<p>Normalises this so that the sum over all the leaf nodes of the subpaving managed by this of the product of the volume of the box represented by the leaf node and the constant function value on that box is 1.0.</p>
<p>Throws a NullSubpavings_Error if the subpaving that this manages is a NULL pointer.</p>
<p>Throws an std::runtime_error if the subpaving managed by this has no 'area', ie <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ade6c94a0c5b7ffc5ec2ca5ab5e9c6375" title="Get the total integral of the piecewise constant function represented by this.">getTotalIntegral()</a> &lt;= 0.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>The normalised version of this. </dd></dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>This has a subpaving to manage and <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ade6c94a0c5b7ffc5ec2ca5ab5e9c6375" title="Get the total integral of the piecewise constant function represented by this.">getTotalIntegral()</a> &gt; 0.0. </dd></dl>

</div>
</div>
<a class="anchor" id="adb8c06d489bebfe579823751033b7bcd"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::makeShapeToUnion" ref="adb8c06d489bebfe579823751033b7bcd" args="(const PiecewiseConstantFunction &amp;other)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#adb8c06d489bebfe579823751033b7bcd">subpavings::PiecewiseConstantFunction::makeShapeToUnion</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return a PiecewiseConstantFunction that has subpaving that is the union of this's subpaving and the subpaving of another PiecewiseConstantFunction. </p>
<p>Throws a NullSubpavings_Error if the subpaving that this manages is a NULL pointer or if the subpaving managed by <em>other</em> is a NULL pointer.</p>
<p>Throws a <a class="el" href="classsubpavings_1_1NoBox__Error.shtml">NoBox_Error</a> if the subpaving of this has no box or if the the subpaving of <em>other</em> has no box.</p>
<p>Throws an <a class="el" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a> if the subpaving boxes of this and <em>other</em> are not identical.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">other</td><td>is the PiecewiseConstantFunction to make the union against. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A PiecewiseConstantFunction that has a subpaving that is the union of the shape of the subpaving managed by this and the shape of the subpaving managed by <em>other</em>. <em>this</em> and other are unchanged. </dd></dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>Both this and <em>other</em> have subpavings with boxes to manage. </dd>
<dd>
The boxes of the subpavings of this and <em>other</em> are the same. </dd></dl>

</div>
</div>
<a class="anchor" id="a414799df36e8a5aea60b6ae9b3713cf8"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::makeSlice" ref="a414799df36e8a5aea60b6ae9b3713cf8" args="(const std::vector&lt; int &gt; &amp;sliceDims, const std::vector&lt; cxsc::real &gt; &amp;slicePts) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a414799df36e8a5aea60b6ae9b3713cf8">subpavings::PiecewiseConstantFunction::makeSlice</a> </td>
          <td>(</td>
          <td class="paramtype">const std::vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>sliceDims</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::vector&lt; cxsc::real &gt; &amp;&#160;</td>
          <td class="paramname"><em>slicePts</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="aae1c0cd836577f309def9d7a8d9a534a"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::normalise" ref="aae1c0cd836577f309def9d7a8d9a534a" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#aae1c0cd836577f309def9d7a8d9a534a">subpavings::PiecewiseConstantFunction::normalise</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>Normalise this.</p>
<p>Normalises this so that the sum over all the leaf nodes of the subpaving managed by this of the product of the volume of the box represented by the leaf node and the constant function value on that box is 1.0.</p>
<p>Throws a NullSubpavings_Error if the subpaving that this manages is a NULL pointer.</p>
<p>Throws an std::runtime_error if the subpaving managed by this has no 'area', ie <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ade6c94a0c5b7ffc5ec2ca5ab5e9c6375" title="Get the total integral of the piecewise constant function represented by this.">getTotalIntegral()</a> &lt;= 0.</p>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>This has a subpaving to manage and <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ade6c94a0c5b7ffc5ec2ca5ab5e9c6375" title="Get the total integral of the piecewise constant function represented by this.">getTotalIntegral()</a> &gt; 0.0. </dd></dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>This has the same subpaving as before the operation and <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ade6c94a0c5b7ffc5ec2ca5ab5e9c6375" title="Get the total integral of the piecewise constant function represented by this.">getTotalIntegral()</a> == 1.0 </dd></dl>

<p>Referenced by <a class="el" href="HellingerFunctionSimRosen_8cpp_source.shtml#l00116">main()</a>.</p>

</div>
</div>
<a class="anchor" id="a64722ca127c5169779463574a35d661d"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::operator*" ref="a64722ca127c5169779463574a35d661d" args="(const PiecewiseConstantFunction &amp;rhs) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> subpavings::PiecewiseConstantFunction::operator* </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Multiplication operator. </p>
<p>Throws a <a class="el" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a> if either this or <em>rhs</em> do not have a subpaving to manage.</p>
<p>Throws an <a class="el" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a> if the root boxes of this and <em>rhs</em> are not identical.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>Note that if this and <em>rhs</em> have the same label the result of the operation will have that label, but if this and <em>rhs</em> do not have the same label, the result will get the default label (0).</dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">rhs</td><td>the object to multiply this by. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A PiecewiseConstantFunction that manages a subpaving that is the non-minimal union of the subpavings managed by this and <em>rhs</em> and the value on each node of that subpaving is the result of multiplying the values on the equivalent nodes of this by the values on the equivalent nodes of <em>rhs</em>. If the labels of this and <em>rhs</em> are the same, the returned object will have the same label as this; otherwise the returned object's label will be the default label (0). </dd></dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>Both this and <em>rhs</em> have subpavings to manage. </dd>
<dd>
This and <em>rhs</em> have identical root boxes. </dd></dl>

</div>
</div>
<a class="anchor" id="a2c2c76a16d5ca85d74e00a61502f31d5"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::operator*" ref="a2c2c76a16d5ca85d74e00a61502f31d5" args="(const cxsc::real &amp;mult) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> subpavings::PiecewiseConstantFunction::operator* </td>
          <td>(</td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname"><em>mult</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Scalar multiplication operator. </p>
<p>Throws a <a class="el" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a> if this does not have a subpaving to manage.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">mult</td><td>the value to multiply this by. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A PiecewiseConstantFunction that manages a subpaving that the same as the subpaving managed by this and the value on each node of that subpaving is the result of multiplying the values on the equivalent nodes of this by <em>mult</em>. The label of this is unchanged. </dd></dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>This has a subpaving to manage. </dd></dl>

</div>
</div>
<a class="anchor" id="af353f8623ce62aa2bf7e87942d5e89f7"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::operator*=" ref="af353f8623ce62aa2bf7e87942d5e89f7" args="(const PiecewiseConstantFunction &amp;rhs)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>&amp; subpavings::PiecewiseConstantFunction::operator*= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Multiplication of self operator. </p>
<p>Throws a <a class="el" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a> if either this or <em>rhs</em> do not have a subpaving to manage.</p>
<p>Throws an <a class="el" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a> if the root boxes of this and <em>rhs</em> are not identical.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">rhs</td><td>the object to multiply this by. </td></tr>
  </table>
  </dd>
</dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>Both this and <em>rhs</em> have subpavings to manage. </dd>
<dd>
This and <em>rhs</em> have identical root boxes. </dd></dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>this manages a subpaving that is the non-minimal union of the subpavings managed by this and <em>rhs</em> and the value on each node of the subpaving is the result of multiplying the values on the equivalent nodes of this by the values on the equivalent nodes of <em>rhs</em> before the operation. The label of this is unchanged. </dd></dl>

</div>
</div>
<a class="anchor" id="aa7c90fe41fba228dbe5cbe01878e1d54"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::operator*=" ref="aa7c90fe41fba228dbe5cbe01878e1d54" args="(const cxsc::real &amp;mult)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>&amp; subpavings::PiecewiseConstantFunction::operator*= </td>
          <td>(</td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname"><em>mult</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Self-scalar multiplication operator. </p>
<p>Throws a <a class="el" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a> if this does not have a subpaving to manage.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">mult</td><td>the value to multiply this by. </td></tr>
  </table>
  </dd>
</dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>This has a subpaving to manage. </dd></dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>this manages a subpaving that is the same as the subpaving managed by this before the operation and the value on each node of the subpaving is the result of multiplying the values on the equivalent nodes of this by <em>mult</em>. The label of this is unchanged. </dd></dl>

</div>
</div>
<a class="anchor" id="a324236b21b578ef2176a487d10b986b5"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::operator+" ref="a324236b21b578ef2176a487d10b986b5" args="(const PiecewiseConstantFunction &amp;rhs) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> subpavings::PiecewiseConstantFunction::operator+ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Addition operator. </p>
<p>Throws a <a class="el" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a> if either this or <em>rhs</em> do not have a subpaving to manage.</p>
<p>Throws an <a class="el" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a> if the root boxes of this and <em>rhs</em> are not identical.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>Note that if this and <em>rhs</em> have the same label the result of the operation will have that label, but if this and <em>rhs</em> do not have the same label, the result will get the default label (0).</dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">rhs</td><td>the object to add to this. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A PiecewiseConstantFunction that manages a subpaving that is the non-minimal union of the subpavings managed by this and <em>rhs</em> and the value on each node of that subpaving is the result of adding the values on the equivalent nodes of this and <em>rhs</em>. If the labels of this and <em>rhs</em> are the same, the returned object will have the same label as this; otherwise the returned object's label will be the default label (0). </dd></dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>Both this and <em>rhs</em> have subpavings to manage. </dd>
<dd>
This and <em>rhs</em> have identical root boxes. </dd></dl>

</div>
</div>
<a class="anchor" id="a63956842071d1e793d54ddc6cf759970"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::operator+" ref="a63956842071d1e793d54ddc6cf759970" args="(const cxsc::real &amp;add) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> subpavings::PiecewiseConstantFunction::operator+ </td>
          <td>(</td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname"><em>add</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Scalar addition operator. </p>
<p>Throws a <a class="el" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a> if this does not have a subpaving to manage.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">add</td><td>the value to add to this. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A PiecewiseConstantFunction that manages a subpaving that the same as the subpaving managed by this and the value on each node of that subpaving is the result of adding <em>add</em> to the values on the equivalent nodes of this. The label of this is unchanged. </dd></dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>This has a subpaving to manage. </dd></dl>

</div>
</div>
<a class="anchor" id="a13d88986c0752e996fced71cae4e3034"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::operator+=" ref="a13d88986c0752e996fced71cae4e3034" args="(const PiecewiseConstantFunction &amp;rhs)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>&amp; subpavings::PiecewiseConstantFunction::operator+= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Addition to self operator. </p>
<p>Throws a <a class="el" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a> if either this or <em>rhs</em> do not have a subpaving to manage.</p>
<p>Throws an <a class="el" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a> if the root boxes of this and <em>rhs</em> are not identical.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">rhs</td><td>the object to add to this. </td></tr>
  </table>
  </dd>
</dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>Both this and <em>rhs</em> have subpavings to manage. </dd>
<dd>
This and <em>rhs</em> have identical root boxes. </dd></dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>this manages a subpaving that is the non-minimal union of the subpavings managed by this and <em>rhs</em> and the value on each node of the subpaving is the result of adding the values on the equivalent nodes of this before the operation and <em>rhs</em>. The label of this is unchanged. </dd></dl>

</div>
</div>
<a class="anchor" id="afb8037a02dafaab611e4aac28a7326ab"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::operator+=" ref="afb8037a02dafaab611e4aac28a7326ab" args="(const cxsc::real &amp;add)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>&amp; subpavings::PiecewiseConstantFunction::operator+= </td>
          <td>(</td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname"><em>add</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Self-scalar addition operator. </p>
<p>Throws a <a class="el" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a> if this does not have a subpaving to manage.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">add</td><td>the value to add to this. </td></tr>
  </table>
  </dd>
</dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>This has a subpaving to manage. </dd></dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>this manages a subpaving that is the same as the subpaving managed by this before the operation and the value on each node of the subpaving is the result of adding <em>add</em> to the values on the equivalent nodes of this. The label of this is unchanged. </dd></dl>

</div>
</div>
<a class="anchor" id="a52b02b0ec1773ae11c4d986dd56a69f8"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::operator&#45;" ref="a52b02b0ec1773ae11c4d986dd56a69f8" args="(const PiecewiseConstantFunction &amp;rhs) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> subpavings::PiecewiseConstantFunction::operator- </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Subtraction operator. </p>
<p>Throws a <a class="el" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a> if either this or <em>rhs</em> do not have a subpaving to manage.</p>
<p>Throws an <a class="el" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a> if the root boxes of this and <em>rhs</em> are not identical.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>Note that if this and <em>rhs</em> have the same label the result of the operation will have that label, but if this and <em>rhs</em> do not have the same label, the result will get the default label (0).</dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">rhs</td><td>the object to subtract from this. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A PiecewiseConstantFunction that manages a subpaving that is the non-minimal union of the subpavings managed by this and <em>rhs</em> and the value on each node of that subpaving is the result of subtracting the values on the equivalent nodes of <em>rhs</em> from the values on the equivalent nodes of this. If the labels of this and <em>rhs</em> are the same, the returned object will have the same label as this; otherwise the returned object's label will be the default label (0). </dd></dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>Both this and <em>rhs</em> have subpavings to manage. </dd>
<dd>
This and <em>rhs</em> have identical root boxes. </dd></dl>

</div>
</div>
<a class="anchor" id="ad2c304191876befbd35fac6a07dedd74"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::operator&#45;" ref="ad2c304191876befbd35fac6a07dedd74" args="(const cxsc::real &amp;sub) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> subpavings::PiecewiseConstantFunction::operator- </td>
          <td>(</td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname"><em>sub</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Scalar subtraction operator. </p>
<p>Throws a <a class="el" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a> if this does not have a subpaving to manage.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">sub</td><td>the value to subtract from this. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A PiecewiseConstantFunction that manages a subpaving that is the same as the subpaving managed by this and the value on each node of that subpaving is the result of subtracting <em>sub</em> from the values on the equivalent nodes of this. The label of this is unchanged. </dd></dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>This has a subpaving to manage. </dd></dl>

</div>
</div>
<a class="anchor" id="ae64b7e32740671dd8fb0f0905f958de5"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::operator&#45;=" ref="ae64b7e32740671dd8fb0f0905f958de5" args="(const PiecewiseConstantFunction &amp;rhs)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>&amp; subpavings::PiecewiseConstantFunction::operator-= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Subtraction from self operator. </p>
<p>Throws a <a class="el" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a> if either this or <em>rhs</em> do not have a subpaving to manage.</p>
<p>Throws an <a class="el" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a> if the root boxes of this and <em>rhs</em> are not identical.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">rhs</td><td>the object to subtract from this. </td></tr>
  </table>
  </dd>
</dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>Both this and <em>rhs</em> have subpavings to manage. </dd>
<dd>
This and <em>rhs</em> have identical root boxes. </dd></dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>this manages a subpaving that is the non-minimal union of the subpavings managed by this and <em>rhs</em> and the value on each node of the subpaving is the result of subtracting the values on the equivalent nodes of <em>rhs</em> from the values on the equivalent nodes of this before the operation. The label of this is unchanged. </dd></dl>

</div>
</div>
<a class="anchor" id="a83ceb8a2a57cb475b400c8436ef79831"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::operator&#45;=" ref="a83ceb8a2a57cb475b400c8436ef79831" args="(const cxsc::real &amp;sub)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>&amp; subpavings::PiecewiseConstantFunction::operator-= </td>
          <td>(</td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname"><em>sub</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Self-scalar subtraction operator. </p>
<p>Throws a <a class="el" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a> if this does not have a subpaving to manage.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">sub</td><td>the value to subtract from this. </td></tr>
  </table>
  </dd>
</dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>This has a subpaving to manage. </dd></dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>this manages a subpaving that is the same as the subpaving managed by this before the operation and the value on each node of the subpaving is the result of subtracting <em>sub</em> from the values on the equivalent nodes of this. The label of this is unchanged. </dd></dl>

</div>
</div>
<a class="anchor" id="a3bdc0d055a65d5785c87f77ae30b2512"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::operator/" ref="a3bdc0d055a65d5785c87f77ae30b2512" args="(const PiecewiseConstantFunction &amp;rhs) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> subpavings::PiecewiseConstantFunction::operator/ </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Division operator. </p>
<p>Throws a <a class="el" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a> if either this or <em>rhs</em> do not have a subpaving to manage.</p>
<p>Throws an <a class="el" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a> if the root boxes of this and <em>rhs</em> are not identical.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>Note that if this and <em>rhs</em> have the same label the result of the operation will have that label, but if this and <em>rhs</em> do not have the same label, the result will get the default label (0).</dd>
<dd>
If any of the nodes of the subpaving managed by <em>rhs</em> have a value of 0.0 on them, then the PiecewiseConstantFunction returned will manage a subpaving that has nodes with infinite values on them (the result of dividing by 0.0).</dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">rhs</td><td>the object to divide this by. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A PiecewiseConstantFunction that manages a subpaving that is the non-minimal union of the subpavings managed by this and <em>rhs</em> and the value on each node of that subpaving is the result of dividing the values on the equivalent nodes of this by the values on the equivalent nodes of <em>rhs</em>. If the labels of this and <em>rhs</em> are the same, the returned object will have the same label as this; otherwise the returned object's label will be the default label (0). </dd></dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>Both this and <em>rhs</em> have subpavings to manage. </dd>
<dd>
This and <em>rhs</em> have identical root boxes. </dd></dl>

</div>
</div>
<a class="anchor" id="ae7f061e72dc60d46956bfa0f6b4f2b4e"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::operator/" ref="ae7f061e72dc60d46956bfa0f6b4f2b4e" args="(const cxsc::real &amp;div) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> subpavings::PiecewiseConstantFunction::operator/ </td>
          <td>(</td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname"><em>div</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Scalar division operator. </p>
<p>Throws a <a class="el" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a> if this does not have a subpaving to manage.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">div</td><td>the value to multiply this by. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>A PiecewiseConstantFunction that manages a subpaving that the same as the subpaving managed by this and the value on each node of that subpaving is the result of dividing the values on the equivalent nodes of this by <em>div</em>. The label of this is unchanged. </dd></dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>This has a subpaving to manage. </dd>
<dd>
<em>div</em> != 0.0. </dd></dl>

</div>
</div>
<a class="anchor" id="a6167942675f27eaab9a2b858375d9bf9"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::operator/=" ref="a6167942675f27eaab9a2b858375d9bf9" args="(const PiecewiseConstantFunction &amp;rhs)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>&amp; subpavings::PiecewiseConstantFunction::operator/= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Division of self operator. </p>
<p>Throws a <a class="el" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a> if either this or <em>rhs</em> do not have a subpaving to manage.</p>
<p>Throws an <a class="el" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a> if the root boxes of this and <em>rhs</em> are not identical.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>If any of the nodes of the subpaving managed by <em>rhs</em> have a value of 0.0 on them, then after the division this will have nodes with infinite values on them (the result of dividing by 0.0).</dd></dl>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">rhs</td><td>the object to divide this by. </td></tr>
  </table>
  </dd>
</dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>Both this and <em>rhs</em> have subpavings to manage. </dd>
<dd>
This and <em>rhs</em> have identical root boxes. </dd></dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>this manages a subpaving that is the non-minimal union of the subpavings managed by this and <em>rhs</em> and the value on each node of the subpaving is the result of dividing the values on the equivalent nodes of this by the values on the equivalent nodes of <em>rhs</em> before the operation. The label of this is unchanged. </dd></dl>

</div>
</div>
<a class="anchor" id="a43f950b15d9de80ae4e88353f9d63abb"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::operator/=" ref="a43f950b15d9de80ae4e88353f9d63abb" args="(const cxsc::real &amp;div)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>&amp; subpavings::PiecewiseConstantFunction::operator/= </td>
          <td>(</td>
          <td class="paramtype">const cxsc::real &amp;&#160;</td>
          <td class="paramname"><em>div</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Self-scalar division operator. </p>
<p>Throws a <a class="el" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a> if this does not have a subpaving to manage.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">div</td><td>the value to divide this by. </td></tr>
  </table>
  </dd>
</dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>This has a subpaving to manage. </dd>
<dd>
<em>div</em> != 0.0. </dd></dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>this manages a subpaving that is the same as the subpaving managed by this before the operation and the value on each node of the subpaving is the result of dividing the values on the equivalent nodes of this by <em>div</em>. The label of this is unchanged. </dd></dl>

</div>
</div>
<a class="anchor" id="afb1b70cb3d82858719f489e6cc239115"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::operator=" ref="afb1b70cb3d82858719f489e6cc239115" args="(PiecewiseConstantFunction rhs)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>&amp; subpavings::PiecewiseConstantFunction::operator= </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy assignment operator. </p>

</div>
</div>
<a class="anchor" id="a86b60ec6a406396eafd09123c20deedf"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::outputCoverageRegion" ref="a86b60ec6a406396eafd09123c20deedf" args="(std::ostream &amp;os, cxsc::real cov, int prec) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a86b60ec6a406396eafd09123c20deedf">subpavings::PiecewiseConstantFunction::outputCoverageRegion</a> </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cxsc::real&#160;</td>
          <td class="paramname"><em>cov</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>prec</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a213cebe89d7510df1b0e0c3790c9e33a"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::outputCoverageRegion" ref="a213cebe89d7510df1b0e0c3790c9e33a" args="(std::ostream &amp;os, cxsc::real cov) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a86b60ec6a406396eafd09123c20deedf">subpavings::PiecewiseConstantFunction::outputCoverageRegion</a> </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cxsc::real&#160;</td>
          <td class="paramname"><em>cov</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a4208d0549a7254c38af194e1953c6cc7"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::outputCoverageRegion" ref="a4208d0549a7254c38af194e1953c6cc7" args="(const std::string &amp;covFileName, cxsc::real cov, int prec, bool confirm=true) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a86b60ec6a406396eafd09123c20deedf">subpavings::PiecewiseConstantFunction::outputCoverageRegion</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>covFileName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cxsc::real&#160;</td>
          <td class="paramname"><em>cov</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>prec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>confirm</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a38e6bded7df5f65184c4fc5a9b3997f8"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::outputCoverageRegion" ref="a38e6bded7df5f65184c4fc5a9b3997f8" args="(const std::string &amp;covFileName, cxsc::real cov, bool confirm=true) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a86b60ec6a406396eafd09123c20deedf">subpavings::PiecewiseConstantFunction::outputCoverageRegion</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>covFileName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">cxsc::real&#160;</td>
          <td class="paramname"><em>cov</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>confirm</em> = <code>true</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a779f82e68a07656a602089a25e994748"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::outputGraphDot" ref="a779f82e68a07656a602089a25e994748" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a779f82e68a07656a602089a25e994748">subpavings::PiecewiseConstantFunction::outputGraphDot</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Make a .dot graph file. </p>
<p>Makes a simple .dot graph from the piecewise constant function using node names and also makes the .png image for this graph.</p>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>a .dot file and a .png in the same directory as the program creating it was run in. </dd></dl>

</div>
</div>
<a class="anchor" id="a411e285d0cc7c8de1f6ac29706ddb2d4"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::outputLog" ref="a411e285d0cc7c8de1f6ac29706ddb2d4" args="(const std::string &amp;s, int i, int prec=5) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a411e285d0cc7c8de1f6ac29706ddb2d4">subpavings::PiecewiseConstantFunction::outputLog</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>i</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>prec</em> = <code>5</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Append current state of estimator to a txt log file. </p>
<p>Format is a tab-delimited file of numeric data. Output includes node contributions to unscaled EMP under COPERR and AIC and the changes in EMP that would result from splitting the node.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">s</td><td>the name of the txt file to send output to. </td></tr>
    <tr><td class="paramname">i</td><td>the number of pass (ie, 0, 1, 2, 3 etc) in process. </td></tr>
    <tr><td class="paramname">prec</td><td>the precision for output formatting. ie, number of decimal places. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="a9327e86ac242a9af67266686cc107370"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::outputLogStart" ref="a9327e86ac242a9af67266686cc107370" args="(const std::string &amp;s) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a9327e86ac242a9af67266686cc107370">subpavings::PiecewiseConstantFunction::outputLogStart</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em></td><td>)</td>
          <td> const<code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a94a4166cf5d3a009021be8b43e41f9ed"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::outputRootToStreamTabs" ref="a94a4166cf5d3a009021be8b43e41f9ed" args="(std::ostream &amp;os, int prec=5) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a94a4166cf5d3a009021be8b43e41f9ed">subpavings::PiecewiseConstantFunction::outputRootToStreamTabs</a> </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>prec</em> = <code>5</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a9e8783522bdfd696bee2403b867c50d3"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::outputRootToTxt" ref="a9e8783522bdfd696bee2403b867c50d3" args="(const std::string &amp;s, int prec=5) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a9e8783522bdfd696bee2403b867c50d3">subpavings::PiecewiseConstantFunction::outputRootToTxt</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>prec</em> = <code>5</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a581599becf533c7fbe4fbccdfb6df4ee"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::outputRootToTxt" ref="a581599becf533c7fbe4fbccdfb6df4ee" args="(const std::string &amp;s, int prec, bool confirm) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a9e8783522bdfd696bee2403b867c50d3">subpavings::PiecewiseConstantFunction::outputRootToTxt</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>prec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>confirm</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="a7253ce68ea35a9fb37fd8873ca0c23ef"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::outputToStreamTabs" ref="a7253ce68ea35a9fb37fd8873ca0c23ef" args="(std::ostream &amp;os, int prec=5) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::ostream&amp; <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a7253ce68ea35a9fb37fd8873ca0c23ef">subpavings::PiecewiseConstantFunction::outputToStreamTabs</a> </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>os</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>prec</em> = <code>5</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Output the subpaving managed by this to a given stream. </p>
<p>Format is a tab-delimited data giving details of leaf nodes.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">os</td><td>is a reference to the stream to output the histogramm to. </td></tr>
    <tr><td class="paramname">prec</td><td>the precision for output formatting. ie, number of decimal places. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>a reference to the given stream. </dd></dl>

</div>
</div>
<a class="anchor" id="ad542b85e0f7364a34a6504721d65c1b3"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::outputToTxtTabs" ref="ad542b85e0f7364a34a6504721d65c1b3" args="(const std::string &amp;s, int prec=5) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad542b85e0f7364a34a6504721d65c1b3">subpavings::PiecewiseConstantFunction::outputToTxtTabs</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>prec</em> = <code>5</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Referenced by <a class="el" href="HellingerFunctionSimRosen_8cpp_source.shtml#l00116">main()</a>.</p>

</div>
</div>
<a class="anchor" id="a8080671674947611b47430996d91413a"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::outputToTxtTabs" ref="a8080671674947611b47430996d91413a" args="(const std::string &amp;s, int prec, bool confirm) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad542b85e0f7364a34a6504721d65c1b3">subpavings::PiecewiseConstantFunction::outputToTxtTabs</a> </td>
          <td>(</td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>s</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>prec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>confirm</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<a class="anchor" id="abf81273304c10947eab9f5523abbd21b"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::pointwiseExtension" ref="abf81273304c10947eab9f5523abbd21b" args="(const rvector &amp;pt) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">cxsc::real <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#abf81273304c10947eab9f5523abbd21b">subpavings::PiecewiseConstantFunction::pointwiseExtension</a> </td>
          <td>(</td>
          <td class="paramtype">const rvector &amp;&#160;</td>
          <td class="paramname"><em>pt</em></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Find the pointwise extension of the piecewise constant function for a given data point. </p>
<p>The pointwise extension is the value associated with the leaf node of the subpaving managed by this that has the box containing <em>pt</em>.</p>
<dl class="note"><dt><b>Note:</b></dt><dd>the pointwise extension is not adjusted if this is not normalised (<a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ade6c94a0c5b7ffc5ec2ca5ab5e9c6375" title="Get the total integral of the piecewise constant function represented by this.">getTotalIntegral()</a> != 1.0): it is just the value associated with the leaf node containing <em>pt</em> no matter what the total integral of the function over the domain is.</dd></dl>
<p>If the point is not in the rootbox of the subpaving managed by this at all, the pointwise extension is 0; Throws a <a class="el" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a> if the dimensions of this and <em>pt</em> are not equal.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">pt</td><td>the point to find empirical density for. </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>the empirical density at the point. </dd></dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>This must have a subpaving to manage. </dd>
<dd>
Dimensions of <em>pt</em> and this must match. </dd></dl>

</div>
</div>
<a class="anchor" id="a95d2cd2a73cf7a3ac06a433a35098179"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::reshapeToUnion" ref="a95d2cd2a73cf7a3ac06a433a35098179" args="(const PiecewiseConstantFunction &amp;other)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a95d2cd2a73cf7a3ac06a433a35098179">subpavings::PiecewiseConstantFunction::reshapeToUnion</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Change this so that the subpaving it manages is the union of this's subpaving and the subpaving of another PiecewiseConstantFunction. </p>
<p>Throws a NullSubpavings_Error if the subpaving that this manages is a NULL pointer or if the subpaving managed by <em>other</em> is a NULL pointer.</p>
<p>Throws a <a class="el" href="classsubpavings_1_1NoBox__Error.shtml">NoBox_Error</a> if the subpaving of this has no box or if the subpaving of <em>other</em> has no box.</p>
<p>Throws an <a class="el" href="classsubpavings_1_1IncompatibleDimensions__Error.shtml">IncompatibleDimensions_Error</a> if the subpaving boxes of this and <em>other</em> are not identical.</p>
<p>There will be no change in this if the subpaving of  is everywhere less split than the subpaving of this.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">other</td><td>is the PiecewiseConstantFunction to make the union against. </td></tr>
  </table>
  </dd>
</dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd>Both this and <em>other</em> have subpavings with boxes to manage. </dd>
<dd>
The boxes of the subpavings of this and <em>other</em> are the same. </dd></dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>the subpaving managed by this has the shape that is the union of its shape before the operation and the shape of the subpaving managed by <em>other</em>. <em>other</em> is unchanged. </dd></dl>

</div>
</div>
<a class="anchor" id="a7b71fbda0321a5272e92f652119f9aa3"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::setLabel" ref="a7b71fbda0321a5272e92f652119f9aa3" args="(int lab)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a7b71fbda0321a5272e92f652119f9aa3">subpavings::PiecewiseConstantFunction::setLabel</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>lab</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Set the label. </p>

</div>
</div>
<a class="anchor" id="a3fd630a95c48dda0a828bb2229c9d854"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::simulateData" ref="a3fd630a95c48dda0a828bb2229c9d854" args="(RVecData &amp;container, size_t numberToSimulate, gsl_rng *r) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68">RVecData</a>&amp; <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a3fd630a95c48dda0a828bb2229c9d854">subpavings::PiecewiseConstantFunction::simulateData</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68">RVecData</a> &amp;&#160;</td>
          <td class="paramname"><em>container</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>numberToSimulate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">gsl_rng *&#160;</td>
          <td class="paramname"><em>r</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Simulator taking a random number generator argument. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">r</td><td>is a random number generator to use for the simulation. </td></tr>
  </table>
  </dd>
</dl>

<p>Referenced by <a class="el" href="HellingerFunctionSimRosen_8cpp_source.shtml#l00116">main()</a>.</p>

</div>
</div>
<a class="anchor" id="ad818b3800904d40fbee121f0bea973b5"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::simulateData" ref="ad818b3800904d40fbee121f0bea973b5" args="(RVecData &amp;container, size_t numberToSimulate, long unsigned int seed) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68">RVecData</a>&amp; <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a3fd630a95c48dda0a828bb2229c9d854">subpavings::PiecewiseConstantFunction::simulateData</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68">RVecData</a> &amp;&#160;</td>
          <td class="paramname"><em>container</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>numberToSimulate</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">long unsigned int&#160;</td>
          <td class="paramname"><em>seed</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Simulator taking a random number generator seed argument. </p>
<p>Simulation uses the gsl_rng_mt19937 generator and seed <em>seed</em>.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">seed</td><td>is a random number generator seed to use for the simulation. </td></tr>
  </table>
  </dd>
</dl>

</div>
</div>
<a class="anchor" id="abe41e3bc175dbb124d40e242e2ee6b06"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::simulateData" ref="abe41e3bc175dbb124d40e242e2ee6b06" args="(RVecData &amp;container, size_t numberToSimulate) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68">RVecData</a>&amp; <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a3fd630a95c48dda0a828bb2229c9d854">subpavings::PiecewiseConstantFunction::simulateData</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68">RVecData</a> &amp;&#160;</td>
          <td class="paramname"><em>container</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t&#160;</td>
          <td class="paramname"><em>numberToSimulate</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Simulator using default random number generator. </p>
<p>Simulation uses the gsl_rng_mt19937 generator and seed = 1234. </p>

</div>
</div>
<a class="anchor" id="a6d0382e5493bd90cb80a823e567cab4f"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::splitToShape" ref="a6d0382e5493bd90cb80a823e567cab4f" args="(std::string instruction)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a6d0382e5493bd90cb80a823e567cab4f">subpavings::PiecewiseConstantFunction::splitToShape</a> </td>
          <td>(</td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>instruction</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Split this to a specified shape. </p>
<dl class="note"><dt><b>Note:</b></dt><dd>that ranges for each node in the revised shape will have to be set explicitly, using <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a24005b5dad3a4417de9d6fc68462258f" title="Recursively allocate a collection of ranges to this and children.">allocateRanges()</a>.</dd></dl>
<p>Throws a NullSubpavings_Error if the subpaving that this manages is a NULL pointer.</p>
<p>Throws a <a class="el" href="classsubpavings_1_1NoBox__Error.shtml">NoBox_Error</a> if the subpaving box is empty.</p>
<p>Prints a message to the standard error output if the instruction could not be carried out.</p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">instruction</td><td>specifies the required shape, eg "3, 3, 2, 1" </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>true if the split was successful, false otherwise </dd></dl>
<dl class="pre"><dt><b>Precondition:</b></dt><dd><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#afecdfb659b961eab7f8d18160bea7296" title="Get whether this has a subpaving to manage.">hasSubPaving()</a> == true. </dd></dl>
<dl class="post"><dt><b>Postcondition:</b></dt><dd>this has subpaving with shape specified by <em>instruction</em> and the function value mapped to each node in the subpaving is the same as the value mapped to the root box before the operation. </dd></dl>

</div>
</div>
<a class="anchor" id="abb23fd1b7e0dc5ee81c976c23c1452a0"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::stringSummary" ref="abb23fd1b7e0dc5ee81c976c23c1452a0" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">std::string <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#abb23fd1b7e0dc5ee81c976c23c1452a0">subpavings::PiecewiseConstantFunction::stringSummary</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get a string summary of this estimator's properties. </p>
<p>A string description of this. Includes the address of the subpaving managed but not details of that subpaving.</p>
<dl class="return"><dt><b>Returns:</b></dt><dd>the string summary. </dd></dl>

</div>
</div>
<a class="anchor" id="a5b106e9526613ce2a0f81bd4e303b6cf"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::swap" ref="a5b106e9526613ce2a0f81bd4e303b6cf" args="(PiecewiseConstantFunction &amp;pcf)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a5b106e9526613ce2a0f81bd4e303b6cf">subpavings::PiecewiseConstantFunction::swap</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a> &amp;&#160;</td>
          <td class="paramname"><em>pcf</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="a622a9d3b705f1c81cd7a5a7b95e8d4c8"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::label" ref="a622a9d3b705f1c81cd7a5a7b95e8d4c8" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a622a9d3b705f1c81cd7a5a7b95e8d4c8">subpavings::PiecewiseConstantFunction::label</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">
<p>The label. </p>

<p>Definition at line <a class="el" href="piecewise__constant__function_8hpp_source.shtml#l01039">1039</a> of file <a class="el" href="piecewise__constant__function_8hpp_source.shtml">piecewise_constant_function.hpp</a>.</p>

</div>
</div>
<a class="anchor" id="aef23daaf4b73237b67ed40985b3038a3"></a><!-- doxytag: member="subpavings::PiecewiseConstantFunction::rootPaving" ref="aef23daaf4b73237b67ed40985b3038a3" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">RealMappedSPnode</a>* <a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#aef23daaf4b73237b67ed40985b3038a3">subpavings::PiecewiseConstantFunction::rootPaving</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Pointer to the root node of the subpaving tree. </p>

<p>Definition at line <a class="el" href="piecewise__constant__function_8hpp_source.shtml#l01035">1035</a> of file <a class="el" href="piecewise__constant__function_8hpp_source.shtml">piecewise_constant_function.hpp</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="piecewise__constant__function_8hpp_source.shtml">piecewise_constant_function.hpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="namespacesubpavings.shtml">subpavings</a>      </li>
      <li class="navelem"><a class="el" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">PiecewiseConstantFunction</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:40 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
