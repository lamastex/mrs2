<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MappedSPSamplingTest.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MappedSPSamplingTest_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#define-members">Defines</a> &#124;
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">MappedSPSamplingTest.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>MappedSPnode example for Gaussian objects main.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &quot;<a class="el" href="RosenFobj2D_8hpp_source.shtml">RosenFobj2D.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="RosenFobj10D_8hpp_source.shtml">RosenFobj10D.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="GaussianFobj1D_8hpp_source.shtml">GaussianFobj1D.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="GaussianFobj2D_8hpp_source.shtml">GaussianFobj2D.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="GaussianFobj9D_8hpp_source.shtml">GaussianFobj9D.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="GaussianFobj10D_8hpp_source.shtml">GaussianFobj10D.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="GaussianFobj100D_8hpp_source.shtml">GaussianFobj100D.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="mappedspnode_8hpp_source.shtml">mappedspnode.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="realmappedspnode_8hpp_source.shtml">realmappedspnode.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="mappedspnodevisitor__expand_8hpp_source.shtml">mappedspnodevisitor_expand.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;dataprep.hpp&quot;</code><br/>
<code>#include &quot;<a class="el" href="MCMCGRtools_8hpp_source.shtml">MCMCGRtools.hpp</a>&quot;</code><br/>
<code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &lt;cassert&gt;</code><br/>
<code>#include &lt;stdexcept&gt;</code><br/>
<code>#include &lt;functional&gt;</code><br/>
<code>#include &lt;algorithm&gt;</code><br/>
<code>#include &lt;gsl/gsl_randist.h&gt;</code><br/>
<code>#include &lt;valarray&gt;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="auto__tools_8hpp_source.shtml">auto_tools.hpp</a>&quot;</code><br/>
</div>
<p><a href="MappedSPSamplingTest_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">class &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLexicoSorting.shtml">LexicoSorting&lt; T &gt;</a></td></tr>
<tr><td colspan="2"><h2><a name="define-members"></a>
Defines</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">#define&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MappedSPSamplingTest_8cpp.shtml#a38cc676e6c9f06e021b17e537b7bba1d">MYDEBUG</a></td></tr>
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MappedSPSamplingTest_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a> (string &amp;filename, const <a class="el" href="classsubpavings_1_1SPnode.shtml">SPnode</a> &amp;node)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MappedSPSamplingTest_8cpp.shtml#a2ebd3788007a04909c0805d18f7cc302">getAllWeights</a> (<a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">RealMappedSPnode</a> *thisNodePtr, vector&lt; double &gt; &amp;WeightsVector, vector&lt; interval &gt; &amp;WeightsInt)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MappedSPSamplingTest_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a> (<a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">RealMappedSPnode</a> *thisNodePtr, vector&lt; ivector &gt; &amp;BoxVector, vector&lt; real &gt; &amp;HeightsVector)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MappedSPSamplingTest_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a> (<a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">RealMappedSPnode</a> *thisNodePtr, double totalArea, vector&lt; <a class="el" href="classsubpavings_1_1RangeCollectionClass.shtml">RangeCollectionClass</a>&lt; real &gt; &gt; &amp;heightNorm)</td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="MappedSPSamplingTest_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>MappedSPnode example for Gaussian objects main. </p>

<p>Definition in file <a class="el" href="MappedSPSamplingTest_8cpp_source.shtml">MappedSPSamplingTest.cpp</a>.</p>
</div><hr/><h2>Define Documentation</h2>
<a class="anchor" id="a38cc676e6c9f06e021b17e537b7bba1d"></a><!-- doxytag: member="MappedSPSamplingTest.cpp::MYDEBUG" ref="a38cc676e6c9f06e021b17e537b7bba1d" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">#define <a class="el" href="MCMCGRSimsUniform_8cpp.shtml#a38cc676e6c9f06e021b17e537b7bba1d">MYDEBUG</a></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedSPSamplingTest_8cpp_source.shtml#l00041">41</a> of file <a class="el" href="MappedSPSamplingTest_8cpp_source.shtml">MappedSPSamplingTest.cpp</a>.</p>

</div>
</div>
<hr/><h2>Function Documentation</h2>
<a class="anchor" id="a2ebd3788007a04909c0805d18f7cc302"></a><!-- doxytag: member="MappedSPSamplingTest.cpp::getAllWeights" ref="a2ebd3788007a04909c0805d18f7cc302" args="(RealMappedSPnode *thisNodePtr, vector&lt; double &gt; &amp;WeightsVector, vector&lt; interval &gt; &amp;WeightsInt)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="MappedSPSamplingTest_8cpp.shtml#a2ebd3788007a04909c0805d18f7cc302">getAllWeights</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">RealMappedSPnode</a> *&#160;</td>
          <td class="paramname"><em>thisNodePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; double &gt; &amp;&#160;</td>
          <td class="paramname"><em>WeightsVector</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; interval &gt; &amp;&#160;</td>
          <td class="paramname"><em>WeightsInt</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedSPSamplingTest_8cpp_source.shtml#l00084">84</a> of file <a class="el" href="MappedSPSamplingTest_8cpp_source.shtml">MappedSPSamplingTest.cpp</a>.</p>

<p>References <a class="el" href="MappedFiniteMixtureLeafCounts_8cpp_source.shtml#l00077">getAllWeights()</a>, <a class="el" href="realmappedspnode_8cpp_source.shtml#l00217">subpavings::RealMappedSPnode::getLeftChild()</a>, <a class="el" href="realmappedspnode_8cpp_source.shtml#l00223">subpavings::RealMappedSPnode::getRightChild()</a>, <a class="el" href="rangecollection_8hpp_source.shtml#l00339">subpavings::RangeCollectionClass&lt; T &gt;::getWeights()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00483">subpavings::SPnode::hasLCwithBox()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00487">subpavings::SPnode::hasRCwithBox()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00475">subpavings::SPnode::isEmpty()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00479">subpavings::SPnode::isLeaf()</a>, and <a class="el" href="spnode_8cpp_source.shtml#l00437">subpavings::SPnode::nodeVolume()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (!(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
     <span class="comment">//get the weights</span>
     <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> myContainer;
     myContainer = thisNodePtr-&gt;getRangeCollection();
     myContainer.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a6173b655063220537c3630f1347cfdd5">getWeights</a>(WeightsVector, WeightsInt, thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>());
  }

  <span class="comment">//recurse on the children</span>
  <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>(), WeightsVector, WeightsInt);
  }
   <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>(), WeightsVector, WeightsInt);
   }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a071c6769f9c807ff0719ce7470b94a86"></a><!-- doxytag: member="MappedSPSamplingTest.cpp::getHeightAndBox" ref="a071c6769f9c807ff0719ce7470b94a86" args="(RealMappedSPnode *thisNodePtr, vector&lt; ivector &gt; &amp;BoxVector, vector&lt; real &gt; &amp;HeightsVector)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="MappedSPSamplingTest_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">RealMappedSPnode</a> *&#160;</td>
          <td class="paramname"><em>thisNodePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; ivector &gt; &amp;&#160;</td>
          <td class="paramname"><em>BoxVector</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; real &gt; &amp;&#160;</td>
          <td class="paramname"><em>HeightsVector</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedSPSamplingTest_8cpp_source.shtml#l00104">104</a> of file <a class="el" href="MappedSPSamplingTest_8cpp_source.shtml">MappedSPSamplingTest.cpp</a>.</p>

<p>References <a class="el" href="spnode_8cpp_source.shtml#l00387">subpavings::SPnode::getBox()</a>, <a class="el" href="rangecollection_8hpp_source.shtml#l00366">subpavings::RangeCollectionClass&lt; T &gt;::getHeight()</a>, <a class="el" href="MappedFiniteMixtureLeafCounts_8cpp_source.shtml#l00096">getHeightAndBox()</a>, <a class="el" href="realmappedspnode_8cpp_source.shtml#l00217">subpavings::RealMappedSPnode::getLeftChild()</a>, <a class="el" href="realmappedspnode_8cpp_source.shtml#l00223">subpavings::RealMappedSPnode::getRightChild()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00483">subpavings::SPnode::hasLCwithBox()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00487">subpavings::SPnode::hasRCwithBox()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00475">subpavings::SPnode::isEmpty()</a>, and <a class="el" href="spnode_8cpp_source.shtml#l00479">subpavings::SPnode::isLeaf()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (!(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) &amp;&amp; thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) { <span class="comment">// this is a non-empty leaf</span>
     <span class="comment">//push back this box into the BoxVector</span>
     BoxVector.push_back(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>());
     
     <span class="comment">//get the heights</span>
     <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> myContainer;
     myContainer = thisNodePtr-&gt;getRangeCollection();
     myContainer.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a14b0dd04add88d021dc3a67a3a1c8656">getHeight</a>(HeightsVector);
  }
  <span class="comment">//recurse on the children</span>
  <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>(), BoxVector, HeightsVector);
  }
   <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>(), BoxVector, HeightsVector);
   }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="MappedSPSamplingTest.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedSPSamplingTest_8cpp_source.shtml#l00147">147</a> of file <a class="el" href="MappedSPSamplingTest_8cpp_source.shtml">MappedSPSamplingTest.cpp</a>.</p>

<p>References <a class="el" href="mappedspnode_8hpp_source.shtml#l00299">subpavings::MappedSPnode&lt; T &gt;::allocateRanges()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00116">DrawUnifBox()</a>, <a class="el" href="MappedFiniteMixtureLeafCounts_8cpp_source.shtml#l00077">getAllWeights()</a>, <a class="el" href="MappedFiniteMixtureLeafCounts_8cpp_source.shtml#l00096">getHeightAndBox()</a>, <a class="el" href="MappedFiniteMixtureLeafCounts_8cpp_source.shtml#l00118">normHeights()</a>, <a class="el" href="Ex1D_8cpp_source.shtml#l00021">output()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l00815">taylor::pow()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">//========user-defined parameters====================//</span>
  <span class="keywordtype">size_t</span> n=atoi(argv[1]);  <span class="comment">// number of datapoints to generate for each histogram</span>
  <span class="keywordtype">int</span> d = atoi(argv[2]); <span class="comment">// dimensions</span>
  <span class="keywordtype">size_t</span> numHist = atoi(argv[3]); <span class="comment">// number of repetitions for simulation purposes</span>
  
  <span class="comment">//  for generating samples from MappedSPnode </span>
  <span class="comment">// ensure max leaves is &lt; 1E6 or something reasonable</span>
  <span class="keywordtype">size_t</span> maxLeaves = atoi(argv[4]);
  
  <span class="comment">// for the MCMC run</span>
  <span class="keywordtype">int</span> maxLoops = atoi(argv[5]); <span class="comment">// maximum changes of state from initial state to try</span>
  <span class="keywordtype">int</span> samplesNeeded = atoi(argv[6]); <span class="comment">// how many samples do we want (ie once chains have burned in)</span>
  <span class="keywordtype">int</span> thinout = atoi(argv[7]); <span class="comment">// sample every thinout state, ie thinout-1 states between samples</span>
  
  real tolerance = atof(argv[8]);
  cxsc::real tol(tolerance); <span class="comment">//tolerance for automated burn in criteria</span>
  
  <span class="keywordtype">size_t</span> minPoints = atoi(argv[9]); 

  <span class="keywordtype">int</span> dataSeed = atoi(argv[10]);
  
  <span class="keywordtype">double</span> maxLeaf = atof(argv[11]);
  
  <span class="comment">// should really do more checks on parameters, but just check thinout here</span>
  <span class="keywordflow">if</span> (thinout &lt; 1 ) {
    <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;Invalid thinout argument&quot;</span>);
  }

  <span class="comment">// use the cxsc manipulators for changing printing of cxsc::reals to console</span>
  <span class="keywordtype">int</span> prec = 15;
  cout &lt;&lt; cxsc::SaveOpt;
  cout &lt;&lt; cxsc::Variable;
  cout &lt;&lt; cxsc::SetPrecision(prec+2, prec);

  <span class="comment">//string formatting</span>
  ofstream oss;         <span class="comment">// ofstream object</span>
   oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
   oss.precision(10);

  <span class="comment">//=========set up to estimate the function==============================// </span>
  <span class="comment">// Function object</span>
<span class="comment">//  GaussianFobj1D realF;</span>
<span class="comment">//  GaussianFobj2D realF;</span>
   <a class="code" href="classGaussianFobj9D.shtml">GaussianFobj9D</a> realF;
<span class="comment">//   GaussianFobj10D realF;</span>
  <span class="comment">//RosenFobj2D realF;</span>
  <span class="comment">//RosenFobj10D realF;</span>

  <span class="comment">//make a root box</span>
  ivector pavingBox(d);
<span class="comment">//  interval pavingInterval(-3,3);</span>
<span class="comment">//  interval pavingInterval(-10,10);</span>
  interval pavingInterval(-6.5,7.5);
  <span class="keywordflow">for</span>(<span class="keywordtype">int</span> k=1; k &lt;= d; k++) pavingBox[k] = pavingInterval;
  
   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> nodeEst(pavingBox); <span class="comment">// make a MappedSPnode object</span>
    <span class="comment">// estimate the function</span>
   <a class="code" href="classsubpavings_1_1MappedSPnodeVisitorExpand.shtml">MappedSPnodeVisitorExpand</a> expander(realF, 0);
   
   vector&lt;real&gt; epsVec;
   
   <span class="comment">//RealMappedSPnode nodeEst1(pavingBox);</span>
   <span class="comment">//nodeEst1.accept(expander);</span>
   
   nodeEst.priorityAccept(expander, maxLeaves, epsVec);

  <span class="keywordtype">string</span> avgL1FileName = <span class="stringliteral">&quot;Eps&quot;</span>;
  avgL1FileName += <span class="stringliteral">&quot;.txt&quot;</span>;
  oss.open(avgL1FileName.c_str());
    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; epsVec.size(); i++) { 
      <span class="comment">//cout &lt;&lt; epsVec[i] &lt;&lt; endl;</span>
      oss &lt;&lt; epsVec[i] &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
    }
    oss &lt;&lt; flush;
    oss.close();

   cout &lt;&lt; <span class="stringliteral">&quot;Estimate function has &quot;</span> &lt;&lt; nodeEst.getNumLeaves() &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
   
   <span class="comment">//RealMappedSPnode nodeEst1;</span>
   <span class="comment">//nodeEst1 = nodeEst;</span>
   
   <span class="comment">//RealMappedSPnode diff = nodeEst1 - nodeEst;</span>
   
   <span class="comment">//output to .txt  </span>
  <span class="comment">//tring thefilename = &quot;Est.txt&quot;;</span>
  <span class="comment">//utput(thefilename, nodeEst);</span>

  <span class="comment">//=======================================================================//</span>
  
  <span class="comment">//==================Get the weights of the boxes=========================//</span>
   cout &lt;&lt; <span class="stringliteral">&quot;Getting boxes and weights:&quot;</span> &lt;&lt; endl;
    vector&lt;ivector&gt; BoxVector;
   vector&lt;real&gt; HeightsVector;
   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* nodePtr;
   nodePtr = &amp;nodeEst;
   vector&lt;double&gt;* WeightsVectorPtr;
   WeightsVectorPtr = <span class="keyword">new</span> vector&lt;double&gt;;
   vector&lt;interval&gt;* WeightsIntPtr;
   WeightsIntPtr = <span class="keyword">new</span> vector&lt;interval&gt;;
   
   <span class="comment">// iterate through the leaf nodes to get boxes and heights and weights</span>
   <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#a071c6769f9c807ff0719ce7470b94a86">getHeightAndBox</a>(nodePtr, BoxVector, HeightsVector);
   <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#ad413fb4b470884bbd346547f10dd5b67">getAllWeights</a>(nodePtr, *WeightsVectorPtr, *WeightsIntPtr);
   
   <span class="comment">//now put elements of WeightsVector into an array of doubles</span>
   <span class="keywordtype">size_t</span> sizeWeight =(*WeightsVectorPtr).size();
   <span class="comment">//check that number of boxes &lt; 10^6</span>
   <span class="keywordflow">if</span> (sizeWeight &gt; <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(10,7)) { 
      cerr &lt;&lt; <span class="stringliteral">&quot;Too many boxes (&quot;</span> &lt;&lt; sizeWeight &lt;&lt; <span class="stringliteral">&quot;).&quot;</span> &lt;&lt; endl;
      exit(1);
   }

  <span class="comment">// normalize using heights</span>
  interval areaInt = interval(0);
   <span class="comment">//normalize the heights so that the function integrates to 1</span>
   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; sizeWeight; i++) {
    areaInt = areaInt + (*WeightsIntPtr)[i];
    
    <span class="comment">//cout &lt;&lt; (*WeightsVectorPtr)[i] &lt;&lt; &quot;\t&quot; &lt;&lt; (*WeightsIntPtr)[i] &lt;&lt; endl;</span>
   }
  cout &lt;&lt; <span class="stringliteral">&quot;Total area: &quot;</span> &lt;&lt; mid(areaInt) &lt;&lt; endl; 
   
   <span class="keywordtype">double</span> totalArea = _double(mid(areaInt));
   
   <span class="comment">// very important - normalize the heights in nodeEst</span>
   vector&lt; RangeCollectionClass&lt;real&gt; &gt;* heightNorm = <span class="keyword">new</span> vector&lt; RangeCollectionClass&lt;real&gt; &gt;;
   <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(nodePtr, totalArea, *heightNorm);
   nodeEst.allocateRanges(*heightNorm, 0);
   <span class="keywordtype">string</span> filename = <span class="stringliteral">&quot;EstFunctionAfterNormalized.txt&quot;</span>;
   <a class="code" href="Ex1D_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a>(filename, nodeEst);
   
   <span class="comment">//need to check that the weights equal to 1</span>
   <span class="keywordtype">double</span> densityCheck = 0.0;
    <span class="comment">//convert vector to array</span>
   <span class="keywordtype">double</span> WeightsArray[sizeWeight];
   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; sizeWeight; i++) {
      WeightsArray[i] = (*WeightsVectorPtr)[i];
      densityCheck += (*WeightsVectorPtr)[i]/totalArea;
   }
   
  cout &lt;&lt; <span class="stringliteral">&quot;Total area after normalizing: &quot;</span> &lt;&lt; densityCheck &lt;&lt; endl;
  <span class="comment">/*</span>
<span class="comment">  if ( (densityCheck != 1.0) ) {</span>
<span class="comment">    cout &lt;&lt; densityCheck &lt;&lt; endl; </span>
<span class="comment">    cerr &lt;&lt; &quot;Function does not integrate to 1. Need to normalize.&quot; &lt;&lt; endl; </span>
<span class="comment">    exit(0); </span>
<span class="comment">  }</span>
<span class="comment">  */</span>
  
   <span class="comment">//return to the system the memory that was pointed to by WeightsVectorPtr</span>
   <span class="comment">// and heightNorm</span>
   <span class="keyword">delete</span> WeightsVectorPtr;
   <span class="keyword">delete</span> heightNorm;
   
    <span class="comment">//now get the lookup table returned from gsl_ran_discrete_preproc</span>
   <span class="comment">//i.e. the box indices with their weights</span>
   gsl_ran_discrete_t* gslpdfstruct;
   gslpdfstruct = gsl_ran_discrete_preproc(sizeWeight, WeightsArray);
   <span class="comment">//===================end of getting box weights=======================//</span>

  <span class="comment">//===========preliminaries before simulations========================//</span>
  <span class="comment">// set up a random number generator to draw from weighted boxes</span>
  <span class="keyword">const</span> gsl_rng_type * T;
  gsl_rng * r;

  <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
  gsl_rng_env_setup();
  T = gsl_rng_default;
  r = gsl_rng_alloc (T);
  <span class="comment">// set a seed for the data</span>
  
  <span class="comment">//===========end of setting up preliminaries=======================//</span>

  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k = 1; k &lt;= numHist; k++) {
    cout &lt;&lt; <span class="stringliteral">&quot;Data set &quot;</span> &lt;&lt; k &lt;&lt; endl; 
    dataSeed = k; 
  
    gsl_rng_set(r, dataSeed);

  <span class="comment">//-------------generate data--------------------------------------//</span>
  <span class="comment">//now sample n data points from boxes given by the proposed indices</span>
  cout &lt;&lt; <span class="stringliteral">&quot;Sample data points using weighted boxes:&quot;</span> &lt;&lt; endl;
  <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   <span class="comment">// a container for all the points generated</span>
  <span class="comment">// make a simulated data set</span>
  <span class="comment">// data sampled as weighted-uniform-mixtures</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; n; i++) {
    rvector thisrv(d);
    <span class="keywordtype">size_t</span> proposedIndex = gsl_ran_discrete(r, gslpdfstruct);
    <span class="comment">//int proposed_index = static_cast&lt;int&gt;(gsl_ran_discrete(r, gslpdfstruct));</span>
    thisrv = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a>(r, BoxVector[proposedIndex]);
    <span class="comment">// put points generated into container</span>
    theData.push_back(thisrv);
  }  <span class="comment">// data  should be in theData</span>
  
  cout &lt;&lt; (theData).size() &lt;&lt; <span class="stringliteral">&quot; points generated&quot;</span> &lt;&lt; endl;
  
  <span class="keywordtype">string</span> dataFileName = <span class="stringliteral">&quot;MappedData&quot;</span>;
  ostringstream stm;
  stm &lt;&lt; dataSeed;
  dataFileName += stm.str(); 
  dataFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
  
  oss.open(dataFileName.c_str());
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; n; i++) { 
    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 1; j &lt;= d; j++) {
      <span class="comment">//cout &lt;&lt; (theData)[i][j] &lt;&lt; &quot;\t&quot;; </span>
      oss &lt;&lt; (theData)[i][j] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
    }
    oss &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
    <span class="comment">//cout &lt;&lt; &quot;\n&quot;;</span>
  }
  oss &lt;&lt; flush;
  oss.close();
  
  cout &lt;&lt; <span class="stringliteral">&quot;Mapped data written to  &quot;</span> &lt;&lt; dataFileName &lt;&lt; endl;

  <span class="comment">//=================generate Gaussian data========================</span>

  cout &lt;&lt; <span class="stringliteral">&quot;Generating Gaussian data: &quot;</span> &lt;&lt; endl;
  
  <span class="keyword">const</span> gsl_rng_type * T1;
  gsl_rng * r1;
  gsl_rng_env_setup();
  T1 = gsl_rng_default;
  r1 = gsl_rng_alloc (T1);
  gsl_rng_set(r1, dataSeed);

  <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> actualData;
  
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; n; i++) {
    rvector thisrv(d);
    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 1; j &lt;= d; j++) {
      <span class="keywordtype">double</span> z = gsl_ran_gaussian(r1, 1.0); <span class="comment">// generate a normal r.v.</span>
      thisrv[j] = _real(z);
    }
    <span class="comment">//cout &lt;&lt; thisrv &lt;&lt; endl;</span>
    actualData.push_back(thisrv);
  }

  cout &lt;&lt; (actualData).size() &lt;&lt; <span class="stringliteral">&quot; points generated&quot;</span> &lt;&lt; endl;
  
  dataFileName = <span class="stringliteral">&quot;ActualData&quot;</span>;
  dataFileName += stm.str(); 
  dataFileName += <span class="stringliteral">&quot;.txt&quot;</span>; 
  oss.open(dataFileName.c_str());
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; n; i++) { 
    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 1; j &lt;= d; j++) {
        <span class="comment">//cout &lt;&lt; (actualData)[i][j] &lt;&lt; &quot;\t&quot;;</span>
        oss &lt;&lt; (actualData)[i][j] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
    }
    oss &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
    <span class="comment">//cout &lt;&lt; &quot;\n&quot;;</span>
  }
  oss &lt;&lt; flush;
  oss.close();

  cout &lt;&lt; <span class="stringliteral">&quot;Actual data written to  &quot;</span> &lt;&lt; dataFileName &lt;&lt; endl;
  
  }
  
  gsl_rng_free(r);
  <span class="comment">//gsl_rng_free(r1);</span>
  gsl_ran_discrete_free (gslpdfstruct);
  
  <span class="keywordflow">return</span>(0);
  
} <span class="comment">// end of MCMC test program</span>
</pre></div>
</div>
</div>
<a class="anchor" id="aaccdd027128215abfb51d30ca3bfc190"></a><!-- doxytag: member="MappedSPSamplingTest.cpp::normHeights" ref="aaccdd027128215abfb51d30ca3bfc190" args="(RealMappedSPnode *thisNodePtr, double totalArea, vector&lt; RangeCollectionClass&lt; real &gt; &gt; &amp;heightNorm)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="MappedSPSamplingTest_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classsubpavings_1_1RealMappedSPnode.shtml">RealMappedSPnode</a> *&#160;</td>
          <td class="paramname"><em>thisNodePtr</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">double&#160;</td>
          <td class="paramname"><em>totalArea</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">vector&lt; <a class="el" href="classsubpavings_1_1RangeCollectionClass.shtml">RangeCollectionClass</a>&lt; real &gt; &gt; &amp;&#160;</td>
          <td class="paramname"><em>heightNorm</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedSPSamplingTest_8cpp_source.shtml#l00126">126</a> of file <a class="el" href="MappedSPSamplingTest_8cpp_source.shtml">MappedSPSamplingTest.cpp</a>.</p>

<p>References <a class="el" href="realmappedspnode_8cpp_source.shtml#l00217">subpavings::RealMappedSPnode::getLeftChild()</a>, <a class="el" href="realmappedspnode_8cpp_source.shtml#l00223">subpavings::RealMappedSPnode::getRightChild()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00483">subpavings::SPnode::hasLCwithBox()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00487">subpavings::SPnode::hasRCwithBox()</a>, <a class="el" href="spnode_8cpp_source.shtml#l00475">subpavings::SPnode::isEmpty()</a>, <a class="el" href="MappedFiniteMixtureLeafCounts_8cpp_source.shtml#l00118">normHeights()</a>, and <a class="el" href="rangecollection_8hpp_source.shtml#l00426">subpavings::RangeCollectionClass&lt; T &gt;::normNodeHeight()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordflow">if</span> (!(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a42410c54c2a5cc045ec63b26fb6ae593" title="Check if this SPnode is empty.">isEmpty</a>()) ) { <span class="comment">// this is non-empty</span>
     <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> myContainer;
     myContainer = thisNodePtr-&gt;getRangeCollection();
     real newHeight = myContainer.<a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml#a4a8632e2e2f9f9743256c7dbaa7a7529">normNodeHeight</a>(totalArea);
     
     <a class="code" href="classsubpavings_1_1RangeCollectionClass.shtml" title="A class for range collection objects.">RangeCollectionClass&lt;real&gt;</a> height(newHeight);
    heightNorm.push_back(height);
  }
  <span class="comment">//recurse on the children</span>
  <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a91a9483f923c30474b817c26ec8afbad" title="Check if this has a non-empty left child.">hasLCwithBox</a>()) {
    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a71ad37450934fcd212d1c13c9f8830d4" title="Accessor for the left child of a node.">getLeftChild</a>(), totalArea, heightNorm);
  }
   <span class="keywordflow">if</span> (thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8127bcccc0023f632307c22f685196aa" title="Check if this has a non-empty right child.">hasRCwithBox</a>()) {
    <a class="code" href="MappedFiniteMixtureLeafCounts_8cpp.shtml#aaccdd027128215abfb51d30ca3bfc190">normHeights</a>(thisNodePtr-&gt;<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a19cb07beb697f0f8613a63c0b476ddd9" title="Accessor for the right child of a node.">getRightChild</a>(), totalArea, heightNorm);
   }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a91337b8216794ab4371528e4d8f07aa2"></a><!-- doxytag: member="MappedSPSamplingTest.cpp::output" ref="a91337b8216794ab4371528e4d8f07aa2" args="(string &amp;filename, const SPnode &amp;node)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="MappedSPSamplingTest_8cpp.shtml#a91337b8216794ab4371528e4d8f07aa2">output</a> </td>
          <td>(</td>
          <td class="paramtype">string &amp;&#160;</td>
          <td class="paramname"><em>filename</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1SPnode.shtml">SPnode</a> &amp;&#160;</td>
          <td class="paramname"><em>node</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedSPSamplingTest_8cpp_source.shtml#l00067">67</a> of file <a class="el" href="MappedSPSamplingTest_8cpp_source.shtml">MappedSPSamplingTest.cpp</a>.</p>

<p>References <a class="el" href="spnode_8cpp_source.shtml#l00923">subpavings::SPnode::leavesOutputTabs()</a>.</p>
<div class="fragment"><pre class="fragment">{
   <span class="comment">// To generate a file output</span>
   ofstream os(filename.c_str());         <span class="comment">// Filename, c-string version</span>
   <span class="keywordflow">if</span> (os.is_open()) {
      node.<a class="code" href="classsubpavings_1_1SPnode.shtml#a3663133a2c9f0fce79f3f551c1d163de">leavesOutputTabs</a>(os); <span class="comment">// the output</span>
      std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the estimated function&quot;</span>
               &lt;&lt; <span class="stringliteral">&quot; has been written to &quot;</span> &lt;&lt; filename &lt;&lt; std::endl &lt;&lt; std::endl;
         os.close();
      }
   <span class="keywordflow">else</span> {
      std::cerr &lt;&lt; <span class="stringliteral">&quot;Error: could not open file named &quot;</span>
         &lt;&lt; filename &lt;&lt; std::endl &lt;&lt; std::endl;
   }
}
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MappedSPSamplingTest_8cpp.shtml">MappedSPSamplingTest.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:21 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
