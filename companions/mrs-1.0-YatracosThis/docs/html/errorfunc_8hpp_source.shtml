<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: errorfunc.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('errorfunc_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">errorfunc.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="errorfunc_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">* Copyright (C) 2011 Gloria Teng</span>
<a name="l00005"></a>00005 <span class="comment">*</span>
<a name="l00006"></a>00006 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00007"></a>00007 <span class="comment">*</span>
<a name="l00008"></a>00008 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00009"></a>00009 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00010"></a>00010 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00011"></a>00011 <span class="comment">* your option) any later version.</span>
<a name="l00012"></a>00012 <span class="comment">*</span>
<a name="l00013"></a>00013 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment">* General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">*</span>
<a name="l00018"></a>00018 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00020"></a>00020 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00021"></a>00021 <span class="comment">*/</span>
<a name="l00022"></a>00022 
<a name="l00027"></a>00027 <span class="preprocessor">#ifndef ___ERRORFUNC_HPP__</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span><span class="preprocessor">#define ___ERRORFUNC_HPP__</span>
<a name="l00029"></a>00029 <span class="preprocessor"></span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="sptypes_8hpp.shtml" title="Includes and general typedefs for subpavings.">sptypes.hpp</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="adaptivehistogram_8hpp.shtml" title="AdaptiveHistogram declarations.">adaptivehistogram.hpp</a>&quot;</span>
<a name="l00032"></a>00032 <span class="comment">//#include &quot;adaptivehistogramvalidation.hpp&quot;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;gsl/gsl_rng.h&gt;</span>        <span class="comment">// to know about the gsl random number generator</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span>    <span class="comment">// we need these libraries to get the IAE for</span>
<a name="l00035"></a>00035                       <span class="comment">// finite mixtures</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;gsl/gsl_cdf.h&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;gsl/gsl_integration.h&gt;</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="preprocessor">#include &quot;../examples/StatsSubPav/ExactInt/Int.h&quot;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &quot;../examples/StatsSubPav/ExactInt/dim2taylor.hpp&quot;</span>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="preprocessor">#include &quot;<a class="code" href="intervalw_8h.shtml">intervalw.h</a>&quot;</span> <span class="comment">//for interval routines</span>
<a name="l00043"></a>00043 <span class="preprocessor">#include &quot;<a class="code" href="ia__ad_8h.shtml">ia_ad.h</a>&quot;</span> <span class="comment">//for interval routines</span>
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="itaylor_8h.shtml">itaylor.h</a>&quot;</span> <span class="comment">//for taylor integration routine</span>
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 <span class="keyword">using namespace </span>subpavings;
<a name="l00050"></a>00050 <span class="keyword">using namespace </span>cxsc;
<a name="l00051"></a>00051 
<a name="l00053"></a><a class="code" href="errorfunc_8hpp.shtml#ac90353a98ada0c22146b3ea9f0ac7a4d">00053</a> <span class="keyword">typedef</span> <a class="code" href="classtaylor_1_1dim2taylor.shtml">taylor::dim2taylor</a> <a class="code" href="errorfunc_8hpp.shtml#ac90353a98ada0c22146b3ea9f0ac7a4d" title="Declarations of typedef taylor. This is used for 2D integrations.">d2t</a>;
<a name="l00054"></a><a class="code" href="errorfunc_8hpp.shtml#a40f7b267e7bca7091a0d4b941ebe3495">00054</a> <span class="keyword">typedef</span> <a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">taylor::dim2taylor_vector</a> <a class="code" href="errorfunc_8hpp.shtml#a40f7b267e7bca7091a0d4b941ebe3495">d2tv</a>;
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="keyword">namespace </span>subpavings {
<a name="l00057"></a>00057 
<a name="l00059"></a>00059 <span class="keyword">class </span><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>;
<a name="l00060"></a>00060 <span class="keyword">class </span><a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a>;
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 } <span class="comment">// end of namespace subpavings</span>
<a name="l00063"></a>00063 
<a name="l00068"></a>00068 <a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a> <a class="code" href="errorfunc_8cpp.shtml#abd72fe76528917561a4e1a7fdf7890d9" title="IAE for the bivariate gaussian.">BiGOP</a> (<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">d2tv</a> X, interval fhat); 
<a name="l00070"></a>00070 
<a name="l00075"></a>00075 <a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a> <a class="code" href="errorfunc_8cpp.shtml#a72f3aaf218533dc785d09b0dffacbad7" title="IAE for the Levy 2D.">LevyOP</a> (<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">d2tv</a> X, interval fhat);
<a name="l00077"></a>00077 
<a name="l00082"></a>00082 <a class="code" href="classtaylor_1_1dim2taylor.shtml">d2t</a> <a class="code" href="errorfunc_8cpp.shtml#a77af86554abcee2e013b9d8631ed4c5f" title="IAE for a Rosenbrock 2D.">RosenOP</a> (<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">d2tv</a> X, interval fhat); 
<a name="l00084"></a>00084 
<a name="l00085"></a>00085 
<a name="l00086"></a>00086 
<a name="l00089"></a>00089 <span class="comment">//check if Jenny already has code for this </span>
<a name="l00090"></a>00090 <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a64a6fd302dffeebb366383e265ea20f6" title="Get the mean of the data (this is used when building the regular histogram)">myMean</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec);
<a name="l00093"></a>00093 <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a674756d3d6aae91356b22688a849bd0f" title="get the standard deviation of the data (this is used when building the regular histogram)">myStd</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec);
<a name="l00102"></a>00102 std::vector&lt;double&gt; <a class="code" href="errorfunc_8cpp.shtml#ae767ea3ddeac1e55d74384fe0cd42ecd" title="Gaussian probability density function. Generates normal probability density values corresponding to X...">gaussian</a>(std::vector&lt;double&gt; &amp; vecNPD, 
<a name="l00103"></a>00103                              std::vector&lt;double&gt; &amp; XX, <span class="keywordtype">double</span> SS);
<a name="l00104"></a>00104                              
<a name="l00105"></a>00105 <span class="comment">//----the true density for gaussian mixtures----------------//</span>
<a name="l00106"></a>00106 <span class="comment">//for root finding routine</span>
<a name="l00107"></a>00107 <a class="code" href="classia__ad.shtml">ia_ad</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x, vector&lt;double&gt;&amp; W, vector&lt;double&gt;&amp; M, vector&lt;double&gt;&amp; S);
<a name="l00108"></a>00108 
<a name="l00109"></a>00109 <span class="comment">//for integration routine</span>
<a name="l00110"></a><a class="code" href="errorfunc_8hpp.shtml#aeac7a36a4f16518672428778c5db67dc">00110</a> <span class="keyword">typedef</span> <a class="code" href="classitaylor.shtml">itaylor</a> (*<a class="code" href="errorfunc_8cpp.shtml#aeac7a36a4f16518672428778c5db67dc">pfcn</a>)(<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a> &amp;, vector&lt;double&gt;&amp;, vector&lt;double&gt;&amp;, vector&lt;double&gt;&amp;);
<a name="l00111"></a>00111 
<a name="l00112"></a>00112 <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#ae473bc19e57e3781680652a61018aa79">integrand</a>(<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a> &amp;x, vector&lt;double&gt;&amp; W, vector&lt;double&gt;&amp; M, vector&lt;double&gt;&amp; S);                             
<a name="l00113"></a>00113                              
<a name="l00114"></a>00114 <span class="comment">//----------functions for finding roots----------------------------------//</span>
<a name="l00115"></a>00115 <span class="comment">//return the interval function?</span>
<a name="l00116"></a>00116 <a class="code" href="classintervalw.shtml">intervalw</a> <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a> (<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x, vector&lt;double&gt;&amp; W, vector&lt;double&gt;&amp; M, vector&lt;double&gt;&amp; S); 
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 <span class="comment">//return the derivative of the function?</span>
<a name="l00119"></a>00119 <a class="code" href="classintervalw.shtml">intervalw</a> <a class="code" href="errorfunc_8cpp.shtml#a118fce03849bd0483b3b66ae6df14365">DF</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x, vector&lt;double&gt;&amp; W, vector&lt;double&gt;&amp; M, vector&lt;double&gt;&amp; S); 
<a name="l00120"></a>00120 
<a name="l00121"></a>00121 <span class="comment">//newton&#39;s routine</span>
<a name="l00122"></a>00122 <span class="comment">// need to modify this to suit fhat?</span>
<a name="l00123"></a>00123 <a class="code" href="classintervalw.shtml">intervalw</a> <a class="code" href="errorfunc_8cpp.shtml#abcd464084d71d1ca5caf89793fa1d050">N</a> (<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x, vector&lt;double&gt;&amp; W, 
<a name="l00124"></a>00124           vector&lt;double&gt;&amp; M, vector&lt;double&gt;&amp; S, <span class="keywordtype">double</span> fhat);
<a name="l00125"></a>00125 
<a name="l00126"></a>00126 <span class="comment">//find the root using interval newton method</span>
<a name="l00127"></a>00127 <span class="keywordtype">void</span> <a class="code" href="errorfunc_8cpp.shtml#ac2e7de1da18a8a42ff1752b888026284">findRoot</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;domain, vector&lt;double&gt;&amp; W, vector&lt;double&gt;&amp; M, 
<a name="l00128"></a>00128           vector&lt;double&gt;&amp; S, <span class="keywordtype">double</span> fhat, vector&lt;intervalw&gt;&amp; rootList);
<a name="l00129"></a>00129 
<a name="l00130"></a>00130 <span class="comment">//bisect the domain and decide which root-finding routine to use</span>
<a name="l00131"></a>00131 <span class="keywordtype">void</span> <a class="code" href="errorfunc_8cpp.shtml#a4a991d5ab1bd0a117e02af6f83369bab">bisect</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;TOL, <span class="keywordtype">double</span> &amp;fhat, 
<a name="l00132"></a>00132         vector&lt;intervalw&gt;&amp; rootList, vector&lt;double&gt;&amp; W, 
<a name="l00133"></a>00133         vector&lt;double&gt;&amp; M, vector&lt;double&gt;&amp; S);
<a name="l00134"></a>00134 
<a name="l00135"></a>00135 <span class="comment">//----------functions for integration----------------------------------</span>
<a name="l00136"></a>00136 interval <a class="code" href="errorfunc_8cpp.shtml#ad7abf0d6b473ad78b1737a9e972395c2">riemannTerm</a>(<a class="code" href="errorfunc_8cpp.shtml#aeac7a36a4f16518672428778c5db67dc">pfcn</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, interval X, <span class="keywordtype">int</span> Deg, vector&lt;double&gt;&amp; W, 
<a name="l00137"></a>00137         vector&lt;double&gt;&amp; M, vector&lt;double&gt;&amp; S);
<a name="l00138"></a>00138         
<a name="l00139"></a>00139 interval <a class="code" href="errorfunc_8cpp.shtml#aa0f25ae1a698fab2a49e83283c2b0dd1">integrate</a>(<a class="code" href="errorfunc_8cpp.shtml#aeac7a36a4f16518672428778c5db67dc">pfcn</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, interval X, <span class="keywordtype">int</span> Deg, <span class="keywordtype">double</span> Tol, vector&lt;double&gt;&amp; W, 
<a name="l00140"></a>00140         vector&lt;double&gt;&amp; M, vector&lt;double&gt;&amp; S);
<a name="l00141"></a>00141 
<a name="l00142"></a>00142 interval <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(<span class="keywordtype">double</span> fhat, interval&amp; thisInt, <span class="keywordtype">int</span> Deg, <span class="keywordtype">double</span> TOL, 
<a name="l00143"></a>00143               vector&lt;double&gt;&amp; W, vector&lt;double&gt;&amp; M, vector&lt;double&gt;&amp; S);
<a name="l00144"></a>00144 
<a name="l00145"></a>00145 <span class="comment">//------For Laplace--------------------------------//</span>
<a name="l00146"></a>00146 <span class="comment">//for root finding routine</span>
<a name="l00147"></a>00147 <a class="code" href="classia__ad.shtml">ia_ad</a> <a class="code" href="errorfunc_8cpp.shtml#a5c072ddf22efaed3c1dc612f42290f30">LaplacePDF</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x);
<a name="l00148"></a>00148 
<a name="l00149"></a>00149 <span class="comment">//for integration routine</span>
<a name="l00150"></a><a class="code" href="errorfunc_8hpp.shtml#a20ba5d9759ec5f70b3772967b589ed3e">00150</a> <span class="keyword">typedef</span> <a class="code" href="classitaylor.shtml">itaylor</a> (*<a class="code" href="errorfunc_8cpp.shtml#a20ba5d9759ec5f70b3772967b589ed3e">pfcnLaplace</a>)(<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a> &amp;);
<a name="l00151"></a>00151 
<a name="l00152"></a>00152 <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#a113114b7f2ac4e8e3c7900ab491eaf1b">LaplaceIntegrand</a>(<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a> &amp;x);                             
<a name="l00153"></a>00153                              
<a name="l00154"></a>00154 <span class="comment">//----------functions for finding roots----------------------------------//</span>
<a name="l00155"></a>00155 <span class="comment">//return the interval function?</span>
<a name="l00156"></a>00156 <a class="code" href="classintervalw.shtml">intervalw</a> <a class="code" href="errorfunc_8cpp.shtml#a83cb93d97adbc26d2b6731e89725b7d6">LaplaceF</a> (<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x); 
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 <span class="comment">//return the derivative of the function?</span>
<a name="l00159"></a>00159 <a class="code" href="classintervalw.shtml">intervalw</a> <a class="code" href="errorfunc_8cpp.shtml#a1df0b848b1e7ebd2de5866266df70ceb">LaplaceDF</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x); 
<a name="l00160"></a>00160 
<a name="l00161"></a>00161 <span class="comment">//newton&#39;s routine</span>
<a name="l00162"></a>00162 <span class="comment">// need to modify this to suit fhat?</span>
<a name="l00163"></a>00163 <a class="code" href="classintervalw.shtml">intervalw</a> <a class="code" href="errorfunc_8cpp.shtml#a64a77490c542f82e7ae00ab525f3efe1">LaplaceNewton</a> (<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x, <span class="keywordtype">double</span> fhat);
<a name="l00164"></a>00164 
<a name="l00165"></a>00165 <span class="comment">//find the root using interval newton method</span>
<a name="l00166"></a>00166 <span class="keywordtype">void</span> <a class="code" href="errorfunc_8cpp.shtml#a6c2d3ad910df045a1fa44cb3fd190bbe">LaplacefindRoot</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;domain, <span class="keywordtype">double</span> fhat, vector&lt;intervalw&gt;&amp; rootList);
<a name="l00167"></a>00167 
<a name="l00168"></a>00168 <span class="comment">//bisect the domain and decide which root-finding routine to use</span>
<a name="l00169"></a>00169 <span class="keywordtype">void</span> <a class="code" href="errorfunc_8cpp.shtml#a4de668d5d847a753a9a4baf05c7d8d52">LaplaceBisect</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;TOL, <span class="keywordtype">double</span> &amp;fhat, 
<a name="l00170"></a>00170         vector&lt;intervalw&gt;&amp; rootList);
<a name="l00171"></a>00171 
<a name="l00172"></a>00172 <span class="comment">//----------functions for integration----------------------------------</span>
<a name="l00173"></a>00173 interval <a class="code" href="errorfunc_8cpp.shtml#acaee4b1f2fbef568e6c87428028de1c1">LaplaceRiemannTerm</a>(<a class="code" href="errorfunc_8cpp.shtml#aeac7a36a4f16518672428778c5db67dc">pfcn</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, interval X, <span class="keywordtype">int</span> Deg);
<a name="l00174"></a>00174         
<a name="l00175"></a>00175 interval <a class="code" href="errorfunc_8cpp.shtml#ae9e1f8084e10ac335146e7849cc23fbd">LaplaceIntegrate</a>(<a class="code" href="errorfunc_8cpp.shtml#aeac7a36a4f16518672428778c5db67dc">pfcn</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, interval X, <span class="keywordtype">int</span> Deg, <span class="keywordtype">double</span> Tol);
<a name="l00176"></a>00176 
<a name="l00177"></a>00177 interval <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(<span class="keywordtype">double</span> fhat, interval&amp; thisInt, <span class="keywordtype">int</span> Deg, <span class="keywordtype">double</span> TOL);
<a name="l00178"></a>00178 
<a name="l00179"></a>00179 <span class="comment">//-------------end of functions for Laplace---------------------------//</span>
<a name="l00180"></a>00180 
<a name="l00181"></a>00181 <span class="comment">//--------------For Standard LogNormal--------------------------------//</span>
<a name="l00182"></a>00182 <span class="comment">//for root finding routine</span>
<a name="l00183"></a>00183 <a class="code" href="classia__ad.shtml">ia_ad</a> <a class="code" href="errorfunc_8cpp.shtml#a6640f4518f5a29d2caa7dd15c3d05be0">LognormalPDF</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x);
<a name="l00184"></a>00184 
<a name="l00185"></a>00185 <span class="comment">//for integration routine</span>
<a name="l00186"></a><a class="code" href="errorfunc_8hpp.shtml#a48908ee3bc312005f3b46888bcc0cdd3">00186</a> <span class="keyword">typedef</span> <a class="code" href="classitaylor.shtml">itaylor</a> (*<a class="code" href="errorfunc_8cpp.shtml#a48908ee3bc312005f3b46888bcc0cdd3">pfcnLognormal</a>)(<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a> &amp;);
<a name="l00187"></a>00187 
<a name="l00188"></a>00188 <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="errorfunc_8cpp.shtml#aacb93c77ab57e8ed2b6a1c581e60db5d">LognormalIntegrand</a>(<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a> &amp;x);                             
<a name="l00189"></a>00189                              
<a name="l00190"></a>00190 <span class="comment">//----------functions for finding roots----------------------------------//</span>
<a name="l00191"></a>00191 <span class="comment">//return the interval function?</span>
<a name="l00192"></a>00192 <a class="code" href="classintervalw.shtml">intervalw</a> <a class="code" href="errorfunc_8cpp.shtml#a256e19e7647e7510144ff8e3064b07c1">LognormalF</a> (<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x); 
<a name="l00193"></a>00193 
<a name="l00194"></a>00194 <span class="comment">//return the derivative of the function?</span>
<a name="l00195"></a>00195 <a class="code" href="classintervalw.shtml">intervalw</a> <a class="code" href="errorfunc_8cpp.shtml#a45238105e02452f020b01a332fee8913">LognormalDF</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x); 
<a name="l00196"></a>00196 
<a name="l00197"></a>00197 <span class="comment">//newton&#39;s routine</span>
<a name="l00198"></a>00198 <span class="comment">// need to modify this to suit fhat?</span>
<a name="l00199"></a>00199 <a class="code" href="classintervalw.shtml">intervalw</a> <a class="code" href="errorfunc_8cpp.shtml#a2ad23089c1ee547e199a0e481a973f02">LognormalNewton</a> (<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x, <span class="keywordtype">double</span> fhat);
<a name="l00200"></a>00200 
<a name="l00201"></a>00201 <span class="comment">//find the root using interval newton method</span>
<a name="l00202"></a>00202 <span class="keywordtype">void</span> <a class="code" href="errorfunc_8cpp.shtml#a75c63219b8792609e96391a851a5306e">LognormalfindRoot</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;domain, <span class="keywordtype">double</span> fhat, vector&lt;intervalw&gt;&amp; rootList);
<a name="l00203"></a>00203 
<a name="l00204"></a>00204 <span class="comment">//bisect the domain and decide which root-finding routine to use</span>
<a name="l00205"></a>00205 <span class="keywordtype">void</span> <a class="code" href="errorfunc_8cpp.shtml#a9722cc78b34593d877ec8cbbb22ac9f2">LognormalBisect</a>(<span class="keyword">const</span> <a class="code" href="classintervalw.shtml">intervalw</a> &amp;x, <span class="keyword">const</span> <span class="keywordtype">double</span> &amp;TOL, <span class="keywordtype">double</span> &amp;fhat, 
<a name="l00206"></a>00206         vector&lt;intervalw&gt;&amp; rootList);
<a name="l00207"></a>00207 
<a name="l00208"></a>00208 <span class="comment">//----------functions for integration----------------------------------</span>
<a name="l00209"></a>00209 interval <a class="code" href="errorfunc_8cpp.shtml#a41284dca34be2cdf1f056da340d15ea1">LognormalRiemannTerm</a>(<a class="code" href="errorfunc_8cpp.shtml#aeac7a36a4f16518672428778c5db67dc">pfcn</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, interval X, <span class="keywordtype">int</span> Deg);
<a name="l00210"></a>00210         
<a name="l00211"></a>00211 interval <a class="code" href="errorfunc_8cpp.shtml#af9a4802a471fb3809209d48e33864b6d">LognormalIntegrate</a>(<a class="code" href="errorfunc_8cpp.shtml#aeac7a36a4f16518672428778c5db67dc">pfcn</a> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, interval X, <span class="keywordtype">int</span> Deg, <span class="keywordtype">double</span> Tol);
<a name="l00212"></a>00212 
<a name="l00213"></a>00213 interval <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(<span class="keywordtype">double</span> fhat, interval&amp; thisInt, <span class="keywordtype">int</span> Deg, <span class="keywordtype">double</span> TOL);
<a name="l00214"></a>00214 
<a name="l00219"></a><a class="code" href="structFinMix.shtml">00219</a> <span class="keyword">struct </span><a class="code" href="structFinMix.shtml">FinMix</a> {
<a name="l00220"></a><a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">00220</a>         std::vector&lt;double&gt; <a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>; <span class="comment">//weights of components</span>
<a name="l00221"></a><a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">00221</a>         std::vector&lt;double&gt; <a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>;  <span class="comment">//means of components</span>
<a name="l00222"></a><a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">00222</a>         std::vector&lt;double&gt; <a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>;  <span class="comment">//standard deviations of components</span>
<a name="l00223"></a><a class="code" href="structFinMix.shtml#a7d058312162e6b9ccb408ddc688a274f">00223</a>         <span class="keywordtype">double</span> <a class="code" href="structFinMix.shtml#a7d058312162e6b9ccb408ddc688a274f">fhat</a>;
<a name="l00224"></a>00224 };
<a name="l00238"></a>00238 <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#af969a1749ecbaf78a8656cb6b65b8c60" title="Get the probability density function of a finite mixture r.v.">FinMixPDF</a>(<span class="keywordtype">double</span> x, std::vector&lt;double&gt; &amp;W, 
<a name="l00239"></a>00239                           std::vector&lt;double&gt; &amp;M, std::vector&lt;double&gt; &amp;S);
<a name="l00241"></a>00241 <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a762104bf01c093a245dfcde680fd5edd" title="Get the cumulative distribution function of a finite mixture r.v.">FinMixCDF</a>(<span class="keywordtype">double</span>, <span class="keywordtype">double</span>, std::vector&lt;double&gt; &amp;W,
<a name="l00242"></a>00242                           std::vector&lt;double&gt; &amp;M, 
<a name="l00243"></a>00243                           std::vector&lt;double&gt; &amp;S);
<a name="l00245"></a>00245 <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a>(<span class="keywordtype">double</span> x, <span class="keywordtype">void</span>* params);
<a name="l00247"></a>00247 dotprecision <a class="code" href="errorfunc_8cpp.shtml#a3050c350d49593d9b2aa0b0cf58857a4" title="Calculate the IAE at boundaries of a finite mixture.">dpFinMixIAEBoun</a>(<span class="keywordtype">double</span> x1, <span class="keywordtype">double</span> x2, <a class="code" href="structFinMix.shtml">FinMix</a>&amp; mixt) ;
<a name="l00248"></a>00248 
<a name="l00258"></a>00258 <span class="keywordtype">void</span> <a class="code" href="errorfunc_8cpp.shtml#a9e3934b3e6ab0c312ffc4e1af23b0417" title="Function to find the number of generated U(0,1) data that is less the weight of the components...">findComp</a>(vector&lt;double&gt; &amp; u, <span class="keywordtype">int</span>&amp; intp, <span class="keyword">const</span> <span class="keywordtype">int</span> n, 
<a name="l00259"></a>00259                         <span class="keywordtype">double</span>* weight, <span class="keywordtype">int</span> w);
<a name="l00260"></a>00260 
<a name="l00265"></a>00265 <span class="keywordtype">void</span> <a class="code" href="errorfunc_8cpp.shtml#a31f8e88e696aca2c21e65dfb42175d04" title="Function to get cumulative sum.">cumsum</a>(vector&lt;double&gt; &amp; weight, <span class="keywordtype">double</span>* w);
<a name="l00267"></a>00267 
<a name="l00279"></a><a class="code" href="structRegHist.shtml">00279</a> <span class="keyword">struct </span><a class="code" href="structRegHist.shtml">RegHist</a> {
<a name="l00280"></a><a class="code" href="structRegHist.shtml#ac6b64da4f93f7d21cbdd2c566a7d32bf">00280</a>     std::vector&lt;real&gt; <a class="code" href="structRegHist.shtml#ac6b64da4f93f7d21cbdd2c566a7d32bf">LowerBoxes</a>;
<a name="l00281"></a><a class="code" href="structRegHist.shtml#a1336612a62cb90cb7dc2cf2610dc5eee">00281</a>     std::vector&lt;real&gt; <a class="code" href="structRegHist.shtml#a1336612a62cb90cb7dc2cf2610dc5eee">UpperBoxes</a>;
<a name="l00282"></a><a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">00282</a>     std::vector&lt;double&gt; <a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>;
<a name="l00283"></a><a class="code" href="structRegHist.shtml#a4303d3e3de079e309a6b71a422a13947">00283</a>     cxsc::real <a class="code" href="structRegHist.shtml#a4303d3e3de079e309a6b71a422a13947">binwidth</a>;
<a name="l00284"></a>00284 };
<a name="l00285"></a>00285 
<a name="l00288"></a>00288 <span class="keywordtype">void</span> <a class="code" href="errorfunc_8cpp.shtml#a61145b8e6b4bbb68339137b4b788bc92" title="Make a regular histogram (using Dominic&#39;s histogram.m file)">makeRegularHist</a>(<a class="code" href="structRegHist.shtml">RegHist</a>&amp; myRegHist, <span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec, 
<a name="l00289"></a>00289               ivector theBox, <span class="keywordtype">int</span> bwmethod);
<a name="l00290"></a>00290 <span class="keywordtype">void</span> <a class="code" href="errorfunc_8cpp.shtml#a61145b8e6b4bbb68339137b4b788bc92" title="Make a regular histogram (using Dominic&#39;s histogram.m file)">makeRegularHist</a>(<a class="code" href="structRegHist.shtml">RegHist</a>&amp; myRegHist, <span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec, 
<a name="l00291"></a>00291               ivector theBox, <span class="keywordtype">double</span> bw);
<a name="l00292"></a>00292 
<a name="l00297"></a>00297 <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#aeec9912b8816ad5b3a449f80f9e5d983" title="Function required for regular histogram.">psi</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec, <span class="keywordtype">double</span> g, <span class="keywordtype">double</span> r);
<a name="l00298"></a>00298 
<a name="l00300"></a>00300 real <a class="code" href="errorfunc_8cpp.shtml#a63593212e4bbb8cbe660d8bf3209f4b4">getRegHistUnifIAE</a>(<a class="code" href="structRegHist.shtml">RegHist</a> &amp;myRegHist, 
<a name="l00301"></a>00301                        <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> &amp;myPart, <span class="keywordtype">size_t</span> n, <span class="keywordtype">double</span> weight,
<a name="l00302"></a>00302                        vector&lt;int&gt; holesLoc);
<a name="l00303"></a>00303 
<a name="l00305"></a>00305 real <a class="code" href="errorfunc_8cpp.shtml#a538c5046923fbdee301324f35285d79c">getRegHistFinMixIAE</a>(<span class="keywordtype">size_t</span> n, <a class="code" href="structRegHist.shtml">RegHist</a> &amp;myRegHist, <a class="code" href="structFinMix.shtml">FinMix</a> &amp; mixt);
<a name="l00306"></a>00306 
<a name="l00308"></a>00308 interval <a class="code" href="errorfunc_8cpp.shtml#a3b281b5e62f571e14e7c127af8d7e74a">getRegHistFinMixIntervalIAE</a>(<span class="keywordtype">size_t</span> n, <a class="code" href="structRegHist.shtml">RegHist</a> &amp;myRegHist, <a class="code" href="structFinMix.shtml">FinMix</a> &amp; mixt, <span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg);
<a name="l00309"></a>00309 
<a name="l00311"></a>00311 interval <a class="code" href="errorfunc_8cpp.shtml#a7edbd158ed300803fe59b38c60f90875">getRegHistLaplaceIntervalIAE</a>(<span class="keywordtype">size_t</span> n, <a class="code" href="structRegHist.shtml">RegHist</a> &amp;myRegHist, <span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg);
<a name="l00312"></a>00312 
<a name="l00314"></a>00314 interval <a class="code" href="errorfunc_8cpp.shtml#ac2e78d0ba1f818d2e1a81b95544972d8">getRegHistLognormalIntervalIAE</a>(<span class="keywordtype">size_t</span> n, <a class="code" href="structRegHist.shtml">RegHist</a> &amp;myRegHist, <span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg);
<a name="l00315"></a>00315 
<a name="l00317"></a>00317 <span class="keywordtype">void</span> <a class="code" href="errorfunc_8cpp.shtml#aad70f5031a514e5cc5799cda7e878258">outputRegHistToTxt</a>(<a class="code" href="structRegHist.shtml">RegHist</a> &amp;myRegHist, std::string&amp; s);
<a name="l00319"></a>00319 
<a name="l00320"></a>00320 
<a name="l00321"></a>00321 
<a name="l00322"></a>00322 <span class="preprocessor">#endif</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="errorfunc_8hpp.shtml">errorfunc.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:12 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
