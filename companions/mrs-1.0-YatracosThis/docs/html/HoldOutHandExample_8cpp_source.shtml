<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: HoldOutHandExample.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('HoldOutHandExample_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">HoldOutHandExample.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="HoldOutHandExample_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;vector&gt;</span> <span class="comment">// to use std::vector</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;iterator&gt;</span> <span class="comment">// to use iterators</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;valarray&gt;</span> <span class="comment">// to use valarray</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;set&gt;</span> <span class="comment">// to use sets</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>    <span class="comment">// toolz headers</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;dataprep.hpp&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;gsl/gsl_qrng.h&gt;</span>       <span class="comment">// types needed by MRSampler.hpp</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;gsl/gsl_cdf.h&gt;</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="keyword">using namespace </span>cxsc;
<a name="l00040"></a>00040 <span class="keyword">using namespace </span>std;
<a name="l00041"></a>00041 
<a name="l00042"></a><a class="code" href="HoldOutHandExample_8cpp.shtml#a3c04138a5bfe5d72780bb7e82a18e627">00042</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span> **argv)
<a name="l00043"></a>00043 {
<a name="l00044"></a>00044      <span class="comment">//==============set formatting for input to oss=============================</span>
<a name="l00045"></a>00045     ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00046"></a>00046     oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00047"></a>00047     oss.precision(5);
<a name="l00048"></a>00048     <span class="comment">//==========================================================================</span>
<a name="l00049"></a>00049     
<a name="l00050"></a>00050     <span class="comment">//============set up a random number generator for rvs======================</span>
<a name="l00051"></a>00051     <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00052"></a>00052     gsl_rng * r;
<a name="l00053"></a>00053     <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00054"></a>00054     gsl_rng_env_setup();
<a name="l00055"></a>00055     T = gsl_rng_default;
<a name="l00056"></a>00056     r = gsl_rng_alloc (T);
<a name="l00057"></a>00057     <span class="keywordtype">long</span> s = time (NULL) * getpid();
<a name="l00058"></a>00058     gsl_rng_set(r, s);
<a name="l00059"></a>00059     <span class="comment">//==========================================================================</span>
<a name="l00060"></a>00060 
<a name="l00061"></a>00061    <span class="comment">//===============set up domain===============================================</span>
<a name="l00062"></a>00062     <span class="keywordtype">int</span> d = 1;  <span class="comment">// dimensions - allow for user input to decide dimensions</span>
<a name="l00063"></a>00063     <span class="keyword">const</span> <span class="keywordtype">int</span> n = 9; <span class="comment">// total points from random number generator</span>
<a name="l00064"></a>00064     <span class="keywordtype">int</span> m = 3 ; <span class="comment">// number of points to hold out</span>
<a name="l00065"></a>00065     
<a name="l00066"></a>00066     <span class="comment">//define what distribution is used.</span>
<a name="l00067"></a>00067     <span class="keywordtype">int</span> distr = 1; 
<a name="l00068"></a>00068     <span class="keywordtype">int</span> mix = 0; <span class="comment">// when not a finite mixture, use 0</span>
<a name="l00069"></a>00069        
<a name="l00070"></a>00070     ivector pavingBox(d); <span class="comment">// domain is a hypercube</span>
<a name="l00071"></a>00071     interval pavingInterval(0, 1);
<a name="l00072"></a>00072     <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) { pavingBox[i] = pavingInterval; }
<a name="l00073"></a>00073  
<a name="l00074"></a>00074     <span class="comment">//==========================================================================</span>
<a name="l00075"></a>00075  
<a name="l00076"></a>00076     <span class="comment">//==============generate data===============================================  </span>
<a name="l00077"></a>00077     <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData; <span class="comment">// container for data</span>
<a name="l00078"></a>00078     <span class="keywordtype">double</span> myData[n] = {0.1, 0.2,0.3, 0.4, 0.45, 0.6, 0.7, 0.8, 0.9};
<a name="l00079"></a>00079     <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
<a name="l00080"></a>00080         rvector thisrv(d);
<a name="l00081"></a>00081         <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 1; j &lt;= d; j++) {
<a name="l00082"></a>00082           thisrv[j] = myData[i];
<a name="l00083"></a>00083           cout &lt;&lt; myData[i] &lt;&lt; endl;
<a name="l00084"></a>00084         }
<a name="l00085"></a>00085         theData.push_back(thisrv);    <span class="comment">// put into big container</span>
<a name="l00086"></a>00086     }
<a name="l00087"></a>00087     cout &lt;&lt; <span class="stringliteral">&quot;Sample size = &quot;</span> &lt;&lt; theData.size() &lt;&lt; endl;
<a name="l00088"></a>00088 
<a name="l00089"></a>00089    <span class="comment">//==============start priorityStageSplit=====================================</span>
<a name="l00090"></a>00090     <span class="comment">// indicators</span>
<a name="l00091"></a>00091     <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
<a name="l00092"></a>00092     <span class="keywordtype">bool</span> successfulPQSplit = <span class="keyword">false</span>;
<a name="l00093"></a>00093   
<a name="l00094"></a>00094     <span class="comment">//make an Adaptive Histogram object with a specified box</span>
<a name="l00095"></a>00095     <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHist(pavingBox);
<a name="l00096"></a>00096   
<a name="l00097"></a>00097     <span class="comment">//maximum number of points in each leaf box        </span>
<a name="l00098"></a>00098     <span class="keywordtype">int</span> finalK = 2;
<a name="l00099"></a>00099     <a class="code" href="classsubpavings_1_1SplitOnK.shtml" title="Classes derived from SplitDecisionObj.">SplitOnK</a> splitK(finalK);
<a name="l00100"></a>00100     <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn;
<a name="l00101"></a>00101        
<a name="l00102"></a>00102     <span class="comment">// now split with priority queue</span>
<a name="l00103"></a>00103     <span class="comment">// Stopping Criteria: critCount</span>
<a name="l00104"></a>00104     <a class="code" href="classsubpavings_1_1CompCountVal.shtml" title="Class comparing on count of data points associated with a node.">CompCountVal</a> nodeCompCount;
<a name="l00105"></a>00105     <a class="code" href="classsubpavings_1_1CritLargestCount__LTEV.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTEV</a> critCount(finalK);
<a name="l00106"></a>00106     cout &lt;&lt; <span class="stringliteral">&quot;========================================================&quot;</span> &lt;&lt; endl;
<a name="l00107"></a>00107     cout &lt;&lt; <span class="stringliteral">&quot;Running hold out estimation for a normal distribution...&quot;</span> &lt;&lt; endl;
<a name="l00108"></a>00108     cout &lt;&lt; <span class="stringliteral">&quot;Max k is: &quot;</span> &lt;&lt; finalK &lt;&lt; endl; 
<a name="l00109"></a>00109     cout &lt;&lt; <span class="stringliteral">&quot;Performing hold-out estimation: &quot;</span> &lt;&lt; endl;
<a name="l00110"></a>00110    
<a name="l00111"></a>00111     <span class="comment">// Put the data from the container into the histogram  </span>
<a name="l00112"></a>00112     <span class="keywordtype">int</span> holdOutCount = int(theData.size()*1.0/3.0);
<a name="l00113"></a>00113     successfulInsertion = myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6817e38bd1c2749a711f702c70dd16b5">insertFromRVecForHoldOut</a>(theData, sn, holdOutCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00114"></a>00114     <span class="comment">//successfulInsertion = myHist.insertFromRVecForHoldOut(theData, splitK, NOLOG);</span>
<a name="l00115"></a>00115    
<a name="l00116"></a>00116     
<a name="l00117"></a>00117    <span class="keywordflow">if</span> (successfulInsertion) { <span class="comment">// if data successfully inserted       </span>
<a name="l00118"></a>00118        <span class="comment">//create an AdaptiveHistogramCollator object</span>
<a name="l00119"></a>00119        <a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml" title="A wrapper or manager for a CollatorSPVnode.">AdaptiveHistogramVCollator</a> coll;
<a name="l00120"></a>00120     
<a name="l00121"></a>00121        <span class="comment">//start the clock</span>
<a name="l00122"></a>00122        clock_t start, end;
<a name="l00123"></a>00123        start = clock();
<a name="l00124"></a>00124        
<a name="l00125"></a>00125        <span class="comment">//start the hold out estimation</span>
<a name="l00126"></a>00126        <span class="comment">//tolerance for stopping criteria</span>
<a name="l00127"></a>00127        <span class="keywordtype">long</span> <span class="keywordtype">double</span> tol = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(10.0, -2);
<a name="l00128"></a>00128        coll=myHist.priorityStageSplit(nodeCompCount, critCount, 
<a name="l00129"></a>00129                           <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 0, 0.0, tol, distr, mix);
<a name="l00130"></a>00130 
<a name="l00131"></a>00131        <span class="comment">//output time taken</span>
<a name="l00132"></a>00132        end = clock();
<a name="l00133"></a>00133        <span class="keywordtype">double</span> timing;
<a name="l00134"></a>00134        timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00135"></a>00135        cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00136"></a>00136  
<a name="l00137"></a>00137       <span class="comment">//cout &lt;&lt; coll &lt;&lt; endl;</span>
<a name="l00138"></a>00138       <span class="keywordtype">int</span> numberCollated = coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#a7268bf31ef2baf216134f5751e5c6173" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>();
<a name="l00139"></a>00139       cout &lt;&lt; numberCollated &lt;&lt; <span class="stringliteral">&quot; histograms collated.&quot;</span> &lt;&lt; endl;
<a name="l00140"></a>00140       
<a name="l00141"></a>00141       <span class="comment">//output the collator to a .txt file</span>
<a name="l00142"></a>00142       coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramVCollator.shtml#ad2a470a3974ad963de7debb7fe870efe" title="Output the collated information to a txt file.">outputToTxtTabs</a>(<span class="stringliteral">&quot;CollatorHistogram.txt&quot;</span>); 
<a name="l00143"></a>00143     
<a name="l00144"></a>00144    <span class="comment">//===========================================================================</span>
<a name="l00145"></a>00145    
<a name="l00146"></a>00146    <span class="comment">/*</span>
<a name="l00147"></a>00147 <span class="comment">   RegHist myRegHist;</span>
<a name="l00148"></a>00148 <span class="comment">  myRegHist = makeRegularHist(theData, pavingBox);</span>
<a name="l00149"></a>00149 <span class="comment">  </span>
<a name="l00150"></a>00150 <span class="comment">   cout &lt;&lt; &quot;get the IAE of the regular histogram: &quot; &lt;&lt; endl;</span>
<a name="l00151"></a>00151 <span class="comment">  real regHistIAE;</span>
<a name="l00152"></a>00152 <span class="comment">  cout &lt;&lt; &quot;change this to get IAE for uniform!!!&quot; &lt;&lt;endl;</span>
<a name="l00153"></a>00153 <span class="comment">  //regHistIAE = getRegHistFinMixIAE(mix, n, myRegHist.theBoxes, </span>
<a name="l00154"></a>00154 <span class="comment">                                   myRegHist.heights, myRegHist.binwidth);</span>
<a name="l00155"></a>00155 <span class="comment">                                   </span>
<a name="l00156"></a>00156 <span class="comment">  cout &lt;&lt; &quot;output IAE to .txt file&quot; &lt;&lt; endl;</span>
<a name="l00157"></a>00157 <span class="comment">                        </span>
<a name="l00158"></a>00158 <span class="comment">  //output IAE to .txt file------------------</span>
<a name="l00159"></a>00159 <span class="comment">  ofstream os;         // ofstream object</span>
<a name="l00160"></a>00160 <span class="comment">   os &lt;&lt; scientific;  // set formatting for input to oss</span>
<a name="l00161"></a>00161 <span class="comment">   os.precision(5);</span>
<a name="l00162"></a>00162 <span class="comment">  </span>
<a name="l00163"></a>00163 <span class="comment">  string outputFileName;// for output file</span>
<a name="l00164"></a>00164 <span class="comment">  outputFileName = &quot;IAERegHist.txt&quot;;</span>
<a name="l00165"></a>00165 <span class="comment">  os.open(outputFileName.c_str());</span>
<a name="l00166"></a>00166 <span class="comment">  os &lt;&lt; regHistIAE &lt;&lt; endl;</span>
<a name="l00167"></a>00167 <span class="comment">  os &lt;&lt; flush;</span>
<a name="l00168"></a>00168 <span class="comment">  os.close();</span>
<a name="l00169"></a>00169 <span class="comment">  std::cout &lt;&lt; &quot;IAE output to &quot; &lt;&lt; outputFileName &lt;&lt; endl;</span>
<a name="l00170"></a>00170 <span class="comment">  </span>
<a name="l00171"></a>00171 <span class="comment">  */</span>
<a name="l00172"></a>00172   } <span class="comment">// end of successful insertion                      </span>
<a name="l00173"></a>00173     
<a name="l00174"></a>00174   
<a name="l00175"></a>00175   <span class="comment">//free the rng</span>
<a name="l00176"></a>00176   gsl_rng_free(r);
<a name="l00177"></a>00177   
<a name="l00178"></a>00178   <span class="keywordflow">return</span> 0;
<a name="l00179"></a>00179 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="HoldOutHandExample_8cpp.shtml">HoldOutHandExample.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:13 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
