<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: sptypes.hpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('sptypes_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#namespaces">Namespaces</a>  </div>
  <div class="headertitle">
<div class="title">sptypes.hpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Includes and general typedefs for subpavings.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &quot;<a class="el" href="cxsc_8hpp_source.shtml">cxsc.hpp</a>&quot;</code><br/>
<code>#include &lt;list&gt;</code><br/>
<code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;set&gt;</code><br/>
<code>#include &lt;map&gt;</code><br/>
<code>#include &lt;iterator&gt;</code><br/>
</div>
<p><a href="sptypes_8hpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="namespaces"></a>
Namespaces</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">namespace &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml">subpavings</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight"><p>The namespace subpavings. </p>
<br/></td></tr>
<tr><td colspan="2"><h2><a name="typedef-members"></a>
Typedefs</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Typedefs for function pointers.</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef BOOL_INTERVAL(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#a4ca48fac31a3dcc26d5b51b1ee3cd0d9">subpavings::PIBT</a> )(const ivector &amp;x, const SPnode *const spn)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type "Pointer to an interval boolean test".  <a href="#a4ca48fac31a3dcc26d5b51b1ee3cd0d9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef ivector(*&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#af9ec133810ddce70b48381d444e2ec22">subpavings::PIVF</a> )(const ivector &amp;x)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type "Pointer to an interval vector function".  <a href="#af9ec133810ddce70b48381d444e2ec22"></a><br/></td></tr>
<tr><td colspan="2"><div class="groupHeader">Typedefs for containers and iterators.</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e">subpavings::IntVec</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type IntVec as a container for ints.  <a href="#aed8e75b2af342b9c1460431c223dca8e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef IntVec::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#ac37614ffc671c9e95013493ff9dc5137">subpavings::IntVecItr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type IntVecItr as iterator over IntVec.  <a href="#ac37614ffc671c9e95013493ff9dc5137"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; size_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81">subpavings::Size_tVec</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type Size_tVec as a container for size_t.  <a href="#a612fc5639b45583b9fd33bd304354f81"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef IntVec::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#a764c7dafc0022ded276050b8cd056904">subpavings::Size_tVecItr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type Size_tVecItr as iterator over Size_tVec.  <a href="#a764c7dafc0022ded276050b8cd056904"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; real &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f">subpavings::RealVec</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type RealVec as a container for reals.  <a href="#af2d57bb6e12f4a73169f2e496d6a641f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef RealVec::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1">subpavings::RealVecItr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type RealVecItr as iterator over RealVec.  <a href="#aca205cec2a67bee00aee408d0cc6f3a1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; rvector &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68">subpavings::RVecData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type RVecData as a container for rvectors.  <a href="#a30e15e24c8d81a2160d7422ef3c39d68"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef RVecData::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#a0e6592215c5f3504143e6c5ac38dcfec">subpavings::RVecDataCItr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type RVecDataCItr as const_iterator over RVecData.  <a href="#a0e6592215c5f3504143e6c5ac38dcfec"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef RVecData::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#aa990935cb163d8eb54f28df1a3508af0">subpavings::RVecDataItr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type RVecDataItr as iterator over RVecData.  <a href="#aa990935cb163d8eb54f28df1a3508af0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; SPnode * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#ad64ec5e254ada5d913b9f7b46dcddc49">subpavings::SPnodePtrs</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type SPnodePtrs as container of pointers to SPnodes.  <a href="#ad64ec5e254ada5d913b9f7b46dcddc49"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef SPnodePtrs::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#aa5240e1b99487f2c24014904cf761fc6">subpavings::SPnodePtrsItr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type SPnodePtrsItr as an iterator over SPnodePtrs.  <a href="#aa5240e1b99487f2c24014904cf761fc6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; const <br class="typebreak"/>
SPnode * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#a0c617b55345023a4c205603c167801b6">subpavings::SPnodeConstPtrs</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type SPnodeConstPtrs as container of pointers to const SPnodes.  <a href="#a0c617b55345023a4c205603c167801b6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef <br class="typebreak"/>
SPnodeConstPtrs::const_iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#a4a185637f88fb7f6b082fca3a8d90537">subpavings::SPnodeConstPtrsItr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type SPnodeConstPtrsItr as an iterator over SPnodeConstPtrs.  <a href="#a4a185637f88fb7f6b082fca3a8d90537"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector<br class="typebreak"/>
&lt; SPMinimalnode * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#ad21343865a1d93618e0fad6b4b08e53e">subpavings::SPMinimalnodePtrs</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type SPMinimalnodePtrs as container of pointers to SPMinimalnodes.  <a href="#ad21343865a1d93618e0fad6b4b08e53e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef SPMinimalnodePtrs::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#a0799ad5c6a6d3cd3b7afef68e5dfce51">subpavings::SPMinimalnodePtrsItr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type SPMinimalnodePtrsItr as an iterator over SPMinimalnodePtrs.  <a href="#a0799ad5c6a6d3cd3b7afef68e5dfce51"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; ivector &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#a322c2661740f6e6cc815fff0bfbd2623">subpavings::BoxVec</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type BoxVec as a container of boxes.  <a href="#a322c2661740f6e6cc815fff0bfbd2623"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef BoxVec::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#a8ea214a381f9c2027d0f605f2af25483">subpavings::BoxVecItr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type BoxVecItr as iterator over BoxVec.  <a href="#a8ea214a381f9c2027d0f605f2af25483"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::list&lt; ivector &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#acf161e8d79f04bf197a33277dd633f6d">subpavings::ImageList</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type ImageList as a container for images of boxes.  <a href="#acf161e8d79f04bf197a33277dd633f6d"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef ImageList::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#a8553bcc272ba9d0b7b9b6bd991b3bc00">subpavings::ImageListItr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type iterator over ImageList.  <a href="#a8553bcc272ba9d0b7b9b6bd991b3bc00"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; SPSnode * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923">subpavings::SPSnodePtrs</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type SPSnodePtrs as container of pointers to SPSnodes.  <a href="#ad23942a388da964ca7487e496d0f2923"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef SPSnodePtrs::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9">subpavings::SPSnodePtrsItr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.  <a href="#a3d06253195e32236cc10b1c2050073c9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; SPSVnode * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9">subpavings::SPSVnodePtrs</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type SPSVnodePtrs as container of pointers to SPSVnodes.  <a href="#a90b5f0e33fa46403066cc5a89929e6a9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef SPSVnodePtrs::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#ab5ab2047c25b17d5bb636a25ff65b0b0">subpavings::SPSVnodePtrsItr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type SPSVnodePtrsItr as an iterator over SPSVnodePtrs.  <a href="#ab5ab2047c25b17d5bb636a25ff65b0b0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::list&lt; SPSnode * &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#ae7645253328c3b5fc137829039d971e3">subpavings::SPSnodeList</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type SPSnodeList as a list of pointers to SPSnodes.  <a href="#ae7645253328c3b5fc137829039d971e3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef SPSnodeList::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#a984883a654b8d040041f722f8ead7dc2">subpavings::SPSnodeListItr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type SPSnodeListItr as an iterator over SPSnodeList.  <a href="#a984883a654b8d040041f722f8ead7dc2"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::list&lt; rvector &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#aa79f33663da92502ce1a37f3fd1f3d85">subpavings::BigDataCollection</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type BigData Collection as a container for data.  <a href="#aa79f33663da92502ce1a37f3fd1f3d85"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef BigDataCollection::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#a8792314c11b28ac2b8c4c85c47526f3a">subpavings::BigDataItr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type BigDataItr as an iterator BigData.  <a href="#a8792314c11b28ac2b8c4c85c47526f3a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; BigDataItr &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30">subpavings::NodeData</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type NodeData as a container for iterators a BigData.  <a href="#af005697b49cff9ea37fc3bc9ed19da30"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef NodeData::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff">subpavings::NodeDataItr</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type NodeDataItr as a NodeData iterator.  <a href="#af79bf496cfc0df4bddcbe13a62f12bff"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; dotprecision &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605">subpavings::VecDotPrec</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type VecDotPrec as a container of cxsc dotprecision variables.  <a href="#ad8f0a077ee1c4678bcd1868f3aecd605"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef VecDotPrec::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#a80a828acc57552427c90b1f3119af173">subpavings::VecDotPrecIt</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type VecDotPrecIt as an iterator over VecDotPrec container.  <a href="#a80a828acc57552427c90b1f3119af173"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef std::vector&lt; double &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#a6b4d2e61b2f0b65cacc9c9322d89bc37">subpavings::VecDbl</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type VecDbl as a container of doubles.  <a href="#a6b4d2e61b2f0b65cacc9c9322d89bc37"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">typedef VecDbl::iterator&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#a0b710d91e323ef0b7c2c811a535c5fab">subpavings::VecDblIt</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type VecDblIt as an iterator over VecDbl/.  <a href="#a0b710d91e323ef0b7c2c811a535c5fab"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="enum-members"></a>
Enumerations</h2></td></tr>
<tr><td colspan="2"><div class="groupHeader">Typedefs for enums.</div></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6">subpavings::BOOL_INTERVAL</a> { <a class="el" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6a6dc46ce899440df44cb246c8673f77ce">subpavings::BI_TRUE</a>, 
<a class="el" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6af416f80a49e36092e0ce20344f72a226">subpavings::BI_FALSE</a>, 
<a class="el" href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6ad05adf0e5db6a47d94c640a2cbe45eea">subpavings::BI_INDET</a>
 }</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define type "Interval Booleans".  <a href="namespacesubpavings.shtml#abf44b15764c504d6ffa87c62b45b01a6">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98">subpavings::OPERATIONS_ON</a> { <a class="el" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a5e4950af717b37685674f0a9fcae8abe">subpavings::ON_LEFT</a> =  -1, 
<a class="el" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98ad9000b1b4eb93fa2d8440f85df311107">subpavings::ON_RIGHT</a> =  1, 
<a class="el" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a4863db89a4712e90bb113f9acf898781">subpavings::ON_PARENT</a> =  0
 }</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define a type OPERATION_ON.  <a href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98">More...</a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">enum &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089">subpavings::LOGGING_LEVEL</a> { <br/>
&#160;&#160;<a class="el" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">subpavings::NOLOG</a> =  0, 
<a class="el" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089ab2890a6eb7493029f41cf871d43877c3">subpavings::TXT</a> =  1, 
<a class="el" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a37f328b2c4c91409b43fc74e7f299118">subpavings::TXTANDGRAPH</a> =  2, 
<a class="el" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a01fa38b021a34fb52083fdc234ab8eff">subpavings::GRAPHSAMPLES</a> =  3, 
<br/>
&#160;&#160;<a class="el" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">subpavings::LOGSAMPLES</a> =  4, 
<a class="el" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089afec51793a7c8838aa61a4e1b21d1245d">subpavings::LOGANDGRAPHSAMPLES</a> =  5
<br/>
 }</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Define a type LOGGING_LEVEL.  <a href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089">More...</a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Includes and general typedefs for subpavings. </p>

<p>Definition in file <a class="el" href="sptypes_8hpp_source.shtml">sptypes.hpp</a>.</p>
</div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="sptypes_8hpp.shtml">sptypes.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:23 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
