<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: Fobj Class Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classFobj.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a>  </div>
  <div class="headertitle">
<div class="title">Fobj Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="Fobj" -->
<p>An abstract class for target function objects.  
 <a href="classFobj.shtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Inheritance diagram for Fobj:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><img src="classFobj__inherit__graph.png" border="0" usemap="#Fobj_inherit__map" alt="Inheritance graph"/></div>
<map name="Fobj_inherit__map" id="Fobj_inherit__map">
</map>
<center><span class="legend">[<a target="top" href="graph_legend.shtml">legend</a>]</span></center></div>
<div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Collaboration diagram for Fobj:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><img src="classFobj__coll__graph.png" border="0" usemap="#Fobj_coll__map" alt="Collaboration graph"/></div>
<map name="Fobj_coll__map" id="Fobj_coll__map">
</map>
<center><span class="legend">[<a target="top" href="graph_legend.shtml">legend</a>]</span></center></div>

<p><a href="classFobj-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFobj.shtml#a541c0edbb08855d1e3cdbb45b0aa26af">get_interval_calls</a> ()=0</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get number of interval function calls.  <a href="#a541c0edbb08855d1e3cdbb45b0aa26af"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFobj.shtml#a63df2521571faeb43663613a9a4611e7">get_real_calls</a> ()=0</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get number of real function calls.  <a href="#a63df2521571faeb43663613a9a4611e7"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFobj.shtml#a8da39e1c8780124d6826742cdf21aaf5">LabBoxVolume</a> (const <a class="el" href="classLabBox.shtml">LabBox</a> &amp;LB)=0</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">a defined pure virtual function for default Lebesgue measure (volume) of a labelled box  <a href="#a8da39e1c8780124d6826742cdf21aaf5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual interval&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFobj.shtml#acf5ccd1fd7b302c8a1c77081b606a6ad">operator()</a> (const <a class="el" href="classLabBox.shtml">LabBox</a> &amp;LB) const =0</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">a pure virtual function for interval image of boxes under <a class="el" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a>  <a href="#acf5ccd1fd7b302c8a1c77081b606a6ad"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFobj.shtml#a7e89aa4918cf8e40683dde607257d1ee">operator()</a> (const <a class="el" href="classLabPnt.shtml">LabPnt</a> &amp;LP) const =0</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">a pure virtual function for real image of real points under <a class="el" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a>  <a href="#a7e89aa4918cf8e40683dde607257d1ee"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFobj.shtml#a51d84b4865a42d81e4311a25546f846e">~Fobj</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#a51d84b4865a42d81e4311a25546f846e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual HessType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFobj.shtml#abe7df6a2da2b1d26915b41128d7693fe">operator()</a> (const HTvector &amp;x, const int label=0) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">a virtual function for HessType image of HTvector under <a class="el" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a>  <a href="#abe7df6a2da2b1d26915b41128d7693fe"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFobj.shtml#aa44c68d5c5ea0330b428d0fae8aa1bdf">LabBoxPriorIntegral</a> (const <a class="el" href="classLabBox.shtml">LabBox</a> &amp;LB)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Integral over box of the prior.  <a href="#aa44c68d5c5ea0330b428d0fae8aa1bdf"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFobj.shtml#a8e3160c380ff77e60fd90c9d5f608fd1">SetupLabDomainPriorIntegralList</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">set up the prior integral over the list of labeled domain boxes  <a href="#a8e3160c380ff77e60fd90c9d5f608fd1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual rvector&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFobj.shtml#a96f576383f9061e630341cb0121603b0">DrawFromBoxPrior</a> (const <a class="el" href="classLabBox.shtml">LabBox</a> &amp;LB, const rvector &amp;randvec)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Draw a real point in labeled box from density proportional to prior.  <a href="#a96f576383f9061e630341cb0121603b0"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFobj.shtml#a4a18a9cfa5c9e6d3e101cb95c83d3f7b">PriorDensity</a> (const <a class="el" href="classLabPnt.shtml">LabPnt</a> &amp;LP)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">prior density of a labeled real point  <a href="#a4a18a9cfa5c9e6d3e101cb95c83d3f7b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFobj.shtml#a1bef464bc98d6047f7e2b112d1ea25a3">BisectPt</a> (<a class="el" href="classLabBox.shtml">LabBox</a> &amp;LB, int k)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">return the point at which to bisect a labeled box along dimension k  <a href="#a1bef464bc98d6047f7e2b112d1ea25a3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">virtual real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFobj.shtml#adfdb53846db8ec3b667b9ffe09ad10db">inv_cdf</a> (interval I, real R)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">return real x s.t. that fraction R of probability lies below x  <a href="#adfdb53846db8ec3b667b9ffe09ad10db"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFobj.shtml#a809ddeff11d2485c9baef63217cf8ec5">setUsingLogDensity</a> (bool LogPi)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">set the target scale to natural logarithm  <a href="#a809ddeff11d2485c9baef63217cf8ec5"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFobj.shtml#add01053ad6d7c48fa088d6831e126d92">getUsingLogDensity</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">get the target scale being used  <a href="#add01053ad6d7c48fa088d6831e126d92"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFobj.shtml#add9a33b412a85fb11102eb4bd5998669">getLabeledDomainDim</a> (int label) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the dimensions of the list of labeled domains.  <a href="#add9a33b412a85fb11102eb4bd5998669"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">vector&lt; <a class="el" href="classLabBox.shtml">LabBox</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFobj.shtml#a69285b7966b3711d04dadf874ae6332a">get_domain</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the list of labeled domains.  <a href="#a69285b7966b3711d04dadf874ae6332a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">vector&lt; int &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFobj.shtml#aab479dd3bf44fa338cbab0991b783189">get_labelset</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the set of unique integer labels in LabDomainList.  <a href="#aab479dd3bf44fa338cbab0991b783189"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b">UsingLogDensity</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">a flag for working on the log(target shape) scale  <a href="#acf1d6b659549cea75e54582668ea7c3b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">vector&lt; <a class="el" href="classLabBox.shtml">LabBox</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff">LabDomainList</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The initial collection of labelled domain boxes -- prior support.  <a href="#a7d5297f74590a7bf95aa65d37a72fdff"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">vector&lt; real &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFobj.shtml#aacc4fb1fe699ad34bd51eea955220d72">LabDomainPriorIntegralList</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The prior integral over the list of labeled domain boxes.  <a href="#aacc4fb1fe699ad34bd51eea955220d72"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820">PriorType</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">To specify a type of prior density: uniform, exponential, user_defined.  <a href="#aa58fc4a0d73e6ece446db9a87a633820"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>An abstract class for target function objects. </p>
<p>For use with MRS, for sampling from a unnormalized density which is typically a likelihood times a prior density. We know how to normalize the prior density over any compact box. Currently: either unif (PriorType == 0) or exp(-x) The function object operator () returns the likelihood, or if UsingLogDensity is true, the log of the LogLikelihood.</p>
<p>Also for use with C-XSC Global optimization routines <a class="el" href="GOpt_8cpp.shtml#aa1ef10e5facfa08af99a235f02dce943" title="This runs the global optimisation procedure AllGOp for global minimums and prints results...">GOptMin()</a> and <a class="el" href="GOpt_8cpp.shtml#ad4d421e8fe8cd7dc081fbc719c43c8b4" title="This runs the global optimisation procedure AllGOp for global maximums and prints results...">GOptMax()</a>, in the context of rigorous maximum lkelihood estimation over labeled domains. </p>

<p>Definition at line <a class="el" href="Fobj_8hpp_source.shtml#l00044">44</a> of file <a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>.</p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a51d84b4865a42d81e4311a25546f846e"></a><!-- doxytag: member="Fobj::~Fobj" ref="a51d84b4865a42d81e4311a25546f846e" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual <a class="el" href="classFobj.shtml#a51d84b4865a42d81e4311a25546f846e">Fobj::~Fobj</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Destructor. </p>

<p>Definition at line <a class="el" href="Fobj_8hpp_source.shtml#l00088">88</a> of file <a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>.</p>
<div class="fragment"><pre class="fragment">{}
</pre></div>
</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a1bef464bc98d6047f7e2b112d1ea25a3"></a><!-- doxytag: member="Fobj::BisectPt" ref="a1bef464bc98d6047f7e2b112d1ea25a3" args="(LabBox &amp;LB, int k)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual real <a class="el" href="classFobj.shtml#a1bef464bc98d6047f7e2b112d1ea25a3">Fobj::BisectPt</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classLabBox.shtml">LabBox</a> &amp;&#160;</td>
          <td class="paramname"><em>LB</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>k</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>return the point at which to bisect a labeled box along dimension k </p>
<p>Bisect labeled box along k-th dimension so as to get equal prior probabilities in the resulting two halves. </p>

<p>Definition at line <a class="el" href="Fobj_8hpp_source.shtml#l00161">161</a> of file <a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>.</p>

<p>References <a class="el" href="SmallClasses_8hpp_source.shtml#l00075">LabBox::Box</a>, and <a class="el" href="Fobj_8hpp_source.shtml#l00177">inv_cdf()</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00848">MRSampler::Bisect()</a>.</p>
<div class="fragment"><pre class="fragment">    { 
      <span class="comment">// two new boxes should each get half the prior prob.</span>
      real x2 = <a class="code" href="classFobj.shtml#adfdb53846db8ec3b667b9ffe09ad10db" title="return real x s.t. that fraction R of probability lies below x">inv_cdf</a>(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[k], 0.5);
      <span class="comment">//if(x1-x2 != 0.0){</span>
      <span class="comment">//cout &lt;&lt; &quot;bisect pt: x1, x2: &quot; &lt;&lt; x1 </span>
      <span class="comment">//  &lt;&lt; &quot;    &quot; &lt;&lt; x2 &lt;&lt; &quot;   &quot; &lt;&lt; (x1-x2) &lt;&lt; endl;</span>
      <span class="comment">//}</span>
      <span class="keywordflow">return</span> x2;
    }
</pre></div>
</div>
</div>
<a class="anchor" id="a96f576383f9061e630341cb0121603b0"></a><!-- doxytag: member="Fobj::DrawFromBoxPrior" ref="a96f576383f9061e630341cb0121603b0" args="(const LabBox &amp;LB, const rvector &amp;randvec)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual rvector <a class="el" href="classFobj.shtml#a96f576383f9061e630341cb0121603b0">Fobj::DrawFromBoxPrior</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classLabBox.shtml">LabBox</a> &amp;&#160;</td>
          <td class="paramname"><em>LB</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const rvector &amp;&#160;</td>
          <td class="paramname"><em>randvec</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Draw a real point in labeled box from density proportional to prior. </p>

<p>Definition at line <a class="el" href="Fobj_8hpp_source.shtml#l00112">112</a> of file <a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>.</p>

<p>References <a class="el" href="SmallClasses_8hpp_source.shtml#l00075">LabBox::Box</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00177">inv_cdf()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00423">MRSampler::ImportanceSampleMany()</a>, <a class="el" href="MRSampler_8cpp_source.shtml#l00354">MRSampler::RejectionSampleMany()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00279">MRSampler::RejectionSampleOnce()</a>.</p>
<div class="fragment"><pre class="fragment">    {
      <span class="keywordtype">int</span> lo = <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>);
      <span class="keywordtype">int</span> hi = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>);
      rvector the_point(lo, hi);
      <span class="keywordflow">if</span>((hi - lo) &gt;  (<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(randvec) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(randvec)))
      {
        cerr 
          &lt;&lt; <span class="stringliteral">&quot;in Fobj::DrawFromBoxPrior. Too few random numbers in randvec. \n&quot;</span>;
        exit(1);
      }

      <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=lo; i&lt;=hi; i++)
      {
        the_point[i] = <a class="code" href="classFobj.shtml#adfdb53846db8ec3b667b9ffe09ad10db" title="return real x s.t. that fraction R of probability lies below x">inv_cdf</a>(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[i], randvec[i]);
      }

      <span class="keywordflow">return</span> the_point;
    }
</pre></div>
</div>
</div>
<a class="anchor" id="a69285b7966b3711d04dadf874ae6332a"></a><!-- doxytag: member="Fobj::get_domain" ref="a69285b7966b3711d04dadf874ae6332a" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt;<a class="el" href="classLabBox.shtml">LabBox</a>&gt; <a class="el" href="classFobj.shtml#a69285b7966b3711d04dadf874ae6332a">Fobj::get_domain</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the list of labeled domains. </p>

<p>Definition at line <a class="el" href="Fobj_8hpp_source.shtml#l00224">224</a> of file <a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>.</p>

<p>References <a class="el" href="Fobj_8hpp_source.shtml#l00052">LabDomainList</a>.</p>
<div class="fragment"><pre class="fragment">    {
      <span class="keywordflow">return</span> <a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>;
    }
</pre></div>
</div>
</div>
<a class="anchor" id="a541c0edbb08855d1e3cdbb45b0aa26af"></a><!-- doxytag: member="Fobj::get_interval_calls" ref="a541c0edbb08855d1e3cdbb45b0aa26af" args="()=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual int <a class="el" href="classFobj.shtml#a541c0edbb08855d1e3cdbb45b0aa26af">Fobj::get_interval_calls</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get number of interval function calls. </p>

<p>Implemented in <a class="el" href="classFPhyloPOT.shtml#af1164c3a4f529f5b4af38d18c79f7b47">FPhyloPOT</a>, <a class="el" href="classFCFN3.shtml#acfca28a02e2f9dbcf8ff115a8bb4f262">FCFN3</a>, <a class="el" href="classFCFN3Rooted.shtml#ac1b0ba1a574c970bd1681f4273d4075e">FCFN3Rooted</a>, <a class="el" href="classFCFN3UnRooted.shtml#a8cd2bfdf21a3f8a8109dce3a80833b98">FCFN3UnRooted</a>, <a class="el" href="classFRosenbrock.shtml#a6ca09c94fc6597d64474a87af8ffc59d">FRosenbrock</a>, <a class="el" href="classFLevy2D.shtml#a8ca0edbf796cd3d7687a86a1c80266c1">FLevy2D</a>, <a class="el" href="classFShiryaev1D__Lkl__aa__fromData.shtml#af64393de70c67faba8af5f5e8aade1cb">FShiryaev1D_Lkl_aa_fromData</a>, <a class="el" href="classFCFN3Star.shtml#aaa71b2dc822592e81afb4b12fdd8463c">FCFN3Star</a>, <a class="el" href="classFCesaroBellNo.shtml#acfda8e11028fbc5d41cd8810cc17567f">FCesaroBellNo</a>, <a class="el" href="classFShiryaev1D.shtml#a3012ae56329e3f2e9bf34cec1db2aceb">FShiryaev1D</a>, and <a class="el" href="classFWitchesHat.shtml#ac5039f4bf8564b17e2c5c3fcbd10ddfd">FWitchesHat</a>.</p>

<p>Referenced by <a class="el" href="MooreImpSam_2CFN3_2CFN3_8cpp_source.shtml#l00058">ProduceMRSamples()</a>.</p>

</div>
</div>
<a class="anchor" id="aab479dd3bf44fa338cbab0991b783189"></a><!-- doxytag: member="Fobj::get_labelset" ref="aab479dd3bf44fa338cbab0991b783189" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt;int&gt; <a class="el" href="classFobj.shtml#aab479dd3bf44fa338cbab0991b783189">Fobj::get_labelset</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the set of unique integer labels in LabDomainList. </p>

<p>Definition at line <a class="el" href="Fobj_8hpp_source.shtml#l00230">230</a> of file <a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>.</p>

<p>References <a class="el" href="Fobj_8hpp_source.shtml#l00052">LabDomainList</a>.</p>
<div class="fragment"><pre class="fragment">    {
      set&lt;int&gt; LS;

      <span class="keywordflow">for</span>(vector&lt;LabBox&gt;::const_iterator it = <a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>.begin();
          it != <a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>.end(); it++) LS.insert(it-&gt;L);
      vector&lt;int&gt; LV;
      <span class="keywordflow">for</span>(set&lt;int&gt;::const_iterator it = LS.begin(); 
          it != LS.end(); it++) LV.push_back(*it);
      <span class="keywordflow">return</span> LV;
    }
</pre></div>
</div>
</div>
<a class="anchor" id="a63df2521571faeb43663613a9a4611e7"></a><!-- doxytag: member="Fobj::get_real_calls" ref="a63df2521571faeb43663613a9a4611e7" args="()=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual int <a class="el" href="classFobj.shtml#a63df2521571faeb43663613a9a4611e7">Fobj::get_real_calls</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get number of real function calls. </p>

<p>Implemented in <a class="el" href="classFPhyloPOT.shtml#a439b0be63da661a8e7c945c986874c8c">FPhyloPOT</a>, <a class="el" href="classFCFN3.shtml#acc6f4fb7f07f280fe124499e9c5062ab">FCFN3</a>, <a class="el" href="classFCFN3Rooted.shtml#acd3454ab1e5e8b52f323749a5236856e">FCFN3Rooted</a>, <a class="el" href="classFCFN3UnRooted.shtml#a56cccac7570877578c6337183c2153d3">FCFN3UnRooted</a>, <a class="el" href="classFRosenbrock.shtml#ab1f708734168295d5120388e9a25d767">FRosenbrock</a>, <a class="el" href="classFLevy2D.shtml#a48cec5994f9d62306e3852dda50f7f5a">FLevy2D</a>, <a class="el" href="classFShiryaev1D__Lkl__aa__fromData.shtml#a1b055fdade523cb5df05994c9a565f2f">FShiryaev1D_Lkl_aa_fromData</a>, <a class="el" href="classFCFN3Star.shtml#a1a5955ccbbecdce0f6cab399ef93f53c">FCFN3Star</a>, <a class="el" href="classFCesaroBellNo.shtml#a20e3fb43978e543c32d826bc9ccf07f8">FCesaroBellNo</a>, <a class="el" href="classFShiryaev1D.shtml#a893357913c92294604f237dcb1117a6c">FShiryaev1D</a>, and <a class="el" href="classFWitchesHat.shtml#a601c966b9479f0d500f677ab1756347f">FWitchesHat</a>.</p>

<p>Referenced by <a class="el" href="MooreImpSam_2CFN3_2CFN3_8cpp_source.shtml#l00058">ProduceMRSamples()</a>.</p>

</div>
</div>
<a class="anchor" id="add9a33b412a85fb11102eb4bd5998669"></a><!-- doxytag: member="Fobj::getLabeledDomainDim" ref="add9a33b412a85fb11102eb4bd5998669" args="(int label) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFobj.shtml#add9a33b412a85fb11102eb4bd5998669">Fobj::getLabeledDomainDim</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>label</em></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the dimensions of the list of labeled domains. </p>

<p>Definition at line <a class="el" href="Fobj_8hpp_source.shtml#l00202">202</a> of file <a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>.</p>

<p>References <a class="el" href="Fobj_8hpp_source.shtml#l00052">LabDomainList</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>.</p>

<p>Referenced by <a class="el" href="GOpt_8cpp_source.shtml#l00100">GOptMax()</a>, <a class="el" href="GOpt_8cpp_source.shtml#l00061">GOptMin()</a>, and <a class="el" href="GOpt_2PhyloPOT_2PhyloPOT_8cpp_source.shtml#l00062">main()</a>.</p>
<div class="fragment"><pre class="fragment">    {
      <span class="keywordtype">int</span> retValue = 0;
      <span class="keywordtype">bool</span> foundLabel = 0;

      vector&lt;LabBox&gt;::const_iterator it;

      it = <a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>.begin();

      <span class="keywordflow">while</span>(!foundLabel &amp;&amp; it &lt; <a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>.end())
      {
        <span class="keywordflow">if</span> (it-&gt;L == label)
        {
          foundLabel = 1;
          retValue = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(it-&gt;Box) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(it-&gt;Box) + 1;
        }
        it++;
      }
      <span class="keywordflow">return</span> retValue;
    }
</pre></div>
</div>
</div>
<a class="anchor" id="add01053ad6d7c48fa088d6831e126d92"></a><!-- doxytag: member="Fobj::getUsingLogDensity" ref="add01053ad6d7c48fa088d6831e126d92" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classFobj.shtml#add01053ad6d7c48fa088d6831e126d92">Fobj::getUsingLogDensity</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>get the target scale being used </p>

<p>Definition at line <a class="el" href="Fobj_8hpp_source.shtml#l00196">196</a> of file <a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>.</p>

<p>References <a class="el" href="Fobj_8hpp_source.shtml#l00049">UsingLogDensity</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00080">MRSampler::MRSampler()</a>.</p>
<div class="fragment"><pre class="fragment">    {
      <span class="keywordflow">return</span> <a class="code" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b" title="a flag for working on the log(target shape) scale">UsingLogDensity</a>;
    }
</pre></div>
</div>
</div>
<a class="anchor" id="adfdb53846db8ec3b667b9ffe09ad10db"></a><!-- doxytag: member="Fobj::inv_cdf" ref="adfdb53846db8ec3b667b9ffe09ad10db" args="(interval I, real R)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual real <a class="el" href="classFobj.shtml#adfdb53846db8ec3b667b9ffe09ad10db">Fobj::inv_cdf</a> </td>
          <td>(</td>
          <td class="paramtype">interval&#160;</td>
          <td class="paramname"><em>I</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">real&#160;</td>
          <td class="paramname"><em>R</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>return real x s.t. that fraction R of probability lies below x </p>
<p>for prior density (either unif (PriorType == 0) or exp(-x)) normalized to 1 in box </p>

<p>Definition at line <a class="el" href="Fobj_8hpp_source.shtml#l00177">177</a> of file <a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00923">taylor::exp()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00960">taylor::ln()</a>, and <a class="el" href="Fobj_8hpp_source.shtml#l00058">PriorType</a>.</p>

<p>Referenced by <a class="el" href="Fobj_8hpp_source.shtml#l00161">BisectPt()</a>, and <a class="el" href="Fobj_8hpp_source.shtml#l00112">DrawFromBoxPrior()</a>.</p>
<div class="fragment"><pre class="fragment">    {
      <span class="comment">// cout &lt;&lt; &quot;In inv_cdf. PriorType: &quot; &lt;&lt; PriorType &lt;&lt; endl;</span>
      <span class="keywordflow">return</span> (<a class="code" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820" title="To specify a type of prior density: uniform, exponential, user_defined.">PriorType</a> == 0)?
      <span class="comment">// Inf(I) + R*(diam(I))</span>
      <span class="comment">// better than the line above? agrees with mid(I) when R=0.5</span>
        (1.0 - R)*Inf(I) + R*Sup(I)
        : Inf(I) - <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(1.0 - R*(1.0 - <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-diam(I))));
    }
</pre></div>
</div>
</div>
<a class="anchor" id="aa44c68d5c5ea0330b428d0fae8aa1bdf"></a><!-- doxytag: member="Fobj::LabBoxPriorIntegral" ref="aa44c68d5c5ea0330b428d0fae8aa1bdf" args="(const LabBox &amp;LB)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classFobj.shtml#aa44c68d5c5ea0330b428d0fae8aa1bdf">Fobj::LabBoxPriorIntegral</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classLabBox.shtml">LabBox</a> &amp;&#160;</td>
          <td class="paramname"><em>LB</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Integral over box of the prior. </p>
<p>get the default integral of prior over a labeled box</p>
<p>an inline definition of the virtual function for default integral of prior over a labeled box -- not yet pure virtual </p>

<p>Definition at line <a class="el" href="Fobj_8hpp_source.shtml#l00263">263</a> of file <a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>.</p>

<p>References <a class="el" href="SmallClasses_8hpp_source.shtml#l00075">LabBox::Box</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00923">taylor::exp()</a>, and <a class="el" href="Fobj_8hpp_source.shtml#l00058">PriorType</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00781">MRSampler::getBoxREInfo()</a>, and <a class="el" href="Fobj_8hpp_source.shtml#l00101">SetupLabDomainPriorIntegralList()</a>.</p>
<div class="fragment"><pre class="fragment">{
  real integral = 1.0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= VecLen(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>); i++)
  {
    integral *= (<a class="code" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820" title="To specify a type of prior density: uniform, exponential, user_defined.">PriorType</a> == 0)? 
      diam(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[i]): <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-Inf(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[i])) - <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-Sup(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[i]));
  }
  <span class="keywordflow">return</span> integral;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a8da39e1c8780124d6826742cdf21aaf5"></a><!-- doxytag: member="Fobj::LabBoxVolume" ref="a8da39e1c8780124d6826742cdf21aaf5" args="(const LabBox &amp;LB)=0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classFobj.shtml#a8da39e1c8780124d6826742cdf21aaf5">Fobj::LabBoxVolume</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classLabBox.shtml">LabBox</a> &amp;&#160;</td>
          <td class="paramname"><em>LB</em></td><td>)</td>
          <td><code> [inline, pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>a defined pure virtual function for default Lebesgue measure (volume) of a labelled box </p>
<p>get the default volume (Lebesgue) of a labeled box</p>
<p>derived classes inherit interface and default behavior see [Item 34,P.166, Meyers, Effective C++]</p>
<p>an inline definition of the pure virtual function for default Lebesgue measure (volume) of a labeled box </p>

<p>Implemented in <a class="el" href="classFPhyloPOT.shtml#a580e93411b4a2dd881f4854481a8aeef">FPhyloPOT</a>, <a class="el" href="classFCFN3.shtml#ae16fa2a68755b135ac0d4f9faea41b20">FCFN3</a>, <a class="el" href="classFCFN3Rooted.shtml#a0797569e9fea66f72f4e90642e10da15">FCFN3Rooted</a>, <a class="el" href="classFCFN3UnRooted.shtml#aae39656be045741eddc3590529aec2b6">FCFN3UnRooted</a>, <a class="el" href="classFRosenbrock.shtml#ac6cdd39b087bbb77561eb8dd0e427ce9">FRosenbrock</a>, <a class="el" href="classFLevy2D.shtml#a8d1acd389752d1554445b0247bb06f60">FLevy2D</a>, <a class="el" href="classFShiryaev1D__Lkl__aa__fromData.shtml#ace0761a116e45f3f924903e355742486">FShiryaev1D_Lkl_aa_fromData</a>, <a class="el" href="classFCFN3Star.shtml#ad9fea247c542560b3c13dd0ad340d25f">FCFN3Star</a>, <a class="el" href="classFCesaroBellNo.shtml#a565d2a382aed9be6b5aebd99810be370">FCesaroBellNo</a>, <a class="el" href="classFShiryaev1D.shtml#a18052485756b302b7ac397355f6fc48c">FShiryaev1D</a>, and <a class="el" href="classFWitchesHat.shtml#a4549cc1c30758e673f050e9b30eae67e">FWitchesHat</a>.</p>

<p>Definition at line <a class="el" href="Fobj_8hpp_source.shtml#l00251">251</a> of file <a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>.</p>

<p>References <a class="el" href="SmallClasses_8hpp_source.shtml#l00075">LabBox::Box</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00781">MRSampler::getBoxREInfo()</a>, <a class="el" href="FCesaroBellNo_8hpp_source.shtml#l00060">FCesaroBellNo::LabBoxVolume()</a>, <a class="el" href="FLevy2D_8hpp_source.shtml#l00076">FLevy2D::LabBoxVolume()</a>, <a class="el" href="FRosenbrock_8hpp_source.shtml#l00077">FRosenbrock::LabBoxVolume()</a>, and <a class="el" href="FPhyloPOT_8hpp_source.shtml#l00224">FPhyloPOT::LabBoxVolume()</a>.</p>
<div class="fragment"><pre class="fragment">{
  real volume = 1.0;
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= VecLen(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>); i++) volume *= diam(LB.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[i]);
  <span class="keywordflow">return</span> volume;
}
</pre></div>
</div>
</div>
<a class="anchor" id="acf5ccd1fd7b302c8a1c77081b606a6ad"></a><!-- doxytag: member="Fobj::operator()" ref="acf5ccd1fd7b302c8a1c77081b606a6ad" args="(const LabBox &amp;LB) const =0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual interval Fobj::operator() </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classLabBox.shtml">LabBox</a> &amp;&#160;</td>
          <td class="paramname"><em>LB</em></td><td>)</td>
          <td> const<code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>a pure virtual function for interval image of boxes under <a class="el" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a> </p>
<p>Derived classes inherit interface only see [Item 34,P.162, Meyers, Effective C++] </p>

<p>Implemented in <a class="el" href="classFPhyloPOT.shtml#a4d0a6125142aba97d718b11d8b8fc909">FPhyloPOT</a>, <a class="el" href="classFCFN3.shtml#aec0a3534e5961954300b910f7a7401da">FCFN3</a>, <a class="el" href="classFCFN3Rooted.shtml#a13851aabf5dfdd262bd5d0c3b0128612">FCFN3Rooted</a>, <a class="el" href="classFCFN3UnRooted.shtml#abaaaa5afcbd3a3c9baa2c6afb58bb5d6">FCFN3UnRooted</a>, <a class="el" href="classFShiryaev1D__Lkl__aa__fromData.shtml#ac3ef0d8ca7ece7015c1c79af2a85e261">FShiryaev1D_Lkl_aa_fromData</a>, <a class="el" href="classFRosenbrock.shtml#a31adc48845c9b35628d57497cff8666c">FRosenbrock</a>, <a class="el" href="classFLevy2D.shtml#a0bf7bf18b3f8bdcb2034526f2b809162">FLevy2D</a>, <a class="el" href="classFCesaroBellNo.shtml#a92568b498df7475dd13d20cb7bfa1d23">FCesaroBellNo</a>, <a class="el" href="classFCFN3Star.shtml#af2b3d4543f1ba7f9040e24433ac7436e">FCFN3Star</a>, <a class="el" href="classFShiryaev1D.shtml#a8e4ea007da7c37a1491f56fe663b7437">FShiryaev1D</a>, and <a class="el" href="classFWitchesHat.shtml#a11734772d7dea57df5ff72ebbfd3e272">FWitchesHat</a>.</p>

</div>
</div>
<a class="anchor" id="a7e89aa4918cf8e40683dde607257d1ee"></a><!-- doxytag: member="Fobj::operator()" ref="a7e89aa4918cf8e40683dde607257d1ee" args="(const LabPnt &amp;LP) const =0" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual real Fobj::operator() </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classLabPnt.shtml">LabPnt</a> &amp;&#160;</td>
          <td class="paramname"><em>LP</em></td><td>)</td>
          <td> const<code> [pure virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>a pure virtual function for real image of real points under <a class="el" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a> </p>

<p>Implemented in <a class="el" href="classFPhyloPOT.shtml#afdf1491ae76809442d33e224b4607102">FPhyloPOT</a>, <a class="el" href="classFCFN3.shtml#a922aacaa4b75d80ef6a08ae3243e63fc">FCFN3</a>, <a class="el" href="classFCFN3Rooted.shtml#aeae1016b0962cf66922fdf27c0fdb514">FCFN3Rooted</a>, <a class="el" href="classFCFN3UnRooted.shtml#a598796f5e3db2e01ad871ab84833a1fb">FCFN3UnRooted</a>, <a class="el" href="classFShiryaev1D__Lkl__aa__fromData.shtml#aa14358629387c248e96ccc8183fa9353">FShiryaev1D_Lkl_aa_fromData</a>, <a class="el" href="classFRosenbrock.shtml#aa626842acb0907225aa493f048996535">FRosenbrock</a>, <a class="el" href="classFLevy2D.shtml#a69223536c13e52445d3ee1fc435447d8">FLevy2D</a>, <a class="el" href="classFCesaroBellNo.shtml#ab866e2831e6bf8c4fca46433ad2a6417">FCesaroBellNo</a>, <a class="el" href="classFCFN3Star.shtml#a3ea99664a49607ab495aad38b6a4a31d">FCFN3Star</a>, <a class="el" href="classFShiryaev1D.shtml#af6742131d4d7acf6327d757a112b35ee">FShiryaev1D</a>, and <a class="el" href="classFWitchesHat.shtml#a027d78c3e9e90da19370cb50d8b43b46">FWitchesHat</a>.</p>

</div>
</div>
<a class="anchor" id="abe7df6a2da2b1d26915b41128d7693fe"></a><!-- doxytag: member="Fobj::operator()" ref="abe7df6a2da2b1d26915b41128d7693fe" args="(const HTvector &amp;x, const int label=0) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">HessType Fobj::operator() </td>
          <td>(</td>
          <td class="paramtype">const HTvector &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>label</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>a virtual function for HessType image of HTvector under <a class="el" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a> </p>
<p>an inline definition for HessType image of HTvector under <a class="el" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a></p>
<p>Matches signature for HTscalar_FctPtr type for Global optimization using AllGOp and model label if a label is specified </p>

<p>Reimplemented in <a class="el" href="classFPhyloPOT.shtml#a8a259ba9d2704e586dc2dcea268dc8e8">FPhyloPOT</a>, <a class="el" href="classFRosenbrock.shtml#a47652c3d90874911897f9601f7003e8f">FRosenbrock</a>, and <a class="el" href="classFLevy2D.shtml#a0a031a396ed8aa0591ee214a6ec20b7f">FLevy2D</a>.</p>

<p>Definition at line <a class="el" href="Fobj_8hpp_source.shtml#l00275">275</a> of file <a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>.</p>
<div class="fragment"><pre class="fragment">{
  HessType hh(1);
  hh = 0.0;
  <span class="keywordflow">return</span> hh;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a4a18a9cfa5c9e6d3e101cb95c83d3f7b"></a><!-- doxytag: member="Fobj::PriorDensity" ref="a4a18a9cfa5c9e6d3e101cb95c83d3f7b" args="(const LabPnt &amp;LP)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual real <a class="el" href="classFobj.shtml#a4a18a9cfa5c9e6d3e101cb95c83d3f7b">Fobj::PriorDensity</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classLabPnt.shtml">LabPnt</a> &amp;&#160;</td>
          <td class="paramname"><em>LP</em></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>prior density of a labeled real point </p>

<p>Definition at line <a class="el" href="Fobj_8hpp_source.shtml#l00133">133</a> of file <a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l00923">taylor::exp()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="SmallClasses_8hpp_source.shtml#l00033">LabPnt::Pnt</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00058">PriorType</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>.</p>

<p>Referenced by <a class="el" href="MRSampler_8cpp_source.shtml#l00423">MRSampler::ImportanceSampleMany()</a>, and <a class="el" href="MRSampler_8cpp_source.shtml#l00537">MRSampler::ImportanceSampleManyQuasi()</a>.</p>
<div class="fragment"><pre class="fragment">    {
      rvector Pnt = LP.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>;

      <span class="keywordflow">if</span>(<a class="code" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820" title="To specify a type of prior density: uniform, exponential, user_defined.">PriorType</a> == 0)
      {
        <span class="keywordflow">return</span> 1.0;
      }
      <span class="keywordflow">else</span>
      {
        <span class="comment">// -1*log of prior density</span>
        real mlpd = 0.0;

        <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(Pnt); i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(Pnt); i++)
        {
          mlpd -= Pnt[i];
        }

        <span class="keywordflow">return</span> <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(mlpd);
      }
    }
</pre></div>
</div>
</div>
<a class="anchor" id="a8e3160c380ff77e60fd90c9d5f608fd1"></a><!-- doxytag: member="Fobj::SetupLabDomainPriorIntegralList" ref="a8e3160c380ff77e60fd90c9d5f608fd1" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">virtual void <a class="el" href="classFobj.shtml#a8e3160c380ff77e60fd90c9d5f608fd1">Fobj::SetupLabDomainPriorIntegralList</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>set up the prior integral over the list of labeled domain boxes </p>

<p>Definition at line <a class="el" href="Fobj_8hpp_source.shtml#l00101">101</a> of file <a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>.</p>

<p>References <a class="el" href="Fobj_8hpp_source.shtml#l00263">LabBoxPriorIntegral()</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00052">LabDomainList</a>, and <a class="el" href="Fobj_8hpp_source.shtml#l00055">LabDomainPriorIntegralList</a>.</p>

<p>Referenced by <a class="el" href="FCFN3_8cpp_source.shtml#l00395">FCFN3::FCFN3()</a>.</p>
<div class="fragment"><pre class="fragment">    {
      <a class="code" href="classFobj.shtml#aacc4fb1fe699ad34bd51eea955220d72" title="The prior integral over the list of labeled domain boxes.">LabDomainPriorIntegralList</a>.resize(<a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>.size());
      <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i=0; i&lt;<a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>.size(); i++)
      {
        <a class="code" href="classFobj.shtml#aacc4fb1fe699ad34bd51eea955220d72" title="The prior integral over the list of labeled domain boxes.">LabDomainPriorIntegralList</a>[i] 
          = <a class="code" href="classFobj.shtml#aa44c68d5c5ea0330b428d0fae8aa1bdf" title="Integral over box of the prior.">Fobj::LabBoxPriorIntegral</a>(<a class="code" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff" title="The initial collection of labelled domain boxes -- prior support.">LabDomainList</a>[i]);
      }
    }
</pre></div>
</div>
</div>
<a class="anchor" id="a809ddeff11d2485c9baef63217cf8ec5"></a><!-- doxytag: member="Fobj::setUsingLogDensity" ref="a809ddeff11d2485c9baef63217cf8ec5" args="(bool LogPi)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classFobj.shtml#a809ddeff11d2485c9baef63217cf8ec5">Fobj::setUsingLogDensity</a> </td>
          <td>(</td>
          <td class="paramtype">bool&#160;</td>
          <td class="paramname"><em>LogPi</em></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>set the target scale to natural logarithm </p>

<p>Definition at line <a class="el" href="Fobj_8hpp_source.shtml#l00190">190</a> of file <a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>.</p>

<p>References <a class="el" href="Fobj_8hpp_source.shtml#l00049">UsingLogDensity</a>.</p>

<p>Referenced by <a class="el" href="FCesaroBellNo_8cpp_source.shtml#l00027">FCesaroBellNo::FCesaroBellNo()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00395">FCFN3::FCFN3()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00232">FCFN3Rooted::FCFN3Rooted()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00051">FCFN3Star::FCFN3Star()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00120">FCFN3UnRooted::FCFN3UnRooted()</a>, <a class="el" href="FLevy2D_8cpp_source.shtml#l00061">FLevy2D::FLevy2D()</a>, <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00030">FPhyloPOT::FPhyloPOT()</a>, <a class="el" href="FRosenbrock_8cpp_source.shtml#l00029">FRosenbrock::FRosenbrock()</a>, <a class="el" href="FShiryaev1D_8cpp_source.shtml#l00046">FShiryaev1D::FShiryaev1D()</a>, <a class="el" href="FShiryaev1D_8cpp_source.shtml#l00104">FShiryaev1D_Lkl_aa_fromData::FShiryaev1D_Lkl_aa_fromData()</a>, and <a class="el" href="FWitchesHat_8cpp_source.shtml#l00048">FWitchesHat::FWitchesHat()</a>.</p>
<div class="fragment"><pre class="fragment">    {
      <a class="code" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b" title="a flag for working on the log(target shape) scale">UsingLogDensity</a> = LogPi;
    }
</pre></div>
</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="a7d5297f74590a7bf95aa65d37a72fdff"></a><!-- doxytag: member="Fobj::LabDomainList" ref="a7d5297f74590a7bf95aa65d37a72fdff" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt;<a class="el" href="classLabBox.shtml">LabBox</a>&gt; <a class="el" href="classFobj.shtml#a7d5297f74590a7bf95aa65d37a72fdff">Fobj::LabDomainList</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The initial collection of labelled domain boxes -- prior support. </p>

<p>Definition at line <a class="el" href="Fobj_8hpp_source.shtml#l00052">52</a> of file <a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>.</p>

<p>Referenced by <a class="el" href="FCesaroBellNo_8cpp_source.shtml#l00027">FCesaroBellNo::FCesaroBellNo()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00395">FCFN3::FCFN3()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00232">FCFN3Rooted::FCFN3Rooted()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00051">FCFN3Star::FCFN3Star()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00120">FCFN3UnRooted::FCFN3UnRooted()</a>, <a class="el" href="FLevy2D_8cpp_source.shtml#l00061">FLevy2D::FLevy2D()</a>, <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00030">FPhyloPOT::FPhyloPOT()</a>, <a class="el" href="FRosenbrock_8cpp_source.shtml#l00029">FRosenbrock::FRosenbrock()</a>, <a class="el" href="FShiryaev1D_8cpp_source.shtml#l00046">FShiryaev1D::FShiryaev1D()</a>, <a class="el" href="FShiryaev1D_8cpp_source.shtml#l00104">FShiryaev1D_Lkl_aa_fromData::FShiryaev1D_Lkl_aa_fromData()</a>, <a class="el" href="FWitchesHat_8cpp_source.shtml#l00048">FWitchesHat::FWitchesHat()</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00224">get_domain()</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00230">get_labelset()</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00202">getLabeledDomainDim()</a>, and <a class="el" href="Fobj_8hpp_source.shtml#l00101">SetupLabDomainPriorIntegralList()</a>.</p>

</div>
</div>
<a class="anchor" id="aacc4fb1fe699ad34bd51eea955220d72"></a><!-- doxytag: member="Fobj::LabDomainPriorIntegralList" ref="aacc4fb1fe699ad34bd51eea955220d72" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">vector&lt;real&gt; <a class="el" href="classFobj.shtml#aacc4fb1fe699ad34bd51eea955220d72">Fobj::LabDomainPriorIntegralList</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The prior integral over the list of labeled domain boxes. </p>

<p>Definition at line <a class="el" href="Fobj_8hpp_source.shtml#l00055">55</a> of file <a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>.</p>

<p>Referenced by <a class="el" href="FCFN3_8cpp_source.shtml#l00395">FCFN3::FCFN3()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00467">FCFN3::operator()()</a>, and <a class="el" href="Fobj_8hpp_source.shtml#l00101">SetupLabDomainPriorIntegralList()</a>.</p>

</div>
</div>
<a class="anchor" id="aa58fc4a0d73e6ece446db9a87a633820"></a><!-- doxytag: member="Fobj::PriorType" ref="aa58fc4a0d73e6ece446db9a87a633820" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classFobj.shtml#aa58fc4a0d73e6ece446db9a87a633820">Fobj::PriorType</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>To specify a type of prior density: uniform, exponential, user_defined. </p>

<p>Definition at line <a class="el" href="Fobj_8hpp_source.shtml#l00058">58</a> of file <a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>.</p>

<p>Referenced by <a class="el" href="FCFN3_8cpp_source.shtml#l00395">FCFN3::FCFN3()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00232">FCFN3Rooted::FCFN3Rooted()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00051">FCFN3Star::FCFN3Star()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00120">FCFN3UnRooted::FCFN3UnRooted()</a>, <a class="el" href="FLevy2D_8cpp_source.shtml#l00061">FLevy2D::FLevy2D()</a>, <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00030">FPhyloPOT::FPhyloPOT()</a>, <a class="el" href="FRosenbrock_8cpp_source.shtml#l00029">FRosenbrock::FRosenbrock()</a>, <a class="el" href="FShiryaev1D_8cpp_source.shtml#l00046">FShiryaev1D::FShiryaev1D()</a>, <a class="el" href="FShiryaev1D_8cpp_source.shtml#l00104">FShiryaev1D_Lkl_aa_fromData::FShiryaev1D_Lkl_aa_fromData()</a>, <a class="el" href="FWitchesHat_8cpp_source.shtml#l00048">FWitchesHat::FWitchesHat()</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00177">inv_cdf()</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00263">LabBoxPriorIntegral()</a>, and <a class="el" href="Fobj_8hpp_source.shtml#l00133">PriorDensity()</a>.</p>

</div>
</div>
<a class="anchor" id="acf1d6b659549cea75e54582668ea7c3b"></a><!-- doxytag: member="Fobj::UsingLogDensity" ref="acf1d6b659549cea75e54582668ea7c3b" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classFobj.shtml#acf1d6b659549cea75e54582668ea7c3b">Fobj::UsingLogDensity</a><code> [protected]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>a flag for working on the log(target shape) scale </p>

<p>Definition at line <a class="el" href="Fobj_8hpp_source.shtml#l00049">49</a> of file <a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>.</p>

<p>Referenced by <a class="el" href="Fobj_8hpp_source.shtml#l00196">getUsingLogDensity()</a>, <a class="el" href="FWitchesHat_8cpp_source.shtml#l00091">FWitchesHat::operator()()</a>, <a class="el" href="FShiryaev1D_8cpp_source.shtml#l00070">FShiryaev1D::operator()()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00075">FCFN3Star::operator()()</a>, <a class="el" href="FCesaroBellNo_8cpp_source.shtml#l00047">FCesaroBellNo::operator()()</a>, <a class="el" href="FLevy2D_8cpp_source.shtml#l00082">FLevy2D::operator()()</a>, <a class="el" href="FRosenbrock_8cpp_source.shtml#l00053">FRosenbrock::operator()()</a>, <a class="el" href="FShiryaev1D_8cpp_source.shtml#l00128">FShiryaev1D_Lkl_aa_fromData::operator()()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00151">FCFN3UnRooted::operator()()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00279">FCFN3Rooted::operator()()</a>, <a class="el" href="FCFN3_8cpp_source.shtml#l00467">FCFN3::operator()()</a>, and <a class="el" href="Fobj_8hpp_source.shtml#l00190">setUsingLogDensity()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="classFobj.shtml">Fobj</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:25 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
