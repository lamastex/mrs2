<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: itaylor.h Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('itaylor_8h.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">itaylor.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="itaylor_8h.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*   File: itaylor.h</span>
<a name="l00002"></a>00002 <span class="comment"></span>
<a name="l00003"></a>00003 <span class="comment">     The header file for an interval  Taylor series class. The recursive</span>
<a name="l00004"></a>00004 <span class="comment">     formulas were obtained from the books</span>
<a name="l00005"></a>00005 <span class="comment"></span>
<a name="l00006"></a>00006 <span class="comment">     Aberth, O. &quot;Precise Numerical Analysis&quot; WCB Publishers, 1988.</span>
<a name="l00007"></a>00007 <span class="comment">     Aberth, O. &quot;Precise Numerical Methods Using C++&quot; Academic Press, 1998</span>
<a name="l00008"></a>00008 <span class="comment"></span>
<a name="l00009"></a>00009 <span class="comment">     Author: Warwick Tucker &lt;warwick@math.uu.se&gt;</span>
<a name="l00010"></a>00010 <span class="comment">     Latest edit: Wed Jun 16 08:50:39 CEST 2004</span>
<a name="l00011"></a>00011 <span class="comment">*/</span>
<a name="l00012"></a>00012 
<a name="l00013"></a>00013 <span class="preprocessor">#ifndef __ITAYLOR_H__</span>
<a name="l00014"></a>00014 <span class="preprocessor"></span><span class="preprocessor">#define __ITAYLOR_H__</span>
<a name="l00015"></a>00015 <span class="preprocessor"></span>
<a name="l00016"></a>00016 <span class="preprocessor">#include &lt;cmath&gt;</span>
<a name="l00017"></a>00017 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00018"></a>00018 <span class="preprocessor">#include &lt;cstdlib&gt;</span>
<a name="l00019"></a>00019 <span class="preprocessor">#include &lt;cstring&gt;</span>
<a name="l00020"></a>00020 <span class="preprocessor">#include &quot;real.hpp&quot;</span>
<a name="l00021"></a>00021 <span class="preprocessor">#include &quot;rmath.hpp&quot;</span>
<a name="l00022"></a>00022 <span class="preprocessor">#include &quot;imath.hpp&quot;</span>
<a name="l00023"></a>00023 <span class="preprocessor">#include &quot;interval.hpp&quot;</span>
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="keyword">using namespace </span>std;
<a name="l00026"></a>00026 <span class="keyword">using namespace </span>cxsc;
<a name="l00027"></a>00027 
<a name="l00028"></a><a class="code" href="classitaylor.shtml">00028</a> <span class="keyword">class </span><a class="code" href="classitaylor.shtml">itaylor</a> {
<a name="l00029"></a>00029  <span class="keyword">private</span>:
<a name="l00030"></a><a class="code" href="classitaylor.shtml#a83c1b0a5a14fb5f0e0323adcc9b60a40">00030</a>   <span class="keywordtype">int</span>        <a class="code" href="classitaylor.shtml#a83c1b0a5a14fb5f0e0323adcc9b60a40">order</a>;
<a name="l00031"></a><a class="code" href="classitaylor.shtml#a45521302408d376be9603aea42eb45f0">00031</a>   interval  *<a class="code" href="classitaylor.shtml#a45521302408d376be9603aea42eb45f0">coeff</a>;
<a name="l00032"></a>00032  <span class="keyword">public</span>:
<a name="l00033"></a>00033   <a class="code" href="classitaylor.shtml">itaylor</a> ();
<a name="l00034"></a>00034   <a class="code" href="classitaylor.shtml">itaylor</a> (<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a);
<a name="l00035"></a>00035   <a class="code" href="classitaylor.shtml">itaylor</a> (<span class="keyword">const</span> interval &amp;constant);
<a name="l00036"></a>00036   <a class="code" href="classitaylor.shtml">itaylor</a> (<span class="keyword">const</span> <span class="keywordtype">double</span>   &amp;constant);
<a name="l00037"></a>00037 
<a name="l00038"></a><a class="code" href="classitaylor.shtml#a4113323f2bf9f195b8a4a627a15f0509">00038</a>   <span class="keyword">virtual</span> <a class="code" href="classitaylor.shtml#a4113323f2bf9f195b8a4a627a15f0509">~itaylor</a>()    { <span class="keyword">delete</span> coeff; }
<a name="l00039"></a>00039   <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;operator =  (<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a> &amp;a);
<a name="l00040"></a>00040   interval &amp;operator [] (<span class="keywordtype">int</span> index) <span class="keyword">const</span>;
<a name="l00041"></a><a class="code" href="classitaylor.shtml#a589de5c87d9993888423598c42be5f07">00041</a>   <span class="keywordtype">int</span>      <a class="code" href="classitaylor.shtml#a589de5c87d9993888423598c42be5f07">getOrder</a>     (<span class="keywordtype">void</span>)<span class="keyword"> const </span>{ <span class="keywordflow">return</span> order; }
<a name="l00042"></a>00042 
<a name="l00043"></a>00043   <span class="keyword">friend</span> <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a21e6c0930f861f85d9bdb26d9c413339">operator + </a>(<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a);
<a name="l00044"></a>00044   <span class="keyword">friend</span> <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a6e1382a183bbab0366f7d451aa1d34d3">operator - </a>(<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a);
<a name="l00045"></a>00045 
<a name="l00046"></a>00046   <span class="keyword">friend</span> <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a21e6c0930f861f85d9bdb26d9c413339">operator + </a>(<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a, <span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a> &amp;b);
<a name="l00047"></a>00047   <span class="keyword">friend</span> <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a6e1382a183bbab0366f7d451aa1d34d3">operator - </a>(<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a, <span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a> &amp;b);
<a name="l00048"></a>00048   <span class="keyword">friend</span> <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a50aeb0816ed5baecbdd1bc3885a2fbb9">operator * </a>(<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a, <span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a> &amp;b);
<a name="l00049"></a>00049   <span class="keyword">friend</span> <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a19fd6334248ac67ca9af590bf1eef26a">operator / </a>(<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a, <span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a> &amp;b);
<a name="l00050"></a>00050 
<a name="l00051"></a>00051   <span class="keyword">friend</span> <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>        (<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a);
<a name="l00052"></a>00052   <span class="keyword">friend</span> <a class="code" href="classitaylor.shtml">itaylor</a> log        (<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a);
<a name="l00053"></a>00053   <span class="keyword">friend</span> <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>        (<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a);
<a name="l00054"></a>00054   <span class="keyword">friend</span> <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#af7e3108838177d298e5ef3930dd9605f">cos</a>        (<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a);
<a name="l00055"></a>00055   <span class="keyword">friend</span> <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#ac2888bbea40e7b720c6502639680302a">tan</a>        (<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a);
<a name="l00056"></a>00056   <span class="keyword">friend</span> <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>        (<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a, <span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;b);
<a name="l00057"></a>00057   <span class="keyword">friend</span> <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>        (<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a, <span class="keyword">const</span> interval &amp;t);
<a name="l00058"></a>00058   <span class="keyword">friend</span> <a class="code" href="classitaylor.shtml">itaylor</a> <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>        (<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a, <span class="keyword">const</span> <span class="keywordtype">int</span>      &amp;n);
<a name="l00059"></a>00059 
<a name="l00060"></a>00060   <span class="keyword">friend</span> <a class="code" href="classitaylor.shtml">itaylor</a> derivative (<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a);
<a name="l00061"></a>00061   <span class="keyword">friend</span> <a class="code" href="classitaylor.shtml">itaylor</a> integral   (<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a);
<a name="l00062"></a>00062   <span class="keyword">friend</span> <a class="code" href="classitaylor.shtml">itaylor</a> derivative (<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a, <span class="keywordtype">int</span> k);
<a name="l00063"></a>00063   <span class="keyword">friend</span> <a class="code" href="classitaylor.shtml">itaylor</a> integral   (<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a, <span class="keywordtype">int</span> k);
<a name="l00064"></a>00064 
<a name="l00065"></a>00065   <span class="keyword">static</span> <a class="code" href="classitaylor.shtml">itaylor</a> variable   (<span class="keyword">const</span> interval &amp;x, <span class="keywordtype">int</span> degree);
<a name="l00066"></a>00066   <span class="keyword">static</span> <a class="code" href="classitaylor.shtml">itaylor</a> constant   (<span class="keyword">const</span> interval &amp;x, <span class="keywordtype">int</span> degree);
<a name="l00067"></a>00067 
<a name="l00068"></a>00068   <span class="keyword">friend</span> <span class="keywordtype">void</span>    resize     (      <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a, <span class="keywordtype">int</span> degree);
<a name="l00069"></a>00069   <span class="keyword">friend</span> <span class="keywordtype">void</span>    clear      (      <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a);
<a name="l00070"></a>00070 
<a name="l00071"></a>00071   <span class="comment">// Can the compiler distinguish between these two?</span>
<a name="l00072"></a>00072   <span class="keyword">friend</span> <a class="code" href="classitaylor.shtml">itaylor</a> round      (<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a, <span class="keywordtype">int</span> degree);
<a name="l00073"></a>00073   <span class="keyword">friend</span> <span class="keywordtype">void</span>    round      (      <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a, <span class="keywordtype">int</span> degree);
<a name="l00074"></a>00074 
<a name="l00075"></a>00075   <span class="keyword">friend</span> <span class="keywordtype">int</span>     orderOf    (<span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a>  &amp;a);
<a name="l00076"></a>00076   <span class="keyword">friend</span> ostream &amp;<a class="code" href="adaptivehistogram_8cpp.shtml#ae2f172a2081430943222aff00bd4d1e8" title="Output the HistDescription object.">operator &lt;&lt; </a>(ostream &amp;oS, <span class="keyword">const</span> <a class="code" href="classitaylor.shtml">itaylor</a> &amp;a);
<a name="l00077"></a>00077 };
<a name="l00078"></a>00078 
<a name="l00079"></a>00079 <span class="preprocessor">#endif // __ITAYLOR_H__</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="itaylor_8h.shtml">itaylor.h</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:13 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
