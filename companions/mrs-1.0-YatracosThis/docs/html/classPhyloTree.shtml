<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: PhyloTree Class Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classPhyloTree.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="#pri-static-methods">Static Private Member Functions</a> &#124;
<a href="#pri-attribs">Private Attributes</a>  </div>
  <div class="headertitle">
<div class="title">PhyloTree Class Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="PhyloTree" -->
<p><code>#include &lt;<a class="el" href="PhyloTree_8hpp_source.shtml">PhyloTree.hpp</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Collaboration diagram for PhyloTree:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><img src="classPhyloTree__coll__graph.png" border="0" usemap="#PhyloTree_coll__map" alt="Collaboration graph"/></div>
<map name="PhyloTree_coll__map" id="PhyloTree_coll__map">
</map>
<center><span class="legend">[<a target="top" href="graph_legend.shtml">legend</a>]</span></center></div>

<p><a href="classPhyloTree-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#ab6e00efe0c10f4a93d34e7d027489ac6">PhyloTree</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Default constructor.  <a href="#ab6e00efe0c10f4a93d34e7d027489ac6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#a0b54fc5ece14eeec6f28945306d070fd">PhyloTree</a> (int cs, string &amp;line, const vector&lt; string &gt; &amp;seqnames)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor using a string description, eg ((1 2) 3 4) and a set of sequence names.  <a href="#a0b54fc5ece14eeec6f28945306d070fd"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#a70200f6baa49702caa47c79d59d92a39">PhyloTree</a> (int cs, string &amp;line)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Constructor using a string description, eg ((1 2) 3 4) but no sequence names.  <a href="#a70200f6baa49702caa47c79d59d92a39"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#a4a4c3d1b60f3bba1fe813a0ada4de498">~PhyloTree</a> ()</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Destructor.  <a href="#a4a4c3d1b60f3bba1fe813a0ada4de498"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#ac593ca7be08c1b02b1b9e4d5229363bd">PrintTree</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">print a tree starting with the root  <a href="#ac593ca7be08c1b02b1b9e4d5229363bd"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classPhyloNode.shtml">PhyloNode</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#a5ede1337d40e3e211e83d9f009b062f9">getRoot</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the root of the tree.  <a href="#a5ede1337d40e3e211e83d9f009b062f9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#a0d1f91c11b0b4dd5091f44d0f4dda0c7">getNumberNodes</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of nodes in the tree, including the root.  <a href="#a0d1f91c11b0b4dd5091f44d0f4dda0c7"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">size_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#ae7557f8269350a3ee6ba18f9bd63b7e6">getNumberBranches</a> () const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Get the number of branches in a tree.  <a href="#ae7557f8269350a3ee6ba18f9bd63b7e6"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="PhyloTree_8hpp.shtml#a9a6f7e127d1279875ce95b0b6a331114">RealProbs</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#ac490ccd50ba543a3f58f70e79d5c7c24">fillProbRealJC69</a> (const rvector &amp;x, const vector&lt; int &gt; &amp;pattern, <a class="el" href="PhyloTree_8hpp.shtml#a9a6f7e127d1279875ce95b0b6a331114">RealProbs</a> &amp;rNucProb) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the probability of a given pattern for this tree.  <a href="#ac490ccd50ba543a3f58f70e79d5c7c24"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="PhyloTree_8hpp.shtml#af4bedfc3c110381d3675cf92e28539db">IntervalProbs</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#ae1efe7ad349b169e80116a959553e37a">fillProbIntervalJC69</a> (const ivector &amp;x, const vector&lt; int &gt; &amp;pattern, <a class="el" href="PhyloTree_8hpp.shtml#af4bedfc3c110381d3675cf92e28539db">IntervalProbs</a> &amp;iNucProb) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the probability of a given pattern for this tree.  <a href="#ae1efe7ad349b169e80116a959553e37a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="PhyloTree_8hpp.shtml#a8ee2b3678316ad48baa269e4ee7db7f7">HessProbs</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#a0b7e1230aa0c30b38a2778b0281a5183">fillProbHessJC69</a> (const HTvector &amp;x, const vector&lt; int &gt; &amp;pattern, <a class="el" href="PhyloTree_8hpp.shtml#a8ee2b3678316ad48baa269e4ee7db7f7">HessProbs</a> &amp;hNucProb) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the probability of a given pattern for this tree.  <a href="#a0b7e1230aa0c30b38a2778b0281a5183"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="PhyloTree_8hpp.shtml#a9a6f7e127d1279875ce95b0b6a331114">RealProbs</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#a29c5f4195d70604d82ac900a97e05d1a">fillProbRealCFN</a> (const rvector &amp;x, const vector&lt; int &gt; &amp;pattern, <a class="el" href="PhyloTree_8hpp.shtml#a9a6f7e127d1279875ce95b0b6a331114">RealProbs</a> &amp;rNucProb) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Return the probability of a given pattern for this tree.  <a href="#a29c5f4195d70604d82ac900a97e05d1a"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classPhyloNode.shtml">PhyloNode</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#a7b301daf15291d5520dc122d3be3578e">DecodeTree</a> (const string &amp;line, const vector&lt; string &gt; &amp;seqnames) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Decodes and makes a tree from a line from the tree file.  <a href="#a7b301daf15291d5520dc122d3be3578e"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962">TreeFileErrorExit</a> (const string &amp;msg, const <a class="el" href="classPhyloNode.shtml">PhyloNode</a> *node) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A function to deal with an error found in a tree input file.  <a href="#aed4d7f60f27bef63636280e6a76ed962"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">real&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#a91962e00d6d81f2186e2290ce61bf7f1">findTime</a> (const string &amp;line, const size_t lineLength, size_t &amp;pos, const <a class="el" href="classPhyloNode.shtml">PhyloNode</a> *<a class="el" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173">root</a>) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Extract a time given in a tree file if the identifier for a time has been found.  <a href="#a91962e00d6d81f2186e2290ce61bf7f1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#ae6923fc35a5687504975d460a9769a55">findLabel</a> (const string &amp;line, const size_t lineLength, size_t &amp;pos, const <a class="el" href="classPhyloNode.shtml">PhyloNode</a> *<a class="el" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173">root</a>) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Extract a label given in a tree file if the identifier for a label has been found.  <a href="#ae6923fc35a5687504975d460a9769a55"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#abd9309bd022690e7532c1d4903d7898f">findSeqNo</a> (const string &amp;line, const size_t lineLength, size_t &amp;pos, const <a class="el" href="classPhyloNode.shtml">PhyloNode</a> *<a class="el" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173">root</a>, const vector&lt; string &gt; &amp;seqnames) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Extract a sequence number from a tree file.  <a href="#abd9309bd022690e7532c1d4903d7898f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#a34906f6c4db42266e9f0ccb3057d2cb9">PhyloTree</a> (const <a class="el" href="classPhyloTree.shtml">PhyloTree</a> &amp;other)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy constructor is private and not implemented.  <a href="#a34906f6c4db42266e9f0ccb3057d2cb9"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classPhyloTree.shtml">PhyloTree</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#af53d4860d55732c183934881fda283c3">operator=</a> (const <a class="el" href="classPhyloTree.shtml">PhyloTree</a> &amp;rhs)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Copy assignment operator is private and not implemented.  <a href="#af53d4860d55732c183934881fda283c3"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="PhyloTree_8hpp.shtml#a9a6f7e127d1279875ce95b0b6a331114">RealProbs</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#ae7b8d3e72818ebe9eea94906acf541f1">nodePOTreal</a> (<a class="el" href="PhyloTree_8hpp.shtml#a4457ee43eaa9b550b64e1542c62f7a6f">RealTranProb_FctPtr</a> tpf, const <a class="el" href="classPhyloNode.shtml">PhyloNode</a> *const node, const rvector &amp;x, const vector&lt; int &gt; &amp;pattern, <a class="el" href="PhyloTree_8hpp.shtml#a9a6f7e127d1279875ce95b0b6a331114">RealProbs</a> &amp;rNucProb) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the probabilities as reals of each character for a node given its children's state.  <a href="#ae7b8d3e72818ebe9eea94906acf541f1"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="PhyloTree_8hpp.shtml#af4bedfc3c110381d3675cf92e28539db">IntervalProbs</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#a1cb66ffcb92baaeafadd12babc01feba">nodePOTinterval</a> (<a class="el" href="PhyloTree_8hpp.shtml#a6961512ff8fd6fa5a520b93c63c4ad60">IntervalTranProb_FctPtr</a> tpf, const <a class="el" href="classPhyloNode.shtml">PhyloNode</a> *const node, const ivector &amp;x, const vector&lt; int &gt; &amp;pattern, <a class="el" href="PhyloTree_8hpp.shtml#af4bedfc3c110381d3675cf92e28539db">IntervalProbs</a> &amp;iNucProb) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the probabilities as an interval of each character for a node given its children's state.  <a href="#a1cb66ffcb92baaeafadd12babc01feba"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="PhyloTree_8hpp.shtml#a8ee2b3678316ad48baa269e4ee7db7f7">HessProbs</a> &amp;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#aec23a8f03330ad66e6ff1af4c886798e">nodePOTHess</a> (<a class="el" href="PhyloTree_8hpp.shtml#aa81a7e0d071642af42626caebfef6eeb">HessTranProb_FctPtr</a> tpf, const <a class="el" href="classPhyloNode.shtml">PhyloNode</a> *const node, const HTvector &amp;x, const vector&lt; int &gt; &amp;pattern, <a class="el" href="PhyloTree_8hpp.shtml#a8ee2b3678316ad48baa269e4ee7db7f7">HessProbs</a> &amp;hNucProb) const </td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Calculates the probabilities as HessType of each character in a character space for a node given its children's state.  <a href="#aec23a8f03330ad66e6ff1af4c886798e"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pri-static-methods"></a>
Static Private Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#a3e9c22f8a721a840c84f67e2136b8d30">PrintBranch</a> (const <a class="el" href="classPhyloNode.shtml">PhyloNode</a> *const node, int level)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Prints a branch of the tree.  <a href="#a3e9c22f8a721a840c84f67e2136b8d30"></a><br/></td></tr>
<tr><td colspan="2"><h2><a name="pri-attribs"></a>
Private Attributes</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top"><a class="el" href="classPhyloNode.shtml">PhyloNode</a> *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173">root</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">A pointer to a <a class="el" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a> root of the tree.  <a href="#a38c3253751a7ed9ffacb0978106f8173"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classPhyloTree.shtml#a2411ce76565644f8253f15840863a05a">CharacterSpace</a></td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">The size of the character space for the tree.  <a href="#a2411ce76565644f8253f15840863a05a"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock">
<p>Definition at line <a class="el" href="PhyloTree_8hpp_source.shtml#l00294">294</a> of file <a class="el" href="PhyloTree_8hpp_source.shtml">PhyloTree.hpp</a>.</p>
</div><hr/><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="a34906f6c4db42266e9f0ccb3057d2cb9"></a><!-- doxytag: member="PhyloTree::PhyloTree" ref="a34906f6c4db42266e9f0ccb3057d2cb9" args="(const PhyloTree &amp;other)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classPhyloTree.shtml#a34906f6c4db42266e9f0ccb3057d2cb9">PhyloTree::PhyloTree</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classPhyloTree.shtml">PhyloTree</a> &amp;&#160;</td>
          <td class="paramname"><em>other</em></td><td>)</td>
          <td><code> [explicit, private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy constructor is private and not implemented. </p>
<p>Prevents copying of the object. </p>

</div>
</div>
<a class="anchor" id="ab6e00efe0c10f4a93d34e7d027489ac6"></a><!-- doxytag: member="PhyloTree::PhyloTree" ref="ab6e00efe0c10f4a93d34e7d027489ac6" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classPhyloTree.shtml#a34906f6c4db42266e9f0ccb3057d2cb9">PhyloTree::PhyloTree</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline, explicit]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Default constructor. </p>

<p>Definition at line <a class="el" href="PhyloTree_8hpp_source.shtml#l00370">370</a> of file <a class="el" href="PhyloTree_8hpp_source.shtml">PhyloTree.hpp</a>.</p>
<div class="fragment"><pre class="fragment">                         : <a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>(NULL)
      {}
</pre></div>
</div>
</div>
<a class="anchor" id="a0b54fc5ece14eeec6f28945306d070fd"></a><!-- doxytag: member="PhyloTree::PhyloTree" ref="a0b54fc5ece14eeec6f28945306d070fd" args="(int cs, string &amp;line, const vector&lt; string &gt; &amp;seqnames)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classPhyloTree.shtml#a34906f6c4db42266e9f0ccb3057d2cb9">PhyloTree::PhyloTree</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string &amp;&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector&lt; string &gt; &amp;&#160;</td>
          <td class="paramname"><em>seqnames</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [explicit]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Constructor using a string description, eg ((1 2) 3 4) and a set of sequence names. </p>

<p>Definition at line <a class="el" href="PhyloTree_8cpp_source.shtml#l00159">159</a> of file <a class="el" href="PhyloTree_8cpp_source.shtml">PhyloTree.cpp</a>.</p>

<p>References <a class="el" href="PhyloTree_8cpp_source.shtml#l00345">DecodeTree()</a>, and <a class="el" href="PhyloTree_8hpp_source.shtml#l00301">root</a>.</p>
<div class="fragment"><pre class="fragment">: 
<a class="code" href="classPhyloTree.shtml#a2411ce76565644f8253f15840863a05a" title="The size of the character space for the tree.">CharacterSpace</a>(cs)
{
  <span class="comment">// use decode tree to decode the line, returns a pointer to a PhyloNode</span>
  <a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a> = <a class="code" href="classPhyloTree.shtml#a7b301daf15291d5520dc122d3be3578e" title="Decodes and makes a tree from a line from the tree file.">DecodeTree</a>(line, seqnames);

}                   <span class="comment">// end constructor</span>
</pre></div>
</div>
</div>
<a class="anchor" id="a70200f6baa49702caa47c79d59d92a39"></a><!-- doxytag: member="PhyloTree::PhyloTree" ref="a70200f6baa49702caa47c79d59d92a39" args="(int cs, string &amp;line)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classPhyloTree.shtml#a34906f6c4db42266e9f0ccb3057d2cb9">PhyloTree::PhyloTree</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>cs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">string &amp;&#160;</td>
          <td class="paramname"><em>line</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [explicit]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Constructor using a string description, eg ((1 2) 3 4) but no sequence names. </p>

<p>Definition at line <a class="el" href="PhyloTree_8cpp_source.shtml#l00169">169</a> of file <a class="el" href="PhyloTree_8cpp_source.shtml">PhyloTree.cpp</a>.</p>

<p>References <a class="el" href="PhyloTree_8cpp_source.shtml#l00345">DecodeTree()</a>, and <a class="el" href="PhyloTree_8hpp_source.shtml#l00301">root</a>.</p>
<div class="fragment"><pre class="fragment">                                         : <a class="code" href="classPhyloTree.shtml#a2411ce76565644f8253f15840863a05a" title="The size of the character space for the tree.">CharacterSpace</a>(cs)
{

  <span class="comment">// make an empty container</span>
  vector&lt;string&gt; seqnames;
  
  <span class="comment">// use decode tree to decode the line, returns a pointer to a PhyloNode</span>
  <a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a> = <a class="code" href="classPhyloTree.shtml#a7b301daf15291d5520dc122d3be3578e" title="Decodes and makes a tree from a line from the tree file.">DecodeTree</a>(line, seqnames);

}                   <span class="comment">// end constructor</span>
</pre></div>
</div>
</div>
<a class="anchor" id="a4a4c3d1b60f3bba1fe813a0ada4de498"></a><!-- doxytag: member="PhyloTree::~PhyloTree" ref="a4a4c3d1b60f3bba1fe813a0ada4de498" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classPhyloTree.shtml#a4a4c3d1b60f3bba1fe813a0ada4de498">PhyloTree::~PhyloTree</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td><code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Destructor. </p>

<p>Definition at line <a class="el" href="PhyloTree_8hpp_source.shtml#l00380">380</a> of file <a class="el" href="PhyloTree_8hpp_source.shtml">PhyloTree.hpp</a>.</p>
<div class="fragment"><pre class="fragment">    {               <span class="comment">// deletes the node which is the root and all its children</span>
      <span class="keyword">delete</span> <a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>;
    }
</pre></div>
</div>
</div>
<hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="a7b301daf15291d5520dc122d3be3578e"></a><!-- doxytag: member="PhyloTree::DecodeTree" ref="a7b301daf15291d5520dc122d3be3578e" args="(const string &amp;line, const vector&lt; string &gt; &amp;seqnames) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classPhyloNode.shtml">PhyloNode</a> * <a class="el" href="classPhyloTree.shtml#a7b301daf15291d5520dc122d3be3578e">PhyloTree::DecodeTree</a> </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector&lt; string &gt; &amp;&#160;</td>
          <td class="paramname"><em>seqnames</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Decodes and makes a tree from a line from the tree file. </p>
<p>Expects sequence numbers to be delimited by commas </p>

<p>Definition at line <a class="el" href="PhyloTree_8cpp_source.shtml#l00345">345</a> of file <a class="el" href="PhyloTree_8cpp_source.shtml">PhyloTree.cpp</a>.</p>

<p>References <a class="el" href="PhyloTree_8cpp_source.shtml#l00121">PhyloNode::addChild()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00627">findLabel()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00682">findSeqNo()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00569">findTime()</a>, <a class="el" href="PhyloTree_8hpp_source.shtml#l00202">PhyloNode::getParent()</a>, <a class="el" href="PhyloTree_8hpp_source.shtml#l00246">PhyloNode::setBranch()</a>, <a class="el" href="PhyloTree_8hpp_source.shtml#l00258">PhyloNode::setLabel()</a>, <a class="el" href="PhyloTree_8hpp_source.shtml#l00270">PhyloNode::setSeqName()</a>, <a class="el" href="PhyloTree_8hpp_source.shtml#l00264">PhyloNode::setSeqNo()</a>, <a class="el" href="PhyloTree_8hpp_source.shtml#l00252">PhyloNode::setTime()</a>, and <a class="el" href="PhyloTree_8cpp_source.shtml#l00554">TreeFileErrorExit()</a>.</p>

<p>Referenced by <a class="el" href="PhyloTree_8cpp_source.shtml#l00159">PhyloTree()</a>.</p>
<div class="fragment"><pre class="fragment">{

  <span class="comment">// set up a pointer to node for a new tree</span>
  <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a>* newtree = NULL;
  <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a>* currentParent = NULL;
  <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a>* currentNode = NULL;

  <span class="keywordtype">int</span> nodesRead = 0;<span class="comment">// to track number of nodes read in</span>
  <span class="keywordtype">int</span> level = 0;    <span class="comment">// to track of tree levels</span>
  <span class="keywordtype">int</span> branch = -1;  <span class="comment">// to track branch numbers</span>

  string::iterator it;
  <span class="keywordtype">size_t</span> pos = 0;   <span class="comment">// a counter for characters in the line dealt with</span>

                    <span class="comment">// the length of the line</span>
  <span class="keywordtype">size_t</span> lineLength = line.size();

  <span class="keywordflow">while</span> (pos &lt; lineLength)
  {

    real time = 0.0;
    <span class="keywordtype">int</span> label = 0;
    <span class="keywordtype">int</span> sequenceNumber = 0;

    <span class="keywordtype">char</span> ch = line[pos];
    <span class="comment">// pos should show the position we are at in the string</span>

    <span class="keywordflow">switch</span> (ch)
    {
      <span class="keywordflow">case</span> <span class="charliteral">&#39; &#39;</span>:     <span class="comment">// ignore spaces</span>
        pos++;
        <span class="keywordflow">break</span>;

      <span class="keywordflow">case</span> <span class="charliteral">&#39;,&#39;</span>:     <span class="comment">// ignore commas</span>
        <span class="comment">// commas are used as delimiters between sequence numbers, </span>
        <span class="comment">// but once found</span>
        <span class="comment">// and used to identify the end of the number, they can be ignored</span>
        pos++;
        <span class="keywordflow">break</span>;

      <span class="keywordflow">case</span> <span class="charliteral">&#39;;&#39;</span>:     <span class="comment">// ignore semicolons</span>
        pos++;
        <span class="keywordflow">break</span>;

      <span class="keywordflow">case</span> <span class="charliteral">&#39;(&#39;</span>:     <span class="comment">// go down a level in the tree, making new nodes </span>
                    <span class="comment">// for each level</span>
        <span class="comment">// set up a root node for a new tree</span>

        <span class="keywordflow">try</span>
        {
                    <span class="comment">// ibranch is -1, parent is NULL</span>
          currentNode = <span class="keyword">new</span> <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a>();
        }
        <span class="keywordflow">catch</span> (bad_alloc&amp;)
        {
          cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in DecodeTree&quot;</span> &lt;&lt; std::endl;
          <span class="keyword">delete</span> newtree;
          exit(1);
        }

        <span class="keywordflow">if</span> (newtree == NULL)
        {
          newtree = currentNode;
          currentParent = newtree;
          <span class="comment">// currentParent is NULL</span>
        }
        <span class="keywordflow">else</span>        <span class="comment">// there is already a root node</span>
        {
          <span class="comment">// make a new node</span>
                    <span class="comment">// set branch of currentNode</span>
          currentNode-&gt;<a class="code" href="classPhyloNode.shtml#a9744c7676674e8e988449bda24808d54" title="Set the ibranch member.">setBranch</a>(branch);
                    <span class="comment">// make the current node a child of the current parent</span>
          currentParent-&gt;<a class="code" href="classPhyloNode.shtml#ab27e7dc7521f80f854277ac3e7254228" title="Add a child to this node.">addChild</a>(currentNode);
          currentParent = currentNode;
        }

        level++;
        branch++;
        nodesRead++;
        pos++;

        <span class="keywordflow">break</span>;      <span class="comment">// end &#39;(&#39;</span>

      <span class="keywordflow">case</span> <span class="charliteral">&#39;)&#39;</span>:     <span class="comment">// go up a level in the tree</span>

        level--;
                    <span class="comment">// check we can go up</span>
        <span class="keywordflow">if</span> (level &lt; 0)
        {
          <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in tree file: reading too many &#39;)&#39;&quot;</span>;
          <span class="comment">// delete any tree that has been set up</span>
          <a class="code" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962" title="A function to deal with an error found in a tree input file.">TreeFileErrorExit</a>(msg, newtree);
        }
        <span class="keywordflow">else</span>        <span class="comment">// level is okay</span>
        {
          <span class="comment">// make the currentParent into the parent </span>
          <span class="comment">// of the present current parent</span>
          currentNode = currentParent;
          currentParent = currentParent-&gt;<a class="code" href="classPhyloNode.shtml#a960666762aaed1c4f6ddfbc2aa413892" title="Get the parent of this node.">getParent</a>();
          pos++;
        }

        <span class="comment">// no change in nodesRead</span>
        <span class="comment">// no change in branch</span>

        <span class="keywordflow">break</span>;      <span class="comment">// end &#39;)&#39;</span>

      <span class="keywordflow">case</span> <span class="charliteral">&#39;:&#39;</span>:     <span class="comment">// signifies start of a time given as a length, </span>
                    <span class="comment">// eg ((1:0.5,2;0.5):0.25,3:0.75, 4:0.75);</span>
        time = <a class="code" href="classPhyloTree.shtml#a91962e00d6d81f2186e2290ce61bf7f1" title="Extract a time given in a tree file if the identifier for a time has been found.">findTime</a>(line, lineLength, pos, newtree);
        <span class="comment">// this moves pos to be the first character following </span>
        <span class="comment">// the time characters</span>

        <span class="comment">// make this the time for the current node</span>
        currentNode-&gt;<a class="code" href="classPhyloNode.shtml#ac1e882ec990671ad78dc76218aa80610" title="Set the time member.">setTime</a>(time);

        <span class="comment">// no change in level</span>
        <span class="comment">// no change in branch</span>

        <span class="keywordflow">break</span>;      <span class="comment">// end of &#39;:&#39;</span>

      <span class="keywordflow">case</span> <span class="charliteral">&#39;#&#39;</span>:     <span class="comment">// signifies the start of a label, which is expected to a </span>
                    <span class="comment">// single digit integer</span>
        label = <a class="code" href="classPhyloTree.shtml#ae6923fc35a5687504975d460a9769a55" title="Extract a label given in a tree file if the identifier for a label has been found.">findLabel</a>(line, lineLength, pos, newtree);
        <span class="comment">// findLabel() updates pos to be the character after </span>
        <span class="comment">// the end of the label</span>

                    <span class="comment">// make the currentNode label the integer at this pos</span>
        currentNode-&gt;<a class="code" href="classPhyloNode.shtml#ab5fcae88b5e5a29c0619b2f1b85958be" title="Set the label member.">setLabel</a>(label);

        <span class="comment">// no change in level</span>
        <span class="comment">// no change in branch</span>

        <span class="keywordflow">break</span>;      <span class="comment">// end of &#39;#&#39;</span>

      <span class="keywordflow">case</span> <span class="charliteral">&#39;$&#39;</span> :    <span class="comment">// signifies the start of a label, which is expected </span>
                    <span class="comment">// to a single digit integer</span>
        label = <a class="code" href="classPhyloTree.shtml#ae6923fc35a5687504975d460a9769a55" title="Extract a label given in a tree file if the identifier for a label has been found.">findLabel</a>(line, lineLength, pos, newtree);
        <span class="comment">// findLabel() updates pos to be the character after </span>
        <span class="comment">// the end of the label</span>

                    <span class="comment">// make the currentNode label the integer at this pos</span>
        currentNode-&gt;<a class="code" href="classPhyloNode.shtml#ab5fcae88b5e5a29c0619b2f1b85958be" title="Set the label member.">setLabel</a>(label);

        <span class="comment">// no change in level</span>
        <span class="comment">// no change in branch</span>

        <span class="keywordflow">break</span>;      <span class="comment">// end of &#39;$&#39;</span>

      <span class="keywordflow">default</span>:      <span class="comment">// not one of the recognised characters signifying </span>
                    <span class="comment">// tree structure or a character to be ignored</span>
        <span class="comment">// so expected to be either a sequence number or a sequence name</span>
        <span class="comment">// we need to identify the sequence number and make a new node and add </span>
        <span class="comment">// it to the tree</span>

        sequenceNumber = <a class="code" href="classPhyloTree.shtml#abd9309bd022690e7532c1d4903d7898f" title="Extract a sequence number from a tree file.">findSeqNo</a>(line, lineLength, pos, newtree, seqnames);
        <span class="comment">// pos will be moved to first character following the sequence </span>
        <span class="comment">// identifier (number or name)</span>

        <span class="comment">// make a new node</span>
        <span class="keywordflow">try</span>
        {
                    <span class="comment">// ibranch is -1, parent is NULL</span>
          currentNode = <span class="keyword">new</span> <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a>();
        }
        <span class="keywordflow">catch</span> (bad_alloc&amp;)
        {
          cout &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in DecodeTree&quot;</span> &lt;&lt; std::endl;
          <span class="keyword">delete</span> newtree;
          exit(1);
        }

                    <span class="comment">// set branch of currentNode</span>
        currentNode-&gt;<a class="code" href="classPhyloNode.shtml#a9744c7676674e8e988449bda24808d54" title="Set the ibranch member.">setBranch</a>(branch);
                    <span class="comment">// set the sequence number of the current node</span>
        currentNode-&gt;<a class="code" href="classPhyloNode.shtml#a30b68416bbeabe566b2d17ef43ff753c" title="Set the seq_no member.">setSeqNo</a>(sequenceNumber);

        <span class="keywordflow">if</span> (!seqnames.empty())
        {
                    <span class="comment">// and set the corresponding name</span>
          currentNode-&gt;<a class="code" href="classPhyloNode.shtml#a30c30789517e9f40bec24c7f665c4675" title="Set the seq_name member.">setSeqName</a>(seqnames[sequenceNumber-1]);
        }
        <span class="comment">// make it a child of the current parent</span>
        currentParent-&gt;<a class="code" href="classPhyloNode.shtml#ab27e7dc7521f80f854277ac3e7254228" title="Add a child to this node.">addChild</a>(currentNode);

        <span class="comment">// no change in level;</span>
        branch++;
        nodesRead++;

        <span class="keywordflow">break</span>;      <span class="comment">// end default</span>
    }               <span class="comment">// end switch</span>
  }                 <span class="comment">// end while</span>

  <span class="comment">// we expect to find that level = 0 at the end</span>
  <span class="comment">// and something has been read in for the tree</span>
  <span class="comment">// and number of branches+1 is number of nodes</span>
  <span class="keywordflow">if</span> (level != 0 || newtree == NULL || (branch+1 != nodesRead))
  {
    <span class="comment">// error in tree file</span>

    <span class="keywordtype">string</span> msg = 
    <span class="stringliteral">&quot;Error in tree file, please check the number of branches and nodes:  Expecting unrooted tree&quot;</span>;
    <a class="code" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962" title="A function to deal with an error found in a tree input file.">TreeFileErrorExit</a>(msg, newtree);
  }
  <span class="keywordflow">return</span> newtree;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a0b7e1230aa0c30b38a2778b0281a5183"></a><!-- doxytag: member="PhyloTree::fillProbHessJC69" ref="a0b7e1230aa0c30b38a2778b0281a5183" args="(const HTvector &amp;x, const vector&lt; int &gt; &amp;pattern, HessProbs &amp;hNucProb) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="PhyloTree_8hpp.shtml#a8ee2b3678316ad48baa269e4ee7db7f7">HessProbs</a> &amp; <a class="el" href="classPhyloTree.shtml#a0b7e1230aa0c30b38a2778b0281a5183">PhyloTree::fillProbHessJC69</a> </td>
          <td>(</td>
          <td class="paramtype">const HTvector &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>pattern</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="PhyloTree_8hpp.shtml#a8ee2b3678316ad48baa269e4ee7db7f7">HessProbs</a> &amp;&#160;</td>
          <td class="paramname"><em>hNucProb</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return the probability of a given pattern for this tree. </p>
<p>version dealing with HTvectors and applying JC69 transition probabilities </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>the HTvector to calculate the probability of </td></tr>
    <tr><td class="paramname">pattern</td><td>the nucleotide pattern under which to calculate the probabilities (gives the probabilities at the leaf nodes) </td></tr>
    <tr><td class="paramname">hNucProb</td><td>a vector of HessTypes, passed by reference, to be filled in by the function </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>a vector of HessTypes, one for each character in the character space, returned by reference </dd></dl>

<p>Definition at line <a class="el" href="PhyloTree_8cpp_source.shtml#l00276">276</a> of file <a class="el" href="PhyloTree_8cpp_source.shtml">PhyloTree.cpp</a>.</p>

<p>References <a class="el" href="PhyloTree_8hpp_source.shtml#l00398">getNumberBranches()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00127">PhyloNode::noChildren()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00978">nodePOTHess()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00061">PijofT_JC69H()</a>, and <a class="el" href="PhyloTree_8hpp_source.shtml#l00301">root</a>.</p>

<p>Referenced by <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00305">FPhyloPOT::operator()()</a>.</p>
<div class="fragment"><pre class="fragment">{

  <span class="comment">// check we have some children</span>
  <span class="keywordflow">if</span> (<a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>-&gt;<a class="code" href="classPhyloNode.shtml#a78e2019221cbe7a77c0b9d8715c51058">noChildren</a>() == 0)
  {
    std::cerr &lt;&lt; <span class="stringliteral">&quot;Error trying to calculate probabilities &quot;</span>
              &lt;&lt; <span class="stringliteral">&quot;over tree with no children&quot;</span> &lt;&lt; std::endl;
    exit(1);
  }

  <span class="comment">// check the dimensions of the HTVector matches dimensions for this tree</span>
  <span class="keywordtype">int</span> d = x.Dim();
  <span class="keywordflow">if</span>(<a class="code" href="classPhyloTree.shtml#ae7557f8269350a3ee6ba18f9bd63b7e6" title="Get the number of branches in a tree.">getNumberBranches</a>() != static_cast&lt;size_t&gt;(d))
  {
    std::cerr &lt;&lt; <span class="stringliteral">&quot;tree dimensions (branches) &quot;</span> &lt;&lt; <a class="code" href="classPhyloTree.shtml#ae7557f8269350a3ee6ba18f9bd63b7e6" title="Get the number of branches in a tree.">getNumberBranches</a>()
      &lt;&lt; <span class="stringliteral">&quot; does not match dimensions of point &quot;</span> &lt;&lt; d &lt;&lt; std::endl;
    exit(1);
  }

  <span class="comment">// use the root as the node to start post order traversal</span>
  <span class="comment">// and pass in pointer to JC69 transition probabilites function</span>
  hNucProb = <a class="code" href="classPhyloTree.shtml#aec23a8f03330ad66e6ff1af4c886798e" title="Calculates the probabilities as HessType of each character in a character space for a node given its ...">nodePOTHess</a>(&amp;<a class="code" href="PhyloTree_8cpp.shtml#a2ffe000f93e3429bd11c7921fe152f53" title="Jukes Cantor formula for transition from nucleotype i to j for an unrooted tree.">PijofT_JC69H</a>, <a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>, x, pattern, hNucProb);

  <span class="comment">// return the same vector but note that return is by reference</span>
  <span class="keywordflow">return</span> hNucProb;

}
</pre></div>
</div>
</div>
<a class="anchor" id="ae1efe7ad349b169e80116a959553e37a"></a><!-- doxytag: member="PhyloTree::fillProbIntervalJC69" ref="ae1efe7ad349b169e80116a959553e37a" args="(const ivector &amp;x, const vector&lt; int &gt; &amp;pattern, IntervalProbs &amp;iNucProb) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="PhyloTree_8hpp.shtml#af4bedfc3c110381d3675cf92e28539db">IntervalProbs</a> &amp; <a class="el" href="classPhyloTree.shtml#ae1efe7ad349b169e80116a959553e37a">PhyloTree::fillProbIntervalJC69</a> </td>
          <td>(</td>
          <td class="paramtype">const ivector &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>pattern</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="PhyloTree_8hpp.shtml#af4bedfc3c110381d3675cf92e28539db">IntervalProbs</a> &amp;&#160;</td>
          <td class="paramname"><em>iNucProb</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return the probability of a given pattern for this tree. </p>
<p>version dealing with ivectors, ie boxes and applying JC69 transition probabilities </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>the ivector to calculate the probability of </td></tr>
    <tr><td class="paramname">pattern</td><td>the nucleotide pattern under which to calculate the probabilities (gives the probabilities at the leaf nodes) </td></tr>
    <tr><td class="paramname">iNucProb</td><td>a vector of intervals, passed by reference, to be filled in by the function </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>a vector of intervals, one for each character in the character space, returned by reference </dd></dl>

<p>Definition at line <a class="el" href="PhyloTree_8cpp_source.shtml#l00242">242</a> of file <a class="el" href="PhyloTree_8cpp_source.shtml">PhyloTree.cpp</a>.</p>

<p>References <a class="el" href="PhyloTree_8hpp_source.shtml#l00398">getNumberBranches()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00127">PhyloNode::noChildren()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00901">nodePOTinterval()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00048">PijofT_JC69I()</a>, <a class="el" href="PhyloTree_8hpp_source.shtml#l00301">root</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>.</p>

<p>Referenced by <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00162">FPhyloPOT::operator()()</a>.</p>
<div class="fragment"><pre class="fragment">{

  <span class="comment">// check we have some children</span>
  <span class="keywordflow">if</span> (<a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>-&gt;<a class="code" href="classPhyloNode.shtml#a78e2019221cbe7a77c0b9d8715c51058">noChildren</a>() == 0)
  {
    std::cerr &lt;&lt; <span class="stringliteral">&quot;Error trying to calculate probabilities &quot;</span>
              &lt;&lt; <span class="stringliteral">&quot;over tree with no children&quot;</span> &lt;&lt; std::endl;
    exit(1);
  }

  <span class="comment">// check the dimensions of the box matches dimensions for this tree</span>
  <span class="keywordtype">int</span> d = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x) + 1;
  <span class="keywordflow">if</span>(<a class="code" href="classPhyloTree.shtml#ae7557f8269350a3ee6ba18f9bd63b7e6" title="Get the number of branches in a tree.">getNumberBranches</a>() != static_cast&lt;size_t&gt;(d))
  {
    std::cerr &lt;&lt; <span class="stringliteral">&quot;tree dimensions (branches) &quot;</span> &lt;&lt; <a class="code" href="classPhyloTree.shtml#ae7557f8269350a3ee6ba18f9bd63b7e6" title="Get the number of branches in a tree.">getNumberBranches</a>()
      &lt;&lt; <span class="stringliteral">&quot; does not match dimensions of point &quot;</span> &lt;&lt; d &lt;&lt; std::endl;
    exit(1);
  }

  <span class="comment">// use the root as the node to start post order traversal</span>
  <span class="comment">// and pass in pointer to JC69 transition probabilites function</span>
  iNucProb = <a class="code" href="classPhyloTree.shtml#a1cb66ffcb92baaeafadd12babc01feba" title="Calculates the probabilities as an interval of each character for a node given its children&#39;s state...">nodePOTinterval</a>(&amp;<a class="code" href="PhyloTree_8cpp.shtml#a56808e5beae03768e4d46dc72617f722" title="Jukes Cantor formula for transition from nucleotype i to j for an unrooted tree.">PijofT_JC69I</a>, <a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>, x, pattern, iNucProb);

  <span class="comment">// return the same vector but note that return is by reference</span>
  <span class="keywordflow">return</span> iNucProb;

}
</pre></div>
</div>
</div>
<a class="anchor" id="a29c5f4195d70604d82ac900a97e05d1a"></a><!-- doxytag: member="PhyloTree::fillProbRealCFN" ref="a29c5f4195d70604d82ac900a97e05d1a" args="(const rvector &amp;x, const vector&lt; int &gt; &amp;pattern, RealProbs &amp;rNucProb) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="PhyloTree_8hpp.shtml#a9a6f7e127d1279875ce95b0b6a331114">RealProbs</a> &amp; <a class="el" href="classPhyloTree.shtml#a29c5f4195d70604d82ac900a97e05d1a">PhyloTree::fillProbRealCFN</a> </td>
          <td>(</td>
          <td class="paramtype">const rvector &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>pattern</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="PhyloTree_8hpp.shtml#a9a6f7e127d1279875ce95b0b6a331114">RealProbs</a> &amp;&#160;</td>
          <td class="paramname"><em>rNucProb</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return the probability of a given pattern for this tree. </p>
<p>version dealing with rvectors, ie points and applying CFN transition probabilities </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>the rvector to calculate the probability of </td></tr>
    <tr><td class="paramname">pattern</td><td>the nucleotide pattern under which to calculate the probabilities (gives the probabilities at the leaf nodes) </td></tr>
    <tr><td class="paramname">rNucProb</td><td>a vector of reals, passed by reference, to be filled in by the function </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>a vector of reals, one for each character in the character space, returned by reference </dd></dl>

<p>Definition at line <a class="el" href="PhyloTree_8cpp_source.shtml#l00310">310</a> of file <a class="el" href="PhyloTree_8cpp_source.shtml">PhyloTree.cpp</a>.</p>

<p>References <a class="el" href="PhyloTree_8hpp_source.shtml#l00398">getNumberBranches()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00127">PhyloNode::noChildren()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00824">nodePOTreal()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00074">PijofT_CFNR()</a>, <a class="el" href="PhyloTree_8hpp_source.shtml#l00301">root</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>.</p>
<div class="fragment"><pre class="fragment">{

  <span class="comment">// check we have some children</span>
  <span class="keywordflow">if</span> (<a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>-&gt;<a class="code" href="classPhyloNode.shtml#a78e2019221cbe7a77c0b9d8715c51058">noChildren</a>() == 0)
  {
    std::cerr &lt;&lt; <span class="stringliteral">&quot;Error trying to calculate probabilities &quot;</span>
              &lt;&lt; <span class="stringliteral">&quot;over tree with no children&quot;</span> &lt;&lt; std::endl;
    exit(1);
  }

  <span class="comment">// check the dimensions of the point matches dimensions for this tree</span>
  <span class="keywordtype">int</span> d = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x) + 1;
  <span class="keywordflow">if</span>(<a class="code" href="classPhyloTree.shtml#ae7557f8269350a3ee6ba18f9bd63b7e6" title="Get the number of branches in a tree.">getNumberBranches</a>() != static_cast&lt;size_t&gt;(d))
  {
    std::cerr &lt;&lt; <span class="stringliteral">&quot;tree dimensions (branches) &quot;</span> &lt;&lt; <a class="code" href="classPhyloTree.shtml#ae7557f8269350a3ee6ba18f9bd63b7e6" title="Get the number of branches in a tree.">getNumberBranches</a>()
      &lt;&lt; <span class="stringliteral">&quot; does not match dimensions of point &quot;</span> &lt;&lt; d &lt;&lt; std::endl;
    exit(1);
  }

  <span class="comment">// use the root as the node to start post order traversal</span>
  <span class="comment">// and pass in pointer to CFN transition probabilites function</span>
  rNucProb = <a class="code" href="classPhyloTree.shtml#ae7b8d3e72818ebe9eea94906acf541f1" title="Calculates the probabilities as reals of each character for a node given its children&#39;s state...">nodePOTreal</a>(&amp;<a class="code" href="PhyloTree_8cpp.shtml#a53c51d97bba89addbb5ebd545b1fdceb" title="CFN formula for transition from nucleotype i to j with character space 2.">PijofT_CFNR</a>, <a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>, x, pattern, rNucProb);

  <span class="comment">// return the same vector but note that return is by reference</span>
  <span class="keywordflow">return</span> rNucProb;

}
</pre></div>
</div>
</div>
<a class="anchor" id="ac490ccd50ba543a3f58f70e79d5c7c24"></a><!-- doxytag: member="PhyloTree::fillProbRealJC69" ref="ac490ccd50ba543a3f58f70e79d5c7c24" args="(const rvector &amp;x, const vector&lt; int &gt; &amp;pattern, RealProbs &amp;rNucProb) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="PhyloTree_8hpp.shtml#a9a6f7e127d1279875ce95b0b6a331114">RealProbs</a> &amp; <a class="el" href="classPhyloTree.shtml#ac490ccd50ba543a3f58f70e79d5c7c24">PhyloTree::fillProbRealJC69</a> </td>
          <td>(</td>
          <td class="paramtype">const rvector &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>pattern</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="PhyloTree_8hpp.shtml#a9a6f7e127d1279875ce95b0b6a331114">RealProbs</a> &amp;&#160;</td>
          <td class="paramname"><em>rNucProb</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Return the probability of a given pattern for this tree. </p>
<p>version dealing with rvectors, ie points and applying JC69 transition probabilities </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">x</td><td>the rvector to calculate the probability of </td></tr>
    <tr><td class="paramname">pattern</td><td>the nucleotide pattern under which to calculate the probabilities (gives the probabilities at the leaf nodes) </td></tr>
    <tr><td class="paramname">rNucProb</td><td>a vector of reals, passed by reference, to be filled in by the function </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>a vector of reals, one for each character in the character space, returned by reference </dd></dl>

<p>Definition at line <a class="el" href="PhyloTree_8cpp_source.shtml#l00208">208</a> of file <a class="el" href="PhyloTree_8cpp_source.shtml">PhyloTree.cpp</a>.</p>

<p>References <a class="el" href="PhyloTree_8hpp_source.shtml#l00398">getNumberBranches()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00127">PhyloNode::noChildren()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00824">nodePOTreal()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00035">PijofT_JC69R()</a>, <a class="el" href="PhyloTree_8hpp_source.shtml#l00301">root</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>.</p>

<p>Referenced by <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00233">FPhyloPOT::operator()()</a>.</p>
<div class="fragment"><pre class="fragment">{

  <span class="comment">// check we have some children</span>
  <span class="keywordflow">if</span> (<a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>-&gt;<a class="code" href="classPhyloNode.shtml#a78e2019221cbe7a77c0b9d8715c51058">noChildren</a>() == 0)
  {
    std::cerr &lt;&lt; <span class="stringliteral">&quot;Error trying to calculate probabilities &quot;</span>
              &lt;&lt; <span class="stringliteral">&quot;over tree with no children&quot;</span> &lt;&lt; std::endl;
    exit(1);
  }

  <span class="comment">// check the dimensions of the point matches dimensions for this tree</span>
  <span class="keywordtype">int</span> d = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(x) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(x) + 1;
  <span class="keywordflow">if</span>(<a class="code" href="classPhyloTree.shtml#ae7557f8269350a3ee6ba18f9bd63b7e6" title="Get the number of branches in a tree.">getNumberBranches</a>() != static_cast&lt;size_t&gt;(d))
  {
    std::cerr &lt;&lt; <span class="stringliteral">&quot;tree dimensions (branches) &quot;</span> &lt;&lt; <a class="code" href="classPhyloTree.shtml#ae7557f8269350a3ee6ba18f9bd63b7e6" title="Get the number of branches in a tree.">getNumberBranches</a>()
      &lt;&lt; <span class="stringliteral">&quot; does not match dimensions of point &quot;</span> &lt;&lt; d &lt;&lt; std::endl;
    exit(1);
  }

  <span class="comment">// use the root as the node to start post order traversal</span>
  <span class="comment">// and pass in pointer to JC69 transition probabilites function</span>
  rNucProb = <a class="code" href="classPhyloTree.shtml#ae7b8d3e72818ebe9eea94906acf541f1" title="Calculates the probabilities as reals of each character for a node given its children&#39;s state...">nodePOTreal</a>(&amp;<a class="code" href="PhyloTree_8cpp.shtml#aa9345a2830ad2dc42d513ff3438b51f6" title="Jukes Cantor formula for transition from nucleotype i to j for an unrooted tree.">PijofT_JC69R</a>, <a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>, x, pattern, rNucProb);

  <span class="comment">// return the same vector but note that return is by reference</span>
  <span class="keywordflow">return</span> rNucProb;

}
</pre></div>
</div>
</div>
<a class="anchor" id="ae6923fc35a5687504975d460a9769a55"></a><!-- doxytag: member="PhyloTree::findLabel" ref="ae6923fc35a5687504975d460a9769a55" args="(const string &amp;line, const size_t lineLength, size_t &amp;pos, const PhyloNode *root) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classPhyloTree.shtml#ae6923fc35a5687504975d460a9769a55">PhyloTree::findLabel</a> </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>lineLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t &amp;&#160;</td>
          <td class="paramname"><em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classPhyloNode.shtml">PhyloNode</a> *&#160;</td>
          <td class="paramname"><em>root</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Extract a label given in a tree file if the identifier for a label has been found. </p>

<p>Definition at line <a class="el" href="PhyloTree_8cpp_source.shtml#l00627">627</a> of file <a class="el" href="PhyloTree_8cpp_source.shtml">PhyloTree.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l01008">taylor::sin()</a>, and <a class="el" href="PhyloTree_8cpp_source.shtml#l00554">TreeFileErrorExit()</a>.</p>

<p>Referenced by <a class="el" href="PhyloTree_8cpp_source.shtml#l00345">DecodeTree()</a>.</p>
<div class="fragment"><pre class="fragment">{
  pos++;            <span class="comment">// move to the next character after the &#39;#&#39; or &#39;$&#39; character</span>

                    <span class="comment">// characters accepted as part of an integer</span>
  <span class="keywordtype">string</span> intChars = <span class="stringliteral">&quot;0123456789&quot;</span>;
                    <span class="comment">// space characters</span>
  <span class="keywordtype">string</span> space = <span class="stringliteral">&quot; &quot;</span>;

  <span class="comment">// find the first non space and make sure it is an integer</span>
  pos = line.find_first_not_of(space, pos);

  <span class="keywordflow">if</span> (pos==string::npos)
  {
    <span class="keywordtype">string</span> msg = 
    <span class="stringliteral">&quot;Error in tree file: no integer label following &#39;#&#39; or &#39;$&#39; character&quot;</span>;
    <a class="code" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962" title="A function to deal with an error found in a tree input file.">TreeFileErrorExit</a>(msg, node);
  }

  <span class="keywordtype">size_t</span> numerpos = line.find_first_of(intChars, pos);

  <span class="comment">// check that first integer is the first non space character following &#39;:&#39;</span>
  <span class="keywordflow">if</span> ((numerpos==string::npos) || (numerpos != pos))
  {
    <span class="keywordtype">string</span> msg = 
    <span class="stringliteral">&quot;Error in tree file: no integer following &#39;#&#39; or &#39;$&#39; character &quot;</span>;
    <a class="code" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962" title="A function to deal with an error found in a tree input file.">TreeFileErrorExit</a>(msg, node);
  }

  <span class="keywordtype">int</span> retValue = 1000;

  <span class="comment">// string to int</span>
  <span class="keywordtype">string</span> singleCharStr = line.substr(pos, 1);
  istringstream <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(singleCharStr);
  <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a> &gt;&gt; retValue;  <span class="comment">// store integer at pos as sequenceNumber</span>

  pos++;

  <span class="comment">// now we expect a non integer character or the end of the line</span>
  <span class="keywordflow">if</span> (pos &lt; lineLength)
  {
    numerpos = line.find_first_of(intChars, pos);
    <span class="keywordflow">if</span> (numerpos == pos)
    {
      <span class="keywordtype">string</span> msg = 
      <span class="stringliteral">&quot;Sorry:  DecodeTree() can only cope with single-digit labels at present&quot;</span>;
      <a class="code" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962" title="A function to deal with an error found in a tree input file.">TreeFileErrorExit</a>(msg, node);
    }
  }                 <span class="comment">// end check on next digit</span>

  <span class="keywordflow">return</span> retValue;
}
</pre></div>
</div>
</div>
<a class="anchor" id="abd9309bd022690e7532c1d4903d7898f"></a><!-- doxytag: member="PhyloTree::findSeqNo" ref="abd9309bd022690e7532c1d4903d7898f" args="(const string &amp;line, const size_t lineLength, size_t &amp;pos, const PhyloNode *root, const vector&lt; string &gt; &amp;seqnames) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classPhyloTree.shtml#abd9309bd022690e7532c1d4903d7898f">PhyloTree::findSeqNo</a> </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>lineLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t &amp;&#160;</td>
          <td class="paramname"><em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classPhyloNode.shtml">PhyloNode</a> *&#160;</td>
          <td class="paramname"><em>root</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector&lt; string &gt; &amp;&#160;</td>
          <td class="paramname"><em>seqnames</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Extract a sequence number from a tree file. </p>
<p>If a sequence name rather than number is given, finds the corresponding sequence number using the names from sequences read in from sequence file. </p>

<p>Definition at line <a class="el" href="PhyloTree_8cpp_source.shtml#l00682">682</a> of file <a class="el" href="PhyloTree_8cpp_source.shtml">PhyloTree.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l01008">taylor::sin()</a>, and <a class="el" href="PhyloTree_8cpp_source.shtml#l00554">TreeFileErrorExit()</a>.</p>

<p>Referenced by <a class="el" href="PhyloTree_8cpp_source.shtml#l00345">DecodeTree()</a>.</p>
<div class="fragment"><pre class="fragment">{

                    <span class="comment">// characters accepted as part of an integer</span>
  <span class="keywordtype">string</span> intChars = <span class="stringliteral">&quot;0123456789&quot;</span>;
                    <span class="comment">//characters accepted as part of an alphabetical label</span>
  <span class="keywordtype">string</span> alphaChars = <span class="stringliteral">&quot;abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span>;

  <span class="comment">// we know that there will be no spaces at the start since they are dealt </span>
  <span class="comment">// with in DecodeTree()</span>
  <span class="comment">// we expect each distinct sequence number to be followed by a comma or a ), </span>
  <span class="comment">// signifying the end of the number</span>

  <span class="keywordtype">int</span> sequenceNumber = -1;

  <span class="keywordtype">int</span> noseq = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(seqnames.size());

  <span class="comment">// check if character at this pos numeric?</span>
  <span class="keywordtype">size_t</span> numerpos = line.find_first_of(intChars, pos);

                    <span class="comment">// the character at pos is numeric</span>
  <span class="keywordflow">if</span> (pos == numerpos)
  {
    <span class="comment">// should be the start of our sequence number</span>

    <span class="comment">// find the non numeric character</span>
                    <span class="comment">// first occurence of something non-int</span>
    <span class="keywordtype">size_t</span> notnumerpos = line.find_first_not_of(intChars, pos);

    <span class="comment">// the number we want starts at pos and has it&#39;s final character </span>
    <span class="comment">// at notnumerpos-1</span>
    <span class="comment">// and so has length notnumberpos-1 - pos +1 = notnumererpos-pos</span>
    <span class="keywordtype">string</span> numberStr = line.substr(pos, (notnumerpos-pos));
    <span class="comment">// string to int</span>
    istringstream <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(numberStr);
                    <span class="comment">// store the integer we are after as sequenceNumber</span>
    <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a> &gt;&gt; sequenceNumber;

    <span class="comment">//check sequenceNumber against number of sequence names if given</span>
    <span class="keywordflow">if</span> ((noseq &gt; 0) &amp;&amp; (noseq &lt; sequenceNumber))
    {
      <span class="keywordtype">string</span> msg = 
      <span class="stringliteral">&quot;Error in tree file: A sequence number is \n greater than the number of sequences&quot;</span>;
      <a class="code" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962" title="A function to deal with an error found in a tree input file.">TreeFileErrorExit</a>(msg, node);
    }

                    <span class="comment">// move pos to next character after the number</span>
    pos = notnumerpos;
  }

  <span class="keywordflow">else</span>              <span class="comment">// the character at pos is not numeric</span>
  {
    <span class="comment">// should be the start of a recognised sequence name</span>

    <span class="keywordflow">if</span> (noseq == 0)
    {
      <span class="keywordtype">string</span> msg = 
      <span class="stringliteral">&quot;Error constructing tree: can deal only with sequences identified by number&quot;</span>;
      <a class="code" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962" title="A function to deal with an error found in a tree input file.">TreeFileErrorExit</a>(msg, node);
    }

    <span class="keywordtype">size_t</span> posUpTo = line.find_first_not_of(alphaChars, pos);

    <span class="comment">// but really there should be at least one non-alpha character </span>
    <span class="comment">// before the end?</span>
    <span class="keywordflow">if</span> (posUpTo==string::npos)
    {
      posUpTo = lineLength;
    }

    <span class="comment">// using the part of the string comprising the alpha characters</span>
    <span class="keywordtype">string</span> name = line.substr(pos, posUpTo-pos);

    <span class="comment">// compare to the seqnames</span>

    <span class="keywordtype">int</span> i = 0;
    <span class="keywordflow">while</span> ((sequenceNumber == -1) &amp;&amp; (i &lt; noseq))
    {

                    <span class="comment">// find the ith sequence name</span>
      <span class="keywordtype">string</span> seqName = seqnames[i];

      <span class="comment">// make both names all lower case</span>
      std::transform(name.begin(), name.end(), name.begin(), ::tolower);
      std::transform(seqName.begin(), 
                     seqName.end(), seqName.begin(), ::tolower);

      <span class="keywordflow">if</span> (seqName == name)
      {
        sequenceNumber = i+1;

      }
      i++;
    }               <span class="comment">// end while</span>

                    <span class="comment">// did not find a match for a sequence name</span>
    <span class="keywordflow">if</span> (sequenceNumber == -1)
    {
      <span class="keywordtype">string</span> msg = 
      <span class="stringliteral">&quot;Error in tree file: a name in tree file did not match \n any in the sequence file (case insensitive matching)&quot;</span>;
      <a class="code" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962" title="A function to deal with an error found in a tree input file.">TreeFileErrorExit</a>(msg, node);
    }

    pos = posUpTo;  <span class="comment">// move pos up the first non-alpha character</span>
  }                 <span class="comment">// end of alpha name for node identifier</span>

  <span class="keywordflow">return</span> sequenceNumber;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a91962e00d6d81f2186e2290ce61bf7f1"></a><!-- doxytag: member="PhyloTree::findTime" ref="a91962e00d6d81f2186e2290ce61bf7f1" args="(const string &amp;line, const size_t lineLength, size_t &amp;pos, const PhyloNode *root) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">real <a class="el" href="classPhyloTree.shtml#a91962e00d6d81f2186e2290ce61bf7f1">PhyloTree::findTime</a> </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>line</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const size_t&#160;</td>
          <td class="paramname"><em>lineLength</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">size_t &amp;&#160;</td>
          <td class="paramname"><em>pos</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classPhyloNode.shtml">PhyloNode</a> *&#160;</td>
          <td class="paramname"><em>root</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Extract a time given in a tree file if the identifier for a time has been found. </p>

<p>Definition at line <a class="el" href="PhyloTree_8cpp_source.shtml#l00569">569</a> of file <a class="el" href="PhyloTree_8cpp_source.shtml">PhyloTree.cpp</a>.</p>

<p>References <a class="el" href="dim2taylor_8cpp_source.shtml#l01008">taylor::sin()</a>, and <a class="el" href="PhyloTree_8cpp_source.shtml#l00554">TreeFileErrorExit()</a>.</p>

<p>Referenced by <a class="el" href="PhyloTree_8cpp_source.shtml#l00345">DecodeTree()</a>.</p>
<div class="fragment"><pre class="fragment">{
  pos++;
                    <span class="comment">// characters accepted as part of a double number</span>
  <span class="keywordtype">string</span> doubleChars = <span class="stringliteral">&quot;.0123456789&quot;</span>;
                    <span class="comment">// space characters</span>
  <span class="keywordtype">string</span> space = <span class="stringliteral">&quot; &quot;</span>;

  <span class="comment">// find the first non space and make sure it is acceptable </span>
  <span class="comment">// as the start of a double</span>
  pos = line.find_first_not_of(space, pos);

  <span class="keywordflow">if</span> (pos==string::npos)
  {
    <span class="keywordtype">string</span> msg = 
    <span class="stringliteral">&quot;Error in tree file: no double for time following &#39;:&#39; character &quot;</span>;
    <a class="code" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962" title="A function to deal with an error found in a tree input file.">TreeFileErrorExit</a>(msg, node);
  }

  <span class="keywordtype">size_t</span> firstPos = line.find_first_of(doubleChars, pos);

  <span class="comment">// check that first integer is the first non space character following &#39;:&#39;</span>
  <span class="keywordflow">if</span> ((firstPos==string::npos) || (firstPos != pos))
  {
    <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in tree file: no integer following &#39;#&#39; character&quot;</span>;
    <a class="code" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962" title="A function to deal with an error found in a tree input file.">TreeFileErrorExit</a>(msg, node);
  }
  <span class="comment">// pos is the same as firstPos</span>

  <span class="comment">// find last of the following doubleChars</span>
  <span class="keywordtype">size_t</span> posUpTo = line.find_first_not_of(doubleChars, pos);

                    <span class="comment">// there could be no non-numeric character before the end</span>
  <span class="keywordflow">if</span> (posUpTo==string::npos)
  {
    posUpTo = lineLength;
  }

  <span class="comment">// using the part of the string comprising the numbers</span>
                    <span class="comment">// convert to a stream</span>
  istringstream <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a>(line.substr(pos, posUpTo-pos));
  <span class="keywordtype">double</span> dblValue = 0.0;
  <a class="code" href="namespacetaylor.shtml#ae72c8b625cbb6c9d852c823755ea5299">sin</a> &gt;&gt; dblValue;  <span class="comment">// extract number from the stream</span>

  real retValue = _real(dblValue);

  <span class="comment">// make this the time for the current node</span>
  pos = posUpTo;    <span class="comment">// move pos up the first non-numeric character</span>

  <span class="keywordflow">return</span> retValue;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae7557f8269350a3ee6ba18f9bd63b7e6"></a><!-- doxytag: member="PhyloTree::getNumberBranches" ref="ae7557f8269350a3ee6ba18f9bd63b7e6" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="classPhyloTree.shtml#ae7557f8269350a3ee6ba18f9bd63b7e6">PhyloTree::getNumberBranches</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the number of branches in a tree. </p>

<p>Definition at line <a class="el" href="PhyloTree_8hpp_source.shtml#l00398">398</a> of file <a class="el" href="PhyloTree_8hpp_source.shtml">PhyloTree.hpp</a>.</p>

<p>Referenced by <a class="el" href="PhyloTree_8cpp_source.shtml#l00276">fillProbHessJC69()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00242">fillProbIntervalJC69()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00310">fillProbRealCFN()</a>, and <a class="el" href="PhyloTree_8cpp_source.shtml#l00208">fillProbRealJC69()</a>.</p>
<div class="fragment"><pre class="fragment">    {
      <span class="keywordflow">return</span> <a class="code" href="classPhyloTree.shtml#a0d1f91c11b0b4dd5091f44d0f4dda0c7" title="Get the number of nodes in the tree, including the root.">getNumberNodes</a>() - 1;
    }
</pre></div>
</div>
</div>
<a class="anchor" id="a0d1f91c11b0b4dd5091f44d0f4dda0c7"></a><!-- doxytag: member="PhyloTree::getNumberNodes" ref="a0d1f91c11b0b4dd5091f44d0f4dda0c7" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">size_t <a class="el" href="classPhyloTree.shtml#a0d1f91c11b0b4dd5091f44d0f4dda0c7">PhyloTree::getNumberNodes</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the number of nodes in the tree, including the root. </p>

<p>Definition at line <a class="el" href="PhyloTree_8cpp_source.shtml#l00181">181</a> of file <a class="el" href="PhyloTree_8cpp_source.shtml">PhyloTree.cpp</a>.</p>

<p>References <a class="el" href="PhyloTree_8cpp_source.shtml#l00132">PhyloNode::noDescendents()</a>, and <a class="el" href="PhyloTree_8hpp_source.shtml#l00301">root</a>.</p>

<p>Referenced by <a class="el" href="FPhyloPOT_8cpp_source.shtml#l00724">FPhyloPOT::ReadTrees()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="keywordtype">size_t</span> noNodes = 0;

  <span class="keywordflow">if</span> (<a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>!=NULL)
  {

    noNodes++;      <span class="comment">// count the root</span>
    <span class="comment">// and add on descendents of root</span>
    noNodes += <a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>-&gt;<a class="code" href="classPhyloNode.shtml#adbb02a774b9fe0125d646d96c59c9a46">noDescendents</a>();
  }

  <span class="keywordflow">return</span> noNodes;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a5ede1337d40e3e211e83d9f009b062f9"></a><!-- doxytag: member="PhyloTree::getRoot" ref="a5ede1337d40e3e211e83d9f009b062f9" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classPhyloNode.shtml">PhyloNode</a>* <a class="el" href="classPhyloTree.shtml#a5ede1337d40e3e211e83d9f009b062f9">PhyloTree::getRoot</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Get the root of the tree. </p>

<p>Definition at line <a class="el" href="PhyloTree_8hpp_source.shtml#l00389">389</a> of file <a class="el" href="PhyloTree_8hpp_source.shtml">PhyloTree.hpp</a>.</p>
<div class="fragment"><pre class="fragment">    {
      <span class="keywordflow">return</span> <a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>;
    }
</pre></div>
</div>
</div>
<a class="anchor" id="aec23a8f03330ad66e6ff1af4c886798e"></a><!-- doxytag: member="PhyloTree::nodePOTHess" ref="aec23a8f03330ad66e6ff1af4c886798e" args="(HessTranProb_FctPtr tpf, const PhyloNode *const node, const HTvector &amp;x, const vector&lt; int &gt; &amp;pattern, HessProbs &amp;hNucProb) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="PhyloTree_8hpp.shtml#a8ee2b3678316ad48baa269e4ee7db7f7">HessProbs</a> &amp; <a class="el" href="classPhyloTree.shtml#aec23a8f03330ad66e6ff1af4c886798e">PhyloTree::nodePOTHess</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="PhyloTree_8hpp.shtml#aa81a7e0d071642af42626caebfef6eeb">HessTranProb_FctPtr</a>&#160;</td>
          <td class="paramname"><em>tpf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classPhyloNode.shtml">PhyloNode</a> *const&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const HTvector &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>pattern</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="PhyloTree_8hpp.shtml#a8ee2b3678316ad48baa269e4ee7db7f7">HessProbs</a> &amp;&#160;</td>
          <td class="paramname"><em>hNucProb</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculates the probabilities as HessType of each character in a character space for a node given its children's state. </p>
<p>Uses post order traversal of the tree to build probabilities from probabilities in child nodes. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">node</td><td>the node for which to calculate probabilities </td></tr>
    <tr><td class="paramname">x</td><td>the rvector to calculate the probability of </td></tr>
    <tr><td class="paramname">pattern</td><td>the nucleotide pattern under which to calculate the probabilities (gives the probabilities at the leaf nodes) </td></tr>
    <tr><td class="paramname">hNucProb</td><td>a vector of HessTypes, passed by reference, to be filled in by the function </td></tr>
    <tr><td class="paramname">tpf</td><td>a function pointer for probabilities as HessTypes </td></tr>
    <tr><td class="paramname">tpf</td><td>a function pointer for transition probabilities as HessTypes </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>a vector of HessTypes, one for each character in the character space, returned by reference </dd></dl>

<p>Definition at line <a class="el" href="PhyloTree_8cpp_source.shtml#l00978">978</a> of file <a class="el" href="PhyloTree_8cpp_source.shtml">PhyloTree.cpp</a>.</p>

<p>References <a class="el" href="PhyloTree_8hpp_source.shtml#l00304">CharacterSpace</a>, <a class="el" href="PhyloTree_8hpp_source.shtml#l00216">PhyloNode::getBranch()</a>, <a class="el" href="PhyloTree_8hpp_source.shtml#l00210">PhyloNode::getChildren()</a>, <a class="el" href="PhyloTree_8hpp_source.shtml#l00234">PhyloNode::getSeqNo()</a>, and <a class="el" href="PhyloTree_8cpp_source.shtml#l00127">PhyloNode::noChildren()</a>.</p>

<p>Referenced by <a class="el" href="PhyloTree_8cpp_source.shtml#l00276">fillProbHessJC69()</a>.</p>
<div class="fragment"><pre class="fragment">{
  hNucProb.clear(); <span class="comment">// make sure the container is empty</span>
  hNucProb.reserve(<a class="code" href="classPhyloTree.shtml#a2411ce76565644f8253f15840863a05a" title="The size of the character space for the tree.">CharacterSpace</a>);

                    <span class="comment">// get the children of the node</span>
  <a class="code" href="PhyloTree_8hpp.shtml#a949af9a126c7f41a99746ced5d664690" title="a container of pointers to PhyloNodes">PhyloPtrs</a> theChildren = node-&gt;<a class="code" href="classPhyloNode.shtml#ae7877c20c9db63402d07b6f82a346b21" title="Get the children of this node.">getChildren</a>();

  <a class="code" href="PhyloTree_8hpp.shtml#a0a3a649fee0ead336be1530dea932165" title="iterator over a container of pointers to PhyloNodes">PhyloPtrsItr</a> it;

  <span class="keywordtype">int</span> d = x.Dim();  <span class="comment">// dimensions of x</span>

  <span class="comment">// CharacterSpace is the number of possible characters for nucleotides</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> thisNuc=0; thisNuc &lt; <a class="code" href="classPhyloTree.shtml#a2411ce76565644f8253f15840863a05a" title="The size of the character space for the tree.">CharacterSpace</a>; thisNuc++)
  {
                    <span class="comment">// HessType of same dimensions as x</span>
    HessType prob(d);
    prob = 1.0;

    <span class="comment">// for each child</span>
    <span class="keywordflow">for</span> (it = theChildren.begin(); it &lt; theChildren.end(); it++)
    {

      <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a>* child = *it;
                    <span class="comment">// add one because ivectors are indexed 1 to n not 0 to n-1</span>
      <span class="keywordtype">int</span> branchIndex = child-&gt;<a class="code" href="classPhyloNode.shtml#a565c9444607ed8768e9415eacb559123" title="Get the ibranch member.">getBranch</a>() + 1;
                    <span class="comment">// the element of x corresponding to the child&#39;s branch</span>
      HessType ptElem(x[branchIndex]);
      <span class="keywordtype">int</span> sequenceNumber = child-&gt;<a class="code" href="classPhyloNode.shtml#a3fc253c8d09bf7d7cf1da885c1eaec4c" title="Get the seq_no member.">getSeqNo</a>();

                    <span class="comment">// this child of this node has no children</span>
      <span class="keywordflow">if</span> (child-&gt;<a class="code" href="classPhyloNode.shtml#a78e2019221cbe7a77c0b9d8715c51058">noChildren</a>() &lt; 1)
      {

        <span class="comment">// get the coded character for this child&#39;s sequence number in </span>
        <span class="comment">// the pattern_i-th base sequence</span>
        <span class="keywordtype">int</span> childNuc = pattern[sequenceNumber-1];

        <span class="comment">// get prob of transition from childNuc to thisNuc</span>
        prob = prob * tpf(ptElem, thisNuc, childNuc);

      }             <span class="comment">// end if child has no children</span>

      <span class="keywordflow">else</span>          <span class="comment">// this child has children</span>
      {

                    <span class="comment">// fill this in by recursing on fillProbHess with child</span>
        <a class="code" href="PhyloTree_8hpp.shtml#a8ee2b3678316ad48baa269e4ee7db7f7" title="a container of HessTypes for HessType probabilities">HessProbs</a> childProbs;
        childProbs = <a class="code" href="classPhyloTree.shtml#aec23a8f03330ad66e6ff1af4c886798e" title="Calculates the probabilities as HessType of each character in a character space for a node given its ...">nodePOTHess</a>(tpf, child, x, pattern, childProbs);

        HessType tt(d);
        tt = 0.0;

        <span class="comment">// run over the childProbs, accumulating</span>
        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 1; j &lt; <a class="code" href="classPhyloTree.shtml#a2411ce76565644f8253f15840863a05a" title="The size of the character space for the tree.">CharacterSpace</a>; j++)
        {
          tt = tt+ (tpf(ptElem, thisNuc, j) * childProbs[j]);
        }

        prob = prob * tt;
      }             <span class="comment">// end case child has children</span>

      <span class="comment">// the child, whether it has children or not, </span>
      <span class="comment">// has now multiplied prob by something</span>
    }               <span class="comment">// end of loop through children</span>

    <span class="comment">// we now have a prob for thisNuc to which each child has contributed</span>
                    <span class="comment">// copy of prob goes into hNucProb</span>
    hNucProb.push_back(prob);
  }                 <span class="comment">// end of loop through CharacterSpace</span>

  <span class="comment">// hNucProb should have had CharacterSpace intervals pushed into it</span>

  <span class="keywordflow">return</span> hNucProb;  <span class="comment">// return the same vector but note that return is by reference</span>
}
</pre></div>
</div>
</div>
<a class="anchor" id="a1cb66ffcb92baaeafadd12babc01feba"></a><!-- doxytag: member="PhyloTree::nodePOTinterval" ref="a1cb66ffcb92baaeafadd12babc01feba" args="(IntervalTranProb_FctPtr tpf, const PhyloNode *const node, const ivector &amp;x, const vector&lt; int &gt; &amp;pattern, IntervalProbs &amp;iNucProb) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="PhyloTree_8hpp.shtml#af4bedfc3c110381d3675cf92e28539db">IntervalProbs</a> &amp; <a class="el" href="classPhyloTree.shtml#a1cb66ffcb92baaeafadd12babc01feba">PhyloTree::nodePOTinterval</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="PhyloTree_8hpp.shtml#a6961512ff8fd6fa5a520b93c63c4ad60">IntervalTranProb_FctPtr</a>&#160;</td>
          <td class="paramname"><em>tpf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classPhyloNode.shtml">PhyloNode</a> *const&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const ivector &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>pattern</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="PhyloTree_8hpp.shtml#af4bedfc3c110381d3675cf92e28539db">IntervalProbs</a> &amp;&#160;</td>
          <td class="paramname"><em>iNucProb</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculates the probabilities as an interval of each character for a node given its children's state. </p>
<p>Uses post order traversal of the tree to build probabilities from probabilities in child nodes. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">node</td><td>the node for which to calculate probabilities </td></tr>
    <tr><td class="paramname">x</td><td>the rvector to calculate the probability of </td></tr>
    <tr><td class="paramname">pattern</td><td>the nucleotide pattern under which to calculate the probabilities (gives the probabilities at the leaf nodes) </td></tr>
    <tr><td class="paramname">iNucProb</td><td>a vector of intervals, passed by reference, to be filled in by the function </td></tr>
    <tr><td class="paramname">tpf</td><td>a function pointer for transition probabilities as intervals </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>a vector of intervals, one for each character in the character space, returned by reference </dd></dl>

<p>Definition at line <a class="el" href="PhyloTree_8cpp_source.shtml#l00901">901</a> of file <a class="el" href="PhyloTree_8cpp_source.shtml">PhyloTree.cpp</a>.</p>

<p>References <a class="el" href="PhyloTree_8hpp_source.shtml#l00304">CharacterSpace</a>, <a class="el" href="PhyloTree_8hpp_source.shtml#l00216">PhyloNode::getBranch()</a>, <a class="el" href="PhyloTree_8hpp_source.shtml#l00210">PhyloNode::getChildren()</a>, <a class="el" href="PhyloTree_8hpp_source.shtml#l00234">PhyloNode::getSeqNo()</a>, and <a class="el" href="PhyloTree_8cpp_source.shtml#l00127">PhyloNode::noChildren()</a>.</p>

<p>Referenced by <a class="el" href="PhyloTree_8cpp_source.shtml#l00242">fillProbIntervalJC69()</a>.</p>
<div class="fragment"><pre class="fragment">{
  iNucProb.clear(); <span class="comment">// make sure the container is empty</span>
  iNucProb.reserve(<a class="code" href="classPhyloTree.shtml#a2411ce76565644f8253f15840863a05a" title="The size of the character space for the tree.">CharacterSpace</a>);

                    <span class="comment">// get the children of the node</span>
  <a class="code" href="PhyloTree_8hpp.shtml#a949af9a126c7f41a99746ced5d664690" title="a container of pointers to PhyloNodes">PhyloPtrs</a> theChildren = node-&gt;<a class="code" href="classPhyloNode.shtml#ae7877c20c9db63402d07b6f82a346b21" title="Get the children of this node.">getChildren</a>();

  <a class="code" href="PhyloTree_8hpp.shtml#a0a3a649fee0ead336be1530dea932165" title="iterator over a container of pointers to PhyloNodes">PhyloPtrsItr</a> it;

  <span class="comment">// CharacterSpace is the number of possible characters for nucleotides</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> thisNuc=0; thisNuc &lt; <a class="code" href="classPhyloTree.shtml#a2411ce76565644f8253f15840863a05a" title="The size of the character space for the tree.">CharacterSpace</a>; thisNuc++)
  {
    interval prob(1.0, 1.0);

    <span class="comment">// for each child</span>
    <span class="keywordflow">for</span> (it = theChildren.begin(); it &lt; theChildren.end(); it++)
    {

      <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a>* child = *it;
                    <span class="comment">// add one because ivectors are indexed 1 to n not 0 to n-1</span>
      <span class="keywordtype">int</span> branchIndex = child-&gt;<a class="code" href="classPhyloNode.shtml#a565c9444607ed8768e9415eacb559123" title="Get the ibranch member.">getBranch</a>() + 1;
                    <span class="comment">// the interval in x corresponding to the child&#39;s branch</span>
      interval boxSide = x[branchIndex];
      <span class="keywordtype">int</span> sequenceNumber = child-&gt;<a class="code" href="classPhyloNode.shtml#a3fc253c8d09bf7d7cf1da885c1eaec4c" title="Get the seq_no member.">getSeqNo</a>();

                    <span class="comment">// this child of this node has no children</span>
      <span class="keywordflow">if</span> (child-&gt;<a class="code" href="classPhyloNode.shtml#a78e2019221cbe7a77c0b9d8715c51058">noChildren</a>() &lt; 1)
      {

        <span class="comment">// get the coded character for this child&#39;s sequence number in the </span>
        <span class="comment">// pattern_i-th base sequence</span>
        <span class="keywordtype">int</span> childNuc = pattern[sequenceNumber-1];

        <span class="comment">// get prob of transition from childNuc to thisNuc</span>
        prob = prob * tpf(boxSide, thisNuc, childNuc);

      }             <span class="comment">// end if child has no children</span>

      <span class="keywordflow">else</span>          <span class="comment">// this child has children</span>
      {

                    <span class="comment">// fill this in by recursing on fillProbInterval with child</span>
        <a class="code" href="PhyloTree_8hpp.shtml#af4bedfc3c110381d3675cf92e28539db" title="a container of intervals for interval probabilities">IntervalProbs</a> childProbs;
        childProbs = <a class="code" href="classPhyloTree.shtml#a1cb66ffcb92baaeafadd12babc01feba" title="Calculates the probabilities as an interval of each character for a node given its children&#39;s state...">nodePOTinterval</a>(tpf, child, x, pattern, childProbs);

        interval tt(0.0, 0.0);

        <span class="comment">// run over the childProbs, accumulating</span>
        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 1; j &lt; <a class="code" href="classPhyloTree.shtml#a2411ce76565644f8253f15840863a05a" title="The size of the character space for the tree.">CharacterSpace</a>; j++)
        {
          tt = tt+ (tpf(boxSide, thisNuc, j) * childProbs[j]);
        }
        prob = prob * tt;
      }             <span class="comment">// end case child has children</span>

      <span class="comment">// the child, whether it has children or not, has now </span>
      <span class="comment">// multiplied prob by something</span>
    }               <span class="comment">// end of loop through children</span>

    <span class="comment">// we now have a prob for thisNuc to which each child has contributed</span>
                    <span class="comment">// copy of prob goes into iNucProb</span>
    iNucProb.push_back(prob);
  }                 <span class="comment">// end of loop through CharacterSpace</span>

  <span class="comment">// iNucProb should have had CharacterSpace intervals pushed into it</span>

  <span class="comment">// return the same vector but note that return is by reference</span>
  <span class="keywordflow">return</span> iNucProb;
}
</pre></div>
</div>
</div>
<a class="anchor" id="ae7b8d3e72818ebe9eea94906acf541f1"></a><!-- doxytag: member="PhyloTree::nodePOTreal" ref="ae7b8d3e72818ebe9eea94906acf541f1" args="(RealTranProb_FctPtr tpf, const PhyloNode *const node, const rvector &amp;x, const vector&lt; int &gt; &amp;pattern, RealProbs &amp;rNucProb) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="PhyloTree_8hpp.shtml#a9a6f7e127d1279875ce95b0b6a331114">RealProbs</a> &amp; <a class="el" href="classPhyloTree.shtml#ae7b8d3e72818ebe9eea94906acf541f1">PhyloTree::nodePOTreal</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="PhyloTree_8hpp.shtml#a4457ee43eaa9b550b64e1542c62f7a6f">RealTranProb_FctPtr</a>&#160;</td>
          <td class="paramname"><em>tpf</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classPhyloNode.shtml">PhyloNode</a> *const&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const rvector &amp;&#160;</td>
          <td class="paramname"><em>x</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const vector&lt; int &gt; &amp;&#160;</td>
          <td class="paramname"><em>pattern</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="PhyloTree_8hpp.shtml#a9a6f7e127d1279875ce95b0b6a331114">RealProbs</a> &amp;&#160;</td>
          <td class="paramname"><em>rNucProb</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Calculates the probabilities as reals of each character for a node given its children's state. </p>
<p>Uses post order traversal of the tree to build probabilities from probabilities in child nodes. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">node</td><td>the node for which to calculate probabilities </td></tr>
    <tr><td class="paramname">x</td><td>the rvector to calculate the probability of </td></tr>
    <tr><td class="paramname">pattern</td><td>the nucleotide pattern under which to calculate the probabilities (gives the probabilities at the leaf nodes) </td></tr>
    <tr><td class="paramname">rNucProb</td><td>a vector of reals, passed by reference, to be filled in by the function </td></tr>
    <tr><td class="paramname">tpf</td><td>a function pointer for transition probabilities as reals </td></tr>
  </table>
  </dd>
</dl>
<dl class="return"><dt><b>Returns:</b></dt><dd>a vector of reals, one for each character in the character space, returned by reference </dd></dl>

<p>Definition at line <a class="el" href="PhyloTree_8cpp_source.shtml#l00824">824</a> of file <a class="el" href="PhyloTree_8cpp_source.shtml">PhyloTree.cpp</a>.</p>

<p>References <a class="el" href="PhyloTree_8hpp_source.shtml#l00304">CharacterSpace</a>, <a class="el" href="PhyloTree_8hpp_source.shtml#l00216">PhyloNode::getBranch()</a>, <a class="el" href="PhyloTree_8hpp_source.shtml#l00210">PhyloNode::getChildren()</a>, <a class="el" href="PhyloTree_8hpp_source.shtml#l00234">PhyloNode::getSeqNo()</a>, and <a class="el" href="PhyloTree_8cpp_source.shtml#l00127">PhyloNode::noChildren()</a>.</p>

<p>Referenced by <a class="el" href="PhyloTree_8cpp_source.shtml#l00310">fillProbRealCFN()</a>, and <a class="el" href="PhyloTree_8cpp_source.shtml#l00208">fillProbRealJC69()</a>.</p>
<div class="fragment"><pre class="fragment">{
  rNucProb.clear(); <span class="comment">// make sure the container is empty</span>
  rNucProb.reserve(<a class="code" href="classPhyloTree.shtml#a2411ce76565644f8253f15840863a05a" title="The size of the character space for the tree.">CharacterSpace</a>);

                    <span class="comment">// get the children of the node of this tree</span>
  <a class="code" href="PhyloTree_8hpp.shtml#a949af9a126c7f41a99746ced5d664690" title="a container of pointers to PhyloNodes">PhyloPtrs</a> theChildren = node-&gt;<a class="code" href="classPhyloNode.shtml#ae7877c20c9db63402d07b6f82a346b21" title="Get the children of this node.">getChildren</a>();

  <a class="code" href="PhyloTree_8hpp.shtml#a0a3a649fee0ead336be1530dea932165" title="iterator over a container of pointers to PhyloNodes">PhyloPtrsItr</a> it;

  <span class="comment">// CharacterSpace is the number of possible characters for nucleotides</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> thisNuc=0; thisNuc &lt; <a class="code" href="classPhyloTree.shtml#a2411ce76565644f8253f15840863a05a" title="The size of the character space for the tree.">CharacterSpace</a>; thisNuc++)
  {
    real prob(1.0);

    <span class="comment">// for each child</span>
    <span class="keywordflow">for</span> (it = theChildren.begin(); it &lt; theChildren.end(); it++)
    {

      <a class="code" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a>* child = *it;
                    <span class="comment">// add one because rvectors are indexed 1 to n not 0 to n-1</span>
      <span class="keywordtype">int</span> branchIndex = child-&gt;<a class="code" href="classPhyloNode.shtml#a565c9444607ed8768e9415eacb559123" title="Get the ibranch member.">getBranch</a>() + 1;
                    <span class="comment">// the element in x corresponding to the child&#39;s branch</span>
      real ptElem = x[branchIndex];
      <span class="keywordtype">int</span> sequenceNumber = child-&gt;<a class="code" href="classPhyloNode.shtml#a3fc253c8d09bf7d7cf1da885c1eaec4c" title="Get the seq_no member.">getSeqNo</a>();

                    <span class="comment">// this child of this node has no children</span>
      <span class="keywordflow">if</span> (child-&gt;<a class="code" href="classPhyloNode.shtml#a78e2019221cbe7a77c0b9d8715c51058">noChildren</a>() &lt; 1)
      {

        <span class="comment">// get the coded character for this child&#39;s sequence </span>
        <span class="comment">// number in the supplied pattern</span>
        <span class="keywordtype">int</span> childNuc = pattern[sequenceNumber-1];

        <span class="comment">// get prob of transition from childNuc to thisNuc</span>
        prob = prob * tpf(ptElem, thisNuc, childNuc);

      }             <span class="comment">// end if child has no children</span>

      <span class="keywordflow">else</span>          <span class="comment">// this child has children</span>
      {

                    <span class="comment">// fill this in by recursing on fillProbReal with child</span>
        <a class="code" href="PhyloTree_8hpp.shtml#a9a6f7e127d1279875ce95b0b6a331114" title="a container of intervals for real probabilities">RealProbs</a> childProbs;
        childProbs = <a class="code" href="classPhyloTree.shtml#ae7b8d3e72818ebe9eea94906acf541f1" title="Calculates the probabilities as reals of each character for a node given its children&#39;s state...">nodePOTreal</a>(tpf, child, x, pattern, childProbs);

        real tt(0.0);

        <span class="comment">// run over the childProbs, accumulating</span>
        <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 1; j &lt; <a class="code" href="classPhyloTree.shtml#a2411ce76565644f8253f15840863a05a" title="The size of the character space for the tree.">CharacterSpace</a>; j++)
        {
          tt = tt+ (tpf(ptElem, thisNuc, j) * childProbs[j]);
        }
        prob = prob * tt;
      }             <span class="comment">// end case child has children</span>

      <span class="comment">// the child, whether it has children or not, has now </span>
      <span class="comment">// multiplied prob by something</span>
    }               <span class="comment">// end of loop through children</span>

    <span class="comment">// we now have a prob for thisNuc to which each child has contributed</span>
                    <span class="comment">// copy of prob goes into rNucProb</span>
    rNucProb.push_back(prob);
  }                 <span class="comment">// end of loop through CharacterSpace</span>

  <span class="comment">// rNucProb should have had CharacterSpace intervals pushed into it</span>

  <span class="comment">// return the same vector but note that return is by reference</span>
  <span class="keywordflow">return</span> rNucProb;
}
</pre></div>
</div>
</div>
<a class="anchor" id="af53d4860d55732c183934881fda283c3"></a><!-- doxytag: member="PhyloTree::operator=" ref="af53d4860d55732c183934881fda283c3" args="(const PhyloTree &amp;rhs)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classPhyloTree.shtml">PhyloTree</a>&amp; PhyloTree::operator= </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classPhyloTree.shtml">PhyloTree</a> &amp;&#160;</td>
          <td class="paramname"><em>rhs</em></td><td>)</td>
          <td><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Copy assignment operator is private and not implemented. </p>
<p>Prevents copying of the object. </p>

</div>
</div>
<a class="anchor" id="a3e9c22f8a721a840c84f67e2136b8d30"></a><!-- doxytag: member="PhyloTree::PrintBranch" ref="a3e9c22f8a721a840c84f67e2136b8d30" args="(const PhyloNode *const node, int level)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classPhyloTree.shtml#a3e9c22f8a721a840c84f67e2136b8d30">PhyloTree::PrintBranch</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classPhyloNode.shtml">PhyloNode</a> *const&#160;</td>
          <td class="paramname"><em>node</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>level</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td><code> [static, private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Prints a branch of the tree. </p>

<p>Definition at line <a class="el" href="PhyloTree_8cpp_source.shtml#l00794">794</a> of file <a class="el" href="PhyloTree_8cpp_source.shtml">PhyloTree.cpp</a>.</p>

<p>References <a class="el" href="PhyloTree_8hpp_source.shtml#l00210">PhyloNode::getChildren()</a>, and <a class="el" href="PhyloTree_8cpp_source.shtml#l00146">PhyloNode::printNode()</a>.</p>

<p>Referenced by <a class="el" href="PhyloTree_8cpp_source.shtml#l00197">PrintTree()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="PhyloTree_8hpp.shtml#a949af9a126c7f41a99746ced5d664690" title="a container of pointers to PhyloNodes">PhyloPtrs</a> theChildren = node-&gt;<a class="code" href="classPhyloNode.shtml#ae7877c20c9db63402d07b6f82a346b21" title="Get the children of this node.">getChildren</a>();
  <a class="code" href="PhyloTree_8hpp.shtml#a0a3a649fee0ead336be1530dea932165" title="iterator over a container of pointers to PhyloNodes">PhyloPtrsItr</a> it;

  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; level; i++)
  {
    std:: cout &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
  }

  node-&gt;<a class="code" href="classPhyloNode.shtml#a11c02f207d02d5c75103a5aaf51bde0d" title="Print node details.">printNode</a>();

  <span class="keywordflow">if</span>(!theChildren.empty())
  {
    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; level; i++)
    {
      std::cout &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
    }
    std::cout &lt;&lt; <span class="stringliteral">&quot;Children are:&quot;</span> &lt;&lt; std::endl;
  }

  level++;
  <span class="keywordflow">for</span> (it = theChildren.begin(); it &lt; theChildren.end(); it++)
  {
    <a class="code" href="classPhyloTree.shtml#a3e9c22f8a721a840c84f67e2136b8d30" title="Prints a branch of the tree.">PrintBranch</a>(*it, level);
  }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac593ca7be08c1b02b1b9e4d5229363bd"></a><!-- doxytag: member="PhyloTree::PrintTree" ref="ac593ca7be08c1b02b1b9e4d5229363bd" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classPhyloTree.shtml#ac593ca7be08c1b02b1b9e4d5229363bd">PhyloTree::PrintTree</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>print a tree starting with the root </p>

<p>Definition at line <a class="el" href="PhyloTree_8cpp_source.shtml#l00197">197</a> of file <a class="el" href="PhyloTree_8cpp_source.shtml">PhyloTree.cpp</a>.</p>

<p>References <a class="el" href="PhyloTree_8cpp_source.shtml#l00794">PrintBranch()</a>, and <a class="el" href="PhyloTree_8hpp_source.shtml#l00301">root</a>.</p>
<div class="fragment"><pre class="fragment">{

  <a class="code" href="classPhyloTree.shtml#a3e9c22f8a721a840c84f67e2136b8d30" title="Prints a branch of the tree.">PrintBranch</a>(<a class="code" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173" title="A pointer to a PhyloNode root of the tree.">root</a>, 0);
  std:: cout &lt;&lt; std::endl;
  std:: cout &lt;&lt; std::endl;
}
</pre></div>
</div>
</div>
<a class="anchor" id="aed4d7f60f27bef63636280e6a76ed962"></a><!-- doxytag: member="PhyloTree::TreeFileErrorExit" ref="aed4d7f60f27bef63636280e6a76ed962" args="(const string &amp;msg, const PhyloNode *node) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="classPhyloTree.shtml#aed4d7f60f27bef63636280e6a76ed962">PhyloTree::TreeFileErrorExit</a> </td>
          <td>(</td>
          <td class="paramtype">const string &amp;&#160;</td>
          <td class="paramname"><em>msg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classPhyloNode.shtml">PhyloNode</a> *&#160;</td>
          <td class="paramname"><em>node</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A function to deal with an error found in a tree input file. </p>

<p>Definition at line <a class="el" href="PhyloTree_8cpp_source.shtml#l00554">554</a> of file <a class="el" href="PhyloTree_8cpp_source.shtml">PhyloTree.cpp</a>.</p>

<p>Referenced by <a class="el" href="PhyloTree_8cpp_source.shtml#l00345">DecodeTree()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00627">findLabel()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00682">findSeqNo()</a>, and <a class="el" href="PhyloTree_8cpp_source.shtml#l00569">findTime()</a>.</p>
<div class="fragment"><pre class="fragment">{
  std::cerr &lt;&lt; msg &lt;&lt; std::endl &lt;&lt; std::endl;
  <span class="keyword">delete</span> node;
  exit(1);

}
</pre></div>
</div>
</div>
<hr/><h2>Member Data Documentation</h2>
<a class="anchor" id="a2411ce76565644f8253f15840863a05a"></a><!-- doxytag: member="PhyloTree::CharacterSpace" ref="a2411ce76565644f8253f15840863a05a" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="classPhyloTree.shtml#a2411ce76565644f8253f15840863a05a">PhyloTree::CharacterSpace</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>The size of the character space for the tree. </p>

<p>Definition at line <a class="el" href="PhyloTree_8hpp_source.shtml#l00304">304</a> of file <a class="el" href="PhyloTree_8hpp_source.shtml">PhyloTree.hpp</a>.</p>

<p>Referenced by <a class="el" href="PhyloTree_8cpp_source.shtml#l00978">nodePOTHess()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00901">nodePOTinterval()</a>, and <a class="el" href="PhyloTree_8cpp_source.shtml#l00824">nodePOTreal()</a>.</p>

</div>
</div>
<a class="anchor" id="a38c3253751a7ed9ffacb0978106f8173"></a><!-- doxytag: member="PhyloTree::root" ref="a38c3253751a7ed9ffacb0978106f8173" args="" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classPhyloNode.shtml">PhyloNode</a>* <a class="el" href="classPhyloTree.shtml#a38c3253751a7ed9ffacb0978106f8173">PhyloTree::root</a><code> [private]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>A pointer to a <a class="el" href="classPhyloNode.shtml" title="A class for nodes of a phylogenetic tree.">PhyloNode</a> root of the tree. </p>

<p>Definition at line <a class="el" href="PhyloTree_8hpp_source.shtml#l00301">301</a> of file <a class="el" href="PhyloTree_8hpp_source.shtml">PhyloTree.hpp</a>.</p>

<p>Referenced by <a class="el" href="PhyloTree_8cpp_source.shtml#l00276">fillProbHessJC69()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00242">fillProbIntervalJC69()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00310">fillProbRealCFN()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00208">fillProbRealJC69()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00181">getNumberNodes()</a>, <a class="el" href="PhyloTree_8cpp_source.shtml#l00159">PhyloTree()</a>, and <a class="el" href="PhyloTree_8cpp_source.shtml#l00197">PrintTree()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="PhyloTree_8hpp_source.shtml">PhyloTree.hpp</a></li>
<li><a class="el" href="PhyloTree_8cpp_source.shtml">PhyloTree.cpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="classPhyloTree.shtml">PhyloTree</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:28 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
