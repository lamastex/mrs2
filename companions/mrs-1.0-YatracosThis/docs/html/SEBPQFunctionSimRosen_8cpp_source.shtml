<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: SEBPQFunctionSimRosen.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('SEBPQFunctionSimRosen_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">SEBPQFunctionSimRosen.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="SEBPQFunctionSimRosen_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &quot;intervalmappedspnode_measurers.hpp&quot;</span> <span class="comment">// ordering for pq split</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;functionestimator_interval.hpp&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="piecewise__constant__function_8hpp.shtml" title="PiecewiseConstantFunction declarations.">piecewise_constant_function.hpp</a>&quot;</span>  
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;<a class="code" href="RosenDensityFobj_8hpp.shtml" title="Rosenbrock density target.">RosenDensityFobj.hpp</a>&quot;</span> <span class="comment">// fobj</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="SmallClasses_8hpp.shtml">SmallClasses.hpp</a>&quot;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="Fobj_8hpp.shtml" title="Fobj definition and declaration.">Fobj.hpp</a>&quot;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="FRosenbrock_8hpp.shtml" title="Declarations for example function class FRosenbrock (Rosenbrock function).">FRosenbrock.hpp</a>&quot;</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &quot;<a class="code" href="MRSampler_8hpp.shtml" title="Moore Rejection Sampler (MRSampler) declarations.">MRSampler.hpp</a>&quot;</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &lt;unistd.h&gt;</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="preprocessor">#include &lt;limits&gt;</span> <span class="comment">// to use negative infinity</span>
<a name="l00045"></a>00045 
<a name="l00046"></a>00046 <span class="keyword">using namespace </span>cxsc;
<a name="l00047"></a>00047 <span class="keyword">using namespace </span>std;
<a name="l00048"></a>00048 <span class="keyword">using namespace </span>subpavings;
<a name="l00049"></a>00049 
<a name="l00050"></a>00050 <span class="keywordtype">void</span>
<a name="l00051"></a><a class="code" href="SEBPQFunctionSimRosen_8cpp.shtml#a0c0402be9ebd7abad750822814d38f99">00051</a> <a class="code" href="MooreImpSam_2CFN3_2CFN3_8cpp.shtml#a631ece91d072eb67cffd058e11c49468">ProduceMRSamples</a>(<a class="code" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a> &amp; <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, <span class="keywordtype">int</span> n_boxes, <span class="keywordtype">int</span> n_samples, 
<a name="l00052"></a>00052                  <span class="keywordtype">double</span> Alb, <span class="keywordtype">unsigned</span> seed, <span class="keywordtype">bool</span> use_f_scale, <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>&amp; rs_sample) 
<a name="l00053"></a>00053 {
<a name="l00054"></a>00054   <span class="comment">//ofstream out (&quot;MRS_Rosenbrock.samples&quot;);//file to store the i.i.d samples</span>
<a name="l00055"></a>00055   clock_t T1 = clock (), T2, T3;
<a name="l00056"></a>00056   <span class="comment">// Construct theSampler with the chosen target shape object FTG</span>
<a name="l00057"></a>00057   <a class="code" href="classMRSampler.shtml" title="The Moore rejection sampler class for trans-dimensional targets over labeled metric spaces...">MRSampler</a> theSampler (f, n_boxes, Alb, seed, (use_f_scale == 1));
<a name="l00058"></a>00058   
<a name="l00060"></a>00060         <span class="comment">//--comment this printing block if not needed</span>
<a name="l00061"></a>00061         <span class="comment">// To print out the partition of the domain</span>
<a name="l00062"></a>00062         <span class="comment">//cout &lt;&lt; &quot;Domain Partition: \n&quot; ;</span>
<a name="l00063"></a>00063         <span class="comment">//ofstream Partout (&quot;MRS_RosenbrockDomain.txt&quot;); //Filename</span>
<a name="l00064"></a>00064         <span class="comment">//theSampler.Print_Domain_Partition(Partout);</span>
<a name="l00065"></a>00065         <span class="comment">//cout &lt;&lt; &quot;The output has been written to MRS_IsIt1or2CoinsDomain.txt&quot; </span>
<a name="l00066"></a>00066         <span class="comment">//     &lt;&lt; endl &lt;&lt; endl;</span>
<a name="l00067"></a>00067  
<a name="l00068"></a>00068         <span class="comment">// To realize a file output of the RangeDomainSet</span>
<a name="l00069"></a>00069    <span class="comment">//     ofstream os(&quot;MRS_RosenbrockRangeDomainSet.txt&quot;);         // Filename</span>
<a name="l00070"></a>00070    <span class="comment">//     os &lt;&lt; theSampler &lt;&lt; endl;                   </span>
<a name="l00071"></a>00071    <span class="comment">//     cout &lt;&lt; &quot;output has been written to MRS_IsIt1or2CoinsRangeDomainSet.txt&quot; </span>
<a name="l00072"></a>00072    <span class="comment">//          &lt;&lt; endl &lt;&lt; endl;</span>
<a name="l00073"></a>00073         <span class="comment">//--end of printing block</span>
<a name="l00075"></a>00075 <span class="comment"></span>  <span class="comment">// To print out the partition of the domain</span>
<a name="l00076"></a>00076   
<a name="l00077"></a>00077   T2 = clock ();
<a name="l00078"></a>00078   <span class="keywordtype">double</span> Ptime = (double) (T2 - T1) / CLOCKS_PER_SEC;
<a name="l00079"></a>00079   
<a name="l00080"></a>00080   <span class="comment">//RSSample rs_sample;</span>
<a name="l00081"></a>00081   cout &lt;&lt; <span class="stringliteral">&quot;before Rej..SampleMany \n&quot;</span>;
<a name="l00082"></a>00082   cout &lt;&lt; <span class="stringliteral">&quot;n_samples: &quot;</span> &lt;&lt; n_samples &lt;&lt; endl;
<a name="l00083"></a>00083   theSampler.<a class="code" href="classMRSampler.shtml#aac7c2e726a813ad155151c99cbdb7f12" title="Draw nRS many samples of labeled points via rejection sampling, if possible.">RejectionSampleMany</a> (n_samples, rs_sample);
<a name="l00084"></a>00084   cout &lt;&lt; <span class="stringliteral">&quot;after Rej..SampleMany \n&quot;</span>;
<a name="l00085"></a>00085   <span class="keywordtype">double</span> IntegralEstimate = _double (rs_sample.<a class="code" href="classRSSample.shtml#a9537562ed9b4bc945e4c92b2237732a8" title="A real estimate of the integral of the function over the domain.">IntegralEstimate</a> ());
<a name="l00086"></a>00086   cout &lt;&lt; <span class="stringliteral">&quot;rs_sample IU, N, Nrs: &quot;</span> &lt;&lt; rs_sample.<a class="code" href="classRSSample.shtml#aa3f52ce941256fc7d6cf71347fdfa67c" title="The envelope integral as a cxsc::real.">EnvelopeIntegral</a> &lt;&lt; <span class="stringliteral">&quot; &quot;</span> 
<a name="l00087"></a>00087        &lt;&lt; rs_sample.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.size() &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; rs_sample.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.size() &lt;&lt; endl;
<a name="l00088"></a>00088   cout &lt;&lt; <span class="stringliteral">&quot;RSSampleMany, integral est: &quot;</span> &lt;&lt; IntegralEstimate &lt;&lt; endl;
<a name="l00089"></a>00089   cout &lt;&lt; <span class="stringliteral">&quot;RSSampleMany mean: \n&quot;</span>; rs_sample.<a class="code" href="classRSSample.shtml#a6e553a95e36dbecd6f0491bf71c6a761" title="Arithmetic mean of the sampled labeled points in a label-specific way.">Mean</a> ();
<a name="l00090"></a>00090   <span class="comment">//rs_sample.Print(out);</span>
<a name="l00091"></a>00091   
<a name="l00092"></a>00092   cout &lt;&lt; <span class="stringliteral">&quot;n interval function calls: &quot;</span> &lt;&lt; f.<a class="code" href="classFobj.shtml#a541c0edbb08855d1e3cdbb45b0aa26af" title="Get number of interval function calls.">get_interval_calls</a> () &lt;&lt; endl;
<a name="l00093"></a>00093   cout &lt;&lt; <span class="stringliteral">&quot;n real function calls: &quot;</span> &lt;&lt; f.<a class="code" href="classFobj.shtml#a63df2521571faeb43663613a9a4611e7" title="Get number of real function calls.">get_real_calls</a> () &lt;&lt; endl;
<a name="l00094"></a>00094   
<a name="l00095"></a>00095   <span class="comment">//----------------------------------------------------------------------------</span>
<a name="l00096"></a>00096   T3 = clock ();
<a name="l00097"></a>00097   <span class="keywordtype">double</span> Stime = (double) (T3 - T2) / CLOCKS_PER_SEC;
<a name="l00098"></a>00098   cout &lt;&lt; <span class="stringliteral">&quot;# CPU Time (seconds). Partitioning: &quot;</span> &lt;&lt; Ptime &lt;&lt; <span class="stringliteral">&quot;  Sampling: &quot;</span> 
<a name="l00099"></a>00099        &lt;&lt; Stime &lt;&lt; <span class="stringliteral">&quot;  Total: &quot;</span> &lt;&lt; (Ptime + Stime) &lt;&lt; endl;
<a name="l00100"></a>00100   cout &lt;&lt; <span class="stringliteral">&quot;# CPU time (secods) per estimate: &quot;</span> 
<a name="l00101"></a>00101        &lt;&lt; (Ptime + Stime) / (<span class="keywordtype">double</span>) (n_samples) &lt;&lt; endl;
<a name="l00102"></a>00102 }
<a name="l00103"></a>00103 
<a name="l00104"></a><a class="code" href="SEBPQFunctionSimRosen_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00104</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00105"></a>00105 {
<a name="l00106"></a>00106   <span class="comment">// sort out user-defined parameters------------------//</span>
<a name="l00107"></a>00107   <span class="keywordflow">if</span> ( argc &lt; 20 ) {
<a name="l00108"></a>00108     cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: &quot;</span> &lt;&lt; argv[0] &lt;&lt; 
<a name="l00109"></a>00109     <span class="stringliteral">&quot;d maxLeavesEst n states symmetryIndicator seed burnin thinout [log_full]&quot;</span> &lt;&lt; endl;
<a name="l00110"></a>00110     <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Syntax: &quot;</span> + std::string(argv[0]) + <span class="stringliteral">&quot;d n states, symmetryIndicator&quot;</span>);
<a name="l00111"></a>00111   }
<a name="l00112"></a>00112   
<a name="l00113"></a>00113   <span class="keywordtype">int</span> d = atoi(argv[1]);  <span class="comment">// dimensions</span>
<a name="l00114"></a>00114   <span class="keywordtype">size_t</span> maxLeavesEst = atoi(argv[2]);  <span class="comment">// number of leaves in estimator</span>
<a name="l00115"></a>00115   <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[3]);  <span class="comment">// number of points to generate</span>
<a name="l00116"></a>00116   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> loops = atoi(argv[4]); <span class="comment">// number of states to loop through</span>
<a name="l00117"></a>00117   <span class="keywordtype">int</span> symmetryIndicator = atoi(argv[5]); <span class="comment">// 1 for symmetric, 0 otherwise</span>
<a name="l00118"></a>00118   <span class="keywordtype">int</span> dataSeed = atoi(argv[6]); <span class="comment">// seed for data generation</span>
<a name="l00119"></a>00119   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> burnin = atoi(argv[7]); 
<a name="l00120"></a>00120   <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> thinout = atoi(argv[8]); 
<a name="l00121"></a>00121 
<a name="l00122"></a>00122   <span class="keywordtype">size_t</span> hist1Crit = atoi(argv[9]);
<a name="l00123"></a>00123   <span class="keywordtype">size_t</span> hist2Crit = atoi(argv[10]);
<a name="l00124"></a>00124   <span class="keywordtype">size_t</span> hist3Crit = atoi(argv[11]);
<a name="l00125"></a>00125   
<a name="l00126"></a>00126   <span class="keywordtype">size_t</span> hist1CritLeaf = atoi(argv[12]);
<a name="l00127"></a>00127   <span class="keywordtype">size_t</span> hist2CritLeaf = atoi(argv[13]);
<a name="l00128"></a>00128   
<a name="l00129"></a>00129   <span class="keywordtype">size_t</span> NumStatesChosen = atoi(argv[14]);
<a name="l00130"></a>00130   
<a name="l00131"></a>00131   <span class="keywordtype">bool</span> computeIAE = atoi(argv[15]);
<a name="l00132"></a>00132   
<a name="l00133"></a>00133   <span class="keywordtype">int</span> n_boxes = atoi(argv[16]); <span class="comment">// for mrs</span>
<a name="l00134"></a>00134   
<a name="l00135"></a>00135   <span class="keywordtype">size_t</span> minPoints = 1;
<a name="l00136"></a>00136   <span class="keywordtype">size_t</span> minPQPoints1 = 1;
<a name="l00137"></a>00137   <span class="keywordtype">size_t</span> minPQPoints2 = 1;
<a name="l00138"></a>00138   <span class="keywordtype">size_t</span> minPQPoints3 = 1;
<a name="l00139"></a>00139 
<a name="l00140"></a>00140   <span class="keywordtype">bool</span> shiftCatalan = 0;
<a name="l00141"></a>00141 
<a name="l00142"></a>00142   <span class="keywordtype">bool</span> minVolControl = atoi(argv[17]);
<a name="l00143"></a>00143   <span class="keywordtype">int</span> loggingType = atoi(argv[18]); <span class="comment">//1 - NOLOG; 2 - LOGSTATETRACE</span>
<a name="l00144"></a>00144   <span class="keywordtype">bool</span> IAEPQ = atoi(argv[19]);
<a name="l00145"></a>00145   
<a name="l00146"></a>00146   <span class="comment">/* for logging to output the logposterior for the sample average and current state */</span>
<a name="l00147"></a>00147   <span class="comment">/* use LOGSTATETRACE only for current state */</span>
<a name="l00148"></a>00148   <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging;
<a name="l00149"></a>00149   
<a name="l00150"></a>00150   <span class="keywordflow">if</span> ( loggingType == 1) { logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>; }
<a name="l00151"></a>00151   <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( loggingType == 2 ) { logging = LOGSTATETRACE; }
<a name="l00152"></a>00152   
<a name="l00153"></a>00153   cout &lt;&lt; argv[0] &lt;&lt; <span class="stringliteral">&quot; : process id is &quot;</span> &lt;&lt; getpid() &lt;&lt; std::endl;
<a name="l00154"></a>00154 
<a name="l00155"></a>00155   <span class="comment">// set up proposal distribution object</span>
<a name="l00156"></a>00156   <a class="code" href="classsubpavings_1_1UniformProposal.shtml">UniformProposal</a> proposal;
<a name="l00157"></a>00157   <span class="comment">// set up prior distribution object</span>
<a name="l00158"></a>00158   <a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml" title="A class for a log prior based on a Catalan number prior.">LogCatalanPrior</a> logPrior;
<a name="l00159"></a>00159     
<a name="l00160"></a>00160   interval pavingIntervalSym(-6,6);
<a name="l00161"></a>00161   interval pavingIntervalNonSym(-6.5,7);
<a name="l00162"></a>00162 
<a name="l00163"></a>00163   interval pavingInterval = pavingIntervalSym; <span class="comment">// if we are doing symmetric case</span>
<a name="l00164"></a>00164   <span class="comment">// but if we&#39;ve asked for non-symmetric, change this</span>
<a name="l00165"></a>00165   <span class="keywordflow">if</span> (!symmetryIndicator) pavingInterval = pavingIntervalNonSym;
<a name="l00166"></a>00166 
<a name="l00167"></a>00167   <span class="comment">// for output purposes</span>
<a name="l00168"></a>00168   <span class="comment">// string formatting</span>
<a name="l00169"></a>00169   ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00170"></a>00170    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00171"></a>00171    oss.precision(10);
<a name="l00172"></a>00172 
<a name="l00173"></a>00173   <span class="comment">//=======get the root box from the actual data==============//</span>
<a name="l00174"></a>00174   <span class="comment">// set up a random number generator and use mt19937 for generator</span>
<a name="l00175"></a>00175   gsl_rng * r = gsl_rng_alloc (gsl_rng_mt19937); <span class="comment">// set up with default seed</span>
<a name="l00176"></a>00176   <span class="comment">//long unsigned int seed = 1234;</span>
<a name="l00177"></a>00177   gsl_rng_set (r, dataSeed); <span class="comment">// change the seed</span>
<a name="l00178"></a>00178   cout &lt;&lt; <span class="stringliteral">&quot;Data seed is &quot;</span> &lt;&lt; dataSeed &lt;&lt; endl;
<a name="l00179"></a>00179   
<a name="l00180"></a>00180   ios::sync_with_stdio ();  <span class="comment">// call this function so iostream works with stdio</span>
<a name="l00181"></a>00181   cout &lt;&lt; SetPrecision (20, 15);  <span class="comment">// Number of mantissa digits in I/O</span>
<a name="l00182"></a>00182   
<a name="l00183"></a>00183   <span class="comment">// set default values</span>
<a name="l00184"></a>00184   <span class="keywordtype">int</span> n_dimensions = d; 
<a name="l00185"></a>00185   <span class="keywordtype">int</span> n_samples = 1000000;
<a name="l00186"></a>00186   <span class="keywordtype">double</span> Alb = 1.0;<span class="comment">// partition until lower bound on Acceptance Prob. is &gt; Alb</span>
<a name="l00187"></a>00187   <span class="keywordtype">unsigned</span> theSeed = dataSeed;
<a name="l00188"></a>00188   
<a name="l00189"></a>00189   <span class="comment">//Parameters specific to the Rosenbrock target</span>
<a name="l00190"></a>00190   real <a class="code" href="RosenFobj2D_8cpp.shtml#aec5c4d9798cfa73539577e4a2206ab1a">Tinverse</a> = 1.0;
<a name="l00191"></a>00191   real <a class="code" href="RosenFobj2D_8cpp.shtml#ab0eb64c1a8d085bcf238d947f3fa839f">Height</a> = 100.0;
<a name="l00192"></a>00192   real RosenDomainLimit = 10.0;
<a name="l00193"></a>00193   
<a name="l00194"></a>00194   cout &lt;&lt; <span class="stringliteral">&quot;# n_dimensions: &quot;</span> &lt;&lt; n_dimensions &lt;&lt; <span class="stringliteral">&quot;  n_boxes: &quot;</span> &lt;&lt; n_boxes 
<a name="l00195"></a>00195        &lt;&lt; <span class="stringliteral">&quot;  n_samples: &quot;</span> &lt;&lt; n_samples &lt;&lt; <span class="stringliteral">&quot;  rng_seed = &quot;</span> &lt;&lt; theSeed  
<a name="l00196"></a>00196        &lt;&lt; endl; <span class="comment">//getchar();</span>
<a name="l00197"></a>00197   
<a name="l00198"></a>00198   <span class="keywordtype">bool</span> UseLogPi = <span class="keyword">false</span>; <span class="comment">// log scale won&#39;t work naively</span>
<a name="l00199"></a>00199   <span class="keywordtype">bool</span> use_f_scale = <span class="keyword">false</span>;
<a name="l00200"></a>00200   
<a name="l00201"></a>00201   <span class="comment">// make the function object</span>
<a name="l00202"></a>00202   <a class="code" href="classFRosenbrock.shtml" title="n-dimensional Rosenbrock density as a function object class">FRosenbrock</a> FRosen (n_dimensions, 
<a name="l00203"></a>00203                       Tinverse, Height, RosenDomainLimit, UseLogPi);
<a name="l00204"></a>00204   
<a name="l00205"></a>00205   <span class="comment">// produce the samples</span>
<a name="l00206"></a>00206   <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>* tempDataPtr = <span class="keyword">new</span> <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>; 
<a name="l00207"></a>00207   <a class="code" href="MooreImpSam_2CFN3_2CFN3_8cpp.shtml#a631ece91d072eb67cffd058e11c49468">ProduceMRSamples</a>(FRosen, n_boxes, n_samples, 
<a name="l00208"></a>00208                    Alb, theSeed, use_f_scale, *tempDataPtr);
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 
<a name="l00211"></a>00211   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* tempHist = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>; 
<a name="l00212"></a>00212   tempHist-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6f049bec17097067ae9e2a7c9f42bd60">insertFromRSSample</a>(*tempDataPtr, 0, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00213"></a>00213   ivector pavingBoxEst = tempHist-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a936a3426494278163afada104df26ecc" title="Get the box of the subpaving managed by this.">getRootBox</a>();
<a name="l00214"></a>00214   <span class="keyword">delete</span> tempHist;
<a name="l00215"></a>00215   <span class="keyword">delete</span> tempDataPtr;
<a name="l00216"></a>00216   <span class="comment">//=========end of getting a root box from the actual data=============</span>
<a name="l00217"></a>00217   
<a name="l00218"></a>00218   <span class="comment">//============== make estimate ============//</span>
<a name="l00219"></a>00219   cout &lt;&lt; <span class="stringliteral">&quot;\nMake the function estimator to &quot;</span> &lt;&lt; maxLeavesEst &lt;&lt; <span class="stringliteral">&quot; leaves&quot;</span> &lt;&lt; endl;
<a name="l00220"></a>00220   
<a name="l00221"></a>00221   <span class="comment">// specify function object (from /examples/MappedTargets</span>
<a name="l00222"></a>00222   <a class="code" href="classRosenDensityFobj.shtml">RosenDensityFobj</a> fobj;
<a name="l00223"></a>00223   
<a name="l00224"></a>00224   <span class="comment">/* function estimate is going to use same box as the histograms */</span>
<a name="l00225"></a>00225   <span class="comment">//ivector pavingBoxEst(d);</span>
<a name="l00226"></a>00226   <span class="comment">//for(int k=1; k &lt;= d; k++) pavingBoxEst[k] = pavingInterval;</span>
<a name="l00227"></a>00227   
<a name="l00228"></a>00228   <span class="comment">// Use fobj and pavingBox to get an estimator</span>
<a name="l00229"></a>00229   FunctionEstimatorInterval estimator(pavingBoxEst, fobj);
<a name="l00230"></a>00230   
<a name="l00231"></a>00231   <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logEst = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>; <span class="comment">// logging for making estimator</span>
<a name="l00232"></a>00232   
<a name="l00233"></a>00233 <span class="preprocessor">  #if(1)</span>
<a name="l00234"></a>00234 <span class="preprocessor"></span>  <span class="keywordtype">size_t</span> maxLeavesEstDown = <span class="keyword">static_cast&lt;</span><span class="keywordtype">size_t</span><span class="keyword">&gt;</span>(1.2*maxLeavesEst); <span class="comment">// go down to 1.2 x max</span>
<a name="l00235"></a>00235 <span class="preprocessor">  #endif</span>
<a name="l00236"></a>00236 <span class="preprocessor"></span><span class="preprocessor">  #if(0)</span>
<a name="l00237"></a>00237 <span class="preprocessor"></span>    <span class="keywordtype">size_t</span> maxLeavesEstDown = maxLeavesEst;
<a name="l00238"></a>00238 <span class="preprocessor">  #endif</span>
<a name="l00239"></a>00239 <span class="preprocessor"></span>  
<a name="l00240"></a>00240   cout &lt;&lt; <span class="stringliteral">&quot;pq down to max leaves &quot;</span> &lt;&lt; maxLeavesEstDown &lt;&lt; endl;
<a name="l00241"></a>00241   
<a name="l00242"></a>00242   clock_t startEst = clock();
<a name="l00243"></a>00243   
<a name="l00244"></a>00244   <span class="comment">// priority split driven by splitting leaf with max reimann diff</span>
<a name="l00245"></a>00245   ReimannDiffMeasurer measurer;
<a name="l00246"></a>00246   estimator.prioritySplit(measurer, maxLeavesEstDown, logEst);
<a name="l00247"></a>00247       
<a name="l00248"></a>00248   <span class="comment">// stop recording time here</span>
<a name="l00249"></a>00249   clock_t endEst = clock();
<a name="l00250"></a>00250   cout &lt;&lt; <span class="stringliteral">&quot;Number of leaves in estimate: &quot;</span> &lt;&lt; estimator.getRootLeaves() &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;  
<a name="l00251"></a>00251   cout &lt;&lt; <span class="stringliteral">&quot;After split, getTotalAreaOfIntervalBand() = &quot;</span>
<a name="l00252"></a>00252     &lt;&lt; estimator.getTotalAreaOfIntervalBand() &lt;&lt; endl;
<a name="l00253"></a>00253   <span class="keywordtype">double</span> timingEst1 = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(endEst - startEst)) / CLOCKS_PER_SEC);
<a name="l00254"></a>00254   cout &lt;&lt; <span class="stringliteral">&quot;Computing time for pq split in estimate: &quot;</span> &lt;&lt; timingEst1 &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00255"></a>00255   startEst = clock();
<a name="l00256"></a>00256   
<a name="l00257"></a>00257 <span class="preprocessor">  #if(1) </span>
<a name="l00258"></a>00258 <span class="preprocessor"></span>    cout &lt;&lt; <span class="stringliteral">&quot;Hull propagation&quot;</span> &lt;&lt; endl;
<a name="l00259"></a>00259     estimator.hullPropagation();
<a name="l00260"></a>00260     
<a name="l00261"></a>00261     cout &lt;&lt; <span class="stringliteral">&quot;Priority merge to &quot;</span> &lt;&lt; maxLeavesEst &lt;&lt; <span class="stringliteral">&quot; leaves&quot;</span> &lt;&lt; endl;
<a name="l00262"></a>00262 <span class="preprocessor">    #if(0)</span>
<a name="l00263"></a>00263 <span class="preprocessor"></span>    <span class="comment">// priority merge driven by minimising increase the reimann diff</span>
<a name="l00264"></a>00264     estimator.priorityMergeOnLoss(maxLeavesEst, logEst);
<a name="l00265"></a>00265 <span class="preprocessor">    #endif</span>
<a name="l00266"></a>00266 <span class="preprocessor"></span><span class="preprocessor">    #if(1)</span>
<a name="l00267"></a>00267 <span class="preprocessor"></span>    <span class="comment">// priority merge driven by merging cherry with minimum reimann diff</span>
<a name="l00268"></a>00268     estimator.priorityMerge(maxLeavesEst, logEst);
<a name="l00269"></a>00269 <span class="preprocessor">    #endif</span>
<a name="l00270"></a>00270 <span class="preprocessor"></span>          
<a name="l00271"></a>00271     <span class="comment">// stop recording time here</span>
<a name="l00272"></a>00272     endEst = clock(); 
<a name="l00273"></a>00273     <span class="keywordtype">double</span> timingEst2 = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(endEst - startEst)) / CLOCKS_PER_SEC);
<a name="l00274"></a>00274     cout &lt;&lt; <span class="stringliteral">&quot;Computing time for hull propagate and merge up in estimate: &quot;</span> &lt;&lt; timingEst2 &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00275"></a>00275     
<a name="l00276"></a>00276     cout &lt;&lt; <span class="stringliteral">&quot;After propagation and priority merge, getTotalAreaOfIntervalBand() = &quot;</span> 
<a name="l00277"></a>00277           &lt;&lt; estimator.getTotalAreaOfIntervalBand() &lt;&lt; endl;
<a name="l00278"></a>00278     cout &lt;&lt; <span class="stringliteral">&quot;number of leaves is = &quot;</span> &lt;&lt; estimator.getRootLeaves() &lt;&lt; endl;
<a name="l00279"></a>00279 <span class="preprocessor">  #endif</span>
<a name="l00280"></a>00280 <span class="preprocessor"></span>  
<a name="l00281"></a>00281   cout &lt;&lt; <span class="stringliteral">&quot;Making estimate and normalising&quot;</span> &lt;&lt; endl;
<a name="l00282"></a>00282   <span class="comment">// Make PiecewiseConstantFunction estimate from estimator</span>
<a name="l00283"></a>00283   <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a> estimate = estimator.makePiecewiseConstantFunction();
<a name="l00284"></a>00284   estimate.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#aae1c0cd836577f309def9d7a8d9a534a">normalise</a>();
<a name="l00285"></a>00285   
<a name="l00286"></a>00286   cout &lt;&lt; <span class="stringliteral">&quot;estimate has integral &quot;</span> &lt;&lt; estimate.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ade6c94a0c5b7ffc5ec2ca5ab5e9c6375" title="Get the total integral of the piecewise constant function represented by this.">getTotalIntegral</a>() &lt;&lt; endl;
<a name="l00287"></a>00287   
<a name="l00288"></a>00288   estimate.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad542b85e0f7364a34a6504721d65c1b3">outputToTxtTabs</a>(<span class="stringliteral">&quot;MappedFunction.txt&quot;</span>);
<a name="l00289"></a>00289   
<a name="l00290"></a>00290   <span class="comment">//===========end of estimating function using PCF=========================//</span>
<a name="l00291"></a>00291 
<a name="l00292"></a>00292   <span class="comment">//===========generate data==============================================//</span>
<a name="l00293"></a>00293   <span class="comment">// Use PiecewiseConstantFunction to generate data, supplying our own rng</span>
<a name="l00294"></a>00294   cout &lt;&lt; <span class="stringliteral">&quot;\nGenerating data for simulation&quot;</span> &lt;&lt; endl;
<a name="l00295"></a>00295 
<a name="l00296"></a>00296   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>* theDataPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>;   <span class="comment">// a container for all the points generated</span>
<a name="l00297"></a>00297 
<a name="l00298"></a>00298   clock_t startData = clock();
<a name="l00299"></a>00299 
<a name="l00300"></a>00300   <span class="comment">// Gaussian data</span>
<a name="l00301"></a>00301   estimate.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a3fd630a95c48dda0a828bb2229c9d854" title="Simulator taking a random number generator argument.">simulateData</a>(*theDataPtr, n, r);
<a name="l00302"></a>00302 
<a name="l00303"></a>00303   <span class="comment">// stop recording time here</span>
<a name="l00304"></a>00304   clock_t endData = clock();  
<a name="l00305"></a>00305   <span class="keywordtype">double</span> timingData = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(endData - startData)) / CLOCKS_PER_SEC);
<a name="l00306"></a>00306   cout &lt;&lt; <span class="stringliteral">&quot;Computing time for simulating data: &quot;</span> &lt;&lt; timingData &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00307"></a>00307 
<a name="l00308"></a>00308   cout &lt;&lt; (*theDataPtr).size() &lt;&lt; <span class="stringliteral">&quot; points generated&quot;</span> &lt;&lt; endl;
<a name="l00309"></a>00309   
<a name="l00310"></a>00310   <span class="keywordflow">try</span> {
<a name="l00311"></a>00311     gsl_rng_free (r);
<a name="l00312"></a>00312     r = NULL;
<a name="l00313"></a>00313   }
<a name="l00314"></a>00314   <span class="keywordflow">catch</span>(...) {}<span class="comment">// catch and swallow</span>
<a name="l00315"></a>00315   
<a name="l00316"></a>00316   cout &lt;&lt; <span class="stringliteral">&quot;\nStart example: n = &quot;</span> &lt;&lt; n &lt;&lt; <span class="stringliteral">&quot; and d = &quot;</span> &lt;&lt; d &lt;&lt; endl;
<a name="l00317"></a>00317   <span class="comment">//cout &lt;&lt; &quot;Paving interval is &quot; &lt;&lt; pavingInterval &lt;&lt; endl;</span>
<a name="l00318"></a>00318 
<a name="l00319"></a>00319   <span class="comment">//===========end of generating data=================================//</span>
<a name="l00320"></a>00320 
<a name="l00321"></a>00321 <span class="keywordtype">int</span> numFunc = 1;
<a name="l00322"></a>00322   
<a name="l00323"></a>00323   ostringstream stmSeed;
<a name="l00324"></a>00324   stmSeed &lt;&lt; dataSeed;
<a name="l00325"></a>00325 
<a name="l00326"></a>00326   <span class="comment">// parameters needed to start the PQ</span>
<a name="l00327"></a>00327   <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logPQ = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>; <span class="comment">// logging level  </span>
<a name="l00328"></a>00328   <a class="code" href="classsubpavings_1_1CompVol.shtml" title="Class comparing on volume of box of node.">CompVol</a> comp2; 
<a name="l00329"></a>00329   CompVolMassMinus comp1;
<a name="l00330"></a>00330   <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
<a name="l00331"></a>00331   vector&lt;real&gt; IAEContainer; <span class="comment">//for MCMC </span>
<a name="l00332"></a>00332   vector&lt;double&gt; Times; <span class="comment">// for MCMC times</span>
<a name="l00333"></a>00333 
<a name="l00334"></a>00334   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> func = 0; func &lt; numFunc; func++) {
<a name="l00335"></a>00335     
<a name="l00336"></a>00336     <span class="keywordtype">double</span> minVolB = 0.0;
<a name="l00337"></a>00337     
<a name="l00338"></a>00338     cout &lt;&lt; <span class="stringliteral">&quot;\n========Function : &quot;</span> &lt;&lt; func &lt;&lt; <span class="stringliteral">&quot;========&quot;</span> &lt;&lt; endl; 
<a name="l00339"></a>00339     ostringstream stm;
<a name="l00340"></a>00340     stm &lt;&lt; func; <span class="comment">// for output purposes</span>
<a name="l00341"></a>00341     vector&lt;size_t&gt; LeafContainer; <span class="comment">// to store the number of leaf nodes from which the optimal posterior support is at</span>
<a name="l00342"></a>00342     
<a name="l00343"></a>00343     <span class="comment">// make an Adaptive Histogram with the given pavingBox and, by default,</span>
<a name="l00344"></a>00344     <span class="comment">// holdAllStats = false so that the underlying rootPaving managed by the</span>
<a name="l00345"></a>00345     <span class="comment">// myHistFirst will not maintain all available stats, only counts</span>
<a name="l00346"></a>00346     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHistFirst(pavingBoxEst); <span class="comment">// still let the data decide the box</span>
<a name="l00347"></a>00347 
<a name="l00348"></a>00348     <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie into root box</span>
<a name="l00349"></a>00349     <span class="keywordtype">bool</span> successfulInsertion = myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(*theDataPtr);
<a name="l00350"></a>00350 
<a name="l00351"></a>00351     <span class="keywordflow">if</span> (successfulInsertion) {
<a name="l00352"></a>00352 
<a name="l00353"></a>00353       vector&lt;real&gt; ChosenStateMaxPosterior;
<a name="l00354"></a>00354       vector&lt;AdaptiveHistogram&gt; ChosenStateSubset;
<a name="l00355"></a>00355 
<a name="l00356"></a>00356       <span class="comment">//===== start the SEB-PQ from the root node as a sanity check====//</span>
<a name="l00357"></a>00357       
<a name="l00358"></a>00358       cout &lt;&lt; <span class="stringliteral">&quot;Starting the SEB-PQ from the root node:&quot;</span> &lt;&lt; endl;
<a name="l00359"></a>00359       <span class="comment">// initialize containers</span>
<a name="l00360"></a>00360       vector&lt;real&gt; PosteriorChosen;
<a name="l00361"></a>00361       vector&lt;double&gt; EmptyBoxChosen;
<a name="l00362"></a>00362       vector&lt;real&gt; PosteriorSupportChosen;
<a name="l00363"></a>00363       vector&lt;real&gt; IAEContainerChosen;
<a name="l00364"></a>00364 
<a name="l00365"></a>00365       <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myChosenHist(pavingBoxEst);
<a name="l00366"></a>00366       myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(*theDataPtr);
<a name="l00367"></a>00367 
<a name="l00368"></a>00368       <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critStop(hist3Crit);
<a name="l00369"></a>00369       cout &lt;&lt; <span class="stringliteral">&quot;SEB-PQ to &quot;</span>  &lt;&lt; (hist3Crit) &lt;&lt; <span class="stringliteral">&quot; leaf nodes.&quot;</span> &lt;&lt; endl;
<a name="l00370"></a>00370       <span class="keywordtype">int</span> Txt = 9000 + func*100 + NumStatesChosen;
<a name="l00371"></a>00371       <span class="keywordflow">if</span> (func == 0) {
<a name="l00372"></a>00372         myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(compCount, critStop, 
<a name="l00373"></a>00373         logPQ, minPQPoints1, PosteriorChosen, logPrior, Txt, EmptyBoxChosen, 
<a name="l00374"></a>00374         PosteriorSupportChosen, IAEContainerChosen, estimate, shiftCatalan, <span class="keyword">true</span>);
<a name="l00375"></a>00375       }
<a name="l00376"></a>00376       <span class="keywordflow">else</span> <span class="keywordflow">if</span> (func == 1) {
<a name="l00377"></a>00377         myChosenHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(compCount, critStop, 
<a name="l00378"></a>00378         logPQ, minPQPoints2, PosteriorChosen, logPrior, Txt, EmptyBoxChosen, 
<a name="l00379"></a>00379         PosteriorSupportChosen, IAEContainerChosen, estimate, shiftCatalan, <span class="keyword">true</span>);
<a name="l00380"></a>00380       }
<a name="l00381"></a>00381 
<a name="l00382"></a>00382       ostringstream stm1;
<a name="l00383"></a>00383       stm1 &lt;&lt; NumStatesChosen;
<a name="l00384"></a>00384 
<a name="l00385"></a>00385 
<a name="l00386"></a>00386       <span class="comment">//output IAE from second stage</span>
<a name="l00387"></a>00387       <span class="keywordtype">string</span> IAEFileName = <span class="stringliteral">&quot;IAEPQChosen&quot;</span>;
<a name="l00388"></a>00388       IAEFileName += stmSeed.str();
<a name="l00389"></a>00389       IAEFileName += stm1.str();
<a name="l00390"></a>00390       IAEFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00391"></a>00391       oss.open(IAEFileName.c_str());
<a name="l00392"></a>00392       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; IAEContainerChosen.size(); i++) {
<a name="l00393"></a>00393         oss &lt;&lt; IAEContainerChosen[i] &lt;&lt; endl;
<a name="l00394"></a>00394         <span class="comment">//oss &lt;&lt; thisIAE &lt;&lt; endl;</span>
<a name="l00395"></a>00395       <span class="comment">//oss &lt;&lt; myChosenHist.getLeafLevelsString() &lt;&lt; endl;</span>
<a name="l00396"></a>00396       }
<a name="l00397"></a>00397       oss &lt;&lt; flush;
<a name="l00398"></a>00398       oss.close();
<a name="l00399"></a>00399 
<a name="l00400"></a>00400 
<a name="l00401"></a>00401       <span class="comment">//-------------end of getting from the root node------------------//</span>
<a name="l00402"></a>00402 
<a name="l00403"></a>00403         <span class="comment">//----------End of getting an initial state---------------//</span>
<a name="l00404"></a>00404 
<a name="l00405"></a>00405     }
<a name="l00406"></a>00406     <span class="keywordflow">else</span> cout &lt;&lt; <span class="stringliteral">&quot;Failed to insert data&quot;</span> &lt;&lt; endl;
<a name="l00407"></a>00407       
<a name="l00408"></a>00408      <span class="comment">// end of successfulHist condition</span>
<a name="l00409"></a>00409   } <span class="comment">// end of loop</span>
<a name="l00410"></a>00410   <span class="comment">//=======================End of Chains=================================//</span>
<a name="l00411"></a>00411 
<a name="l00412"></a>00412 
<a name="l00413"></a>00413 
<a name="l00414"></a>00414   <span class="comment">//string IAEFileName;</span>
<a name="l00415"></a>00415   <span class="comment">//IAEFileName = &quot;IAEInitial&quot;;</span>
<a name="l00416"></a>00416   <span class="comment">//IAEFileName += stmSeed.str();</span>
<a name="l00417"></a>00417   <span class="comment">//IAEFileName += &quot;.txt&quot;;</span>
<a name="l00418"></a>00418   <span class="comment">//oss.open(IAEFileName.c_str());</span>
<a name="l00419"></a>00419   <span class="comment">//for (size_t i = 0; i &lt; IAEContainer.size(); i++) {</span>
<a name="l00420"></a>00420   <span class="comment">//  oss &lt;&lt; IAEContainer[i] &lt;&lt; endl;</span>
<a name="l00421"></a>00421   <span class="comment">//}</span>
<a name="l00422"></a>00422   <span class="comment">//oss &lt;&lt; flush;</span>
<a name="l00423"></a>00423   <span class="comment">//oss.close();</span>
<a name="l00424"></a>00424   <span class="comment">//cout &lt;&lt; &quot;IAE output to &quot; &lt;&lt; IAEFileName &lt;&lt; endl;</span>
<a name="l00425"></a>00425 
<a name="l00426"></a>00426   <span class="keyword">delete</span> theDataPtr;
<a name="l00427"></a>00427 
<a name="l00428"></a>00428    <span class="keywordflow">return</span> 0;
<a name="l00429"></a>00429 
<a name="l00430"></a>00430 } <span class="comment">// end of MCMC test program</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="SEBPQFunctionSimRosen_8cpp.shtml">SEBPQFunctionSimRosen.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:17 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
