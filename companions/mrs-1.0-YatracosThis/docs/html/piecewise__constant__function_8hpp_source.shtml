<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: piecewise_constant_function.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('piecewise__constant__function_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">piecewise_constant_function.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="piecewise__constant__function_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2012 Jennifer Harlow</span>
<a name="l00003"></a>00003 <span class="comment">*</span>
<a name="l00004"></a>00004 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment">*</span>
<a name="l00006"></a>00006 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment">* your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment">*</span>
<a name="l00011"></a>00011 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment">* General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment">*</span>
<a name="l00016"></a>00016 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment">*/</span>
<a name="l00020"></a>00020 
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef ___PIECEWISE_FUNCTION_HPP__</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define ___PIECEWISE_FUNCTION_HPP__</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="realmappedspnode_8hpp.shtml" title="RealMappedSPnode declarations.">realmappedspnode.hpp</a>&quot;</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00031"></a>00031 
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;gsl/gsl_rng.h&gt;</span>        <span class="comment">// to know about the gsl random number generator</span>
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="keyword">namespace </span>subpavings {
<a name="l00036"></a>00036 
<a name="l00037"></a>00037   <span class="keyword">class </span>AdaptiveHistogram;
<a name="l00038"></a>00038 
<a name="l00044"></a><a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml">00044</a> <span class="keyword">class </span><a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a> {
<a name="l00045"></a>00045 
<a name="l00046"></a>00046     <span class="keyword">public</span>:
<a name="l00047"></a>00047   
<a name="l00051"></a>00051     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a5532cf41ae985d1de4601826f6fd33c7" title="No argument constructor.">PiecewiseConstantFunction</a>();
<a name="l00052"></a>00052 
<a name="l00053"></a>00053   
<a name="l00070"></a>00070     <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a5532cf41ae985d1de4601826f6fd33c7" title="No argument constructor.">PiecewiseConstantFunction</a>(<span class="keyword">const</span> ivector&amp; v,
<a name="l00071"></a>00071                     <span class="keywordtype">int</span> lab = 0);
<a name="l00072"></a>00072 
<a name="l00083"></a>00083     <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a5532cf41ae985d1de4601826f6fd33c7" title="No argument constructor.">PiecewiseConstantFunction</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; rmspn,
<a name="l00084"></a>00084               <span class="keywordtype">int</span> lab = 0);
<a name="l00085"></a>00085 
<a name="l00098"></a>00098     <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a5532cf41ae985d1de4601826f6fd33c7" title="No argument constructor.">PiecewiseConstantFunction</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; adh);
<a name="l00099"></a>00099   
<a name="l00100"></a>00100 
<a name="l00103"></a>00103     <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a5532cf41ae985d1de4601826f6fd33c7" title="No argument constructor.">PiecewiseConstantFunction</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; other);
<a name="l00104"></a>00104 
<a name="l00106"></a>00106     <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a16194266ecbed94003ea484cb8b70610" title="Destructor.">~PiecewiseConstantFunction</a>();
<a name="l00107"></a>00107 
<a name="l00109"></a>00109     <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#afb1b70cb3d82858719f489e6cc239115" title="Copy assignment operator.">operator=</a>(<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a> rhs);
<a name="l00110"></a>00110 
<a name="l00111"></a>00111 
<a name="l00115"></a>00115     <span class="keywordtype">int</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a50b455741489ca51374faee1dca38d61" title="Get the label.">getLabel</a>() <span class="keyword">const</span>;
<a name="l00116"></a>00116 
<a name="l00118"></a>00118     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a7b71fbda0321a5272e92f652119f9aa3" title="Set the label.">setLabel</a>(<span class="keywordtype">int</span> lab);
<a name="l00119"></a>00119   
<a name="l00124"></a>00124     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad0419b40b47ffa5bb70af1f9cfe86062" title="Get a copy of the subpaving managed by this.">getCopySubPaving</a>() <span class="keyword">const</span>;
<a name="l00125"></a>00125   
<a name="l00133"></a>00133     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#afecdfb659b961eab7f8d18160bea7296" title="Get whether this has a subpaving to manage.">hasSubPaving</a>() <span class="keyword">const</span>;
<a name="l00134"></a>00134   
<a name="l00140"></a>00140     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a892d2caaed6213ae262f2a0b1dba27b5" title="Get whether the subpaving managed by this has negative range values.">hasNegativePiecewiseConstantValues</a>() <span class="keyword">const</span>;
<a name="l00141"></a>00141   
<a name="l00147"></a>00147     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a06b96fb88f394c3b65af65e6eff44e7a" title="Get whether the subpaving managed by this has infinite range values.">hasInfinitePiecewiseConstantValues</a>() <span class="keyword">const</span>;
<a name="l00148"></a>00148   
<a name="l00156"></a>00156   cxsc::ivector <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a2ca8259389efd2797732caeeab988b3d" title="Get the box of the subpaving managed by this.">getRootBox</a>() <span class="keyword">const</span>;
<a name="l00157"></a>00157    
<a name="l00162"></a>00162     <span class="keywordtype">int</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a08cecaf3025aeeeea90b26acbe87ce24" title="get the dimensions of the subpaving this manages.">getDimensions</a>() <span class="keyword">const</span>;
<a name="l00163"></a>00163   
<a name="l00168"></a>00168     cxsc::real <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a2bc216ff479f7edc61e1ef8619c27214" title="get volume of the root box of the subpaving this manages.">getDomainVolume</a>() <span class="keyword">const</span>;
<a name="l00169"></a>00169     
<a name="l00174"></a>00174     <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a938b27618e6805bc57e70ab8f0e6280d" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() <span class="keyword">const</span>;
<a name="l00175"></a>00175 
<a name="l00182"></a>00182     <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#aad0a7c30389235a8fa0a36fc0a1d2c7a">getLeafLevels</a>() <span class="keyword">const</span>;
<a name="l00183"></a>00183 
<a name="l00184"></a>00184 
<a name="l00192"></a>00192     std::string <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#aa27d2f72b0d1edcddd73929a69b44dfb">getLeafLevelsString</a>() <span class="keyword">const</span>;
<a name="l00193"></a>00193 
<a name="l00194"></a>00194   
<a name="l00214"></a>00214     <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a6d0382e5493bd90cb80a823e567cab4f" title="Split this to a specified shape.">splitToShape</a>(std::string instruction);
<a name="l00215"></a>00215   
<a name="l00220"></a>00220     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a24005b5dad3a4417de9d6fc68462258f" title="Recursively allocate a collection of ranges to this and children.">allocateRanges</a>(<span class="keyword">const</span> std::vector&lt; cxsc::real &gt;&amp; rangesToAllocate);
<a name="l00221"></a>00221     
<a name="l00245"></a>00245   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a95d2cd2a73cf7a3ac06a433a35098179" title="Change this so that the subpaving it manages is the union of this&#39;s subpaving and the subpaving of an...">reshapeToUnion</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; other);
<a name="l00246"></a>00246   
<a name="l00268"></a>00268   <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#adb8c06d489bebfe579823751033b7bcd" title="Return a PiecewiseConstantFunction that has subpaving that is the union of this&#39;s subpaving and the s...">makeShapeToUnion</a>(
<a name="l00269"></a>00269               <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; other);
<a name="l00270"></a>00270 
<a name="l00271"></a>00271 
<a name="l00287"></a>00287   cxsc::real <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ade6c94a0c5b7ffc5ec2ca5ab5e9c6375" title="Get the total integral of the piecewise constant function represented by this.">getTotalIntegral</a>() <span class="keyword">const</span>;
<a name="l00288"></a>00288   
<a name="l00311"></a>00311   cxsc::real <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a2499c322fa30a4f07d8ad7360a8d7d95" title="Get the total integrated absolute error (IAE) between this and another PiecewiseConstantFunction.">getIAE</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; pcf) <span class="keyword">const</span>;
<a name="l00312"></a>00312   
<a name="l00329"></a>00329     <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a13d88986c0752e996fced71cae4e3034" title="Addition to self operator.">operator+= </a>(
<a name="l00330"></a>00330               <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; rhs);
<a name="l00331"></a>00331 
<a name="l00355"></a>00355   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a324236b21b578ef2176a487d10b986b5" title="Addition operator.">operator+ </a>(
<a name="l00356"></a>00356               <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; rhs) <span class="keyword">const</span>;
<a name="l00357"></a>00357   
<a name="l00370"></a>00370     <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a13d88986c0752e996fced71cae4e3034" title="Addition to self operator.">operator+= </a>(<span class="keyword">const</span> cxsc::real&amp; add);
<a name="l00371"></a>00371   
<a name="l00384"></a>00384   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a324236b21b578ef2176a487d10b986b5" title="Addition operator.">operator+ </a>(<span class="keyword">const</span> cxsc::real&amp; add) <span class="keyword">const</span>;
<a name="l00385"></a>00385   
<a name="l00386"></a>00386 
<a name="l00404"></a>00404     <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ae64b7e32740671dd8fb0f0905f958de5" title="Subtraction from self operator.">operator-= </a>(
<a name="l00405"></a>00405               <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; rhs);
<a name="l00406"></a>00406     
<a name="l00431"></a>00431   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a52b02b0ec1773ae11c4d986dd56a69f8" title="Subtraction operator.">operator- </a>(
<a name="l00432"></a>00432               <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; rhs) <span class="keyword">const</span>;
<a name="l00433"></a>00433   
<a name="l00446"></a>00446     <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ae64b7e32740671dd8fb0f0905f958de5" title="Subtraction from self operator.">operator-= </a>(<span class="keyword">const</span> cxsc::real&amp; sub);
<a name="l00447"></a>00447   
<a name="l00460"></a>00460   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a52b02b0ec1773ae11c4d986dd56a69f8" title="Subtraction operator.">operator- </a>(<span class="keyword">const</span> cxsc::real&amp; sub) <span class="keyword">const</span>;
<a name="l00461"></a>00461 
<a name="l00462"></a>00462 
<a name="l00480"></a>00480     <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#af353f8623ce62aa2bf7e87942d5e89f7" title="Multiplication of self operator.">operator*= </a>(
<a name="l00481"></a>00481               <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; rhs);
<a name="l00482"></a>00482   
<a name="l00507"></a>00507   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a64722ca127c5169779463574a35d661d" title="Multiplication operator.">operator* </a>(
<a name="l00508"></a>00508               <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; rhs) <span class="keyword">const</span>;
<a name="l00509"></a>00509   
<a name="l00522"></a>00522     <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#af353f8623ce62aa2bf7e87942d5e89f7" title="Multiplication of self operator.">operator*= </a>(<span class="keyword">const</span> cxsc::real&amp; mult);
<a name="l00523"></a>00523   
<a name="l00536"></a>00536   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a64722ca127c5169779463574a35d661d" title="Multiplication operator.">operator* </a>(<span class="keyword">const</span> cxsc::real&amp; mult) <span class="keyword">const</span>;
<a name="l00537"></a>00537   
<a name="l00538"></a>00538   
<a name="l00561"></a>00561     <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a6167942675f27eaab9a2b858375d9bf9" title="Division of self operator.">operator/= </a>(
<a name="l00562"></a>00562               <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; rhs);
<a name="l00563"></a>00563   
<a name="l00593"></a>00593   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a3bdc0d055a65d5785c87f77ae30b2512" title="Division operator.">operator/ </a>(
<a name="l00594"></a>00594               <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; rhs) <span class="keyword">const</span>;
<a name="l00595"></a>00595   
<a name="l00609"></a>00609     <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a6167942675f27eaab9a2b858375d9bf9" title="Division of self operator.">operator/= </a>(<span class="keyword">const</span> cxsc::real&amp; div);
<a name="l00610"></a>00610   
<a name="l00624"></a>00624   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a3bdc0d055a65d5785c87f77ae30b2512" title="Division operator.">operator/ </a>(<span class="keyword">const</span> cxsc::real&amp; div) <span class="keyword">const</span>;
<a name="l00625"></a>00625   
<a name="l00644"></a>00644   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#aae1c0cd836577f309def9d7a8d9a534a">normalise</a>();
<a name="l00645"></a>00645 
<a name="l00663"></a>00663   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ae18f9fc32df16470d268b2bd70b32e9f">makeNormalised</a>() <span class="keyword">const</span>;
<a name="l00664"></a>00664     
<a name="l00694"></a>00694   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a501a9760b607f3275e9ce85eb5cae136" title="Make a marginalised version of this.">makeMarginal</a>(
<a name="l00695"></a>00695                 <span class="keyword">const</span> std::vector&lt;int&gt;&amp; reqDims) <span class="keyword">const</span>;
<a name="l00696"></a>00696   
<a name="l00697"></a>00697   <span class="comment">/* docs </span>
<a name="l00698"></a>00698 <span class="comment">   * Throws a NullSubpavings_Error if the subpaving that this manages</span>
<a name="l00699"></a>00699 <span class="comment">  is a NULL pointer.</span>
<a name="l00700"></a>00700 <span class="comment">    </span>
<a name="l00701"></a>00701 <span class="comment">*/</span>
<a name="l00702"></a>00702   <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a414799df36e8a5aea60b6ae9b3713cf8">makeSlice</a>(
<a name="l00703"></a>00703           <span class="keyword">const</span> std::vector &lt; int &gt;&amp; sliceDims,
<a name="l00704"></a>00704           <span class="keyword">const</span> std::vector &lt; cxsc::real &gt;&amp; slicePts) <span class="keyword">const</span>;
<a name="l00705"></a>00705   
<a name="l00737"></a>00737   cxsc::real <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#adb4501feb027c37159cf926195e1cd44" title="Find the coverage value for a data point.">findCoverage</a>(<span class="keyword">const</span> rvector&amp; pt) <span class="keyword">const</span>;
<a name="l00738"></a>00738   
<a name="l00760"></a>00760   cxsc::real <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#abf81273304c10947eab9f5523abbd21b" title="Find the pointwise extension of the piecewise constant function for a given data point.">pointwiseExtension</a>(
<a name="l00761"></a>00761         <span class="keyword">const</span> rvector&amp; pt) <span class="keyword">const</span>;
<a name="l00762"></a>00762     
<a name="l00793"></a>00793   cxsc::real <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ac1b7749f4bf0240e24517d87a832dbd7">getL1Distance</a>(
<a name="l00794"></a>00794         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; other) <span class="keyword">const</span>;
<a name="l00795"></a>00795   
<a name="l00796"></a>00796   
<a name="l00816"></a>00816   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a86b60ec6a406396eafd09123c20deedf">outputCoverageRegion</a>(  std::ostream &amp; os,
<a name="l00817"></a>00817                       cxsc::real cov,
<a name="l00818"></a>00818                       <span class="keywordtype">int</span> prec) <span class="keyword">const</span>;
<a name="l00819"></a>00819   
<a name="l00820"></a>00820   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a86b60ec6a406396eafd09123c20deedf">outputCoverageRegion</a>(  std::ostream &amp; os,
<a name="l00821"></a>00821                       cxsc::real cov) <span class="keyword">const</span>;
<a name="l00823"></a>00823   
<a name="l00843"></a>00843   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a86b60ec6a406396eafd09123c20deedf">outputCoverageRegion</a>(<span class="keyword">const</span> std::string&amp; covFileName,
<a name="l00844"></a>00844               cxsc::real cov,
<a name="l00845"></a>00845               <span class="keywordtype">int</span> prec,
<a name="l00846"></a>00846               <span class="keywordtype">bool</span> confirm = <span class="keyword">true</span>) <span class="keyword">const</span>;
<a name="l00847"></a>00847   
<a name="l00848"></a>00848   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a86b60ec6a406396eafd09123c20deedf">outputCoverageRegion</a>(<span class="keyword">const</span> std::string&amp; covFileName,
<a name="l00849"></a>00849               cxsc::real cov,
<a name="l00850"></a>00850               <span class="keywordtype">bool</span> confirm = <span class="keyword">true</span>) <span class="keyword">const</span>;
<a name="l00852"></a>00852   
<a name="l00874"></a>00874     
<a name="l00878"></a>00878     <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a3fd630a95c48dda0a828bb2229c9d854" title="Simulator taking a random number generator argument.">simulateData</a>(<a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; container,
<a name="l00879"></a>00879           <span class="keywordtype">size_t</span> numberToSimulate, 
<a name="l00880"></a>00880           gsl_rng * r) <span class="keyword">const</span>;
<a name="l00881"></a>00881   
<a name="l00887"></a>00887     <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a3fd630a95c48dda0a828bb2229c9d854" title="Simulator taking a random number generator argument.">simulateData</a>(<a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; container,
<a name="l00888"></a>00888           <span class="keywordtype">size_t</span> numberToSimulate, 
<a name="l00889"></a>00889           <span class="keywordtype">long</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> seed) <span class="keyword">const</span>;
<a name="l00890"></a>00890   
<a name="l00894"></a>00894     <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a3fd630a95c48dda0a828bb2229c9d854" title="Simulator taking a random number generator argument.">simulateData</a>(<a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; container,
<a name="l00895"></a>00895           <span class="keywordtype">size_t</span> numberToSimulate) <span class="keyword">const</span>;
<a name="l00897"></a>00897     
<a name="l00906"></a>00906     std::ostream &amp; <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a7253ce68ea35a9fb37fd8873ca0c23ef" title="Output the subpaving managed by this to a given stream.">outputToStreamTabs</a>(std::ostream &amp; os, <span class="keywordtype">int</span> prec = 5) <span class="keyword">const</span>;
<a name="l00907"></a>00907 
<a name="l00920"></a>00920   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad542b85e0f7364a34a6504721d65c1b3">outputToTxtTabs</a>(<span class="keyword">const</span> std::string&amp; s, <span class="keywordtype">int</span> prec = 5) <span class="keyword">const</span>;
<a name="l00921"></a>00921 
<a name="l00922"></a>00922   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad542b85e0f7364a34a6504721d65c1b3">outputToTxtTabs</a>(<span class="keyword">const</span> std::string&amp; s, <span class="keywordtype">int</span> prec, <span class="keywordtype">bool</span> confirm) <span class="keyword">const</span>;
<a name="l00923"></a>00923 
<a name="l00925"></a>00925 
<a name="l00937"></a>00937     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a9e8783522bdfd696bee2403b867c50d3">outputRootToTxt</a>(<span class="keyword">const</span> std::string&amp; s, <span class="keywordtype">int</span> prec = 5) <span class="keyword">const</span>;
<a name="l00938"></a>00938 
<a name="l00939"></a>00939     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a9e8783522bdfd696bee2403b867c50d3">outputRootToTxt</a>(<span class="keyword">const</span> std::string&amp; s, 
<a name="l00940"></a>00940                   <span class="keywordtype">int</span> prec, <span class="keywordtype">bool</span> confirm) <span class="keyword">const</span>;
<a name="l00941"></a>00941 
<a name="l00942"></a>00942 
<a name="l00944"></a>00944   
<a name="l00952"></a>00952     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a779f82e68a07656a602089a25e994748" title="Make a .dot graph file.">outputGraphDot</a>() <span class="keyword">const</span>;
<a name="l00953"></a>00953   
<a name="l00963"></a>00963     std::ostream &amp; <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a94a4166cf5d3a009021be8b43e41f9ed">outputRootToStreamTabs</a>(std::ostream &amp; os,
<a name="l00964"></a>00964                           <span class="keywordtype">int</span> prec = 5) <span class="keyword">const</span>;
<a name="l00965"></a>00965   
<a name="l00977"></a>00977     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a411e285d0cc7c8de1f6ac29706ddb2d4" title="Append current state of estimator to a txt log file.">outputLog</a>(<span class="keyword">const</span> std::string&amp; s, <span class="keywordtype">int</span> i, <span class="keywordtype">int</span> prec = 5) <span class="keyword">const</span>;
<a name="l00978"></a>00978   
<a name="l00979"></a>00979   
<a name="l00986"></a>00986   std::string <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#abb23fd1b7e0dc5ee81c976c23c1452a0" title="Get a string summary of this estimator&#39;s properties.">stringSummary</a>() <span class="keyword">const</span>;
<a name="l00987"></a>00987   
<a name="l00988"></a>00988   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a5b106e9526613ce2a0f81bd4e303b6cf">swap</a>(<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; pcf); <span class="comment">// throw()</span>
<a name="l00989"></a>00989   
<a name="l00990"></a>00990   <span class="keyword">private</span>:
<a name="l00991"></a>00991     
<a name="l00992"></a>00992   
<a name="l00993"></a>00993   <span class="comment">/*Return a pointer to the RealMappedSPnode </span>
<a name="l00994"></a>00994 <span class="comment">  this manages. */</span>
<a name="l00995"></a>00995     <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a88d23ec0f66eef3215b2081cec17815c">getSubPaving</a>() <span class="keyword">const</span>;
<a name="l00996"></a>00996   
<a name="l00997"></a>00997   <span class="comment">/*Opening line of a txt log file.</span>
<a name="l00998"></a>00998 <span class="comment"></span>
<a name="l00999"></a>00999 <span class="comment">    Starts the log file with file name and date and time</span>
<a name="l01000"></a>01000 <span class="comment">    \param s the name of the txt file to send output to.    */</span>
<a name="l01001"></a>01001     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a9327e86ac242a9af67266686cc107370">outputLogStart</a>(<span class="keyword">const</span> std::string&amp; s) <span class="keyword">const</span>;
<a name="l01002"></a>01002 
<a name="l01003"></a>01003   <span class="comment">/* internal version of normalise */</span>
<a name="l01004"></a>01004     <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ae3058b35de92dbf4f0606e9a51012373">_normalise</a>();
<a name="l01005"></a>01005   
<a name="l01006"></a>01006   <span class="comment">/* internal version of marginalise */</span>
<a name="l01007"></a>01007   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a893720267a24aa9cf6dbabbcc9e92b4a">_marginalise</a>(
<a name="l01008"></a>01008             <span class="keyword">const</span> std::vector&lt;int&gt;&amp; reqDims);
<a name="l01009"></a>01009 
<a name="l01010"></a>01010   <span class="comment">/* internal version of coverage for a point */</span>
<a name="l01011"></a>01011   cxsc::real <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a00ec6162ad7be5fd75b9f71df9e6010e">_coverage</a>(<span class="keyword">const</span> rvector&amp; pt) <span class="keyword">const</span>;
<a name="l01012"></a>01012 
<a name="l01013"></a>01013   <span class="comment">/* Fill \a covNodes with all nodes which represent</span>
<a name="l01014"></a>01014 <span class="comment">   * the region of this which covers \a cov % of the total</span>
<a name="l01015"></a>01015 <span class="comment">   * area of this.*/</span>
<a name="l01016"></a>01016   <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a5fc20ec0cd33f031e874f50251156e65">subpavings::RealMappedSPnode::ConstPtrs</a>&amp; <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a739e54236b59b4c1cbe8d5d20f5f4950">findCoverageRegion</a>(
<a name="l01017"></a>01017       <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml#a5fc20ec0cd33f031e874f50251156e65">subpavings::RealMappedSPnode::ConstPtrs</a>&amp; covNodes,
<a name="l01018"></a>01018       cxsc::real cov) <span class="keyword">const</span>;
<a name="l01019"></a>01019 
<a name="l01020"></a>01020               
<a name="l01021"></a>01021   <span class="comment">/*Check that the box is okay as the basis for a subpaving.</span>
<a name="l01022"></a>01022 <span class="comment">   * </span>
<a name="l01023"></a>01023 <span class="comment">   * \return true if the box has at least one dimension and that</span>
<a name="l01024"></a>01024 <span class="comment">   * no dimension of the box has a thin interval, false otherwise. */</span>
<a name="l01025"></a>01025   <span class="keyword">static</span> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a2dfb56b2c05c101ea7a27781e37762ee">checkBox</a>(<span class="keyword">const</span> cxsc::ivector&amp; box);
<a name="l01026"></a>01026 
<a name="l01027"></a>01027   <span class="comment">/* Handle exceptions thrown changes to root node. */</span>
<a name="l01028"></a>01028   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ac6bc781088b8a8554bc6598f25e75988">handleSPError</a>(<a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>&amp; spn);
<a name="l01029"></a>01029   
<a name="l01030"></a>01030   <span class="comment">/*Handle exceptions thrown in constructors. */</span>
<a name="l01031"></a>01031   <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a498990673c6fb4821bbfa6e26f3ebc04">constructor_error_handler</a>();
<a name="l01032"></a>01032   
<a name="l01033"></a>01033   <span class="comment">// data members</span>
<a name="l01035"></a><a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#aef23daaf4b73237b67ed40985b3038a3">01035</a> <span class="comment"></span>    <a class="code" href="classsubpavings_1_1RealMappedSPnode.shtml" title="A derived class based on MappedSPnode &lt; cxsc::real &gt;.">RealMappedSPnode</a>* <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#aef23daaf4b73237b67ed40985b3038a3" title="Pointer to the root node of the subpaving tree.">rootPaving</a>;
<a name="l01036"></a>01036 
<a name="l01037"></a>01037   
<a name="l01039"></a><a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a622a9d3b705f1c81cd7a5a7b95e8d4c8">01039</a>   <span class="keywordtype">int</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#a622a9d3b705f1c81cd7a5a7b95e8d4c8">label</a>;
<a name="l01040"></a>01040 
<a name="l01041"></a>01041     
<a name="l01042"></a>01042 
<a name="l01043"></a>01043 }; <span class="comment">// end of PiecewiseConstantFunction class declarations</span>
<a name="l01044"></a>01044 
<a name="l01045"></a>01045 
<a name="l01046"></a>01046 
<a name="l01047"></a>01047 
<a name="l01048"></a>01048   <span class="comment">// ----------  declarations of non-member functions ----------------------</span>
<a name="l01049"></a>01049 
<a name="l01050"></a>01050 
<a name="l01056"></a>01056   std::ostream &amp; <a class="code" href="namespacesubpavings.shtml#a7b0c2cba5230c058d175234c14d4f3af" title="Output the HistDescription object.">operator&lt;&lt;</a>(std::ostream &amp;os, 
<a name="l01057"></a>01057           <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">subpavings::PiecewiseConstantFunction</a>&amp; pcf);
<a name="l01058"></a>01058 
<a name="l01059"></a>01059 } <span class="comment">// end namespace subpavings</span>
<a name="l01060"></a>01060 
<a name="l01062"></a>01062 <span class="keyword">namespace </span>std
<a name="l01063"></a>01063 {
<a name="l01064"></a>01064   <span class="keyword">template</span> &lt;&gt;
<a name="l01065"></a>01065   <span class="keywordtype">void</span> swap (<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">subpavings::PiecewiseConstantFunction</a> &amp; f1, 
<a name="l01066"></a>01066       <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">subpavings::PiecewiseConstantFunction</a> &amp; f2); <span class="comment">// throw ()</span>
<a name="l01067"></a>01067   
<a name="l01068"></a>01068 }
<a name="l01069"></a>01069 
<a name="l01070"></a>01070 <span class="preprocessor">#endif</span>
<a name="l01071"></a>01071 <span class="preprocessor"></span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="piecewise__constant__function_8hpp.shtml">piecewise_constant_function.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:16 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
