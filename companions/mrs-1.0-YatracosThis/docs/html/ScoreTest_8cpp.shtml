<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: ScoreTest.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('ScoreTest_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">ScoreTest.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Testing StatsSubPavings (aka SPSnodes) with COPERR and AIC scoring data.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="COPERRandAIC_2dataprep_8hpp_source.shtml">dataprep.hpp</a>&quot;</code><br/>
</div>
<p><a href="ScoreTest_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="ScoreTest_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> ()</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Testing StatsSubPavings (aka SPSnodes) with COPERR and AIC scoring data. </p>

<p>Definition in file <a class="el" href="ScoreTest_8cpp_source.shtml">ScoreTest.cpp</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="ae66f6b31b5ad750f1fe042a706a4e3d4"></a><!-- doxytag: member="ScoreTest.cpp::main" ref="ae66f6b31b5ad750f1fe042a706a4e3d4" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="ScoreTest_8cpp_source.shtml#l00037">37</a> of file <a class="el" href="ScoreTest_8cpp_source.shtml">ScoreTest.cpp</a>.</p>

<p>References <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01272">subpavings::AdaptiveHistogram::getEMPScoreAIC()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01264">subpavings::AdaptiveHistogram::getEMPScoreCOPERR()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01311">subpavings::AdaptiveHistogram::getScoreAIC()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01282">subpavings::AdaptiveHistogram::getScoreCOPERR()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l00895">subpavings::AdaptiveHistogram::insertRvectorsFromTxt()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03528">subpavings::AdaptiveHistogram::outputGraphDot()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03571">subpavings::AdaptiveHistogram::outputToTxtTabsWithEMPs()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l02698">subpavings::AdaptiveHistogram::priorityMerge()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l01150">subpavings::AdaptiveHistogram::prioritySplit()</a>, and <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::TXT</a>.</p>
<div class="fragment"><pre class="fragment">{
    <span class="comment">// ------- prepare to generate some data for the tests -----------</span>

    <span class="comment">// set up a random number generator for bivariate gaussian rvs</span>
    <span class="keyword">const</span> gsl_rng_type * T;
    gsl_rng * r;

    <span class="keywordtype">int</span> i;
    <span class="keyword">const</span> <span class="keywordtype">int</span> n=100;    <span class="comment">// number to generate</span>
    <span class="keywordtype">double</span> sigma_x=1;   <span class="comment">// distribution parameter</span>
    <span class="keywordtype">double</span> sigma_y=1;   <span class="comment">// distribution parameter</span>
    <span class="keywordtype">double</span> rho=0;       <span class="comment">// x and y uncorrelated</span>

    <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>

    gsl_rng_env_setup();

    T = gsl_rng_default;
    r = gsl_rng_alloc (T);

    <span class="keywordtype">string</span> samplesFileName; <span class="comment">// for samples</span>
    <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
    ofstream oss;         <span class="comment">// ofstream object</span>
    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
    oss.precision(5);

    <span class="keywordtype">double</span> *x;
    <span class="keywordtype">double</span> *y;

    x= <span class="keyword">new</span> <span class="keywordtype">double</span>[n];   <span class="comment">// make x and y in dynamic memory</span>
    y= <span class="keyword">new</span> <span class="keywordtype">double</span>[n];   <span class="comment">// (so they must be freed later)</span>

    <span class="keywordtype">double</span>* itx;
    <span class="keywordtype">double</span>* ity;


    <span class="comment">// get n random variates chosen from the bivariate Gaussian</span>
    <span class="comment">// distribution with mean zero and given sigma_x, sigma_y.</span>
    <span class="keywordflow">for</span> (i = 0; i &lt; n; i++)
    {
        gsl_ran_bivariate_gaussian(r, sigma_x, sigma_y,
                                   rho, &amp;x[i], &amp;y[i]);

    }

    <span class="comment">// free the random number generator</span>
    gsl_rng_free (r);

    itx = &amp;x[0];
    ity = &amp;y[0];

    <span class="comment">// create a name for the file to use</span>
    samplesFileName = <span class="stringliteral">&quot;bgSamples.txt&quot;</span>;
    <span class="comment">// output the sample data</span>
    oss.open(samplesFileName.c_str());         <span class="comment">// opens the file</span>

    <span class="keywordflow">for</span>(i=0; i&lt;n; i++) {
        oss &lt;&lt; (*itx) &lt;&lt; <span class="stringliteral">&quot;  &quot;</span> &lt;&lt; (*ity);
        <span class="keywordflow">if</span> (i&lt;n-1) oss &lt;&lt; endl; <span class="comment">// new line if not final line</span>
        itx++;
        ity++;
    }
    oss &lt;&lt; flush;
    oss.close();

    cout &lt;&lt; <span class="stringliteral">&quot;Samples output to &quot;</span> &lt;&lt; samplesFileName &lt;&lt; endl &lt;&lt; endl;

    clock_t start, end;     <span class="comment">// for timing</span>
    <span class="keywordtype">double</span> timeTaken;

    <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
    <span class="keywordtype">bool</span> successfulPQSplit = <span class="keyword">false</span>;
    <span class="keywordtype">bool</span> successfulPQMerge = <span class="keyword">false</span>;

    <span class="comment">// example to create one histogram with pulse data and a priority</span>
    <span class="comment">// ---------- split to give a minimum number of bins -----------</span>

    cout &lt;&lt; endl &lt;&lt; endl;
    cout &lt;&lt; <span class="stringliteral">&quot;Start of first example:&quot;</span> &lt;&lt; endl;
    cout &lt;&lt; <span class="stringliteral">&quot;Priority split on COPERR to give minimum number of bins&quot;</span> &lt;&lt; endl;

    <span class="comment">// Use default constructor for histogram.  By default,</span>
    <span class="comment">// holdAllStats = false so that the underlying rootPaving managed by the</span>
    <span class="comment">// myHistFirst will not maintain all available stats, only counts</span>
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHistFirst;

    start=clock();
    <span class="comment">// clock running</span>

    <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie one big box</span>
    successfulInsertion = myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aff1b74eb52546adb9d7d64a84d739efe">insertRvectorsFromTxt</a>(samplesFileName);

    <span class="keywordflow">if</span> (successfulInsertion) {

        <span class="comment">// with min volume check</span>
        <span class="comment">// the minimum volume of a splittable node is minVolB(log n)^2/n</span>
        <span class="keywordtype">double</span> minVolB = 1.0;

        <span class="comment">// prepare function objects to do a priority split</span>

        <span class="comment">// function object to compare nodes on cont. to EMP sum under COPERR</span>
        <span class="comment">// ie split node with EMP contribution (COPERR) first</span>
        <a class="code" href="classsubpavings_1_1CompEMPSumChangeCOPERR.shtml" title="Class comparing change in EMP under COPERR from splitting 2 nodes.">CompEMPSumChangeCOPERR</a> nodeCompEMPCOPERR;

        <span class="comment">// function object to split until number of leaves is &gt;= minLeaves</span>
        <span class="keywordtype">int</span> minLeaves = 20;
        <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critLeavesGTE(minLeaves);

        <span class="comment">// do the priority split</span>
        <span class="comment">/* minimum points minPoints to use when splitting defaults to zero.</span>
<span class="comment">        A node will not be splittable if either child would then have</span>
<span class="comment">        &lt; minPoints of data associated with it. */</span>
        successfulPQSplit = myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(nodeCompEMPCOPERR,
              critLeavesGTE, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minVolB); <span class="comment">// no logging</span>
    }

        end=clock();

        timeTaken = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end-start)/CLOCKS_PER_SEC;
        cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt;timeTaken&lt;&lt; <span class="stringliteral">&quot; s.&quot;</span> &lt;&lt; endl;


    <span class="keywordflow">if</span>(successfulPQSplit) { <span class="comment">// only do more if split was successful</span>

        <span class="comment">// create a name for the file to output</span>
        outputFileName = <span class="stringliteral">&quot;ScoreTestFirst.txt&quot;</span>;
        <span class="comment">// To realize a file output</span>
        myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2fb89e060574b8c935191cd3afd91290" title="Output the subpaving managed by this to a txt file.">outputToTxtTabsWithEMPs</a>(outputFileName);

        myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a845c591145a1abc86d7d0e1d33c26e22" title="Make a .dot graph file from histogram structure.">outputGraphDot</a>();
        <span class="comment">// output will go to a dot file</span>
        <span class="comment">// this will then be made into a png image</span>
        <span class="comment">// console output will tell you where png image is</span>

        <span class="comment">// optional - print out the scores</span>

        <span class="comment">// create a penalty function object to use to give us the total</span>
        <span class="comment">// score (EMP + PEN) under COPERR</span>
        <a class="code" href="classsubpavings_1_1PenLeaves.shtml" title="Penalty function as number of leaves in histogram.">PenLeaves</a> penC;

        real scoreCOPERR = myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a94e90e67d767c5e0ad7b4378e0a72cad" title="get the COPERR score.">getScoreCOPERR</a>(penC, <span class="keyword">true</span>); <span class="comment">//verbose</span>
        cout &lt;&lt; <span class="stringliteral">&quot;End of first example:&quot;</span> &lt;&lt; endl;
        cout &lt;&lt; <span class="stringliteral">&quot;The total score (EMP+PEN) under COPERR is &quot;</span> &lt;&lt; scoreCOPERR
                            &lt;&lt; endl;
        real scoreAIC = myHistFirst.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a71b9bb96936f8e5f6a298c6d1a382e0b" title="get the EMP part of the AIC score.">getEMPScoreAIC</a>();
        cout &lt;&lt; <span class="stringliteral">&quot;The EMP score under AIC is &quot;</span> &lt;&lt; scoreAIC &lt;&lt; endl;
    }

    <span class="comment">// example to create one histogram with pulse data and a priority</span>
    <span class="comment">// ---------- split to minimise COPERR score -----------</span>


    successfulInsertion = <span class="keyword">false</span>;
    successfulPQSplit = <span class="keyword">false</span>;

    <span class="comment">// example to create one histogram with pulse data and a priority</span>
    <span class="comment">// ---------- split to give a minimum number of bins -----------</span>

    cout &lt;&lt; endl &lt;&lt; endl;
    cout &lt;&lt; <span class="stringliteral">&quot;Start of second example:&quot;</span> &lt;&lt; endl;
    cout &lt;&lt; <span class="stringliteral">&quot;Priority split on AIC give minimum number of bins&quot;</span> &lt;&lt; endl;

    <span class="comment">// make an Adaptive Histogram object with no specified box</span>
    <span class="comment">// or splitting value (and holdAllStats again defaults to false),</span>
    <span class="comment">// with the same data</span>
    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHistSecond;

    start=clock();
    <span class="comment">// clock running</span>

    <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie one big box</span>
    successfulInsertion = myHistSecond.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aff1b74eb52546adb9d7d64a84d739efe">insertRvectorsFromTxt</a>(samplesFileName);

    <span class="keywordflow">if</span> (successfulInsertion) {

        <span class="comment">// prepare function objects to do a priority split</span>

        <span class="comment">// function object to compare nodes on cont. to EMP sum under COPERR</span>
        <span class="comment">// ie split node with EMP contribution (COPERR) first</span>
        <a class="code" href="classsubpavings_1_1CompEMPSumChangeAIC.shtml" title="Class comparing change in EMP under AIC from splitting 2 nodes.">CompEMPSumChangeAIC</a> nodeCompEMPAIC;

        <span class="comment">// function object to split until number of leaves is &gt;= minLeaves</span>
        <span class="keywordtype">int</span> minLeaves = 500;
        <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critLeavesGTE(minLeaves);

        <span class="comment">/* minimum points minPoints to use when splitting defaults to zero.</span>
<span class="comment">        A node will not be splittable if either child would then have</span>
<span class="comment">        &lt; minPoints of data associated with it.</span>
<span class="comment">        minVolB, the multiplier for (log n)^2/n to determine the minimum</span>
<span class="comment">        volume of a splittable node, also defaults to 0.0. */</span>
        successfulPQSplit = myHistSecond.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(nodeCompEMPAIC,
              critLeavesGTE, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>); <span class="comment">//no logging</span>
    }

    end=clock();

    timeTaken = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end-start)/CLOCKS_PER_SEC;
    cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt;timeTaken&lt;&lt; <span class="stringliteral">&quot; s.&quot;</span> &lt;&lt; endl;


    <span class="keywordflow">if</span>(successfulPQSplit) { <span class="comment">// only do more if split was successful</span>

        <span class="comment">// create a name for the file to output</span>
        outputFileName = <span class="stringliteral">&quot;ScoreTestSecond.txt&quot;</span>;
        <span class="comment">// To realize a file output</span>
        myHistSecond.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2fb89e060574b8c935191cd3afd91290" title="Output the subpaving managed by this to a txt file.">outputToTxtTabsWithEMPs</a>(outputFileName);

        <span class="comment">// optional - print out the scores</span>
        <span class="comment">// make a penalty function to give total (EMP + PEN) score under AIC</span>
        <span class="keywordtype">double</span> ca = 1.0;
        <span class="keywordtype">double</span> alpha = 0.5;
        <span class="keywordtype">double</span> ra = 2.0;
        <a class="code" href="classsubpavings_1_1PenAIC1.shtml" title="Class for penalty function 1 for AIC.">PenAIC1</a> penA(ca, alpha, ra); <span class="comment">// penalty for AIC</span>

        real scoreCOPERR = myHistSecond.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb0bda49b3a39ab8aa53737de810afec" title="get the EMP part of the COPERR score.">getEMPScoreCOPERR</a>();
        cout &lt;&lt; <span class="stringliteral">&quot;End of second example:&quot;</span> &lt;&lt; endl;
        cout &lt;&lt; <span class="stringliteral">&quot;The EMP score COPERR is &quot;</span> &lt;&lt; scoreCOPERR &lt;&lt; endl;
        real scoreAIC = myHistSecond.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8333360139bee06eb9c661b8a47cb4a3" title="get AIC score.">getScoreAIC</a>(penA, <span class="keyword">true</span>);
        cout &lt;&lt; <span class="stringliteral">&quot;The total score (EMP+PEN) under AIC is &quot;</span> &lt;&lt; scoreAIC &lt;&lt; endl;
    }

    <span class="comment">// end of example to create one histogram with pulse data and a priority</span>
    <span class="comment">// ---------- split to minimise AIC score -----------</span>

    <span class="comment">// example to merge up histogram,prioritising merge on</span>
    <span class="comment">// ---------------- minimising increase in AIC score -------------</span>

    <span class="keywordflow">if</span>(successfulPQSplit) { <span class="comment">// only do more if split was successful</span>


        cout &lt;&lt; endl &lt;&lt; endl;
        cout &lt;&lt; <span class="stringliteral">&quot;Example to merge the second histogram upwards&quot;</span> &lt;&lt; endl;

        <span class="comment">// merge node with largest contribution to EMP sum first</span>
        <a class="code" href="classsubpavings_1_1CompEMPSumChangeMergeAIC.shtml" title="Class comparing change in EMP under AIC from merging 2 nodes.">CompEMPSumChangeMergeAIC</a> nodeCompEMPMergeAIC;

        <span class="keywordtype">int</span> minLeaves = 0; <span class="comment">// this will merge right back to the root box</span>
        <a class="code" href="classsubpavings_1_1CritLeaves__LTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_LTE</a> critLeavesLTE(minLeaves);

        successfulPQMerge = myHistSecond.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4c8d2603da121585e049548baca3c712" title="Priority merge to reduce number of leaves in histogram.">priorityMerge</a>(nodeCompEMPMergeAIC,
            critLeavesLTE, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089ab2890a6eb7493029f41cf871d43877c3">TXT</a>); <span class="comment">// with logging</span>

        <span class="comment">//try critAICMergeChangeOrLeaves_LTE instead of critLeaves_LTE</span>

        <span class="keywordflow">if</span> (successfulPQMerge) {
            <span class="comment">// optional - print out the scores</span>
            real scoreAIC = myHistSecond.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a71b9bb96936f8e5f6a298c6d1a382e0b" title="get the EMP part of the AIC score.">getEMPScoreAIC</a>();
            cout &lt;&lt; <span class="stringliteral">&quot;After merging:&quot;</span> &lt;&lt; endl;
            cout &lt;&lt; <span class="stringliteral">&quot;the EMP score under AIC is &quot;</span> &lt;&lt; scoreAIC &lt;&lt; endl;
        }

    }

    cout &lt;&lt; endl;
    cout &lt;&lt; <span class="stringliteral">&quot;End of examples&quot;</span> &lt;&lt; endl &lt;&lt; endl;

    <span class="comment">// end of examples</span>

    <span class="keyword">delete</span> x;   <span class="comment">// free dynamic memory used for x and y</span>
    <span class="keyword">delete</span> y;

    <span class="keywordflow">return</span> 0;

} <span class="comment">// end of COPERR and AIC scoring test program</span>
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="ScoreTest_8cpp.shtml">ScoreTest.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:23 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
