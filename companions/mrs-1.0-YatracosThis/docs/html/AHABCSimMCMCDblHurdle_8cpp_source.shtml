<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: AHABCSimMCMCDblHurdle.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('AHABCSimMCMCDblHurdle_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">AHABCSimMCMCDblHurdle.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="AHABCSimMCMCDblHurdle_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">* Copyright (C) 2011 Gloria Teng</span>
<a name="l00005"></a>00005 <span class="comment">* </span>
<a name="l00006"></a>00006 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00007"></a>00007 <span class="comment">*</span>
<a name="l00008"></a>00008 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00009"></a>00009 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00010"></a>00010 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00011"></a>00011 <span class="comment">* your option) any later version.</span>
<a name="l00012"></a>00012 <span class="comment">*</span>
<a name="l00013"></a>00013 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment">* General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">*</span>
<a name="l00018"></a>00018 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00020"></a>00020 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00021"></a>00021 <span class="comment">*/</span>
<a name="l00022"></a>00022 
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;iomanip&gt;</span> <span class="comment">//to setprecision</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;map&gt;</span> <span class="comment">//to use maps</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;iterator&gt;</span> <span class="comment">//to use iterators</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &quot;dataprep.hpp&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &quot;<a class="code" href="SmallClasses_8hpp.shtml">SmallClasses.hpp</a>&quot;</span> <span class="comment">// to use LabBox and RSSample objects</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &quot;<a class="code" href="MCMCGRtools_8hpp.shtml" title="Definitions for tools for testing StatsSubPavings (aka SPSnodes) with MCMC with the Gelman-Rubin conv...">MCMCGRtools.hpp</a>&quot;</span> <span class="comment">// MCMC tools to help </span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &lt;stdexcept&gt;</span> <span class="comment">// throwing exceptions</span>
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;functional&gt;</span> <span class="comment">// mutliplies&lt;&gt;</span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;algorithm&gt;</span> <span class="comment">// transform</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;cassert&gt;</span> <span class="comment">// for assertions</span>
<a name="l00040"></a>00040 
<a name="l00041"></a>00041 <span class="comment">//#define NDEBUG // uncomment this to turn off assertion checking and all extra debugging</span>
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 <span class="preprocessor">#ifndef NDEBUG // ie only define these if we have not defined NDEBUG for no debugging</span>
<a name="l00044"></a>00044 <span class="preprocessor"></span><span class="comment">//#define MYDEBUG_OUTPUT // extra console output etc for debugging - only use for small examples!</span>
<a name="l00045"></a><a class="code" href="AHABCSimMCMCDblHurdle_8cpp.shtml#a38cc676e6c9f06e021b17e537b7bba1d">00045</a> <span class="preprocessor">#define MYDEBUG // extra files for collations, averages and diffs to av as chains develop</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span>
<a name="l00047"></a>00047 <span class="comment">//#define FORCEFAILINSERTION // debugging flag to force a failure during insertion of data</span>
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 <span class="comment">//#define FORCEFAILMCMCLOOP // debugging flag to force a failure during an MCMC loop</span>
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 <span class="preprocessor">#endif</span>
<a name="l00052"></a>00052 <span class="preprocessor"></span>
<a name="l00053"></a>00053 <span class="keyword">using namespace </span>cxsc;
<a name="l00054"></a>00054 <span class="keyword">using namespace </span>subpavings;
<a name="l00055"></a>00055 <span class="keyword">using namespace </span>std;
<a name="l00056"></a>00056 
<a name="l00057"></a>00057 <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> <a class="code" href="AHABCObsMCMCDblHurdle_8cpp.shtml#abcb1c598d5fc24ad761d43c1855103ea">doMCMCGRAuto</a>(
<a name="l00058"></a>00058 <span class="keywordtype">string</span> dirName, <span class="keywordtype">string</span> simDataFiles,
<a name="l00059"></a>00059 <span class="keywordtype">size_t</span> samplingSize, <span class="keywordtype">size_t</span> numRep,
<a name="l00060"></a>00060 <span class="keywordtype">double</span> wt, <span class="keywordtype">double</span> dx, <span class="keywordtype">double</span> cov,
<a name="l00061"></a>00061 <span class="keywordtype">int</span> maxLoops, <span class="keywordtype">int</span> samplesNeeded, <span class="keywordtype">int</span> thinout, <span class="keywordtype">int</span> minPoints,
<a name="l00062"></a>00062 cxsc::real tol_leaves, cxsc::real tol_L1,
<a name="l00063"></a>00063         <span class="keywordtype">int</span> rhatFlagCounterThreshold, 
<a name="l00064"></a>00064         <span class="keywordtype">int</span> startWithFullChecks = 0);
<a name="l00065"></a>00065 
<a name="l00066"></a><a class="code" href="AHABCSimMCMCDblHurdle_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00066</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00067"></a>00067 {
<a name="l00068"></a>00068   <span class="comment">//--------------input parameters for AHABC--------------------------------//</span>
<a name="l00069"></a>00069    <span class="comment">//directory to store files in</span>
<a name="l00070"></a>00070   <span class="keywordtype">string</span> dirName = argv[1];
<a name="l00071"></a>00071   
<a name="l00072"></a>00072   <span class="comment">// names of files</span>
<a name="l00073"></a>00073   <span class="keywordtype">string</span> simDataFiles = argv[2]; <span class="comment">// this is a row vector of filenames</span>
<a name="l00074"></a>00074  
<a name="l00075"></a>00075   <span class="comment">//sample for numRep times the sampled data of samplingSize</span>
<a name="l00076"></a>00076   <span class="keywordtype">size_t</span> samplingSize = atoi(argv[3]);
<a name="l00077"></a>00077   <span class="keywordtype">size_t</span> numRep = atoi(argv[4]);
<a name="l00078"></a>00078   
<a name="l00079"></a>00079   <span class="comment">//parameters for log-likelihood estimation</span>
<a name="l00080"></a>00080   <span class="keywordtype">double</span> wt = atof(argv[5]); <span class="comment">//mass to ensure positive density </span>
<a name="l00081"></a>00081                     <span class="comment">//everywhere in domain</span>
<a name="l00082"></a>00082   <span class="keywordtype">double</span> dx = atof(argv[6]); <span class="comment">//1 for non-atomic densities</span>
<a name="l00083"></a>00083   
<a name="l00084"></a>00084    <span class="comment">//user-defined coverage value to get wanted density region</span>
<a name="l00085"></a>00085   <span class="keywordtype">double</span> cov = atof(argv[7]);
<a name="l00086"></a>00086 
<a name="l00087"></a>00087    <span class="comment">//--------------end of input parameters----------------------------------//</span>
<a name="l00088"></a>00088 
<a name="l00089"></a>00089   <span class="comment">//========user-defined parameters for MCMC====================//</span>
<a name="l00090"></a>00090   <span class="keywordtype">int</span> maxLoops = atoi(argv[8]); <span class="comment">// maximum changes of state from initial state to try</span>
<a name="l00091"></a>00091   <span class="keywordtype">int</span> samplesNeeded = atoi(argv[9]); <span class="comment">// how many samples do we want (ie once chains have burned in)</span>
<a name="l00092"></a>00092   <span class="keywordtype">int</span> thinout = atoi(argv[10]); <span class="comment">// sample every thinout state, ie thinout-1 states between samples</span>
<a name="l00093"></a>00093   
<a name="l00094"></a>00094   <span class="comment">/* note that all chains will be sampled in parallel, once burnin has happened,</span>
<a name="l00095"></a>00095 <span class="comment">   * eg if we want 100 samples and have 4 chains and thinout 5, then we will sample</span>
<a name="l00096"></a>00096 <span class="comment">   * the last state from each chain as soon as convergence has been achieved </span>
<a name="l00097"></a>00097 <span class="comment">   * (and thus get 4 samples), and then wait 5-1 = 4 states, and on the 5th, again </span>
<a name="l00098"></a>00098 <span class="comment">   * sample from all 4 chains (assuming that convergence is still okay), etc etc</span>
<a name="l00099"></a>00099 <span class="comment">   * so it will take 1 + (100-4)/4*5 = 1 + 25*5 = 1 + 120 = 121 states from burnin inclusive</span>
<a name="l00100"></a>00100 <span class="comment">   * of the burnin state itself to get the full sample */</span>
<a name="l00101"></a>00101 
<a name="l00102"></a>00102   <span class="keywordtype">int</span> minPoints = atoi(argv[11]); <span class="comment">//minPoints</span>
<a name="l00103"></a>00103   
<a name="l00104"></a>00104   cxsc::real tol_leaves(12); <span class="comment">//tolerance for automated burn in criteria for leaves</span>
<a name="l00105"></a>00105   cxsc::real tol_L1(13); <span class="comment">//tolerance for automated burn in criteria for L1</span>
<a name="l00106"></a>00106 
<a name="l00107"></a>00107   <span class="keywordtype">int</span> rhatFlagCounterThreshold = 2;   <span class="comment">/* how many of the scalar values must have</span>
<a name="l00108"></a>00108 <span class="comment">                      * diagnostic within limits for sampling to start?</span>
<a name="l00109"></a>00109 <span class="comment">                      * usually this would probably be the number</span>
<a name="l00110"></a>00110 <span class="comment">                      * of scalar values being used? */</span>
<a name="l00111"></a>00111   <span class="keywordtype">int</span> startWithFullChecks = 0; <span class="comment">/* indicator for whether we bypass the first hurdle</span>
<a name="l00112"></a>00112 <span class="comment">                (the leaves convergence) and go straight to monitoring for </span>
<a name="l00113"></a>00113 <span class="comment">                actual burnin*/</span>
<a name="l00114"></a>00114 
<a name="l00115"></a>00115   <span class="comment">//========Hardcoded parameters====================================//</span>
<a name="l00116"></a>00116   <span class="comment">//int maxLoops = 5000; // maximum changes of state from initial state to try</span>
<a name="l00117"></a>00117   <span class="comment">//int samplesNeeded = 10; // how many samples do we want (ie once chains have burned in)</span>
<a name="l00118"></a>00118   <span class="comment">//int thinout = 5; // sample every thinout state, ie thinout-1 states between samples</span>
<a name="l00119"></a>00119   <span class="comment">//cxsc::real tol(0.1); //tolerance for automated burn in criteria</span>
<a name="l00120"></a>00120   
<a name="l00121"></a>00121   <span class="comment">// should really do more checks on parameters, but just check thinout here</span>
<a name="l00122"></a>00122   <span class="keywordflow">if</span> (thinout &lt; 1 ) {
<a name="l00123"></a>00123     <span class="keywordflow">throw</span> std::invalid_argument(<span class="stringliteral">&quot;Invalid thinout argument&quot;</span>);
<a name="l00124"></a>00124   }
<a name="l00125"></a>00125   <span class="comment">//===========done with working on parameters==========================//</span>
<a name="l00126"></a>00126   
<a name="l00127"></a>00127   <span class="keywordflow">try</span> {
<a name="l00128"></a>00128     <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> avg = <a class="code" href="AHABCObsMCMCDblHurdle_8cpp.shtml#abcb1c598d5fc24ad761d43c1855103ea">doMCMCGRAuto</a>(dirName, simDataFiles,
<a name="l00129"></a>00129   samplingSize, numRep, wt, dx, cov, maxLoops, samplesNeeded,  thinout, minPoints,
<a name="l00130"></a>00130  tol_leaves, tol_L1,  rhatFlagCounterThreshold, startWithFullChecks);
<a name="l00131"></a>00131 
<a name="l00132"></a>00132     std::string samplesCollAverageFilename = dirName;
<a name="l00133"></a>00133     samplesCollAverageFilename += <span class="stringliteral">&quot;AveragedSamplesFromMCMCGRAuto.txt&quot;</span>;
<a name="l00134"></a>00134     <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesCollAverageFilename);
<a name="l00135"></a>00135   
<a name="l00136"></a>00136     avg.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(samplesCollAverageFilename);
<a name="l00137"></a>00137     
<a name="l00138"></a>00138     <span class="keywordflow">return</span> 0;
<a name="l00139"></a>00139   }
<a name="l00140"></a>00140   <span class="keywordflow">catch</span> (std::runtime_error&amp; e) {
<a name="l00141"></a>00141     cout &lt;&lt; <span class="stringliteral">&quot;\nFailed doMCMCGRAuto: original error:\n&quot;</span> 
<a name="l00142"></a>00142       &lt;&lt; std::string(e.what()) &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; endl;
<a name="l00143"></a>00143   }
<a name="l00144"></a>00144 } 
<a name="l00145"></a>00145     
<a name="l00146"></a><a class="code" href="AHABCSimMCMCDblHurdle_8cpp.shtml#ac2fa4bb13e6dcfe59f98c221c40a4ec2">00146</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> <a class="code" href="AHABCObsMCMCDblHurdle_8cpp.shtml#abcb1c598d5fc24ad761d43c1855103ea">doMCMCGRAuto</a>(<span class="keywordtype">string</span> dirName, <span class="keywordtype">string</span> simDataFiles,
<a name="l00147"></a>00147 <span class="keywordtype">size_t</span> samplingSize, <span class="keywordtype">size_t</span> numRep,
<a name="l00148"></a>00148 <span class="keywordtype">double</span> wt, <span class="keywordtype">double</span> dx, <span class="keywordtype">double</span> cov,
<a name="l00149"></a>00149 <span class="keywordtype">int</span> maxLoops, <span class="keywordtype">int</span> samplesNeeded, <span class="keywordtype">int</span> thinout, <span class="keywordtype">int</span> minPoints,
<a name="l00150"></a>00150 cxsc::real tol_leaves, cxsc::real tol_L1,
<a name="l00151"></a>00151         <span class="keywordtype">int</span> rhatFlagCounterThreshold, 
<a name="l00152"></a>00152         <span class="keywordtype">int</span> startWithFullChecks)
<a name="l00153"></a>00153 {
<a name="l00154"></a>00154   <span class="comment">//=========Some preliminaries for AHABC==================================//</span>
<a name="l00155"></a>00155    <span class="comment">//set formatting fors input to oss</span>
<a name="l00156"></a>00156     ofstream os;         <span class="comment">// ofstream object</span>
<a name="l00157"></a>00157     os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00158"></a>00158     os.precision(16);
<a name="l00159"></a>00159  
<a name="l00160"></a>00160    <span class="comment">// set up a random number generator for uniform rvs in priority queue</span>
<a name="l00161"></a>00161     <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00162"></a>00162     gsl_rng * r;
<a name="l00163"></a>00163     <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00164"></a>00164     gsl_rng_env_setup();
<a name="l00165"></a>00165     T = gsl_rng_default;
<a name="l00166"></a>00166     r = gsl_rng_alloc (T);
<a name="l00167"></a>00167     <span class="keywordtype">long</span> s = time (NULL) * getpid();
<a name="l00168"></a>00168     gsl_rng_set(r, s);  
<a name="l00169"></a>00169 
<a name="l00170"></a>00170    <span class="comment">//-------Setup to read in data files------------------------------------//</span>
<a name="l00171"></a>00171    <span class="comment">//create a vector object to store the filenames of simulated data</span>
<a name="l00172"></a>00172   vector&lt;string&gt; simDataFilesVec;
<a name="l00173"></a>00173   <span class="keywordtype">string</span> fileName;
<a name="l00174"></a>00174   cout &lt;&lt; <span class="stringliteral">&quot;Reading in file names for simulated data: &quot;</span> &lt;&lt; endl;    
<a name="l00175"></a>00175   ifstream file; <span class="comment">// create file for input</span>
<a name="l00176"></a>00176   file.open(simDataFiles.c_str());
<a name="l00177"></a>00177   <span class="comment">// check if this file exists or not</span>
<a name="l00178"></a>00178   <span class="keywordflow">if</span> ( !file ) { <span class="comment">// exit if file doesn&#39;t exists&#39;</span>
<a name="l00179"></a>00179     cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; simDataFiles &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
<a name="l00180"></a>00180          &lt;&lt; endl;
<a name="l00181"></a>00181     exit(1);
<a name="l00182"></a>00182   }
<a name="l00183"></a>00183     <span class="comment">// else read in the filenames</span>
<a name="l00184"></a>00184   <span class="comment">// store the filenames in the vector simDataFilesVec</span>
<a name="l00185"></a>00185   <span class="keywordflow">while</span> ( !file.eof() ) { <span class="comment">// read until end of file or error</span>
<a name="l00186"></a>00186     file &gt;&gt; fileName;
<a name="l00187"></a>00187     cout &lt;&lt; fileName &lt;&lt; endl; 
<a name="l00188"></a>00188     simDataFilesVec.push_back(fileName);
<a name="l00189"></a>00189   }
<a name="l00190"></a>00190   <span class="comment">// Somehow an extra line will be read in. Need to delete that extra line.</span>
<a name="l00191"></a>00191   simDataFilesVec.pop_back();
<a name="l00192"></a>00192    
<a name="l00193"></a>00193   <span class="comment">//container to keep individual data containers for re-sampling</span>
<a name="l00194"></a>00194   vector&lt;RVecData&gt; unlabDataVec; <span class="comment">//unlabelled data</span>
<a name="l00195"></a>00195 
<a name="l00196"></a>00196    <span class="comment">//container to keep both simulated and observed data to make root box</span>
<a name="l00197"></a>00197    <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>* dataPtr;
<a name="l00198"></a>00198   dataPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>; 
<a name="l00199"></a>00199 
<a name="l00200"></a>00200   <span class="comment">// put all simulated data into container allData</span>
<a name="l00201"></a>00201   cout &lt;&lt; <span class="stringliteral">&quot;\nPut all data in a container to get rootbox: &quot;</span> &lt;&lt; endl;
<a name="l00202"></a>00202   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0;  i &lt; simDataFilesVec.size(); i++) {
<a name="l00203"></a>00203     cout &lt;&lt; simDataFilesVec[i] &lt;&lt; endl;
<a name="l00204"></a>00204     <span class="comment">//read into allData</span>
<a name="l00205"></a>00205     <span class="keywordtype">bool</span> retvalue = <a class="code" href="namespacesubpavings.shtml#a7918dddb1a8e32f72835e1e7b4442ca6" title="Read in rvectors from a txt file.">readRvectorsFromTxt</a>((*dataPtr), simDataFilesVec[i], 0);
<a name="l00206"></a>00206     <span class="keywordflow">if</span> (retvalue == <span class="keyword">false</span>)  {
<a name="l00207"></a>00207       cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; simDataFiles &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
<a name="l00208"></a>00208         &lt;&lt; endl;
<a name="l00209"></a>00209       exit(1);
<a name="l00210"></a>00210     } 
<a name="l00211"></a>00211     <span class="comment">//cout &lt;&lt; (*(dataPtr)).size() &lt;&lt; &quot;is the size of dataPtr at iteration &quot; &lt;&lt; i &lt;&lt; endl;</span>
<a name="l00212"></a>00212     <span class="comment">//Then read each data set and push into unlabDataVec </span>
<a name="l00213"></a>00213     <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> unlabIndData;
<a name="l00214"></a>00214     <a class="code" href="namespacesubpavings.shtml#a7918dddb1a8e32f72835e1e7b4442ca6" title="Read in rvectors from a txt file.">readRvectorsFromTxt</a>(unlabIndData, simDataFilesVec[i], 0);
<a name="l00215"></a>00215     unlabDataVec.push_back(unlabIndData);
<a name="l00216"></a>00216   } <span class="comment">// end of putting simulated data into container</span>
<a name="l00217"></a>00217   
<a name="l00218"></a>00218   <span class="comment">//Make root box from all the data</span>
<a name="l00219"></a>00219   cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; endl;
<a name="l00220"></a>00220   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* histRoot;
<a name="l00221"></a>00221   histRoot = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>;
<a name="l00222"></a>00222         <span class="comment">//cout &lt;&lt; (*(dataPtr)).size() &lt;&lt; &quot;is the size of dataPtr AFTER iteration &quot;  &lt;&lt; endl;</span>
<a name="l00223"></a>00223   histRoot-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>((*dataPtr));
<a name="l00224"></a>00224   ivector pavingBox = histRoot-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l00225"></a>00225   <span class="comment">//find the data dimensions from the first datapoint</span>
<a name="l00226"></a>00226   <span class="keywordtype">size_t</span> dataDim = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(*(*dataPtr).begin()) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(*(*dataPtr).begin()) + 1;
<a name="l00227"></a>00227   cout &lt;&lt; <span class="stringliteral">&quot;Data has &quot;</span> &lt;&lt; dataDim &lt;&lt; <span class="stringliteral">&quot; dimensions.&quot;</span> &lt;&lt; endl;
<a name="l00228"></a>00228   
<a name="l00229"></a>00229   <span class="keyword">delete</span> dataPtr; <span class="comment">//we do not need this in memory</span>
<a name="l00230"></a>00230   <span class="keyword">delete</span> histRoot; <span class="comment">//we do not need this in memory</span>
<a name="l00231"></a>00231   <span class="comment">//-----end of setup to read in data files-------------------------------//</span>
<a name="l00232"></a>00232   
<a name="l00233"></a>00233   <span class="comment">//----go through each RVecData in unlabData for:-------------------------//</span>
<a name="l00234"></a>00234   <span class="comment">//1. point mass filtering</span>
<a name="l00235"></a>00235   <span class="comment">//2. build a histogram</span>
<a name="l00236"></a>00236   
<a name="l00237"></a>00237   <span class="comment">//Set up containers to contain weights for each mixture model</span>
<a name="l00238"></a>00238   vector&lt; map&lt;rvector, double, less&lt;rvector&gt; &gt; &gt; WeightPMVec;<span class="comment">//for point mass</span>
<a name="l00239"></a>00239   vector&lt;double&gt; WeightHistVec; <span class="comment">//for histogram</span>
<a name="l00240"></a>00240   vector&lt;double&gt; WeightPM;
<a name="l00241"></a>00241   
<a name="l00242"></a>00242     <span class="comment">//Set up containers to contain histogram objects</span>
<a name="l00243"></a>00243   vector&lt;AdaptiveHistogramCollator*&gt; vecMCMCHist; <span class="comment">//if method 2</span>
<a name="l00244"></a>00244 
<a name="l00245"></a>00245   <span class="comment">//Now loop through each RVecData</span>
<a name="l00246"></a>00246   vector&lt;RVecData&gt;::iterator unlabDataIt;
<a name="l00247"></a>00247   RVecData::iterator dataIt;
<a name="l00248"></a>00248   <span class="keywordtype">size_t</span> D = 0;
<a name="l00249"></a>00249   <span class="keywordflow">for</span> (unlabDataIt = unlabDataVec.begin(); unlabDataIt &lt; unlabDataVec.end(); 
<a name="l00250"></a>00250       unlabDataIt++) 
<a name="l00251"></a>00251   {
<a name="l00252"></a>00252     <span class="comment">//to label all output so that it is associated with the right data set</span>
<a name="l00253"></a>00253     ostringstream stmD;
<a name="l00254"></a>00254     stmD &lt;&lt; D+1;
<a name="l00255"></a>00255     
<a name="l00256"></a>00256     cout &lt;&lt; <span class="stringliteral">&quot;==============Simulated Data &quot;</span> &lt;&lt; D+1 &lt;&lt; <span class="stringliteral">&quot;==========&quot;</span> &lt;&lt; endl;
<a name="l00257"></a>00257     <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> labData; <span class="comment">//for point mass filtering </span>
<a name="l00258"></a>00258     <span class="keywordflow">if</span> (dataDim == 1) { <span class="comment">//for now, do this only in 1D</span>
<a name="l00259"></a>00259       <span class="comment">//make a map for value of x (the key) and each of its respective </span>
<a name="l00260"></a>00260       <span class="comment">//counts (the value)</span>
<a name="l00261"></a>00261       map&lt;rvector, size_t, less&lt;rvector&gt; &gt; CountsMap;
<a name="l00262"></a>00262       <span class="comment">//run a point mass filtering to get &quot;atomic&quot; points</span>
<a name="l00263"></a>00263       <a class="code" href="namespacesubpavings.shtml#a1e3a19279d328b2178aaac44beaaf2d6" title="Point mass filtering from data in a RVecData container. Takes an RVecData container and sieves throug...">pointMassFilter</a>((*unlabDataIt), CountsMap);
<a name="l00264"></a>00264   
<a name="l00265"></a>00265       <span class="comment">//Is there a more efficient way for the following:</span>
<a name="l00266"></a>00266       <span class="comment">//Iterate through the data set again. Label point-mass with 0 and </span>
<a name="l00267"></a>00267       <span class="comment">//the rest with 1.</span>
<a name="l00268"></a>00268       <span class="comment">//Also get a map for the EMF of  point mass data</span>
<a name="l00269"></a>00269       map&lt;rvector,double, less&lt;rvector&gt; &gt; EMFMap;
<a name="l00270"></a>00270       map&lt;rvector, double, less&lt;rvector&gt; &gt;::iterator EMFMapIt;
<a name="l00271"></a>00271       <a class="code" href="namespacesubpavings.shtml#ab434c49dd2b267948d0048075ab0298c" title="Labels an RVecData object and store as an RSSample object. Takes an RVecData container and its corres...">labelDataFromFilter</a>((*unlabDataIt), labData, CountsMap, EMFMap);
<a name="l00272"></a>00272           
<a name="l00273"></a>00273       <span class="comment">/*optional: output RSSample this to .txt</span>
<a name="l00274"></a>00274 <span class="comment">      vector&lt;LabPnt&gt;::iterator LabPntIt; //to iterate over labData.Samples</span>
<a name="l00275"></a>00275 <span class="comment">      string fileName = &quot;Labelled&quot;;</span>
<a name="l00276"></a>00276 <span class="comment">      fileName += simDataFilesVec[D];</span>
<a name="l00277"></a>00277 <span class="comment">      oftream os;</span>
<a name="l00278"></a>00278 <span class="comment">      os.open(fileName.c_str());</span>
<a name="l00279"></a>00279 <span class="comment">      for (LabPntIt = labData.Samples.begin(); LabPntIt &lt; labData.Samples.end();</span>
<a name="l00280"></a>00280 <span class="comment">        LabPntIt++) { ( *LabPntIt).Print(os);}</span>
<a name="l00281"></a>00281 <span class="comment">      os &lt;&lt; flush;</span>
<a name="l00282"></a>00282 <span class="comment">      */</span> <span class="comment">//end of optional output</span>
<a name="l00283"></a>00283     
<a name="l00284"></a>00284       <span class="comment">//Store the weights</span>
<a name="l00285"></a>00285       cout &lt;&lt; <span class="stringliteral">&quot;Atomic points and their EMFs&quot;</span> &lt;&lt; endl;
<a name="l00286"></a>00286       <span class="keywordtype">double</span> pmWeight = 0.0;
<a name="l00287"></a>00287       <span class="keywordtype">double</span> MaxpmWeight = 0.0;
<a name="l00288"></a>00288               rvector AtomWithMaxpm = EMFMap.begin()-&gt;first;
<a name="l00289"></a>00289       <span class="keywordflow">for</span> (EMFMapIt = EMFMap.begin(); EMFMapIt != EMFMap.end(); EMFMapIt++) {
<a name="l00290"></a>00290         <span class="keywordflow">if</span>(EMFMapIt-&gt;second &gt; MaxpmWeight) 
<a name="l00291"></a>00291         {<span class="comment">//a messy way to keep the max atom and weight...</span>
<a name="l00292"></a>00292           MaxpmWeight=EMFMapIt-&gt;second;
<a name="l00293"></a>00293           AtomWithMaxpm = EMFMapIt-&gt;first;
<a name="l00294"></a>00294         }
<a name="l00295"></a>00295         pmWeight += EMFMapIt-&gt;second;
<a name="l00296"></a>00296         <span class="keywordflow">if</span>( EMFMapIt-&gt;second &lt; 0.0)<span class="comment">// use &lt; to skip the ? below</span>
<a name="l00297"></a>00297         {
<a name="l00298"></a>00298           cout &lt;&lt; setprecision(16) &lt;&lt; EMFMapIt-&gt;first 
<a name="l00299"></a>00299           &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; EMFMapIt-&gt;second &lt;&lt; endl;
<a name="l00300"></a>00300           cout &lt;&lt; <span class="stringliteral">&quot;is this atomic in your experimental precision?&quot;</span> &lt;&lt; endl; getchar();
<a name="l00301"></a>00301         }
<a name="l00302"></a>00302       }
<a name="l00303"></a>00303       cout &lt;&lt; <span class="stringliteral">&quot;Maximum Weight of a set of Atoms of size &quot;</span>&lt;&lt; EMFMap.size() 
<a name="l00304"></a>00304         &lt;&lt; <span class="stringliteral">&quot; is &quot;</span> &lt;&lt; MaxpmWeight &lt;&lt; <span class="stringliteral">&quot; at &quot;</span> &lt;&lt; AtomWithMaxpm &lt;&lt; endl;
<a name="l00305"></a>00305       WeightHistVec.push_back(1.0 - pmWeight);
<a name="l00306"></a>00306       WeightPMVec.push_back(EMFMap);
<a name="l00307"></a>00307       WeightPM.push_back(pmWeight);
<a name="l00308"></a>00308     
<a name="l00309"></a>00309       <span class="comment">//output the weights for the point mass so that we can plot the point mass</span>
<a name="l00310"></a>00310       <span class="comment">//and the normalised histogram</span>
<a name="l00311"></a>00311       <span class="keywordtype">string</span> weightFileName = dirName;
<a name="l00312"></a>00312       weightFileName += <span class="stringliteral">&quot;Weights&quot;</span>;
<a name="l00313"></a>00313       weightFileName += stmD.str();
<a name="l00314"></a>00314       weightFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00315"></a>00315       os.open(weightFileName.c_str());
<a name="l00316"></a>00316       map&lt;rvector, double, less&lt;rvector&gt; &gt; ::iterator mapIt;
<a name="l00317"></a>00317       <span class="keywordflow">for</span> (mapIt = (EMFMap).begin(); mapIt != (EMFMap).end(); mapIt++) {
<a name="l00318"></a>00318         os &lt;&lt; mapIt-&gt;second &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; mapIt-&gt;first;
<a name="l00319"></a>00319       }
<a name="l00320"></a>00320       os &lt;&lt; endl;
<a name="l00321"></a>00321       os &lt;&lt; flush;
<a name="l00322"></a>00322       os.close();
<a name="l00323"></a>00323       cout &lt;&lt; <span class="stringliteral">&quot;Weights output to &quot;</span> &lt;&lt; weightFileName &lt;&lt; endl; 
<a name="l00324"></a>00324       cout &lt;&lt; <span class="stringliteral">&quot;=================================================&quot;</span> &lt;&lt; endl;
<a name="l00325"></a>00325     } <span class="comment">// end of point mass filtering for 1D</span>
<a name="l00326"></a>00326   
<a name="l00327"></a>00327   
<a name="l00328"></a>00328   
<a name="l00329"></a>00329 
<a name="l00330"></a>00330 
<a name="l00331"></a>00331     cout &lt;&lt; <span class="stringliteral">&quot;\nMaking histogram for simulated data in &quot;</span> &lt;&lt; simDataFilesVec[D] 
<a name="l00332"></a>00332         &lt;&lt; endl;
<a name="l00333"></a>00333 <span class="comment">// start by making the histograms that are the starting points for our chains</span>
<a name="l00334"></a>00334     <span class="comment">// Gelman and Carlin [1996] recommend ten or more chains if the target</span>
<a name="l00335"></a>00335     <span class="comment">// distribution is unimodal (Martinez and Martinze, 2000, p. 453)</span>
<a name="l00336"></a>00336     <span class="comment">// the starting points are chosen to be widely dispersed</span>
<a name="l00337"></a>00337     <span class="keywordtype">bool</span> successfulInsertionFirst, successfulInsertionSecond, successfulInsertionThird;
<a name="l00338"></a>00338     <span class="keywordtype">bool</span> successfulPQSplitSecond;
<a name="l00339"></a>00339 
<a name="l00340"></a>00340     <span class="comment">//pointers to Adaptivehistogram objects as starting conditions</span>
<a name="l00341"></a>00341     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistFirst;
<a name="l00342"></a>00342     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>* myHistSecond;
<a name="l00343"></a>00343 
<a name="l00344"></a>00344     <span class="keywordflow">if</span> (dataDim == 1) {
<a name="l00345"></a>00345       <span class="comment">//histogram 1</span>
<a name="l00346"></a>00346       myHistFirst = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
<a name="l00347"></a>00347       <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie into root box</span>
<a name="l00348"></a>00348       successfulInsertionFirst = myHistFirst-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6f049bec17097067ae9e2a7c9f42bd60">insertFromRSSample</a>(labData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 1);
<a name="l00349"></a>00349       
<a name="l00350"></a>00350       <span class="comment">//histogram 2</span>
<a name="l00351"></a>00351       myHistSecond = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
<a name="l00352"></a>00352       <span class="comment">// the same data into the second histogram</span>
<a name="l00353"></a>00353       successfulInsertionSecond = myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6f049bec17097067ae9e2a7c9f42bd60">insertFromRSSample</a>(labData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 1);
<a name="l00354"></a>00354       successfulPQSplitSecond = <span class="keyword">false</span>;
<a name="l00355"></a>00355       <span class="keywordflow">if</span> (successfulInsertionSecond) {
<a name="l00356"></a>00356         <span class="comment">// set up function objects for a priority split</span>
<a name="l00357"></a>00357         <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
<a name="l00358"></a>00358         <span class="comment">// split until number of leaves is &gt;= minLeaves</span>
<a name="l00359"></a>00359         <span class="keywordtype">size_t</span> minLeaves = 10;
<a name="l00360"></a>00360         <span class="comment">//size_t minLeaves = (labData.Samples.size()/50); // 20 when n = 1000</span>
<a name="l00361"></a>00361         <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critLeavesGTE(minLeaves);
<a name="l00362"></a>00362         <span class="keywordtype">size_t</span> minPQPoints = 1; <span class="comment">// minimum of one data point in each box</span>
<a name="l00363"></a>00363         <span class="comment">// do the priority split</span>
<a name="l00364"></a>00364         successfulPQSplitSecond = myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount,
<a name="l00365"></a>00365              critLeavesGTE, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints); <span class="comment">// no logging</span>
<a name="l00366"></a>00366       }
<a name="l00367"></a>00367       
<a name="l00368"></a>00368     } <span class="comment">//end of making starting conditions for dataDim = 1</span>
<a name="l00369"></a>00369     
<a name="l00370"></a>00370     <span class="keywordflow">else</span> { <span class="comment">// at current i do not have a point-mass filter set up for data with &gt; 1. </span>
<a name="l00371"></a>00371          <span class="comment">// But should bring in Jenny&#39;s code for filtering.</span>
<a name="l00372"></a>00372       <span class="comment">//histogram 1</span>
<a name="l00373"></a>00373       myHistFirst = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
<a name="l00374"></a>00374       <span class="comment">// put in the data in a &#39;pulse&#39; with no splitting, ie into root box</span>
<a name="l00375"></a>00375       successfulInsertionFirst = myHistFirst-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>((*unlabDataIt), <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00376"></a>00376       
<a name="l00377"></a>00377       <span class="comment">//histogram 2</span>
<a name="l00378"></a>00378       myHistSecond = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>(pavingBox);
<a name="l00379"></a>00379       <span class="comment">// the same data into the second histogram</span>
<a name="l00380"></a>00380       successfulInsertionSecond = myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>((*unlabDataIt), <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00381"></a>00381       successfulPQSplitSecond = <span class="keyword">false</span>;
<a name="l00382"></a>00382       <span class="keywordflow">if</span> (successfulInsertionSecond) {
<a name="l00383"></a>00383         <span class="comment">// set up function objects for a priority split</span>
<a name="l00384"></a>00384         <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
<a name="l00385"></a>00385         <span class="comment">// split until number of leaves is &gt;= minLeaves</span>
<a name="l00386"></a>00386         <span class="comment">//size_t minLeaves = 50;</span>
<a name="l00387"></a>00387         <span class="keywordtype">size_t</span> minLeaves = ((*unlabDataIt).size()/50); <span class="comment">// 20 when n = 1000</span>
<a name="l00388"></a>00388         <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critLeavesGTE(minLeaves);
<a name="l00389"></a>00389         <span class="keywordtype">size_t</span> minPQPoints = 1; <span class="comment">// minimum of one data point in each box</span>
<a name="l00390"></a>00390         <span class="comment">// do the priority split</span>
<a name="l00391"></a>00391         successfulPQSplitSecond = myHistSecond-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount,
<a name="l00392"></a>00392              critLeavesGTE, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints); <span class="comment">// no logging</span>
<a name="l00393"></a>00393       }
<a name="l00394"></a>00394     } <span class="comment">// end of making histograms for dataDim &gt; 1</span>
<a name="l00395"></a>00395 
<a name="l00396"></a>00396 <span class="preprocessor">    #ifdef FORCEFAILINSERTION</span>
<a name="l00397"></a>00397 <span class="preprocessor"></span>      <span class="comment">// debugging - force a failure here to check what program does</span>
<a name="l00398"></a>00398       successfulInsertionThird = <span class="keyword">false</span>;
<a name="l00399"></a>00399 <span class="preprocessor">    #endif</span>
<a name="l00400"></a>00400 <span class="preprocessor"></span>
<a name="l00401"></a>00401     <span class="comment">// set up for MCMC</span>
<a name="l00402"></a>00402     <span class="comment">// our return object, if all goes well</span>
<a name="l00403"></a>00403     <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>* myCollPtr;
<a name="l00404"></a>00404     myCollPtr = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>; 
<a name="l00405"></a>00405   
<a name="l00406"></a>00406     <span class="comment">//set up for output</span>
<a name="l00407"></a>00407     <span class="comment">// use the cxsc manipulators for changing printing of cxsc::reals to console</span>
<a name="l00408"></a>00408     <span class="keywordtype">int</span> prec = 15;
<a name="l00409"></a>00409     cout &lt;&lt; cxsc::SaveOpt;
<a name="l00410"></a>00410     cout &lt;&lt; cxsc::Variable;
<a name="l00411"></a>00411     cout &lt;&lt; cxsc::SetPrecision(prec+2, prec);
<a name="l00412"></a>00412   
<a name="l00413"></a>00413     <span class="keywordflow">if</span> (successfulInsertionFirst &amp;&amp; successfulPQSplitSecond) {
<a name="l00414"></a>00414       <span class="comment">// containers for adaptive histograms</span>
<a name="l00415"></a>00415       <span class="comment">// the starting points of the chains</span>
<a name="l00416"></a>00416       vector&lt; AdaptiveHistogram* &gt; hists;
<a name="l00417"></a>00417       hists.push_back(myHistFirst);
<a name="l00418"></a>00418       hists.push_back(myHistSecond);
<a name="l00419"></a>00419       
<a name="l00420"></a>00420 
<a name="l00421"></a>00421       <span class="comment">// how many chains are to be run = number starting histograms</span>
<a name="l00422"></a>00422       <span class="keywordtype">size_t</span> chains = hists.size(); 
<a name="l00423"></a>00423     
<a name="l00424"></a>00424       <span class="keywordflow">if</span> (chains &lt; 2) {
<a name="l00425"></a>00425         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Chains &lt; 2&quot;</span>);
<a name="l00426"></a>00426       }
<a name="l00427"></a>00427 
<a name="l00428"></a>00428     <span class="comment">// set up proposal distribution object</span>
<a name="l00429"></a>00429     <a class="code" href="classsubpavings_1_1UniformProposal.shtml">UniformProposal</a> proposal;
<a name="l00430"></a>00430     <span class="comment">// set up prior distribution object</span>
<a name="l00431"></a>00431     <a class="code" href="classsubpavings_1_1LogCatalanPrior.shtml" title="A class for a log prior based on a Catalan number prior.">LogCatalanPrior</a> logPrior;
<a name="l00432"></a>00432 
<a name="l00433"></a>00433     <span class="keywordtype">size_t</span> minPoints = 0;
<a name="l00434"></a>00434     
<a name="l00435"></a>00435     <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>; <span class="comment">// leave it like this!</span>
<a name="l00436"></a>00436     <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> loggingInChangeStates = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>;
<a name="l00437"></a>00437 
<a name="l00438"></a>00438     gsl_rng * rgsl = NULL;
<a name="l00439"></a>00439 
<a name="l00440"></a>00440     <span class="comment">// should check that each hist to be done has a paving</span>
<a name="l00441"></a>00441 
<a name="l00442"></a>00442     <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l00443"></a>00443     <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l00444"></a>00444     <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l00445"></a>00445     <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l00446"></a>00446     gsl_rng_env_setup();
<a name="l00447"></a>00447     tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l00448"></a>00448     rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l00449"></a>00449     
<a name="l00450"></a>00450     <span class="comment">// set a seed for the data</span>
<a name="l00451"></a>00451     <span class="keywordtype">int</span> mcmcSeed = 1234;
<a name="l00452"></a>00452     gsl_rng_set(rgsl, mcmcSeed); <span class="comment">// change the seed to our seed</span>
<a name="l00453"></a>00453 
<a name="l00454"></a>00454     <span class="comment">// set up containers for the stuff we need pass to the MCMC engine</span>
<a name="l00455"></a>00455     vector&lt;SPSnodeList&gt; nodeLists(chains);
<a name="l00456"></a>00456     <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> numLeavesVec(chains);
<a name="l00457"></a>00457     <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> numCherriesVec(chains);
<a name="l00458"></a>00458 
<a name="l00459"></a>00459     vector&lt;string&gt; sequenceStateFilenames(chains);
<a name="l00460"></a>00460     vector&lt;string&gt; sequenceAverageFilenames(chains);
<a name="l00461"></a>00461     vector&lt;string&gt; sequenceCollationFilenames(chains);
<a name="l00462"></a>00462     vector&lt;string&gt; sequenceDiffsToAverageFilenames(chains);
<a name="l00463"></a>00463     
<a name="l00464"></a>00464     std::string baseSequenceStateFilename = dirName;
<a name="l00465"></a>00465     baseSequenceStateFilename += <span class="stringliteral">&quot;SequenceStates&quot;</span>;
<a name="l00466"></a>00466     std::string baseSequenceStateCollationFilename = dirName;
<a name="l00467"></a>00467     baseSequenceStateCollationFilename += <span class="stringliteral">&quot;SequenceStateCollations&quot;</span>;
<a name="l00468"></a>00468     std::string baseSequenceStateAverageFilename = dirName;
<a name="l00469"></a>00469     baseSequenceStateAverageFilename += <span class="stringliteral">&quot;SequenceStateAverages&quot;</span>;
<a name="l00470"></a>00470     std::string baseSequenceStateDiffsToAverageFilename = dirName;
<a name="l00471"></a>00471     baseSequenceStateDiffsToAverageFilename +=  <span class="stringliteral">&quot;SequenceStateDiffsToAverage&quot;</span>;
<a name="l00472"></a>00472     
<a name="l00473"></a>00473     <span class="comment">// files for outputing samples</span>
<a name="l00474"></a>00474     std::string samplesCollFilename = dirName;
<a name="l00475"></a>00475     samplesCollFilename += <span class="stringliteral">&quot;CollatedSamplesFromMCMCGRAuto.txt&quot;</span>;
<a name="l00476"></a>00476     std::string samplesLogFilename = dirName;
<a name="l00477"></a>00477     samplesLogFilename += <span class="stringliteral">&quot;LogSamplesFromMCMCGRAuto.txt&quot;</span>;
<a name="l00478"></a>00478     <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesCollFilename);
<a name="l00479"></a>00479     
<a name="l00480"></a>00480     <span class="comment">// names for leaves related stuff</span>
<a name="l00481"></a>00481     vector&lt;string&gt; leavesColNames(chains);
<a name="l00482"></a>00482     vector&lt;string&gt; leavesRunningSumColNames(chains);
<a name="l00483"></a>00483     vector&lt;string&gt; leavesSampleVarianceColNames(chains);
<a name="l00484"></a>00484     std::string  baseLeavesColName = dirName;
<a name="l00485"></a>00485     baseLeavesColName += <span class="stringliteral">&quot;leaves_&quot;</span>;
<a name="l00486"></a>00486     std::string  baseLeavesRunningSumColName = dirName;
<a name="l00487"></a>00487     baseLeavesRunningSumColName += <span class="stringliteral">&quot;leavesSum_&quot;</span>;
<a name="l00488"></a>00488     std::string  baseLeavesSampleVarianceColName = dirName;
<a name="l00489"></a>00489     baseLeavesSampleVarianceColName += <span class="stringliteral">&quot;leavesVar_&quot;</span>;
<a name="l00490"></a>00490     std::string overallLeavesRunningSumColName = dirName;
<a name="l00491"></a>00491     overallLeavesRunningSumColName += <span class="stringliteral">&quot;OverallLeavesSum&quot;</span>;
<a name="l00492"></a>00492     
<a name="l00493"></a>00493     <span class="comment">// names for L1 related stuff</span>
<a name="l00494"></a>00494     vector&lt;string&gt; L1ColNames(chains);
<a name="l00495"></a>00495     vector&lt;string&gt; L1RunningSumColNames(chains);
<a name="l00496"></a>00496     vector&lt;string&gt; L1SampleVarianceColNames(chains);
<a name="l00497"></a>00497     std::string baseL1ColName = dirName;
<a name="l00498"></a>00498     baseL1ColName += <span class="stringliteral">&quot;L1_&quot;</span>;
<a name="l00499"></a>00499     std::string baseL1RunningSumColName = dirName;
<a name="l00500"></a>00500     baseL1RunningSumColName += <span class="stringliteral">&quot;L1Sum_&quot;</span>;
<a name="l00501"></a>00501     std::string baseL1SampleVarianceColName = dirName;
<a name="l00502"></a>00502     baseL1SampleVarianceColName += <span class="stringliteral">&quot;L1Var_&quot;</span>;
<a name="l00503"></a>00503     std::string overallL1RunningSumColName = dirName;
<a name="l00504"></a>00504     overallL1RunningSumColName += <span class="stringliteral">&quot;OverallL1Sum&quot;</span>;
<a name="l00505"></a>00505     
<a name="l00506"></a>00506     
<a name="l00507"></a>00507     <span class="comment">// should realy check on LOGSAMPLESANDGRAPH as well here</span>
<a name="l00508"></a>00508     <span class="comment">// but at the moment I have not done anything about graphing</span>
<a name="l00509"></a>00509     <span class="keywordflow">if</span> (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) {
<a name="l00510"></a>00510       <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesLogFilename);
<a name="l00511"></a>00511     }
<a name="l00512"></a>00512     
<a name="l00513"></a>00513     <span class="comment">//std::string overSequenceAvgCollFilename = &quot;CollationsOfAveragesOverSequences.txt&quot;;</span>
<a name="l00514"></a>00514     <span class="comment">//outputFileStart(overSequenceAvgCollFilename);</span>
<a name="l00515"></a>00515     
<a name="l00516"></a>00516     <span class="comment">// a name for the file of diagnostics  for leaves</span>
<a name="l00517"></a>00517     std::string GRLeavesFilename = dirName;
<a name="l00518"></a>00518     GRLeavesFilename += <span class="stringliteral">&quot;GelmanRubinLeavesScalar.txt&quot;</span>;
<a name="l00519"></a>00519     <span class="comment">//outputFileStart(GRL1Filename);</span>
<a name="l00520"></a>00520     
<a name="l00521"></a>00521     <span class="comment">// a name for a file of the leaves v_ij scalars</span>
<a name="l00522"></a>00522     std::string GR_vij_as_Leaves_Filename  = dirName;
<a name="l00523"></a>00523     GR_vij_as_Leaves_Filename += <span class="stringliteral">&quot;LeavesScalar.txt&quot;</span>;
<a name="l00524"></a>00524     
<a name="l00525"></a>00525     <span class="comment">// a name for the file of working calculations for the leaves scalar diagnostics </span>
<a name="l00526"></a>00526     std::string GRLeavesWorkingCalcsFilename = dirName;
<a name="l00527"></a>00527     GRLeavesWorkingCalcsFilename += <span class="stringliteral">&quot;GelmanRubinLeavesScalarWorkingCalcs.txt&quot;</span>;
<a name="l00528"></a>00528     <span class="comment">//outputFileStart(GRL1WorkingCalcsFilename);</span>
<a name="l00529"></a>00529     
<a name="l00530"></a>00530     <span class="comment">// a name for the file of diagnostics  for L1</span>
<a name="l00531"></a>00531     std::string GRL1Filename = dirName;
<a name="l00532"></a>00532     GRL1Filename += <span class="stringliteral">&quot;GelmanRubinL1Scalar.txt&quot;</span>;
<a name="l00533"></a>00533     <span class="comment">//outputFileStart(GRL1Filename);</span>
<a name="l00534"></a>00534     
<a name="l00535"></a>00535     <span class="comment">// addition to output the L1 distances (v_ij&#39;s)</span>
<a name="l00536"></a>00536     <span class="comment">// a name for a file of the L1 v_ij scalars</span>
<a name="l00537"></a>00537     std::string GR_vij_as_L1_Filename  =  dirName;
<a name="l00538"></a>00538     GR_vij_as_L1_Filename += <span class="stringliteral">&quot;L1Scalar.txt&quot;</span>;
<a name="l00539"></a>00539     
<a name="l00540"></a>00540     <span class="comment">// a name for the file of working calculations for the L1 scalar diagnostics </span>
<a name="l00541"></a>00541     std::string GRL1WorkingCalcsFilename = dirName;
<a name="l00542"></a>00542     GRL1WorkingCalcsFilename += <span class="stringliteral">&quot;GelmanRubinL1ScalarWorkingCalcs.txt&quot;</span>;
<a name="l00543"></a>00543     <span class="comment">//outputFileStart(GRL1WorkingCalcsFilename);</span>
<a name="l00544"></a>00544     
<a name="l00545"></a>00545     
<a name="l00546"></a>00546     
<a name="l00547"></a>00547     <span class="comment">/* containers for summaries for the </span>
<a name="l00548"></a>00548 <span class="comment">    * Leaves-distances-to-average scalar convergence diagnostics */</span>
<a name="l00549"></a>00549     
<a name="l00550"></a>00550     <span class="comment">/* note we don&#39;t need this for leaves */</span>
<a name="l00551"></a>00551     <span class="comment">//std::vector &lt; RealVec &gt; currentLeaves(chains); </span>
<a name="l00552"></a>00552 
<a name="l00553"></a>00553     <span class="comment">// one vector of leaves as a RealVec for each chain</span>
<a name="l00554"></a>00554     std::vector &lt; RealVec &gt;* leavesPtr = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains);  
<a name="l00555"></a>00555 
<a name="l00556"></a>00556     <span class="comment">/* vector containing one running sum of leaves for each chain</span>
<a name="l00557"></a>00557 <span class="comment">    we can work out the average v = leaves for each chain so far from this</span>
<a name="l00558"></a>00558 <span class="comment">    start with a running sum of 0.0 for each chain */</span>
<a name="l00559"></a>00559     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* runningSumLeavesPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> (chains, cxsc::real(0.0));
<a name="l00560"></a>00560     
<a name="l00561"></a>00561     <span class="comment">/* vector containing one running sum of </span>
<a name="l00562"></a>00562 <span class="comment">    squared leaves for each chain</span>
<a name="l00563"></a>00563 <span class="comment">    we can work out the average of the squared v&#39;s ie v^2 = leaves^2</span>
<a name="l00564"></a>00564 <span class="comment">    for each chain so far from this</span>
<a name="l00565"></a>00565 <span class="comment">    start with a running sum of 0.0 for each chain.</span>
<a name="l00566"></a>00566 <span class="comment">    (Use a dotprecision for each running sum to keep accuracy </span>
<a name="l00567"></a>00567 <span class="comment">    when accumulating products of reals) */</span>
<a name="l00568"></a>00568     <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a> runningSumLeavesSquared(chains, cxsc::dotprecision(0.0));
<a name="l00569"></a>00569 
<a name="l00570"></a>00570     <span class="comment">/* value of running sum of leaves over all chains</span>
<a name="l00571"></a>00571 <span class="comment">    we can work out the average v = leaves over all chains so far from this */</span>
<a name="l00572"></a>00572     real runningSumLeavesAllChains = cxsc::real(0.0);
<a name="l00573"></a>00573     
<a name="l00574"></a>00574 <span class="preprocessor">    #ifdef MYDEBUG</span>
<a name="l00575"></a>00575 <span class="preprocessor"></span>      <span class="comment">// keep a vector of all the overall running sums as well</span>
<a name="l00576"></a>00576       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* runningSumLeavesOverallPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>();
<a name="l00577"></a>00577       <span class="comment">// keep a vector of the runningsums for each chain as well</span>
<a name="l00578"></a>00578       std::vector &lt; RealVec &gt;* runningSumLeavesChainsPtr 
<a name="l00579"></a>00579                 = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains);
<a name="l00580"></a>00580       <span class="comment">// keep a vector of the sample variances for each chain as well</span>
<a name="l00581"></a>00581       std::vector &lt; RealVec &gt;* sampleVariancesLeavesPtr 
<a name="l00582"></a>00582                 = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains,
<a name="l00583"></a>00583                   <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0)) );
<a name="l00584"></a>00584       <span class="comment">/* keep a vector of the flag for leaves convergence</span>
<a name="l00585"></a>00585 <span class="comment">       * (it&#39;s not a real, but easier to output it if we treat it like one) */</span>
<a name="l00586"></a>00586       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* rhatLeavesFlagPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0));
<a name="l00587"></a>00587       
<a name="l00588"></a>00588 <span class="preprocessor">    #endif</span>
<a name="l00589"></a>00589 <span class="preprocessor"></span>
<a name="l00590"></a>00590     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* Ws_leavesPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real (0.0) ); <span class="comment">// to hold the Ws_leaves</span>
<a name="l00591"></a>00591     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* Bs_leavesPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real (0.0) ); <span class="comment">// to hold the Bs_leaves</span>
<a name="l00592"></a>00592     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* estVarV_leavesPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real (0.0) ); <span class="comment">// to hold the estimated var(v) for leaves</span>
<a name="l00593"></a>00593     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* rhat_leavesPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real (0.0) ); <span class="comment">// to hold the rhats for leaves</span>
<a name="l00594"></a>00594 
<a name="l00595"></a>00595     
<a name="l00596"></a>00596     <span class="comment">// ------------------------------------</span>
<a name="l00597"></a>00597     
<a name="l00598"></a>00598     
<a name="l00599"></a>00599     <span class="comment">/* ------------------------------------</span>
<a name="l00600"></a>00600 <span class="comment">     * containers for summaries for the </span>
<a name="l00601"></a>00601 <span class="comment">    * L1-distances-to-average scalar convergence diagnostics */</span>
<a name="l00602"></a>00602     
<a name="l00603"></a>00603     <span class="comment">/* for each chain we need a container for current L1-distances-to-average </span>
<a name="l00604"></a>00604 <span class="comment">     * relative to the current average for all histogram states in the chain so far.</span>
<a name="l00605"></a>00605 <span class="comment">     * This is reused and overwritten each time a state is added to the chain</span>
<a name="l00606"></a>00606 <span class="comment">     * and is just a working-space to facilitate getting the L1s we want. */</span>
<a name="l00607"></a>00607     std::vector &lt; RealVec &gt; currentL1s(chains); 
<a name="l00608"></a>00608 
<a name="l00609"></a>00609     <span class="comment">// one vector of L1-distances-to-average as a RealVec for each chain</span>
<a name="l00610"></a>00610     std::vector &lt; RealVec &gt;* distancesL1Ptr = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains);  
<a name="l00611"></a>00611 
<a name="l00612"></a>00612     <span class="comment">/* vector containing one running sum of L1-distances-to-average for each chain</span>
<a name="l00613"></a>00613 <span class="comment">    we can work out the average v = L1 for each chain so far from this</span>
<a name="l00614"></a>00614 <span class="comment">    start with a running sum of 0.0 for each chain */</span>
<a name="l00615"></a>00615     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* runningSumL1Ptr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> (chains, cxsc::real(0.0));
<a name="l00616"></a>00616     
<a name="l00617"></a>00617     <span class="comment">/* vector containing one running sum of </span>
<a name="l00618"></a>00618 <span class="comment">    squared-L1-distances-to-average for each chain</span>
<a name="l00619"></a>00619 <span class="comment">    we can work out the average of the squared v&#39;s ie v^2 = L1^2</span>
<a name="l00620"></a>00620 <span class="comment">    for each chain so far from this</span>
<a name="l00621"></a>00621 <span class="comment">    start with a running sum of 0.0 for each chain.</span>
<a name="l00622"></a>00622 <span class="comment">    (Use a dotprecision for each running sum to keep accuracy </span>
<a name="l00623"></a>00623 <span class="comment">    when accumulating products of reals) */</span>
<a name="l00624"></a>00624     <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a> runningSumL1Squared(chains, cxsc::dotprecision(0.0));
<a name="l00625"></a>00625 
<a name="l00626"></a>00626     <span class="comment">/* value of running sum of L1-distances-to-average over all chains</span>
<a name="l00627"></a>00627 <span class="comment">    we can work out the average v = L1 over all chains so far from this */</span>
<a name="l00628"></a>00628     real runningSumL1AllChains = cxsc::real(0.0);
<a name="l00629"></a>00629     
<a name="l00630"></a>00630 <span class="preprocessor">    #ifdef MYDEBUG</span>
<a name="l00631"></a>00631 <span class="preprocessor"></span>      <span class="comment">// keep a vector of all the overall running sums as well</span>
<a name="l00632"></a>00632       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* runningSumL1OverallPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>();
<a name="l00633"></a>00633       <span class="comment">// keep a vector of the runningsums for each chain as well</span>
<a name="l00634"></a>00634       std::vector &lt; RealVec &gt;* runningSumL1ChainsPtr 
<a name="l00635"></a>00635                 = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains);
<a name="l00636"></a>00636       <span class="comment">// keep a vector of the sample variances for each chain as well</span>
<a name="l00637"></a>00637       std::vector &lt; RealVec &gt;* sampleVariancesL1Ptr 
<a name="l00638"></a>00638                 = <span class="keyword">new</span> std::vector &lt; RealVec &gt;(chains,
<a name="l00639"></a>00639                   <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0)) );
<a name="l00640"></a>00640       <span class="comment">/* keep a vector of the flag for L1 convergence</span>
<a name="l00641"></a>00641 <span class="comment">       * (it&#39;s not a real, but easier to output it if we treat it like one) */</span>
<a name="l00642"></a>00642       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* rhatL1FlagPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0));
<a name="l00643"></a>00643 <span class="preprocessor">    #endif  </span>
<a name="l00644"></a>00644 <span class="preprocessor"></span>    
<a name="l00645"></a>00645     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* Ws_L1Ptr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real (0.0) ); <span class="comment">// to hold the Ws_L1</span>
<a name="l00646"></a>00646     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* Bs_L1Ptr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real (0.0) ); <span class="comment">// to hold the Bs_L1</span>
<a name="l00647"></a>00647     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* estVarV_L1Ptr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real (0.0) ); <span class="comment">// to hold the estimated var(v) for L1</span>
<a name="l00648"></a>00648     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* rhat_L1Ptr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real (0.0) ); <span class="comment">// to hold the rhats for L1</span>
<a name="l00649"></a>00649     
<a name="l00650"></a>00650     <span class="comment">// ------------------------------------</span>
<a name="l00651"></a>00651 
<a name="l00652"></a>00652 <span class="preprocessor">    #ifdef MYDEBUG</span>
<a name="l00653"></a>00653 <span class="preprocessor"></span>      <span class="comment">/* keep a vector of indicators for whether a state was sampled</span>
<a name="l00654"></a>00654 <span class="comment">       * (not a real, but easier to output it if we treat it like one) */</span>
<a name="l00655"></a>00655       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>* sampledIndPtr = <span class="keyword">new</span> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>(1, cxsc::real(0.0));
<a name="l00656"></a>00656 <span class="preprocessor">    #endif</span>
<a name="l00657"></a>00657 <span class="preprocessor"></span>
<a name="l00658"></a>00658 
<a name="l00659"></a>00659     <span class="comment">// container of each state at each sequence</span>
<a name="l00660"></a>00660     vector&lt;AdaptiveHistogramCollator*&gt; sequenceCollators;
<a name="l00661"></a>00661 
<a name="l00662"></a>00662     <span class="comment">//container for the collation of the averages over each sequence at each state</span>
<a name="l00663"></a>00663     <span class="comment">//vector&lt;AdaptiveHistogramCollator*&gt; averageCollators;</span>
<a name="l00664"></a>00664 
<a name="l00665"></a>00665     <span class="comment">//AdaptiveHistogramCollator masterCollator; // not newed so no need to delete</span>
<a name="l00666"></a>00666 
<a name="l00667"></a>00667     <span class="keywordtype">bool</span> cancontinue = <span class="keyword">true</span>;
<a name="l00668"></a>00668 
<a name="l00669"></a>00669     <span class="comment">/* need to accumulate sum over all chains of the square of </span>
<a name="l00670"></a>00670 <span class="comment">     * the running sum of leaves </span>
<a name="l00671"></a>00671 <span class="comment">     * for each chain for this starting state */</span>
<a name="l00672"></a>00672     cxsc::real initialSumOfSquaresOfRunningSumsLeaves(0.0);
<a name="l00673"></a>00673     
<a name="l00674"></a>00674     <span class="comment">// this loop is just setting up containers of file names</span>
<a name="l00675"></a>00675     <span class="comment">// and getting info from the starting histograms that is</span>
<a name="l00676"></a>00676     <span class="comment">// needed to start the chains</span>
<a name="l00677"></a>00677     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> ci = 0; ci &lt; chains; ci++) {
<a name="l00678"></a>00678       
<a name="l00679"></a>00679       <span class="comment">// do not comment these out</span>
<a name="l00680"></a>00680       std::ostringstream stm1;
<a name="l00681"></a>00681       stm1 &lt;&lt; baseSequenceStateFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00682"></a>00682       sequenceStateFilenames[ci] = stm1.str();
<a name="l00683"></a>00683       <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceStateFilenames[ci]);
<a name="l00684"></a>00684       
<a name="l00685"></a>00685       <span class="comment">// addition to output the L1 distances (v_ij&#39;s)</span>
<a name="l00686"></a>00686       <span class="comment">// moved this code out of the ifdef MYDEBUG section below</span>
<a name="l00687"></a>00687       {
<a name="l00688"></a>00688         std::ostringstream stm;
<a name="l00689"></a>00689         stm &lt;&lt; baseL1ColName &lt;&lt; ci;
<a name="l00690"></a>00690         L1ColNames[ci] = stm.str();
<a name="l00691"></a>00691       }
<a name="l00692"></a>00692       
<a name="l00693"></a>00693       {
<a name="l00694"></a>00694         std::ostringstream stm;
<a name="l00695"></a>00695         stm &lt;&lt; baseLeavesColName &lt;&lt; ci;
<a name="l00696"></a>00696         leavesColNames[ci] = stm.str();
<a name="l00697"></a>00697       }
<a name="l00698"></a>00698 
<a name="l00699"></a>00699 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l00700"></a>00700 <span class="preprocessor"></span>        {
<a name="l00701"></a>00701           std::ostringstream stm;
<a name="l00702"></a>00702           stm &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00703"></a>00703           sequenceCollationFilenames[ci] = stm.str();
<a name="l00704"></a>00704           <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceCollationFilenames[ci]);
<a name="l00705"></a>00705         }
<a name="l00706"></a>00706         {
<a name="l00707"></a>00707           std::ostringstream stm;
<a name="l00708"></a>00708           stm &lt;&lt; baseSequenceStateAverageFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00709"></a>00709           sequenceAverageFilenames[ci] = stm.str();
<a name="l00710"></a>00710           <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceAverageFilenames[ci]);
<a name="l00711"></a>00711         }
<a name="l00712"></a>00712         {
<a name="l00713"></a>00713           std::ostringstream stm;
<a name="l00714"></a>00714           stm &lt;&lt; baseSequenceStateDiffsToAverageFilename &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00715"></a>00715           sequenceDiffsToAverageFilenames[ci] = stm.str();
<a name="l00716"></a>00716           <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(sequenceDiffsToAverageFilenames[ci]);
<a name="l00717"></a>00717         }
<a name="l00718"></a>00718         
<a name="l00719"></a>00719         <span class="comment">// leaves</span>
<a name="l00720"></a>00720         {
<a name="l00721"></a>00721           std::ostringstream stm;
<a name="l00722"></a>00722           stm &lt;&lt; baseLeavesRunningSumColName &lt;&lt; ci;
<a name="l00723"></a>00723           leavesRunningSumColNames[ci] = stm.str();
<a name="l00724"></a>00724         }
<a name="l00725"></a>00725         
<a name="l00726"></a>00726         {
<a name="l00727"></a>00727           std::ostringstream stm;
<a name="l00728"></a>00728           stm &lt;&lt; baseLeavesSampleVarianceColName &lt;&lt; ci;
<a name="l00729"></a>00729           leavesSampleVarianceColNames[ci] = stm.str();
<a name="l00730"></a>00730         }
<a name="l00731"></a>00731         
<a name="l00732"></a>00732         <span class="comment">// L1 distances</span>
<a name="l00733"></a>00733         {
<a name="l00734"></a>00734           std::ostringstream stm;
<a name="l00735"></a>00735           stm &lt;&lt; baseL1RunningSumColName &lt;&lt; ci;
<a name="l00736"></a>00736           L1RunningSumColNames[ci] = stm.str();
<a name="l00737"></a>00737         }
<a name="l00738"></a>00738         
<a name="l00739"></a>00739         {
<a name="l00740"></a>00740           std::ostringstream stm;
<a name="l00741"></a>00741           stm &lt;&lt; baseL1SampleVarianceColName &lt;&lt; ci;
<a name="l00742"></a>00742           L1SampleVarianceColNames[ci] = stm.str();
<a name="l00743"></a>00743         }
<a name="l00744"></a>00744 <span class="preprocessor">      #endif</span>
<a name="l00745"></a>00745 <span class="preprocessor"></span>      <span class="comment">/* we only need to do this because we are doing a step-by-step change of the</span>
<a name="l00746"></a>00746 <span class="comment">      * histogram states &#39;from the outside&#39;, ie through this example:  we need to</span>
<a name="l00747"></a>00747 <span class="comment">      * collect the stuff the histogram&#39;s changeMCMCstate method needs to make one </span>
<a name="l00748"></a>00748 <span class="comment">      * change.  */</span>
<a name="l00749"></a>00749       
<a name="l00750"></a>00750       <span class="comment">// set up a container for the leaf children</span>
<a name="l00751"></a>00751       <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leafVec;
<a name="l00752"></a>00752       <span class="comment">// set up a container for the subleaf children</span>
<a name="l00753"></a>00753       <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> cherryVec;
<a name="l00754"></a>00754 
<a name="l00755"></a>00755       <span class="keywordtype">size_t</span> numLeaves = 0;
<a name="l00756"></a>00756       <span class="keywordtype">size_t</span> numCherries = 0;
<a name="l00757"></a>00757 
<a name="l00758"></a>00758       <span class="comment">// fill the container with the leaf children</span>
<a name="l00759"></a>00759       hists[ci]-&gt;getSubPaving()-&gt;getLeaves(leafVec);
<a name="l00760"></a>00760       <span class="comment">// fill the container with the subleaf children</span>
<a name="l00761"></a>00761       hists[ci]-&gt;getSubPaving()-&gt;getSubLeaves(cherryVec);
<a name="l00762"></a>00762 
<a name="l00763"></a>00763       numCherries = cherryVec.size();
<a name="l00764"></a>00764 
<a name="l00765"></a>00765       <span class="comment">// check if node is still splittable</span>
<a name="l00766"></a>00766       <span class="keywordflow">if</span> (!leafVec.empty()) {
<a name="l00767"></a>00767          <span class="comment">// but only put into the container the leaves which, if split,</span>
<a name="l00768"></a>00768          <span class="comment">// would have at least minPoints data points associated with them</span>
<a name="l00769"></a>00769          <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> lit;
<a name="l00770"></a>00770          <span class="keywordflow">for</span> (lit = leafVec.begin(); lit &lt; leafVec.end(); lit++) {
<a name="l00771"></a>00771             <span class="keywordflow">if</span> (((*lit)-&gt;getLeftCountIfSplit() &gt;= minPoints) &amp;&amp;
<a name="l00772"></a>00772               ((*lit)-&gt;getRightCountIfSplit() &gt;= minPoints)) {
<a name="l00773"></a>00773                  <span class="comment">// leaf can go into container</span>
<a name="l00774"></a>00774                  nodeLists[ci].push_back(*lit);
<a name="l00775"></a>00775                  numLeaves++;
<a name="l00776"></a>00776             }
<a name="l00777"></a>00777          }
<a name="l00778"></a>00778       }
<a name="l00779"></a>00779 
<a name="l00780"></a>00780       <span class="comment">// no need to check on cherries - they can all go in</span>
<a name="l00781"></a>00781       <span class="keywordflow">if</span> (numCherries &gt; 0)
<a name="l00782"></a>00782          nodeLists[ci].insert(nodeLists[ci].end(), cherryVec.begin(),
<a name="l00783"></a>00783                          cherryVec.end());
<a name="l00784"></a>00784       <span class="keywordflow">if</span> (nodeLists[ci].size() == 0) {
<a name="l00785"></a>00785          cancontinue = <span class="keyword">false</span>;
<a name="l00786"></a>00786          <span class="keywordflow">break</span>; <span class="comment">// break out of the for loop</span>
<a name="l00787"></a>00787          std::cout &lt;&lt; <span class="stringliteral">&quot;No changeable nodes given minPoints = &quot;</span>
<a name="l00788"></a>00788                  &lt;&lt; minPoints &lt;&lt; <span class="stringliteral">&quot; in histogram &quot;</span> &lt;&lt; ci
<a name="l00789"></a>00789                  &lt;&lt; <span class="stringliteral">&quot;. Sorry, aborting MCMC.&quot;</span> &lt;&lt; std::endl;
<a name="l00790"></a>00790       }
<a name="l00791"></a>00791 
<a name="l00792"></a>00792       numLeavesVec[ci] = numLeaves;
<a name="l00793"></a>00793       numCherriesVec[ci] = numCherries;
<a name="l00794"></a>00794 
<a name="l00795"></a>00795       <span class="comment">// note nothing in the sequence collators yet</span>
<a name="l00796"></a>00796 
<a name="l00797"></a>00797       <span class="comment">// initialise things for the collection of data on leaves</span>
<a name="l00798"></a>00798       
<a name="l00799"></a>00799       <span class="comment">// one vector of leaves for each chain</span>
<a name="l00800"></a>00800       <span class="comment">// record leaves for this first state</span>
<a name="l00801"></a>00801       cxsc::real lastStateLeaves(1.0*hists[ci]-&gt;getRootLeaves());
<a name="l00802"></a>00802       leavesPtr-&gt;at(ci).push_back( lastStateLeaves );  
<a name="l00803"></a>00803       
<a name="l00804"></a>00804       <span class="comment">// update the running sum of leaves for the chain, held in runningSumLeaves</span>
<a name="l00805"></a>00805       cxsc::real newRunningSumLeaves = runningSumLeavesPtr-&gt;at(ci) + lastStateLeaves;
<a name="l00806"></a>00806       runningSumLeavesPtr-&gt;at(ci) = newRunningSumLeaves;
<a name="l00807"></a>00807           
<a name="l00808"></a>00808       <span class="comment">// accumulate the square of the running sum of leaves </span>
<a name="l00809"></a>00809       initialSumOfSquaresOfRunningSumsLeaves += newRunningSumLeaves*newRunningSumLeaves;
<a name="l00810"></a>00810           
<a name="l00811"></a>00811       <span class="comment">/* update the running sum of squared leaves over this chain</span>
<a name="l00812"></a>00812 <span class="comment">       *  held in runningSumLeavesSquared as a dot precision */</span>
<a name="l00813"></a>00813       cxsc::accumulate( runningSumLeavesSquared[ci], lastStateLeaves, lastStateLeaves );
<a name="l00814"></a>00814       
<a name="l00815"></a>00815       <span class="comment">// update  the overall running sum runningSumLeavesAllChains </span>
<a name="l00816"></a>00816       runningSumLeavesAllChains += lastStateLeaves;
<a name="l00817"></a>00817       
<a name="l00818"></a>00818 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l00819"></a>00819 <span class="preprocessor"></span>        <span class="comment">//sampleVariancesLeavesPtr-&gt;at(ci) was initialised to 0.0</span>
<a name="l00820"></a>00820         runningSumLeavesChainsPtr-&gt;at(ci).push_back (newRunningSumLeaves);
<a name="l00821"></a>00821 <span class="preprocessor">      #endif</span>
<a name="l00822"></a>00822 <span class="preprocessor"></span>      
<a name="l00823"></a>00823       
<a name="l00824"></a>00824     } <span class="comment">// end loop through chains setting up things to be able to start</span>
<a name="l00825"></a>00825     
<a name="l00826"></a>00826 <span class="preprocessor">    #ifdef MYDEBUG</span>
<a name="l00827"></a>00827 <span class="preprocessor"></span>      <span class="comment">// store the current runningSumLeavesAllChains as well</span>
<a name="l00828"></a>00828       runningSumLeavesOverallPtr-&gt;push_back(runningSumLeavesAllChains);
<a name="l00829"></a>00829 <span class="preprocessor">    #endif    </span>
<a name="l00830"></a>00830 <span class="preprocessor"></span>    
<a name="l00831"></a>00831     <span class="comment">/* the overall running sum runningSumLeavesAllChains </span>
<a name="l00832"></a>00832 <span class="comment">     * was initialised to 0.0 </span>
<a name="l00833"></a>00833 <span class="comment">     * and #ifdef MYDEBUG, runningSumLeavesOverall was initialised to contain one 0.0 </span>
<a name="l00834"></a>00834 <span class="comment">     * and similarly rhatLeavesFlagPtr was initialised to contain one 0.0*/</span>
<a name="l00835"></a>00835     
<a name="l00836"></a>00836     
<a name="l00837"></a>00837     <span class="comment">/* and we started the convergence statistics for chains with just one state in</span>
<a name="l00838"></a>00838 <span class="comment">     * with one 0.0 in each (Ws, Bs, estVarsVs, rhats)</span>
<a name="l00839"></a>00839 <span class="comment">     * when we initialised */</span>
<a name="l00840"></a>00840     
<a name="l00841"></a>00841     <span class="keywordtype">bool</span> goodLoop = cancontinue;
<a name="l00842"></a>00842     
<a name="l00843"></a>00843     <span class="keywordflow">if</span> (cancontinue) cout &lt;&lt; <span class="stringliteral">&quot;About to do MCMC&quot;</span> &lt;&lt; endl;
<a name="l00844"></a>00844 
<a name="l00845"></a>00845     <span class="comment">/* set up some variables we need to keep track of states and sampling */</span>
<a name="l00846"></a>00846     
<a name="l00847"></a>00847     <span class="keywordtype">int</span> samplesSoFar = 0;
<a name="l00848"></a>00848     
<a name="l00849"></a>00849     <span class="keywordtype">size_t</span> states = 1;  <span class="comment">/* keep track of states in the chain = 1 so far,</span>
<a name="l00850"></a>00850 <span class="comment">              since state 1 is the initial histograms */</span>
<a name="l00851"></a>00851     
<a name="l00852"></a>00852     <span class="comment">/* varibles for monitoring convergence</span>
<a name="l00853"></a>00853 <span class="comment">     * we only have one scalar value at the moment (L1-distance-to-average) but</span>
<a name="l00854"></a>00854 <span class="comment">     * we might have more - might want convergence on all diagnostics */</span>
<a name="l00855"></a>00855     <span class="keywordtype">int</span> rhatFlagCounter = 0;
<a name="l00856"></a>00856     <span class="keywordtype">int</span> rhatL1Flag = 0; <span class="comment">// indicator for whether we are burntin on L1 scalar value</span>
<a name="l00857"></a>00857     <span class="keywordtype">int</span> rhatLeavesFlag = 0; <span class="comment">// indicator for whether we are burntin on L1 scalar value</span>
<a name="l00858"></a>00858 
<a name="l00859"></a>00859     <span class="comment">/* indicator for whether we have passed the first hurdle</span>
<a name="l00860"></a>00860 <span class="comment">    (the leaves convergence) and are now monitoring for </span>
<a name="l00861"></a>00861 <span class="comment">    actual burnin (note that the input parameter </span>
<a name="l00862"></a>00862 <span class="comment">    startWithFullChecks = 1 will effectively override the need to pass the</span>
<a name="l00863"></a>00863 <span class="comment">    first hurdle*/</span>
<a name="l00864"></a>00864     
<a name="l00865"></a>00865     <span class="keywordtype">int</span> doFullChecks = startWithFullChecks; 
<a name="l00866"></a>00866     
<a name="l00867"></a>00867     <span class="keywordtype">size_t</span> startFullChecks = 0; <span class="comment">// record the point where </span>
<a name="l00868"></a>00868                 <span class="comment">// we could start the full diagnostics checks</span>
<a name="l00869"></a>00869     
<a name="l00870"></a>00870     <span class="keywordtype">int</span> burntin = 0; <span class="comment">// indicator for whether we consider ourselves burntin yet</span>
<a name="l00871"></a>00871     
<a name="l00872"></a>00872     <span class="keywordtype">size_t</span> burntinReachedState = 0; <span class="comment">// keep track of when we (last) reached burnin</span>
<a name="l00873"></a>00873     
<a name="l00874"></a>00874     <span class="comment">// counter to keep track of loops</span>
<a name="l00875"></a>00875     <span class="keywordtype">int</span> loopCounter = 0;
<a name="l00876"></a>00876     
<a name="l00877"></a>00877     <span class="comment">/* We also need a collator for the samples*/</span>
<a name="l00878"></a>00878     <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>* samplesColl = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>();
<a name="l00879"></a>00879     
<a name="l00880"></a>00880     <span class="keywordflow">while</span> (goodLoop &amp;&amp; (loopCounter &lt; maxLoops) &amp;&amp; (samplesSoFar &lt; samplesNeeded)) {
<a name="l00881"></a>00881       
<a name="l00882"></a>00882 <span class="preprocessor">      #ifdef MYDEBUG_CALCS</span>
<a name="l00883"></a>00883 <span class="preprocessor"></span>        cout &lt;&lt; <span class="stringliteral">&quot;****** Change from state number &quot;</span> &lt;&lt; states &lt;&lt; <span class="stringliteral">&quot; ******&quot;</span> &lt;&lt; endl;
<a name="l00884"></a>00884 <span class="preprocessor">      #endif</span>
<a name="l00885"></a>00885 <span class="preprocessor"></span>      
<a name="l00886"></a>00886       loopCounter++;
<a name="l00887"></a>00887       
<a name="l00888"></a>00888       <span class="comment">/* if we want to do full checks, </span>
<a name="l00889"></a>00889 <span class="comment">       * but have not yet got the sequence collators</span>
<a name="l00890"></a>00890 <span class="comment">       * then we need to initialise before we change state */</span>
<a name="l00891"></a>00891       <span class="keywordflow">if</span> (doFullChecks &amp;&amp; sequenceCollators.empty()) {
<a name="l00892"></a>00892     
<a name="l00893"></a>00893         <span class="comment">// record when we started the full checks</span>
<a name="l00894"></a>00894         startFullChecks = states;
<a name="l00895"></a>00895         
<a name="l00896"></a>00896 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l00897"></a>00897 <span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;\nStarted full checks at state &quot;</span> &lt;&lt; startFullChecks &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; endl;
<a name="l00898"></a>00898 <span class="preprocessor">        #endif</span>
<a name="l00899"></a>00899 <span class="preprocessor"></span>        
<a name="l00900"></a>00900         <span class="comment">// initialise things using current histogram state</span>
<a name="l00901"></a>00901         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> ci = 0; ci &lt; chains; ++ci) {
<a name="l00902"></a>00902           
<a name="l00903"></a>00903           <span class="comment">/* set up one collator for each chain, </span>
<a name="l00904"></a>00904 <span class="comment">           * starting it with the histogram state right now */</span>
<a name="l00905"></a>00905           sequenceCollators.push_back( <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>( *hists[ci] ) );
<a name="l00906"></a>00906           
<a name="l00907"></a>00907           <span class="comment">// collect the calculations for the starting points - L1 distances</span>
<a name="l00908"></a>00908     
<a name="l00909"></a>00909           <span class="comment">// diff to average will be 0.0 since there is only one state in the collator</span>
<a name="l00910"></a>00910           distancesL1Ptr-&gt;at(ci).push_back( cxsc::real(0.0) ); 
<a name="l00911"></a>00911           
<a name="l00912"></a>00912 <span class="preprocessor">          #ifdef MYDEBUG</span>
<a name="l00913"></a>00913 <span class="preprocessor"></span>            runningSumL1ChainsPtr-&gt;at(ci).push_back( cxsc::real(0.0) );
<a name="l00914"></a>00914 <span class="preprocessor">          #endif</span>
<a name="l00915"></a>00915 <span class="preprocessor"></span>          
<a name="l00916"></a>00916           <span class="comment">/* #ifdef MYDEBUG, sampleVariancesL1Ptr vectors for each chain </span>
<a name="l00917"></a>00917 <span class="comment">           * started with one 0.0 in </span>
<a name="l00918"></a>00918 <span class="comment">           *</span>
<a name="l00919"></a>00919 <span class="comment">           * running sum of L1s for each chain, held in runningSumL1Ptr</span>
<a name="l00920"></a>00920 <span class="comment">          are all initialised to 0.0 already </span>
<a name="l00921"></a>00921 <span class="comment">          * </span>
<a name="l00922"></a>00922 <span class="comment">          * running sum of squared L1s for each chain, held in  runningSumL1SquaredPtr</span>
<a name="l00923"></a>00923 <span class="comment">          are all initialised to 0.0 already</span>
<a name="l00924"></a>00924 <span class="comment">          */</span> 
<a name="l00925"></a>00925           
<a name="l00926"></a>00926           
<a name="l00927"></a>00927 <span class="preprocessor">          #ifdef MYDEBUG_OUTPUT</span>
<a name="l00928"></a>00928 <span class="preprocessor"></span>          {
<a name="l00929"></a>00929             sequenceCollators[ci]-&gt;publicOutputLog(sequenceCollationFilenames[ci], 1);
<a name="l00930"></a>00930         
<a name="l00931"></a>00931             <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempavg
<a name="l00932"></a>00932                         = sequenceCollators[ci]-&gt;makeAverage();
<a name="l00933"></a>00933             colltempavg.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceAverageFilenames[ci], 1);
<a name="l00934"></a>00934             
<a name="l00935"></a>00935             <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempdiffs
<a name="l00936"></a>00936                         = sequenceCollators[ci]-&gt;makeDifferencesToAverage();
<a name="l00937"></a>00937             colltempdiffs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceDiffsToAverageFilenames[ci], 1);
<a name="l00938"></a>00938           } <span class="comment">// temp objects go out of scope here  </span>
<a name="l00939"></a>00939 <span class="preprocessor">          #endif</span>
<a name="l00940"></a>00940 <span class="preprocessor"></span>          
<a name="l00941"></a>00941         }
<a name="l00942"></a>00942         
<a name="l00943"></a>00943         <span class="comment">// do initial values for everything so far</span>
<a name="l00944"></a>00944         
<a name="l00945"></a>00945 <span class="preprocessor">         #ifdef MYDEBUG</span>
<a name="l00946"></a>00946 <span class="preprocessor"></span>          runningSumL1OverallPtr-&gt;push_back( cxsc::real(0.0) );
<a name="l00947"></a>00947 <span class="preprocessor">        #endif</span>
<a name="l00948"></a>00948 <span class="preprocessor"></span>        
<a name="l00949"></a>00949         <span class="comment">/* the overall running sum runningSumL1AllChains </span>
<a name="l00950"></a>00950 <span class="comment">         * was initialised to 0.0 </span>
<a name="l00951"></a>00951 <span class="comment">         * and #ifdef MYDEBUG, rhatL1FlagPtr was initialised to contain one 0.0</span>
<a name="l00952"></a>00952 <span class="comment">         * and sampledIndPtre was initialised to contain one 0.0*/</span>
<a name="l00953"></a>00953 
<a name="l00954"></a>00954         <span class="comment">/* and we started the convergence statistics for chains with just one state in</span>
<a name="l00955"></a>00955 <span class="comment">         * with one 0.0 in each (Ws, Bs, estVarsVs, rhats)</span>
<a name="l00956"></a>00956 <span class="comment">         * when we initialised */</span>
<a name="l00957"></a>00957         
<a name="l00958"></a>00958       }
<a name="l00959"></a>00959 
<a name="l00960"></a>00960       
<a name="l00961"></a>00961       <span class="comment">/* we want to accumulate the sample variance of the scalar summary leaves</span>
<a name="l00962"></a>00962 <span class="comment">       * for each chain up to the point reached in this loop */</span>
<a name="l00963"></a>00963       cxsc::real sumOfSampleVariancesLeavesOverChains(0.0);
<a name="l00964"></a>00964       
<a name="l00965"></a>00965       <span class="comment">/* also accumulate sum over all chains of the square of </span>
<a name="l00966"></a>00966 <span class="comment">       * the running sum of leaves </span>
<a name="l00967"></a>00967 <span class="comment">       * for each chain up to the point reached in this loop */</span>
<a name="l00968"></a>00968       cxsc::real sumOfSquaresOfRunningSumsLeaves(0.0);
<a name="l00969"></a>00969       
<a name="l00970"></a>00970       <span class="comment">/* we want to accumulate the sample variance of the scalar summary L1</span>
<a name="l00971"></a>00971 <span class="comment">       * for each chain up to the point reached in this loop */</span>
<a name="l00972"></a>00972       cxsc::real sumOfSampleVariancesL1OverChains(0.0);
<a name="l00973"></a>00973       
<a name="l00974"></a>00974       <span class="comment">/* also accumulate sum over all chains of the square of </span>
<a name="l00975"></a>00975 <span class="comment">       * the running sum of L1-distances-to-average </span>
<a name="l00976"></a>00976 <span class="comment">       * for each chain up to the point reached in this loop */</span>
<a name="l00977"></a>00977       cxsc::real sumOfSquaresOfRunningSumsL1(0.0);
<a name="l00978"></a>00978       
<a name="l00979"></a>00979       <span class="comment">// for each histogram in turn, change the state</span>
<a name="l00980"></a>00980       <span class="comment">/* </span>
<a name="l00981"></a>00981 <span class="comment">       * this is all a fudge - changeMCMCstate should just be a private</span>
<a name="l00982"></a>00982 <span class="comment">       * method of the histograms but I think I made it public so that</span>
<a name="l00983"></a>00983 <span class="comment">       * I could use it here in the example as a first step to being</span>
<a name="l00984"></a>00984 <span class="comment">       * able to make all of this chain convergence stuff back into</span>
<a name="l00985"></a>00985 <span class="comment">       * a method of the histograms themselves</span>
<a name="l00986"></a>00986 <span class="comment">       */</span>
<a name="l00987"></a>00987       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> ci = 0; ci &lt; chains; ci++) {
<a name="l00988"></a>00988         
<a name="l00989"></a>00989 <span class="preprocessor">        #ifdef MYDEBUG_CALCS</span>
<a name="l00990"></a>00990 <span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;--- chain index &quot;</span> &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot; ---&quot;</span> &lt;&lt; endl;
<a name="l00991"></a>00991 <span class="preprocessor">        #endif</span>
<a name="l00992"></a>00992 <span class="preprocessor"></span>        
<a name="l00993"></a>00993         <span class="comment">/* I refer to the current chain, indexed by ci, as &#39;the chain</span>
<a name="l00994"></a>00994 <span class="comment">         * in the comments inside this loop */</span>
<a name="l00995"></a>00995 
<a name="l00996"></a>00996         <span class="comment">// changeMCMCState for the chain</span>
<a name="l00997"></a>00997         <span class="comment">// updates nodes, numLeaves, numCherries, i</span>
<a name="l00998"></a>00998         goodLoop = hists[ci]-&gt;changeMCMCState(nodeLists[ci],
<a name="l00999"></a>00999                numLeavesVec[ci], numCherriesVec[ci],
<a name="l01000"></a>01000                proposal, logPrior, minPoints,
<a name="l01001"></a>01001                rgsl, loggingInChangeStates,
<a name="l01002"></a>01002                sequenceStateFilenames[ci], states);
<a name="l01003"></a>01003                
<a name="l01004"></a>01004 <span class="preprocessor">        #ifdef FORCEFAILMCMCLOOP</span>
<a name="l01005"></a>01005 <span class="preprocessor"></span>          <span class="comment">// for debugging - force a loop failure and see what happens to program</span>
<a name="l01006"></a>01006           <span class="keywordflow">if</span> (states == 5) goodLoop = <span class="keyword">false</span>;
<a name="l01007"></a>01007 <span class="preprocessor">        #endif </span>
<a name="l01008"></a>01008 <span class="preprocessor"></span>
<a name="l01009"></a>01009         <span class="keywordflow">if</span> (!goodLoop) {
<a name="l01010"></a>01010           <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Failed to do MCMC change in state&quot;</span>);
<a name="l01011"></a>01011           <span class="comment">// stop if we aren&#39;t happy</span>
<a name="l01012"></a>01012         }
<a name="l01013"></a>01013         
<a name="l01014"></a>01014         <span class="keywordflow">if</span> ((numLeavesVec[ci] == 0 &amp;&amp; numCherriesVec[ci] == 0)) {
<a name="l01015"></a>01015           <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;No more leaves or cherries in MCMC&quot;</span>);
<a name="l01016"></a>01016         }
<a name="l01017"></a>01017         
<a name="l01018"></a>01018         <span class="comment">// so assume all is okay if we have not just thrown an exception</span>
<a name="l01019"></a>01019         
<a name="l01020"></a>01020         <span class="comment">/* this chain should have states + 1 states in it</span>
<a name="l01021"></a>01021 <span class="comment">         * because we have not yet incremented the states variable.*/</span>
<a name="l01022"></a>01022         <span class="keywordtype">size_t</span> n_for_leaves = states + 1;
<a name="l01023"></a>01023                 
<a name="l01024"></a>01024         <span class="comment">/* and n_Leaves should be at least 2 because we started with the </span>
<a name="l01025"></a>01025 <span class="comment">         * starting histogram and have now added another state.*/</span>
<a name="l01026"></a>01026         assert(n_for_leaves &gt; 1);
<a name="l01027"></a>01027         
<a name="l01028"></a>01028         <span class="comment">// collect the leaves scalar and update the running sums for leaves</span>
<a name="l01029"></a>01029         {
<a name="l01030"></a>01030           <span class="comment">// update leaves for last histogram state in the chain</span>
<a name="l01031"></a>01031           cxsc::real lastStateLeaves(1.0*hists[ci]-&gt;getRootLeaves());
<a name="l01032"></a>01032           leavesPtr-&gt;at(ci).push_back( lastStateLeaves );  
<a name="l01033"></a>01033                   
<a name="l01034"></a>01034           <span class="comment">// update the running sum of leaves for the chain, held in runningSumLeaves</span>
<a name="l01035"></a>01035           cxsc::real newRunningSumLeaves = runningSumLeavesPtr-&gt;at(ci) + lastStateLeaves;
<a name="l01036"></a>01036           runningSumLeavesPtr-&gt;at(ci) = newRunningSumLeaves;
<a name="l01037"></a>01037           
<a name="l01038"></a>01038           <span class="comment">// accumulate the square of the running sum of leaves </span>
<a name="l01039"></a>01039           sumOfSquaresOfRunningSumsLeaves += newRunningSumLeaves*newRunningSumLeaves;
<a name="l01040"></a>01040           
<a name="l01041"></a>01041           <span class="comment">/* update the running sum of squared leaves over this chain</span>
<a name="l01042"></a>01042 <span class="comment">           *  held in runningSumLeavesSquared as a dot precision */</span>
<a name="l01043"></a>01043           cxsc::accumulate( runningSumLeavesSquared[ci], lastStateLeaves, lastStateLeaves );
<a name="l01044"></a>01044           
<a name="l01045"></a>01045           <span class="comment">// update  the overall running sum runningSumLeavesAllChains </span>
<a name="l01046"></a>01046           runningSumLeavesAllChains += lastStateLeaves;
<a name="l01047"></a>01047           
<a name="l01048"></a>01048           <span class="comment">/* accumulate the sample variance for leaves for this chain: </span>
<a name="l01049"></a>01049 <span class="comment">           * sample variance for the scalar summary v = leaves</span>
<a name="l01050"></a>01050 <span class="comment">           * calculated as (sum of squares - n * square of averages)/(n-1)</span>
<a name="l01051"></a>01051 <span class="comment">           * which equals (sum of squares - square of sums/n)/(n-1) */</span>
<a name="l01052"></a>01052           cxsc::real thisSampleVarianceLeaves( ( 1.0/(n_for_leaves - 1) )
<a name="l01053"></a>01053               *( cxsc::rnd(runningSumLeavesSquared[ci])
<a name="l01054"></a>01054               -  (newRunningSumLeaves*newRunningSumLeaves/(n_for_leaves * 1.0)) ) );
<a name="l01055"></a>01055           sumOfSampleVariancesLeavesOverChains += thisSampleVarianceLeaves;
<a name="l01056"></a>01056           
<a name="l01057"></a>01057 <span class="preprocessor">          #ifdef MYDEBUG</span>
<a name="l01058"></a>01058 <span class="preprocessor"></span>            sampleVariancesLeavesPtr-&gt;at(ci).push_back( thisSampleVarianceLeaves );
<a name="l01059"></a>01059             runningSumLeavesChainsPtr-&gt;at(ci).push_back (newRunningSumLeaves);
<a name="l01060"></a>01060 <span class="preprocessor">          #endif</span>
<a name="l01061"></a>01061 <span class="preprocessor"></span>
<a name="l01062"></a>01062           
<a name="l01063"></a>01063 <span class="preprocessor">          #ifdef MYDEBUG_CALCS</span>
<a name="l01064"></a>01064 <span class="preprocessor"></span>            <span class="comment">//check thisSampleVariance is correct, doing it the long way</span>
<a name="l01065"></a>01065             <span class="comment">// leavesPtr[ci] has the v_ij for each chain i</span>
<a name="l01066"></a>01066             
<a name="l01067"></a>01067             assert( n_for_leaves == leavesPtr-&gt;at(ci).size() );
<a name="l01068"></a>01068             cxsc::real acc(0.0);
<a name="l01069"></a>01069             <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = leavesPtr-&gt;at(ci).begin(); it &lt; leavesPtr-&gt;at(ci).end(); ++it) {
<a name="l01070"></a>01070               acc+= (*it);
<a name="l01071"></a>01071             }
<a name="l01072"></a>01072             
<a name="l01073"></a>01073             cxsc::real av = acc/(n_for_leaves * 1.0);
<a name="l01074"></a>01074             cxsc::dotprecision accDiffs(0.0);
<a name="l01075"></a>01075             <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = leavesPtr-&gt;at(ci).begin(); it &lt; leavesPtr-&gt;at(ci).end(); ++it) {
<a name="l01076"></a>01076               cxsc::real thisDiff = (*it) - av;
<a name="l01077"></a>01077               <span class="comment">// sum up the squares of the differences compared to overall average</span>
<a name="l01078"></a>01078               cxsc::accumulate(accDiffs, thisDiff, thisDiff);
<a name="l01079"></a>01079             }
<a name="l01080"></a>01080             cxsc::real altVar = rnd(accDiffs)/( n_for_leaves - 1.0 );
<a name="l01081"></a>01081             
<a name="l01082"></a>01082             cout &lt;&lt; <span class="stringliteral">&quot;\nthisSampleVariance leaves is\t&quot;</span> &lt;&lt; thisSampleVarianceLeaves &lt;&lt; endl;
<a name="l01083"></a>01083             cout &lt;&lt; <span class="stringliteral">&quot;altSampleVar leaves is\t&quot;</span> &lt;&lt; altVar &lt;&lt; endl;
<a name="l01084"></a>01084             <span class="comment">//assert(cxsc::_double(thisSampleVarianceLeaves) == cxsc::_double(altVar) );</span>
<a name="l01085"></a>01085           
<a name="l01086"></a>01086 <span class="preprocessor">          #endif</span>
<a name="l01087"></a>01087 <span class="preprocessor"></span>        } 
<a name="l01088"></a>01088         
<a name="l01089"></a>01089         <span class="comment">/* if we are doing the full checks</span>
<a name="l01090"></a>01090 <span class="comment">         *  collect the L1 distances and update the runnings sums */</span>
<a name="l01091"></a>01091         <span class="keywordflow">if</span> (doFullChecks) {
<a name="l01092"></a>01092           
<a name="l01093"></a>01093           sequenceCollators[ci]-&gt;addToCollation(*(hists[ci]));
<a name="l01094"></a>01094           
<a name="l01095"></a>01095           <span class="comment">/* how many histograms have we got so far?</span>
<a name="l01096"></a>01096 <span class="comment">           * this chain should have states - startFullChecks + 2 states in it,</span>
<a name="l01097"></a>01097 <span class="comment">           * because we only started fullChecks at startFullChecks</span>
<a name="l01098"></a>01098 <span class="comment">           * and we have not yet incremented the states counter.*/</span>
<a name="l01099"></a>01099           <span class="keywordtype">size_t</span> n_for_L1 = sequenceCollators[ci]-&gt;getNumberCollated();
<a name="l01100"></a>01100           assert(n_for_L1 == states - startFullChecks + 2);
<a name="l01101"></a>01101                   
<a name="l01102"></a>01102           <span class="comment">/* and n_for_L1 should be at least 2*/</span>
<a name="l01103"></a>01103           assert(n_for_L1 &gt; 1);
<a name="l01104"></a>01104           
<a name="l01105"></a>01105           <span class="comment">// update our collection of L1s to average for all histogram states in the chain</span>
<a name="l01106"></a>01106           currentL1s[ci] = sequenceCollators[ci]-&gt;getL1DistancesToAverage(currentL1s[ci]);
<a name="l01107"></a>01107           <span class="comment">/* we actually only want the L1 for the last state in the chain,</span>
<a name="l01108"></a>01108 <span class="comment">           * which we collect in the right vector for this chain in distancesL1 */</span>
<a name="l01109"></a>01109           cxsc::real lastStateL1 = currentL1s[ci].back();
<a name="l01110"></a>01110           distancesL1Ptr-&gt;at(ci).push_back( lastStateL1 );  
<a name="l01111"></a>01111                   
<a name="l01112"></a>01112           <span class="comment">// update the running sum of L1s for the chain, held in runningSumL1</span>
<a name="l01113"></a>01113           cxsc::real newRunningSumL1 = runningSumL1Ptr-&gt;at(ci) + lastStateL1;
<a name="l01114"></a>01114           runningSumL1Ptr-&gt;at(ci) = newRunningSumL1;
<a name="l01115"></a>01115           
<a name="l01116"></a>01116           <span class="comment">// accumulate the square of the running sum of L1s </span>
<a name="l01117"></a>01117           sumOfSquaresOfRunningSumsL1 += newRunningSumL1*newRunningSumL1;
<a name="l01118"></a>01118           
<a name="l01119"></a>01119           <span class="comment">/* update the running sum of squared L1s over this chain</span>
<a name="l01120"></a>01120 <span class="comment">           *  held in runningSumL1Squared as a dot precision */</span>
<a name="l01121"></a>01121           cxsc::accumulate( runningSumL1Squared[ci], lastStateL1, lastStateL1 );
<a name="l01122"></a>01122           
<a name="l01123"></a>01123           <span class="comment">// update  the overall running sum runningSumL1AllChains </span>
<a name="l01124"></a>01124           runningSumL1AllChains += lastStateL1;
<a name="l01125"></a>01125           
<a name="l01126"></a>01126           <span class="comment">/* accumulate the sample variance for L1 for this chain: </span>
<a name="l01127"></a>01127 <span class="comment">           * sample variance for the scalar summary v = L1-to-average</span>
<a name="l01128"></a>01128 <span class="comment">           * calculated as (sum of squares - n * square of averages)/(n-1)</span>
<a name="l01129"></a>01129 <span class="comment">           * which equals (sum of squares - square of sums/n)/(n-1) */</span>
<a name="l01130"></a>01130           cxsc::real thisSampleVarianceL1( ( 1.0/(n_for_L1-1) )*( cxsc::rnd(runningSumL1Squared[ci])
<a name="l01131"></a>01131                     -  (newRunningSumL1*newRunningSumL1/(n_for_L1 * 1.0)) ) );
<a name="l01132"></a>01132           sumOfSampleVariancesL1OverChains += thisSampleVarianceL1;
<a name="l01133"></a>01133           
<a name="l01134"></a>01134 <span class="preprocessor">          #ifdef MYDEBUG</span>
<a name="l01135"></a>01135 <span class="preprocessor"></span>            sampleVariancesL1Ptr-&gt;at(ci).push_back( thisSampleVarianceL1 );
<a name="l01136"></a>01136             runningSumL1ChainsPtr-&gt;at(ci).push_back (newRunningSumL1);
<a name="l01137"></a>01137 <span class="preprocessor">          #endif</span>
<a name="l01138"></a>01138 <span class="preprocessor"></span>
<a name="l01139"></a>01139           
<a name="l01140"></a>01140 <span class="preprocessor">          #ifdef MYDEBUG_CALCS</span>
<a name="l01141"></a>01141 <span class="preprocessor"></span>            <span class="comment">//check thisSampleVariance is correct, doing it the long way</span>
<a name="l01142"></a>01142             <span class="comment">// distancesL1Ptr[ci] has the v_ij for each chain i</span>
<a name="l01143"></a>01143             assert( n_for_L1 == distancesL1Ptr-&gt;at(ci).size() );
<a name="l01144"></a>01144             cxsc::real acc(0.0);
<a name="l01145"></a>01145             <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = distancesL1Ptr-&gt;at(ci).begin(); 
<a name="l01146"></a>01146               it &lt; distancesL1Ptr-&gt;at(ci).end(); ++it) {
<a name="l01147"></a>01147               acc+= (*it);
<a name="l01148"></a>01148             }
<a name="l01149"></a>01149             cxsc::real av = acc/(n_for_L1 * 1.0);
<a name="l01150"></a>01150             cxsc::dotprecision accDiffs(0.0);
<a name="l01151"></a>01151             <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = distancesL1Ptr-&gt;at(ci).begin(); 
<a name="l01152"></a>01152               it &lt; distancesL1Ptr-&gt;at(ci).end(); ++it) {
<a name="l01153"></a>01153               cxsc::real thisDiff = (*it) - av;
<a name="l01154"></a>01154               <span class="comment">// sum up the squares of the differences compared to overall average</span>
<a name="l01155"></a>01155               cxsc::accumulate(accDiffs, thisDiff, thisDiff);
<a name="l01156"></a>01156             }
<a name="l01157"></a>01157             cxsc::real altVar = rnd(accDiffs)/( n_for_L1 - 1.0 );
<a name="l01158"></a>01158             
<a name="l01159"></a>01159             cout &lt;&lt; <span class="stringliteral">&quot;\nthisSampleVarianceL1 is\t&quot;</span> &lt;&lt; thisSampleVarianceL1 &lt;&lt; endl;
<a name="l01160"></a>01160             cout &lt;&lt; <span class="stringliteral">&quot;altSampleVarL1 is\t&quot;</span> &lt;&lt; altVar &lt;&lt; endl;
<a name="l01161"></a>01161             <span class="comment">//assert(cxsc::_double(thisSampleVarianceL1) == cxsc::_double(altVar) );</span>
<a name="l01162"></a>01162           
<a name="l01163"></a>01163 <span class="preprocessor">          #endif</span>
<a name="l01164"></a>01164 <span class="preprocessor"></span>          
<a name="l01165"></a>01165 <span class="preprocessor">          #ifdef MYDEBUG_OUTPUT</span>
<a name="l01166"></a>01166 <span class="preprocessor"></span>            <span class="comment">// make files for current average and current collations</span>
<a name="l01167"></a>01167             sequenceCollators[ci]-&gt;publicOutputLog(sequenceCollationFilenames[ci], n_for_L1);
<a name="l01168"></a>01168           
<a name="l01169"></a>01169             <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempavg
<a name="l01170"></a>01170                         = sequenceCollators[ci]-&gt;makeAverage();
<a name="l01171"></a>01171             colltempavg.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceAverageFilenames[ci], n_for_L1);
<a name="l01172"></a>01172             
<a name="l01173"></a>01173             <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> colltempdiffs
<a name="l01174"></a>01174                         = sequenceCollators[ci]-&gt;makeDifferencesToAverage();
<a name="l01175"></a>01175             colltempdiffs.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aa477e8c6da033d93b212076630d3eec0" title="Add current state of collation to a log file.">publicOutputLog</a>(sequenceDiffsToAverageFilenames[ci], n_for_L1);
<a name="l01176"></a>01176 <span class="preprocessor">          #endif</span>
<a name="l01177"></a>01177 <span class="preprocessor"></span>        }
<a name="l01178"></a>01178           
<a name="l01179"></a>01179       } <span class="comment">// end change state for each histogram in turn</span>
<a name="l01180"></a>01180       
<a name="l01181"></a>01181       <span class="comment">// increment number of states histograms have been through  </span>
<a name="l01182"></a>01182       states++;
<a name="l01183"></a>01183         
<a name="l01184"></a>01184 
<a name="l01185"></a>01185       <span class="comment">/* each chain now has a new state</span>
<a name="l01186"></a>01186 <span class="comment">       * and info for leaves scalar for diagnostics has been collected</span>
<a name="l01187"></a>01187 <span class="comment">       * and the sample variance of the leaves scalar for each chain </span>
<a name="l01188"></a>01188 <span class="comment">       * has been put into sampleVariancesLeaves vector,</span>
<a name="l01189"></a>01189 <span class="comment">       * so we can now work out whether the initial hurdle has been passed</span>
<a name="l01190"></a>01190 <span class="comment">       * </span>
<a name="l01191"></a>01191 <span class="comment">       * and if we are doing full checks, the current histogram states have </span>
<a name="l01192"></a>01192 <span class="comment">       * has been collated into collators </span>
<a name="l01193"></a>01193 <span class="comment">       * and info for any other scalars for diagnostics has been collected</span>
<a name="l01194"></a>01194 <span class="comment">       * and the sample variance of these other scalar summaries for each chain </span>
<a name="l01195"></a>01195 <span class="comment">       * for each scalar value</span>
<a name="l01196"></a>01196 <span class="comment">       * have been put into sampleVariances vectors for each diagnostic,</span>
<a name="l01197"></a>01197 <span class="comment">       * so we can now work out the convergence diagnostics */</span>
<a name="l01198"></a>01198 
<a name="l01199"></a>01199 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01200"></a>01200 <span class="preprocessor"></span>        <span class="comment">// store the current runningSumLeavesAllChains as well</span>
<a name="l01201"></a>01201         runningSumLeavesOverallPtr-&gt;push_back(runningSumLeavesAllChains);
<a name="l01202"></a>01202         
<a name="l01203"></a>01203         <span class="keywordflow">if</span> (doFullChecks) {
<a name="l01204"></a>01204           <span class="comment">// store the current runningSumL1AllChains as well</span>
<a name="l01205"></a>01205           runningSumL1OverallPtr-&gt;push_back(runningSumL1AllChains);
<a name="l01206"></a>01206         }
<a name="l01207"></a>01207         
<a name="l01208"></a>01208 <span class="preprocessor">      #endif</span>
<a name="l01209"></a>01209 <span class="preprocessor"></span>      
<a name="l01210"></a>01210       <span class="comment">// convergence diagnostics calculations for leaves</span>
<a name="l01211"></a>01211       {
<a name="l01212"></a>01212         <span class="comment">// the Ws_leaves: average, over chains, of sample variance of scalar value</span>
<a name="l01213"></a>01213         cxsc::real thisW_leaves = sumOfSampleVariancesLeavesOverChains/(chains * 1.0); 
<a name="l01214"></a>01214         Ws_leavesPtr-&gt;push_back(thisW_leaves); 
<a name="l01215"></a>01215         <span class="comment">// the Bs_leaves</span>
<a name="l01216"></a>01216         cxsc::real thisB_leaves = (1.0/( (chains - 1) * states ) 
<a name="l01217"></a>01217                   * ( sumOfSquaresOfRunningSumsLeaves 
<a name="l01218"></a>01218                   - (runningSumLeavesAllChains 
<a name="l01219"></a>01219                   * runningSumLeavesAllChains/(chains * 1.0)) ) );
<a name="l01220"></a>01220         Bs_leavesPtr-&gt;push_back(thisB_leaves); 
<a name="l01221"></a>01221         
<a name="l01222"></a>01222 <span class="preprocessor">        #ifdef MYDEBUG_CALCS</span>
<a name="l01223"></a>01223 <span class="preprocessor"></span>          <span class="comment">//check thisB_leaves is correct, doing it the long way</span>
<a name="l01224"></a>01224           <span class="comment">// runningSumLeaves has one running sum for each chain</span>
<a name="l01225"></a>01225           <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> chainAverages;
<a name="l01226"></a>01226           cxsc::real accRunningSums(0.0);
<a name="l01227"></a>01227           <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = runningSumLeavesPtr-&gt;begin(); it &lt; runningSumLeavesPtr-&gt;end(); ++it) {
<a name="l01228"></a>01228             cxsc::real thisChainRunningSum = (*it);
<a name="l01229"></a>01229             cxsc::real thisChainAv = thisChainRunningSum/(states * 1.0);
<a name="l01230"></a>01230             chainAverages.push_back(thisChainAv);
<a name="l01231"></a>01231             accRunningSums+=thisChainRunningSum;
<a name="l01232"></a>01232           }
<a name="l01233"></a>01233           cxsc::real overallAv = accRunningSums/(states * chains * 1.0);
<a name="l01234"></a>01234           cxsc::dotprecision accDiffs(0.0);
<a name="l01235"></a>01235           <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = chainAverages.begin(); it &lt; chainAverages.end(); ++it) {
<a name="l01236"></a>01236             cxsc::real thisDiff = (*it) - overallAv;
<a name="l01237"></a>01237             <span class="comment">// sum up the squares of the differences compared to overall average</span>
<a name="l01238"></a>01238             cxsc::accumulate(accDiffs, thisDiff, thisDiff);
<a name="l01239"></a>01239           }
<a name="l01240"></a>01240           cxsc::real altB = rnd(accDiffs)*( states/(chains - 1.0) );
<a name="l01241"></a>01241           
<a name="l01242"></a>01242           cout &lt;&lt; <span class="stringliteral">&quot;\nthisB for leaves is\t&quot;</span> &lt;&lt; thisB_leaves &lt;&lt; endl;
<a name="l01243"></a>01243           cout &lt;&lt; <span class="stringliteral">&quot;altB for leaves is\t&quot;</span> &lt;&lt; altB &lt;&lt; endl;
<a name="l01244"></a>01244           <span class="comment">//assert(thisB_leaves == altB);</span>
<a name="l01245"></a>01245         
<a name="l01246"></a>01246 <span class="preprocessor">        #endif</span>
<a name="l01247"></a>01247 <span class="preprocessor"></span>        
<a name="l01248"></a>01248         <span class="comment">// the estimated var(v)</span>
<a name="l01249"></a>01249         cxsc::real thisVarV_leaves = states/(states-1.0) 
<a name="l01250"></a>01250                 * thisW_leaves + (1.0/states)*thisB_leaves;
<a name="l01251"></a>01251         estVarV_leavesPtr-&gt;push_back(thisVarV_leaves); 
<a name="l01252"></a>01252         <span class="comment">// the rhats</span>
<a name="l01253"></a>01253         cxsc::real thisRhat_leaves(0.0);
<a name="l01254"></a>01254         <span class="comment">// allow division by 0 if w = 0 when var does not</span>
<a name="l01255"></a>01255         <span class="keywordflow">if</span> (thisW_leaves &gt; 0.0 || thisVarV_leaves &gt; 0.0) {
<a name="l01256"></a>01256           thisRhat_leaves = thisVarV_leaves/thisW_leaves;
<a name="l01257"></a>01257         }
<a name="l01258"></a>01258         rhat_leavesPtr-&gt;push_back(thisRhat_leaves); 
<a name="l01259"></a>01259         
<a name="l01260"></a>01260       } <span class="comment">// end calculations for leaves</span>
<a name="l01261"></a>01261       
<a name="l01262"></a>01262       
<a name="l01263"></a>01263       <span class="comment">// check on the diagnostics for Leaves</span>
<a name="l01264"></a>01264       <span class="keywordflow">if</span> (rhat_leavesPtr-&gt;back() &lt;= 1.0 + tol_leaves 
<a name="l01265"></a>01265               &amp;&amp; rhat_leavesPtr-&gt;back() &gt;= 1.0 - tol_leaves) {
<a name="l01266"></a>01266         
<a name="l01267"></a>01267         <span class="comment">// if we have not been converged before on this scalar value</span>
<a name="l01268"></a>01268         <span class="keywordflow">if</span> (!rhatLeavesFlag)  {
<a name="l01269"></a>01269 <span class="preprocessor">          #ifdef MYDEBUG</span>
<a name="l01270"></a>01270 <span class="preprocessor"></span>            
<a name="l01271"></a>01271             cout &lt;&lt; <span class="stringliteral">&quot;\nleaves convergence test satisfied in state &quot;</span> 
<a name="l01272"></a>01272                 &lt;&lt; states &lt;&lt; endl;
<a name="l01273"></a>01273             
<a name="l01274"></a>01274 <span class="preprocessor">          #endif</span>
<a name="l01275"></a>01275 <span class="preprocessor"></span>        
<a name="l01276"></a>01276           <span class="comment">// set the flag for this scalar value</span>
<a name="l01277"></a>01277           rhatLeavesFlag = 1;
<a name="l01278"></a>01278           
<a name="l01279"></a>01279           <span class="comment">// and increment the flag counter = we are converged on this scalar value</span>
<a name="l01280"></a>01280           rhatFlagCounter ++; 
<a name="l01281"></a>01281           
<a name="l01282"></a>01282           <span class="keywordflow">if</span> (!doFullChecks) doFullChecks = 1;
<a name="l01283"></a>01283         }
<a name="l01284"></a>01284       }
<a name="l01285"></a>01285       <span class="keywordflow">else</span> { <span class="comment">// not converged on this scalar value</span>
<a name="l01286"></a>01286         
<a name="l01287"></a>01287         <span class="comment">// if we were okay on this scalar value before</span>
<a name="l01288"></a>01288         <span class="keywordflow">if</span> (rhatLeavesFlag) {
<a name="l01289"></a>01289 <span class="preprocessor">          #ifdef MYDEBUG</span>
<a name="l01290"></a>01290 <span class="preprocessor"></span>            cout &lt;&lt; <span class="stringliteral">&quot;\nLeaves convergence test now NOT satisfied in state &quot;</span> 
<a name="l01291"></a>01291               &lt;&lt; states &lt;&lt; endl;
<a name="l01292"></a>01292         
<a name="l01293"></a>01293 <span class="preprocessor">          #endif</span>
<a name="l01294"></a>01294 <span class="preprocessor"></span>          rhatLeavesFlag = 0; <span class="comment">// update the flag</span>
<a name="l01295"></a>01295           rhatFlagCounter--; <span class="comment">// decrement the flag counter</span>
<a name="l01296"></a>01296         }
<a name="l01297"></a>01297         
<a name="l01298"></a>01298         <span class="comment">/* note that we don&#39;t turn off the full checks even if</span>
<a name="l01299"></a>01299 <span class="comment">         * the leaves criteria ceases to be satisfied */</span>    
<a name="l01300"></a>01300       }
<a name="l01301"></a>01301       
<a name="l01302"></a>01302 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01303"></a>01303 <span class="preprocessor"></span>        <span class="comment">// store the Leavesflag as well, as a real, which is a fudge...</span>
<a name="l01304"></a>01304         rhatLeavesFlagPtr-&gt;push_back(rhatLeavesFlag);
<a name="l01305"></a>01305         
<a name="l01306"></a>01306 <span class="preprocessor">      #endif</span>
<a name="l01307"></a>01307 <span class="preprocessor"></span>      
<a name="l01308"></a>01308       
<a name="l01309"></a>01309       <span class="comment">/* if we are doing the full checks, do the convergence diagnostics</span>
<a name="l01310"></a>01310 <span class="comment">       * for the other scalars*/</span>
<a name="l01311"></a>01311       <span class="keywordflow">if</span> (doFullChecks &amp;&amp; (!sequenceCollators.empty())) {
<a name="l01312"></a>01312         
<a name="l01313"></a>01313         <span class="comment">// convergence diagnostics calculations for L1</span>
<a name="l01314"></a>01314       
<a name="l01315"></a>01315         <span class="keywordtype">size_t</span> n_for_L1 = states - startFullChecks + 1;
<a name="l01316"></a>01316         assert(n_for_L1 == sequenceCollators.at(0)-&gt;getNumberCollated());
<a name="l01317"></a>01317         
<a name="l01318"></a>01318         assert( n_for_L1 &gt; 1);
<a name="l01319"></a>01319         
<a name="l01320"></a>01320         <span class="comment">// the Ws_L1: average, over chains, of sample variance of scalar value</span>
<a name="l01321"></a>01321         cxsc::real thisW_L1 = sumOfSampleVariancesL1OverChains/(chains * 1.0); 
<a name="l01322"></a>01322         Ws_L1Ptr-&gt;push_back(thisW_L1); 
<a name="l01323"></a>01323         <span class="comment">// the Bs_L1</span>
<a name="l01324"></a>01324         cxsc::real thisB_L1 = (1.0/( (chains - 1) * n_for_L1 ) 
<a name="l01325"></a>01325                   * ( sumOfSquaresOfRunningSumsL1 
<a name="l01326"></a>01326                   - (runningSumL1AllChains 
<a name="l01327"></a>01327                   * runningSumL1AllChains/(chains * 1.0)) ) );
<a name="l01328"></a>01328         Bs_L1Ptr-&gt;push_back(thisB_L1); 
<a name="l01329"></a>01329         
<a name="l01330"></a>01330 <span class="preprocessor">        #ifdef MYDEBUG_CALCS</span>
<a name="l01331"></a>01331 <span class="preprocessor"></span>          <span class="comment">//check thisB_L1is correct, doing it the long way</span>
<a name="l01332"></a>01332           <span class="comment">// runningSumL1 has one running sum for each chain</span>
<a name="l01333"></a>01333           <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> chainAverages;
<a name="l01334"></a>01334           cxsc::real accRunningSums(0.0);
<a name="l01335"></a>01335           <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = runningSumL1Ptr-&gt;begin(); it &lt; runningSumL1Ptr-&gt;end(); ++it) {
<a name="l01336"></a>01336             cxsc::real thisChainRunningSum = (*it);
<a name="l01337"></a>01337             cxsc::real thisChainAv = thisChainRunningSum/(n_for_L1 * 1.0);
<a name="l01338"></a>01338             chainAverages.push_back(thisChainAv);
<a name="l01339"></a>01339             accRunningSums+=thisChainRunningSum;
<a name="l01340"></a>01340           }
<a name="l01341"></a>01341           cxsc::real overallAv = accRunningSums/(n_for_L1 * chains * 1.0);
<a name="l01342"></a>01342           cxsc::dotprecision accDiffs(0.0);
<a name="l01343"></a>01343           <span class="keywordflow">for</span> (<a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = chainAverages.begin(); it &lt; chainAverages.end(); ++it) {
<a name="l01344"></a>01344             cxsc::real thisDiff = (*it) - overallAv;
<a name="l01345"></a>01345             <span class="comment">// sum up the squares of the differences compared to overall average</span>
<a name="l01346"></a>01346             cxsc::accumulate(accDiffs, thisDiff, thisDiff);
<a name="l01347"></a>01347           }
<a name="l01348"></a>01348           cxsc::real altB = rnd(accDiffs)*( n_for_L1/(chains - 1.0) );
<a name="l01349"></a>01349           
<a name="l01350"></a>01350           cout &lt;&lt; <span class="stringliteral">&quot;\nthisB for L1is\t&quot;</span> &lt;&lt; thisB_L1 &lt;&lt; endl;
<a name="l01351"></a>01351           cout &lt;&lt; <span class="stringliteral">&quot;altB for L1 is\t&quot;</span> &lt;&lt; altB &lt;&lt; endl;
<a name="l01352"></a>01352           <span class="comment">//assert(thisB_L1 == altB);</span>
<a name="l01353"></a>01353         
<a name="l01354"></a>01354 <span class="preprocessor">        #endif</span>
<a name="l01355"></a>01355 <span class="preprocessor"></span>        
<a name="l01356"></a>01356         <span class="comment">// the estimated var(v)</span>
<a name="l01357"></a>01357         cxsc::real thisVarV_L1 = n_for_L1/(n_for_L1-1.0) * thisW_L1 + (1.0/n_for_L1)*thisB_L1;
<a name="l01358"></a>01358         estVarV_L1Ptr-&gt;push_back(thisVarV_L1); 
<a name="l01359"></a>01359         <span class="comment">// the rhats</span>
<a name="l01360"></a>01360         cxsc::real thisRhat_L1(0.0);
<a name="l01361"></a>01361         <span class="comment">// allow division by 0 if w = 0 when var does not</span>
<a name="l01362"></a>01362         <span class="keywordflow">if</span> (thisW_L1 &gt; 0.0 || thisVarV_L1 &gt; 0.0) {
<a name="l01363"></a>01363           thisRhat_L1 = thisVarV_L1/thisW_L1;
<a name="l01364"></a>01364         }
<a name="l01365"></a>01365         rhat_L1Ptr-&gt;push_back(thisRhat_L1); 
<a name="l01366"></a>01366       } <span class="comment">// end calculations for L1</span>
<a name="l01367"></a>01367       
<a name="l01368"></a>01368       
<a name="l01369"></a>01369       <span class="comment">// check on the diagnostics for L1</span>
<a name="l01370"></a>01370       <span class="keywordflow">if</span> (doFullChecks &amp;&amp; (rhat_L1Ptr-&gt;back() &lt;= 1.0 + tol_L1 
<a name="l01371"></a>01371                   &amp;&amp; rhat_L1Ptr-&gt;back() &gt;= 1.0 - tol_L1) ) {
<a name="l01372"></a>01372         
<a name="l01373"></a>01373         <span class="comment">// if we have not been converged before on this scalar value</span>
<a name="l01374"></a>01374         <span class="keywordflow">if</span> (!rhatL1Flag)  {
<a name="l01375"></a>01375 <span class="preprocessor">          #ifdef MYDEBUG</span>
<a name="l01376"></a>01376 <span class="preprocessor"></span>            
<a name="l01377"></a>01377             cout &lt;&lt; <span class="stringliteral">&quot;\nL1 convergence test satisfied at &quot;</span> 
<a name="l01378"></a>01378                 &lt;&lt; states &lt;&lt; endl;
<a name="l01379"></a>01379             
<a name="l01380"></a>01380 <span class="preprocessor">          #endif</span>
<a name="l01381"></a>01381 <span class="preprocessor"></span>        
<a name="l01382"></a>01382           <span class="comment">// set the flag for this scalar value</span>
<a name="l01383"></a>01383           rhatL1Flag = 1;
<a name="l01384"></a>01384           
<a name="l01385"></a>01385           <span class="comment">// and increment the flag counter = we are converged on this scalar value</span>
<a name="l01386"></a>01386           rhatFlagCounter ++; 
<a name="l01387"></a>01387         }
<a name="l01388"></a>01388       }
<a name="l01389"></a>01389       <span class="keywordflow">else</span> { <span class="comment">// not converged on this scalar value</span>
<a name="l01390"></a>01390         
<a name="l01391"></a>01391         <span class="comment">// if we were okay on this scalar value before</span>
<a name="l01392"></a>01392         <span class="keywordflow">if</span> (rhatL1Flag) {
<a name="l01393"></a>01393 <span class="preprocessor">          #ifdef MYDEBUG</span>
<a name="l01394"></a>01394 <span class="preprocessor"></span>            cout &lt;&lt; <span class="stringliteral">&quot;\nL1 convergence test NOT now satisfied at &quot;</span> 
<a name="l01395"></a>01395               &lt;&lt; states &lt;&lt; endl;
<a name="l01396"></a>01396         
<a name="l01397"></a>01397 <span class="preprocessor">          #endif</span>
<a name="l01398"></a>01398 <span class="preprocessor"></span>          rhatL1Flag = 0; <span class="comment">// update the flag</span>
<a name="l01399"></a>01399           rhatFlagCounter--; <span class="comment">// decrement the flag counter</span>
<a name="l01400"></a>01400         }     
<a name="l01401"></a>01401       }
<a name="l01402"></a>01402       
<a name="l01403"></a>01403 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01404"></a>01404 <span class="preprocessor"></span>        <span class="keywordflow">if</span> (doFullChecks &amp;&amp; (!sequenceCollators.empty()) ) {
<a name="l01405"></a>01405         
<a name="l01406"></a>01406           <span class="comment">// store the L1flag as well, as a real, which is a fudge...</span>
<a name="l01407"></a>01407           rhatL1FlagPtr-&gt;push_back(rhatL1Flag);
<a name="l01408"></a>01408         }
<a name="l01409"></a>01409 <span class="preprocessor">      #endif</span>
<a name="l01410"></a>01410 <span class="preprocessor"></span>      
<a name="l01411"></a>01411       <span class="comment">/* we&#39;d do this for all other scalar values as well, if applicable, then ...*/</span>
<a name="l01412"></a>01412         
<a name="l01413"></a>01413       <span class="comment">// check if we have enough flags to consider ourselves burntin</span>
<a name="l01414"></a>01414       <span class="keywordflow">if</span> ( !burntin &amp;&amp; (rhatFlagCounter &gt;= rhatFlagCounterThreshold) ) {
<a name="l01415"></a>01415         
<a name="l01416"></a>01416         burntin = 1; 
<a name="l01417"></a>01417         burntinReachedState = states;
<a name="l01418"></a>01418         
<a name="l01419"></a>01419 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01420"></a>01420 <span class="preprocessor"></span>          <span class="comment">// if we have not been burntin, give a message</span>
<a name="l01421"></a>01421            cout &lt;&lt; <span class="stringliteral">&quot;Burnin convergence test satisfied at state &quot;</span> 
<a name="l01422"></a>01422               &lt;&lt; burntinReachedState &lt;&lt; endl;
<a name="l01423"></a>01423           
<a name="l01424"></a>01424 <span class="preprocessor">        #endif</span>
<a name="l01425"></a>01425 <span class="preprocessor"></span>
<a name="l01426"></a>01426       }
<a name="l01427"></a>01427       
<a name="l01428"></a>01428       <span class="comment">// but it may be that we were burntin and no longer are</span>
<a name="l01429"></a>01429       <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( burntin &amp;&amp; (rhatFlagCounter &lt; rhatFlagCounterThreshold) ) {
<a name="l01430"></a>01430         
<a name="l01431"></a>01431         burntin = 0; 
<a name="l01432"></a>01432         burntinReachedState = 0;
<a name="l01433"></a>01433         
<a name="l01434"></a>01434         <span class="keyword">delete</span> samplesColl; <span class="comment">// get rid of the old samples collator</span>
<a name="l01435"></a>01435         samplesColl = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a>(); <span class="comment">// and take a new one</span>
<a name="l01436"></a>01436         
<a name="l01437"></a>01437         samplesSoFar = 0;
<a name="l01438"></a>01438         
<a name="l01439"></a>01439         <span class="comment">// want to change all the 1&#39;s in sampledIndPtr so far to 0s</span>
<a name="l01440"></a>01440         cxsc::real newVal(0.0);
<a name="l01441"></a>01441         
<a name="l01442"></a>01442 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01443"></a>01443 <span class="preprocessor"></span>          std::replace_if (sampledIndPtr-&gt;begin(), sampledIndPtr-&gt;end(), 
<a name="l01444"></a>01444             std::bind2nd(greater&lt; cxsc::real &gt;(),newVal), newVal);
<a name="l01445"></a>01445 <span class="preprocessor">        #endif</span>
<a name="l01446"></a>01446 <span class="preprocessor"></span>        
<a name="l01447"></a>01447         <span class="comment">// restart the log file if we are logging</span>
<a name="l01448"></a>01448         <span class="comment">// note nothing done here yet about logging graphs as well  </span>
<a name="l01449"></a>01449         <span class="keywordflow">if</span> (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) {
<a name="l01450"></a>01450           <a class="code" href="namespacesubpavings.shtml#afb8564fbbb2536bafcd19a5cc56e6531" title="Opening line of a txt log file.">outputFileStart</a>(samplesLogFilename);
<a name="l01451"></a>01451         }   
<a name="l01452"></a>01452         
<a name="l01453"></a>01453 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01454"></a>01454 <span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;Burnin convergence test now NOT satisfied at state &quot;</span> 
<a name="l01455"></a>01455               &lt;&lt; states &lt;&lt; endl;
<a name="l01456"></a>01456           
<a name="l01457"></a>01457 <span class="preprocessor">        #endif</span>
<a name="l01458"></a>01458 <span class="preprocessor"></span>      }
<a name="l01459"></a>01459       
<a name="l01460"></a>01460       <span class="comment">/* take samples if we are burntin and this is a sampling point according to </span>
<a name="l01461"></a>01461 <span class="comment">       * the thinout specified </span>
<a name="l01462"></a>01462 <span class="comment">       * note - we will only be in the loop at all if we still need more samples*/</span>
<a name="l01463"></a>01463       <span class="keywordflow">if</span> (burntin &amp;&amp; (( states - burntinReachedState )%thinout == 0)) {
<a name="l01464"></a>01464         
<a name="l01465"></a>01465 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01466"></a>01466 <span class="preprocessor"></span>          cout &lt;&lt; <span class="stringliteral">&quot;sampling at state &quot;</span> &lt;&lt; states &lt;&lt; endl;
<a name="l01467"></a>01467           sampledIndPtr-&gt;push_back (cxsc::real(1.0)); 
<a name="l01468"></a>01468 
<a name="l01469"></a>01469 <span class="preprocessor">        #endif</span>
<a name="l01470"></a>01470 <span class="preprocessor"></span>        
<a name="l01471"></a>01471         <span class="comment">// take one sample from each chain until we have enough samples</span>
<a name="l01472"></a>01472         <span class="comment">// and increment samplesSoFar for each one taken</span>
<a name="l01473"></a>01473         vector&lt;AdaptiveHistogram*&gt;::iterator ait;
<a name="l01474"></a>01474         <span class="keywordflow">for</span> (ait = hists.begin(); 
<a name="l01475"></a>01475             (ait &lt; hists.end() &amp;&amp; samplesSoFar &lt; samplesNeeded);
<a name="l01476"></a>01476             ++ait) {
<a name="l01477"></a>01477           
<a name="l01478"></a>01478           samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(**ait);
<a name="l01479"></a>01479           
<a name="l01480"></a>01480           samplesSoFar++;
<a name="l01481"></a>01481           
<a name="l01482"></a>01482           <span class="keywordflow">if</span> (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) {
<a name="l01483"></a>01483             (*ait)-&gt;outputLogPlain(samplesLogFilename, samplesSoFar);
<a name="l01484"></a>01484           }
<a name="l01485"></a>01485           
<a name="l01486"></a>01486         }
<a name="l01487"></a>01487         
<a name="l01488"></a>01488       } <span class="comment">// finished taking samples for this loop</span>
<a name="l01489"></a>01489       <span class="keywordflow">else</span> {
<a name="l01490"></a>01490 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01491"></a>01491 <span class="preprocessor"></span>          
<a name="l01492"></a>01492           sampledIndPtr-&gt;push_back (cxsc::real(0.0)); 
<a name="l01493"></a>01493 <span class="preprocessor">        #endif</span>
<a name="l01494"></a>01494 <span class="preprocessor"></span>      }
<a name="l01495"></a>01495       
<a name="l01496"></a>01496       assert(samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>() == samplesSoFar);
<a name="l01497"></a>01497       
<a name="l01498"></a>01498       
<a name="l01499"></a>01499       <span class="comment">// back into loop</span>
<a name="l01500"></a>01500 <span class="preprocessor">      #if !defined(MYDEBUG_CALCS)</span>
<a name="l01501"></a>01501 <span class="preprocessor"></span><span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01502"></a>01502 <span class="preprocessor"></span>          <span class="comment">// output a line every now and again so that we know it&#39;s still alive</span>
<a name="l01503"></a>01503           <span class="keywordflow">if</span> (loopCounter%100 == 0) {
<a name="l01504"></a>01504             cout &lt;&lt; <span class="stringliteral">&quot;\n...I&#39;m still going: completed change in state number &quot;</span> &lt;&lt; states &lt;&lt; <span class="stringliteral">&quot; ...\n&quot;</span> &lt;&lt; endl;
<a name="l01505"></a>01505           }
<a name="l01506"></a>01506 <span class="preprocessor">        #endif</span>
<a name="l01507"></a>01507 <span class="preprocessor"></span><span class="preprocessor">      #endif</span>
<a name="l01508"></a>01508 <span class="preprocessor"></span>      
<a name="l01509"></a>01509       
<a name="l01510"></a>01510     }    <span class="comment">// finished while loop - either loop failed or reached maxLoops or have all our samples</span>
<a name="l01511"></a>01511     
<a name="l01512"></a>01512     cancontinue = goodLoop;
<a name="l01513"></a>01513     
<a name="l01514"></a>01514 <span class="preprocessor">    #ifdef MYDEBUG</span>
<a name="l01515"></a>01515 <span class="preprocessor"></span>      cout &lt;&lt; <span class="stringliteral">&quot;****** finished all loops, states counter is = &quot;</span> &lt;&lt; states &lt;&lt; <span class="stringliteral">&quot; ******&quot;</span> &lt;&lt; endl;
<a name="l01516"></a>01516 <span class="preprocessor">    #endif</span>
<a name="l01517"></a>01517 <span class="preprocessor"></span>    
<a name="l01518"></a>01518     cout &lt;&lt; <span class="stringliteral">&quot;\nnumber of samples collected is = &quot;</span> &lt;&lt; samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a37b31db56cc701fdd997eafb59bda4f5" title="Get the number of Adaptive Histogram objects collated.">getNumberCollated</a>() &lt;&lt; endl;
<a name="l01519"></a>01519     
<a name="l01520"></a>01520     <span class="comment">// free the random number generator</span>
<a name="l01521"></a>01521     gsl_rng_free (rgsl);
<a name="l01522"></a>01522 
<a name="l01523"></a>01523     cout &lt;&lt; cxsc::RestoreOpt; <span class="comment">// undo changes we made to cout printing for cxsc values</span>
<a name="l01524"></a>01524   
<a name="l01525"></a>01525     
<a name="l01526"></a>01526     <span class="comment">/* is all okay with the loop</span>
<a name="l01527"></a>01527 <span class="comment">     * and we have all our samples */</span>
<a name="l01528"></a>01528     <span class="keywordflow">if</span> (cancontinue &amp;&amp; (samplesSoFar &gt;= samplesNeeded) ) {  
<a name="l01529"></a>01529 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01530"></a>01530 <span class="preprocessor"></span>        <span class="comment">// output the overall collator</span>
<a name="l01531"></a>01531         samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(samplesCollFilename);
<a name="l01532"></a>01532 <span class="preprocessor">      #endif</span>
<a name="l01533"></a>01533 <span class="preprocessor"></span>      
<a name="l01534"></a>01534         <span class="comment">// make the return object be the average of the samples</span>
<a name="l01535"></a>01535         *myCollPtr = samplesColl-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a0437fe89f5ca716f729c7406ca218d3e">makeAverage</a>();
<a name="l01536"></a>01536         
<a name="l01537"></a>01537         <span class="comment">// keep the MCMC histogram into a container</span>
<a name="l01538"></a>01538         vecMCMCHist.push_back(myCollPtr); 
<a name="l01539"></a>01539         <span class="comment">// optional output for histogram</span>
<a name="l01540"></a>01540         <span class="keywordtype">string</span> histFileName = dirName;
<a name="l01541"></a>01541         histFileName += <span class="stringliteral">&quot;AverageMCMC&quot;</span>; 
<a name="l01542"></a>01542         histFileName += stmD.str();
<a name="l01543"></a>01543         histFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l01544"></a>01544         myCollPtr-&gt;<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a514f2ebc1857e531b629f0ff3508b04b" title="Output average normalised histogram over collation to a txt file.">outputAverageToTxtTabs</a>(histFileName);
<a name="l01545"></a>01545         <span class="comment">// end of optional output for histogram</span>
<a name="l01546"></a>01546         
<a name="l01547"></a>01547       <span class="comment">// output the convergence diagnostics</span>
<a name="l01548"></a>01548       
<a name="l01549"></a>01549       <span class="comment">//output file for leaves</span>
<a name="l01550"></a>01550       {
<a name="l01551"></a>01551         std::vector &lt; std::string &gt; colNames;
<a name="l01552"></a>01552         colNames.push_back(<span class="stringliteral">&quot;W&quot;</span>);
<a name="l01553"></a>01553         colNames.push_back(<span class="stringliteral">&quot;B&quot;</span>);
<a name="l01554"></a>01554         colNames.push_back(<span class="stringliteral">&quot;estVarV&quot;</span>);
<a name="l01555"></a>01555         colNames.push_back(<span class="stringliteral">&quot;rhat&quot;</span>);
<a name="l01556"></a>01556 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01557"></a>01557 <span class="preprocessor"></span>          colNames.push_back(<span class="stringliteral">&quot;rhatFlag&quot;</span>);
<a name="l01558"></a>01558           colNames.push_back(<span class="stringliteral">&quot;sampled?&quot;</span>);
<a name="l01559"></a>01559 <span class="preprocessor">        #endif</span>
<a name="l01560"></a>01560 <span class="preprocessor"></span>        std::vector &lt; RealVec* &gt; data;
<a name="l01561"></a>01561         data.push_back(Ws_leavesPtr);
<a name="l01562"></a>01562         data.push_back(Bs_leavesPtr);
<a name="l01563"></a>01563         data.push_back(estVarV_leavesPtr);
<a name="l01564"></a>01564         data.push_back(rhat_leavesPtr);
<a name="l01565"></a>01565 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01566"></a>01566 <span class="preprocessor"></span>          data.push_back(rhatLeavesFlagPtr);
<a name="l01567"></a>01567           data.push_back(sampledIndPtr);
<a name="l01568"></a>01568 <span class="preprocessor">        #endif</span>
<a name="l01569"></a>01569 <span class="preprocessor"></span>        <span class="keywordtype">int</span> precData = 5;
<a name="l01570"></a>01570         <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GRLeavesFilename, precData);
<a name="l01571"></a>01571       } <span class="comment">// all the stuff created in these {} goes out of scope here</span>
<a name="l01572"></a>01572       
<a name="l01573"></a>01573       
<a name="l01574"></a>01574       <span class="comment">// output the leaves  as v_ij&#39;s)</span>
<a name="l01575"></a>01575       {
<a name="l01576"></a>01576         std::vector &lt; std::string &gt; colNames;
<a name="l01577"></a>01577         colNames.insert(colNames.end(), leavesColNames.begin(), leavesColNames.end());
<a name="l01578"></a>01578         
<a name="l01579"></a>01579         std::vector &lt; RealVec* &gt; data;
<a name="l01580"></a>01580         data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *leavesPtr);
<a name="l01581"></a>01581         
<a name="l01582"></a>01582         <span class="keywordtype">int</span> precData = 10;
<a name="l01583"></a>01583         <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GR_vij_as_Leaves_Filename, precData);
<a name="l01584"></a>01584       }
<a name="l01585"></a>01585       
<a name="l01586"></a>01586       
<a name="l01587"></a>01587       <span class="comment">//output file for L1</span>
<a name="l01588"></a>01588       {
<a name="l01589"></a>01589         std::vector &lt; std::string &gt; colNames;
<a name="l01590"></a>01590         colNames.push_back(<span class="stringliteral">&quot;W&quot;</span>);
<a name="l01591"></a>01591         colNames.push_back(<span class="stringliteral">&quot;B&quot;</span>);
<a name="l01592"></a>01592         colNames.push_back(<span class="stringliteral">&quot;estVarV&quot;</span>);
<a name="l01593"></a>01593         colNames.push_back(<span class="stringliteral">&quot;rhat&quot;</span>);
<a name="l01594"></a>01594 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01595"></a>01595 <span class="preprocessor"></span>          colNames.push_back(<span class="stringliteral">&quot;rhatL1Flag&quot;</span>);
<a name="l01596"></a>01596           colNames.push_back(<span class="stringliteral">&quot;sampled?&quot;</span>);
<a name="l01597"></a>01597 <span class="preprocessor">        #endif</span>
<a name="l01598"></a>01598 <span class="preprocessor"></span>        std::vector &lt; RealVec* &gt; data;
<a name="l01599"></a>01599         data.push_back(Ws_L1Ptr);
<a name="l01600"></a>01600         data.push_back(Bs_L1Ptr);
<a name="l01601"></a>01601         data.push_back(estVarV_L1Ptr);
<a name="l01602"></a>01602         data.push_back(rhat_L1Ptr);
<a name="l01603"></a>01603         
<a name="l01604"></a>01604 <span class="preprocessor">        #ifdef MYDEBUG</span>
<a name="l01605"></a>01605 <span class="preprocessor"></span>          data.push_back(rhatL1FlagPtr);
<a name="l01606"></a>01606           
<a name="l01607"></a>01607           <span class="comment">// need to take only some of the sampled states</span>
<a name="l01608"></a>01608           <a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> it = sampledIndPtr-&gt;begin();
<a name="l01609"></a>01609           std::advance(it, startFullChecks-1);
<a name="l01610"></a>01610           <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> tmpSampled(it, sampledIndPtr-&gt;end());
<a name="l01611"></a>01611           
<a name="l01612"></a>01612           data.push_back(&amp;tmpSampled);
<a name="l01613"></a>01613 <span class="preprocessor">        #endif</span>
<a name="l01614"></a>01614 <span class="preprocessor"></span>        <span class="keywordtype">int</span> precData = 5;
<a name="l01615"></a>01615         <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GRL1Filename, precData);
<a name="l01616"></a>01616       } <span class="comment">// all the stuff created in these {} goes out of scope here</span>
<a name="l01617"></a>01617       
<a name="l01618"></a>01618       
<a name="l01619"></a>01619       <span class="comment">// addition to output the L1 distances (v_ij&#39;s)</span>
<a name="l01620"></a>01620       {
<a name="l01621"></a>01621         std::vector &lt; std::string &gt; colNames;
<a name="l01622"></a>01622         colNames.insert(colNames.end(), L1ColNames.begin(), L1ColNames.end());
<a name="l01623"></a>01623         
<a name="l01624"></a>01624         std::vector &lt; RealVec* &gt; data;
<a name="l01625"></a>01625         data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *distancesL1Ptr);
<a name="l01626"></a>01626         
<a name="l01627"></a>01627         <span class="keywordtype">int</span> precData = 10;
<a name="l01628"></a>01628         <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GR_vij_as_L1_Filename, precData);
<a name="l01629"></a>01629       }
<a name="l01630"></a>01630       
<a name="l01631"></a>01631       
<a name="l01632"></a>01632 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01633"></a>01633 <span class="preprocessor"></span>      {
<a name="l01634"></a>01634         <span class="comment">/* output working calcs: all leaves for each chain, </span>
<a name="l01635"></a>01635 <span class="comment">         * running sums for each chain, sample variances,</span>
<a name="l01636"></a>01636 <span class="comment">         * overall running sums */</span>
<a name="l01637"></a>01637         std::vector &lt; std::string &gt; colNames;
<a name="l01638"></a>01638         colNames.insert(colNames.end(), leavesColNames.begin(), leavesColNames.end());
<a name="l01639"></a>01639         colNames.insert(colNames.end(), leavesRunningSumColNames.begin(), leavesRunningSumColNames.end());
<a name="l01640"></a>01640         colNames.insert(colNames.end(), leavesSampleVarianceColNames.begin(), leavesSampleVarianceColNames.end());
<a name="l01641"></a>01641         colNames.push_back(overallLeavesRunningSumColName);
<a name="l01642"></a>01642         
<a name="l01643"></a>01643         std::vector &lt; RealVec* &gt; data;
<a name="l01644"></a>01644         data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *leavesPtr);
<a name="l01645"></a>01645         data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *runningSumLeavesChainsPtr);
<a name="l01646"></a>01646         data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *sampleVariancesLeavesPtr);
<a name="l01647"></a>01647         data.push_back(runningSumLeavesOverallPtr);
<a name="l01648"></a>01648         
<a name="l01649"></a>01649         <span class="keywordtype">int</span> precData = 10;
<a name="l01650"></a>01650         <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GRLeavesWorkingCalcsFilename, precData);
<a name="l01651"></a>01651       
<a name="l01652"></a>01652       }
<a name="l01653"></a>01653 <span class="preprocessor">      #endif</span>
<a name="l01654"></a>01654 <span class="preprocessor"></span>
<a name="l01655"></a>01655 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01656"></a>01656 <span class="preprocessor"></span>      {
<a name="l01657"></a>01657         <span class="comment">/* output working calcs: all L1s for each chain, </span>
<a name="l01658"></a>01658 <span class="comment">         * running sums for each chain, sample variances,</span>
<a name="l01659"></a>01659 <span class="comment">         * overall running sums */</span>
<a name="l01660"></a>01660         std::vector &lt; std::string &gt; colNames;
<a name="l01661"></a>01661         colNames.insert(colNames.end(), L1ColNames.begin(), L1ColNames.end());
<a name="l01662"></a>01662         colNames.insert(colNames.end(), L1RunningSumColNames.begin(), L1RunningSumColNames.end());
<a name="l01663"></a>01663         colNames.insert(colNames.end(), L1SampleVarianceColNames.begin(), L1SampleVarianceColNames.end());
<a name="l01664"></a>01664         colNames.push_back(overallL1RunningSumColName);
<a name="l01665"></a>01665         
<a name="l01666"></a>01666         std::vector &lt; RealVec* &gt; data;
<a name="l01667"></a>01667         data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *distancesL1Ptr);
<a name="l01668"></a>01668         data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *runningSumL1ChainsPtr);
<a name="l01669"></a>01669         data = <a class="code" href="MCMCGRtools_8cpp.shtml#aeab60d2a0ee499db048aa1ea334582c9">addDataPtrs</a>(data, *sampleVariancesL1Ptr);
<a name="l01670"></a>01670         data.push_back(runningSumL1OverallPtr);
<a name="l01671"></a>01671         
<a name="l01672"></a>01672         <span class="keywordtype">int</span> precData = 10;
<a name="l01673"></a>01673         <a class="code" href="MCMCGRtools_8cpp.shtml#a32af99153a16e8c03195b10d3fcb6a9c">outputToFileVertical</a>(data, colNames, GRL1WorkingCalcsFilename, precData);
<a name="l01674"></a>01674       
<a name="l01675"></a>01675       }
<a name="l01676"></a>01676 <span class="preprocessor">      #endif</span>
<a name="l01677"></a>01677 <span class="preprocessor"></span>      
<a name="l01678"></a>01678       
<a name="l01679"></a>01679       cout &lt;&lt; <span class="stringliteral">&quot;\n\nFinished MCMC successfully\n&quot;</span> &lt;&lt; endl;
<a name="l01680"></a>01680       cout &lt;&lt; <span class="stringliteral">&quot;Check output files\n\t&quot;</span> &lt;&lt; GRLeavesFilename
<a name="l01681"></a>01681               &lt;&lt; <span class="stringliteral">&quot;\n\t&quot;</span> &lt;&lt; GRL1Filename
<a name="l01682"></a>01682               &lt;&lt; <span class="stringliteral">&quot;\nfor diagnostics&quot;</span> &lt;&lt; endl;
<a name="l01683"></a>01683       cout &lt;&lt; <span class="stringliteral">&quot;and for scalar values\n\t&quot;</span> &lt;&lt; GR_vij_as_L1_Filename
<a name="l01684"></a>01684               &lt;&lt; <span class="stringliteral">&quot;\n\t&quot;</span> &lt;&lt; GR_vij_as_Leaves_Filename &lt;&lt; endl;
<a name="l01685"></a>01685       <span class="keywordflow">if</span> (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) {
<a name="l01686"></a>01686         cout &lt;&lt; <span class="stringliteral">&quot;and\t&quot;</span> &lt;&lt; samplesLogFilename
<a name="l01687"></a>01687             &lt;&lt; <span class="stringliteral">&quot;\nfor log of samples&quot;</span> &lt;&lt;endl;
<a name="l01688"></a>01688       }
<a name="l01689"></a>01689 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01690"></a>01690 <span class="preprocessor"></span>        cout &lt;&lt; <span class="stringliteral">&quot;and\t&quot;</span> &lt;&lt; GRL1WorkingCalcsFilename
<a name="l01691"></a>01691           &lt;&lt; <span class="stringliteral">&quot;\n\t&quot;</span> &lt;&lt; GRLeavesWorkingCalcsFilename
<a name="l01692"></a>01692             &lt;&lt; <span class="stringliteral">&quot;\nfor working calculations for diagnostics&quot;</span> &lt;&lt;endl;
<a name="l01693"></a>01693 <span class="preprocessor">      #endif</span>
<a name="l01694"></a>01694 <span class="preprocessor"></span><span class="preprocessor">      #ifdef MYDEBUG_OUTPUT</span>
<a name="l01695"></a>01695 <span class="preprocessor"></span>        cout &lt;&lt; <span class="stringliteral">&quot;and\t&quot;</span> &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; <span class="stringliteral">&quot;*.txt, \n\t&quot;</span>
<a name="l01696"></a>01696             &lt;&lt; baseSequenceStateAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt \n\t&quot;</span>
<a name="l01697"></a>01697             &lt;&lt; baseSequenceStateDiffsToAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt \n&quot;</span>
<a name="l01698"></a>01698             &lt;&lt; <span class="stringliteral">&quot;for sequence development details&quot;</span> &lt;&lt;endl;
<a name="l01699"></a>01699 <span class="preprocessor">      #endif</span>
<a name="l01700"></a>01700 <span class="preprocessor"></span>      cout &lt;&lt; endl;
<a name="l01701"></a>01701     }
<a name="l01702"></a>01702     
<a name="l01703"></a>01703     <span class="comment">/* clean up the newed stuff</span>
<a name="l01704"></a>01704 <span class="comment">     * </span>
<a name="l01705"></a>01705 <span class="comment">     * note that this does not get cleaned up if we throw an exception in the while loop</span>
<a name="l01706"></a>01706 <span class="comment">     * - should probably deal with that at some point but all the newed memory will be </span>
<a name="l01707"></a>01707 <span class="comment">     * freed when it terminates anyway so assuming this code is just run as a one-off example,</span>
<a name="l01708"></a>01708 <span class="comment">     * it will be okay for the moment */</span>
<a name="l01709"></a>01709     
<a name="l01710"></a>01710     vector&lt;AdaptiveHistogram*&gt;::iterator ait;
<a name="l01711"></a>01711     <span class="keywordflow">for</span> (ait = hists.begin(); ait &lt; hists.end(); ++ait) {
<a name="l01712"></a>01712       <span class="keywordflow">if</span> (NULL != *ait) <span class="keyword">delete</span> (*ait);
<a name="l01713"></a>01713     }
<a name="l01714"></a>01714 
<a name="l01715"></a>01715     vector&lt;AdaptiveHistogramCollator*&gt;::iterator acit;
<a name="l01716"></a>01716     <span class="keywordflow">for</span> (acit = sequenceCollators.begin(); acit &lt; sequenceCollators.end(); ++acit) {
<a name="l01717"></a>01717       <span class="keywordflow">if</span> (NULL != *acit) <span class="keyword">delete</span> (*acit);
<a name="l01718"></a>01718     }
<a name="l01719"></a>01719     <span class="comment">/*</span>
<a name="l01720"></a>01720 <span class="comment">    for (acit = averageCollators.begin(); acit &lt; averageCollators.end(); acit++) {</span>
<a name="l01721"></a>01721 <span class="comment">      if (NULL != *acit) delete (*acit);</span>
<a name="l01722"></a>01722 <span class="comment">    }</span>
<a name="l01723"></a>01723 <span class="comment">    */</span>
<a name="l01724"></a>01724     <span class="keyword">delete</span> samplesColl;
<a name="l01725"></a>01725     
<a name="l01726"></a>01726 <span class="preprocessor">    #ifdef MYDEBUG</span>
<a name="l01727"></a>01727 <span class="preprocessor"></span>      <span class="keyword">delete</span> sampledIndPtr;
<a name="l01728"></a>01728 <span class="preprocessor">    #endif</span>
<a name="l01729"></a>01729 <span class="preprocessor"></span>    
<a name="l01730"></a>01730     <span class="comment">// leaves stuff</span>
<a name="l01731"></a>01731     <span class="keyword">delete</span> leavesPtr;  
<a name="l01732"></a>01732 
<a name="l01733"></a>01733     <span class="keyword">delete</span> runningSumLeavesPtr;
<a name="l01734"></a>01734     
<a name="l01735"></a>01735 <span class="preprocessor">    #ifdef MYDEBUG</span>
<a name="l01736"></a>01736 <span class="preprocessor"></span>      <span class="keyword">delete</span> runningSumLeavesOverallPtr;
<a name="l01737"></a>01737       <span class="keyword">delete</span> runningSumLeavesChainsPtr;
<a name="l01738"></a>01738       <span class="keyword">delete</span> sampleVariancesLeavesPtr;
<a name="l01739"></a>01739       <span class="keyword">delete</span> rhatLeavesFlagPtr;
<a name="l01740"></a>01740 <span class="preprocessor">    #endif</span>
<a name="l01741"></a>01741 <span class="preprocessor"></span>
<a name="l01742"></a>01742     <span class="keyword">delete</span> Ws_leavesPtr;
<a name="l01743"></a>01743     <span class="keyword">delete</span> Bs_leavesPtr;
<a name="l01744"></a>01744     <span class="keyword">delete</span> estVarV_leavesPtr;
<a name="l01745"></a>01745     <span class="keyword">delete</span> rhat_leavesPtr;
<a name="l01746"></a>01746     
<a name="l01747"></a>01747     <span class="comment">// L1 stuff</span>
<a name="l01748"></a>01748     <span class="keyword">delete</span> distancesL1Ptr;  
<a name="l01749"></a>01749 
<a name="l01750"></a>01750     <span class="keyword">delete</span> runningSumL1Ptr;
<a name="l01751"></a>01751     
<a name="l01752"></a>01752 <span class="preprocessor">    #ifdef MYDEBUG</span>
<a name="l01753"></a>01753 <span class="preprocessor"></span>      <span class="keyword">delete</span> runningSumL1OverallPtr;
<a name="l01754"></a>01754       <span class="keyword">delete</span> runningSumL1ChainsPtr;
<a name="l01755"></a>01755       <span class="keyword">delete</span> sampleVariancesL1Ptr;
<a name="l01756"></a>01756       <span class="keyword">delete</span> rhatL1FlagPtr;
<a name="l01757"></a>01757 <span class="preprocessor">    #endif</span>
<a name="l01758"></a>01758 <span class="preprocessor"></span>
<a name="l01759"></a>01759     <span class="keyword">delete</span> Ws_L1Ptr;
<a name="l01760"></a>01760     <span class="keyword">delete</span> Bs_L1Ptr;
<a name="l01761"></a>01761     <span class="keyword">delete</span> estVarV_L1Ptr;
<a name="l01762"></a>01762     <span class="keyword">delete</span> rhat_L1Ptr;
<a name="l01763"></a>01763           
<a name="l01764"></a>01764     <span class="comment">/* since I throw an exception in the while loop if it is not a good loop,</span>
<a name="l01765"></a>01765 <span class="comment">     *  really the only reason for failing here is that we did not get the right </span>
<a name="l01766"></a>01766 <span class="comment">     * number of samples, but might as well leave it like this - belt &amp; braces*/</span>      
<a name="l01767"></a>01767     <span class="keywordflow">if</span> (!cancontinue || (samplesSoFar &lt; samplesNeeded) ) {
<a name="l01768"></a>01768       cout &lt;&lt; <span class="stringliteral">&quot;\nMCMC not successful&quot;</span> &lt;&lt; endl;
<a name="l01769"></a>01769       cout &lt;&lt; <span class="stringliteral">&quot;Output files will not be complete - delete or ignore:\n&quot;</span>
<a name="l01770"></a>01770           &lt;&lt; GRL1Filename
<a name="l01771"></a>01771           &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; GRLeavesFilename
<a name="l01772"></a>01772           &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; GR_vij_as_L1_Filename
<a name="l01773"></a>01773           &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; GR_vij_as_Leaves_Filename &lt;&lt; endl;
<a name="l01774"></a>01774       
<a name="l01775"></a>01775 <span class="preprocessor">      #ifdef MYDEBUG</span>
<a name="l01776"></a>01776 <span class="preprocessor"></span>        cout &lt;&lt; GRL1WorkingCalcsFilename;
<a name="l01777"></a>01777         cout &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt; GRLeavesWorkingCalcsFilename &lt;&lt; endl;
<a name="l01778"></a>01778 <span class="preprocessor">      #endif</span>
<a name="l01779"></a>01779 <span class="preprocessor"></span>      <span class="keywordflow">if</span> (logging = <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) {
<a name="l01780"></a>01780         cout &lt;&lt; samplesLogFilename &lt;&lt; endl;
<a name="l01781"></a>01781       }
<a name="l01782"></a>01782 <span class="preprocessor">      #ifdef MYDEBUG_OUTPUT</span>
<a name="l01783"></a>01783 <span class="preprocessor"></span>        cout &lt;&lt; baseSequenceStateCollationFilename &lt;&lt; <span class="stringliteral">&quot;*.txt,&quot;</span>
<a name="l01784"></a>01784         &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt;  baseSequenceStateAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt,&quot;</span>
<a name="l01785"></a>01785         &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span> &lt;&lt;  baseSequenceStateDiffsToAverageFilename &lt;&lt; <span class="stringliteral">&quot;*.txt&quot;</span> &lt;&lt; endl;
<a name="l01786"></a>01786 <span class="preprocessor">      #endif</span>
<a name="l01787"></a>01787 <span class="preprocessor"></span>      cout &lt;&lt; endl;
<a name="l01788"></a>01788       
<a name="l01789"></a>01789       <span class="keywordflow">if</span> (!cancontinue) {
<a name="l01790"></a>01790         <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;MCMC failed&quot;</span>);
<a name="l01791"></a>01791       }
<a name="l01792"></a>01792       <span class="keywordflow">if</span> (samplesSoFar &lt; samplesNeeded) {
<a name="l01793"></a>01793         <span class="comment">// we have not been able to get the required samples - need to give up</span>
<a name="l01794"></a>01794         <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;Did not get required number of samples&quot;</span>);
<a name="l01795"></a>01795       }
<a name="l01796"></a>01796     }
<a name="l01797"></a>01797     
<a name="l01798"></a>01798   } <span class="comment">// end check on successful insertion of data into histograms</span>
<a name="l01799"></a>01799   <span class="keywordflow">else</span> {
<a name="l01800"></a>01800     <span class="keywordflow">throw</span> std::runtime_error(<span class="stringliteral">&quot;MCMC failed: could not insert data into all starting histograms&quot;</span>);
<a name="l01801"></a>01801   }
<a name="l01802"></a>01802 
<a name="l01803"></a>01803     D++; <span class="comment">// counter to go through unlabDataVec</span>
<a name="l01804"></a>01804   } <span class="comment">// end of going through unlabDataVec</span>
<a name="l01805"></a>01805 
<a name="l01806"></a>01806   <span class="comment">//-----get marginal histograms for dimensions more than 1 --------------//</span>
<a name="l01807"></a>01807   <span class="comment">//---- and density region----------------//</span>
<a name="l01808"></a>01808   cout &lt;&lt; <span class="stringliteral">&quot;Get the density region and/or marginal histograms&quot;</span> &lt;&lt; endl;
<a name="l01809"></a>01809   <span class="comment">//Marginalise</span>
<a name="l01810"></a>01810    D = 0; <span class="comment">//reset D to 0</span>
<a name="l01811"></a>01811   <span class="comment">//iterate through each data set</span>
<a name="l01812"></a>01812   <span class="keywordflow">for</span> (unlabDataIt = unlabDataVec.begin(); 
<a name="l01813"></a>01813       unlabDataIt &lt; unlabDataVec.end(); unlabDataIt++) {  
<a name="l01814"></a>01814     <span class="keywordflow">if</span> (dataDim == 1) { <span class="comment">// get density region only for 1D data</span>
<a name="l01815"></a>01815       cout &lt;&lt; <span class="stringliteral">&quot;\nGet &quot;</span> &lt;&lt; cov &lt;&lt; <span class="stringliteral">&quot; density region for dataset &quot;</span> &lt;&lt; D;
<a name="l01816"></a>01816       
<a name="l01817"></a>01817       ostringstream stm1; stm1 &lt;&lt; cov;
<a name="l01818"></a>01818       <span class="keywordtype">string</span> covFileName = dirName;
<a name="l01819"></a>01819       covFileName += stm1.str(); 
<a name="l01820"></a>01820       covFileName += <span class="stringliteral">&quot;RegionBoxes&quot;</span>;
<a name="l01821"></a>01821       ostringstream stm2; stm2 &lt;&lt; D+1;
<a name="l01822"></a>01822       covFileName += <span class="stringliteral">&quot;Data&quot;</span>;
<a name="l01823"></a>01823       covFileName += stm2.str();
<a name="l01824"></a>01824       covFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l01825"></a>01825       
<a name="l01826"></a>01826       vector&lt;CollatorSPnode*&gt; covNodes;
<a name="l01827"></a>01827       vecMCMCHist[D]-&gt;findDensityRegion(cov, WeightPM[D], covNodes, covFileName);
<a name="l01828"></a>01828 
<a name="l01829"></a>01829       cout &lt;&lt; <span class="stringliteral">&quot; and output to &quot;</span> &lt;&lt; covFileName &lt;&lt; endl;
<a name="l01830"></a>01830     } <span class="comment">// done with dataDim == 1</span>
<a name="l01831"></a>01831   
<a name="l01832"></a>01832     <span class="comment">// only do the marginalisation if dimension &gt; 1</span>
<a name="l01833"></a>01833     <span class="keywordflow">else</span> { <span class="comment">//(dataDim &gt; 1) </span>
<a name="l01834"></a>01834       <span class="keywordtype">bool</span> done = <span class="keyword">false</span>;
<a name="l01835"></a>01835       <span class="keywordflow">while</span> (!done) {
<a name="l01836"></a>01836         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 1; i &lt;= dataDim; i++){
<a name="l01837"></a>01837           <span class="comment">//marginalise for univariate histograms</span>
<a name="l01838"></a>01838           cout &lt;&lt; <span class="stringliteral">&quot;\nMaking marginal histogram for coordinate &quot;</span> &lt;&lt; i 
<a name="l01839"></a>01839               &lt;&lt; endl;
<a name="l01840"></a>01840           <span class="keywordtype">int</span> myints[] = {i}; 
<a name="l01841"></a>01841           std::vector &lt; int &gt; margDims (myints, 
<a name="l01842"></a>01842                       myints + <span class="keyword">sizeof</span>(myints) / <span class="keyword">sizeof</span>(<span class="keywordtype">int</span>) );
<a name="l01843"></a>01843           <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> marginal;
<a name="l01844"></a>01844           marginal = vecMCMCHist[D]-&gt;marginalise(margDims);
<a name="l01845"></a>01845 
<a name="l01846"></a>01846           <span class="comment">//output to .txt          </span>
<a name="l01847"></a>01847           <span class="keywordtype">string</span> margFileName = dirName; 
<a name="l01848"></a>01848           margFileName += <span class="stringliteral">&quot;MarginalHist&quot;</span>;   <span class="comment">// provide a filename</span>
<a name="l01849"></a>01849           ostringstream stm1; stm1 &lt;&lt; i;
<a name="l01850"></a>01850           margFileName += stm1.str();
<a name="l01851"></a>01851           ostringstream stm4; stm4 &lt;&lt; D;
<a name="l01852"></a>01852           margFileName += <span class="stringliteral">&quot;Data&quot;</span>;
<a name="l01853"></a>01853           margFileName += stm4.str();
<a name="l01854"></a>01854           margFileName +=  <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l01855"></a>01855           <span class="comment">// output the marginal to file</span>
<a name="l01856"></a>01856           marginal.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(margFileName); 
<a name="l01857"></a>01857       
<a name="l01858"></a>01858           <span class="comment">// get density region</span>
<a name="l01859"></a>01859           cout &lt;&lt; <span class="stringliteral">&quot;Get &quot;</span> &lt;&lt; cov &lt;&lt; <span class="stringliteral">&quot; density region &quot;</span>;
<a name="l01860"></a>01860           ostringstream stm3;
<a name="l01861"></a>01861           stm3 &lt;&lt; cov;
<a name="l01862"></a>01862           <span class="keywordtype">string</span> covFileName = dirName;
<a name="l01863"></a>01863           covFileName += stm3.str(); 
<a name="l01864"></a>01864           covFileName += <span class="stringliteral">&quot;RegionBoxes&quot;</span>;
<a name="l01865"></a>01865           covFileName += stm1.str();
<a name="l01866"></a>01866           covFileName += <span class="stringliteral">&quot;Data&quot;</span>;
<a name="l01867"></a>01867           covFileName += stm4.str();
<a name="l01868"></a>01868           covFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l01869"></a>01869           vector&lt;CollatorSPnode*&gt; covNodes;
<a name="l01870"></a>01870           marginal.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2f477d16af1646398813009e1dabe2c2" title="Find the coverage value for boxes.">findDensityRegion</a>(cov, 0, covNodes, covFileName);  
<a name="l01871"></a>01871           cout &lt;&lt; <span class="stringliteral">&quot; and output to &quot;</span> &lt;&lt; covFileName &lt;&lt; endl;   
<a name="l01872"></a>01872             
<a name="l01873"></a>01873           <span class="keywordflow">if</span>(i == dataDim) { done = <span class="keyword">true</span>; } <span class="comment">// can&#39;t make marginal for</span>
<a name="l01874"></a>01874                                   <span class="comment">// pair dataDim-dataDim</span>
<a name="l01875"></a>01875           <span class="comment">//marginalise for (dataDim choose 2) pairs</span>
<a name="l01876"></a>01876           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j=(i+1); j &lt;= dataDim; j++) {
<a name="l01877"></a>01877             cout &lt;&lt; <span class="stringliteral">&quot;\nMaking marginal histogram for pair &quot;</span> &lt;&lt; i 
<a name="l01878"></a>01878               &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; j &lt;&lt; endl;
<a name="l01879"></a>01879             <span class="keywordtype">int</span> myints[] = {i,j}; 
<a name="l01880"></a>01880             std::vector &lt; int &gt; margDims (myints, 
<a name="l01881"></a>01881                     myints + <span class="keyword">sizeof</span>(myints) / <span class="keyword">sizeof</span>(<span class="keywordtype">int</span>) );
<a name="l01882"></a>01882             <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> marginal; 
<a name="l01883"></a>01883 
<a name="l01884"></a>01884             marginal = vecMCMCHist[D]-&gt;marginalise(margDims);
<a name="l01885"></a>01885             
<a name="l01886"></a>01886             margFileName = dirName;
<a name="l01887"></a>01887             margFileName += <span class="stringliteral">&quot;MarginalHist&quot;</span>;     <span class="comment">// provide a filename</span>
<a name="l01888"></a>01888             ostringstream stm2; stm2 &lt;&lt; j;
<a name="l01889"></a>01889             margFileName += stm1.str();
<a name="l01890"></a>01890             margFileName += <span class="stringliteral">&quot;_&quot;</span>;
<a name="l01891"></a>01891             margFileName += stm2.str();
<a name="l01892"></a>01892             margFileName += <span class="stringliteral">&quot;Data&quot;</span>;
<a name="l01893"></a>01893             margFileName += stm4.str();
<a name="l01894"></a>01894             margFileName +=  <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l01895"></a>01895             <span class="comment">// output the marginal to file</span>
<a name="l01896"></a>01896             marginal.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(margFileName);  
<a name="l01897"></a>01897             cout &lt;&lt; <span class="stringliteral">&quot;Marginal output is in &quot;</span> &lt;&lt; margFileName &lt;&lt; endl;
<a name="l01898"></a>01898         
<a name="l01899"></a>01899             <span class="comment">// get density region</span>
<a name="l01900"></a>01900             cout &lt;&lt; <span class="stringliteral">&quot;Get &quot;</span> &lt;&lt; cov &lt;&lt; <span class="stringliteral">&quot; density region &quot;</span>;
<a name="l01901"></a>01901             <span class="keywordtype">string</span> covFileName = dirName;
<a name="l01902"></a>01902             covFileName += stm3.str(); 
<a name="l01903"></a>01903             covFileName += <span class="stringliteral">&quot;RegionBoxes&quot;</span>;
<a name="l01904"></a>01904             covFileName += stm1.str();
<a name="l01905"></a>01905             covFileName += <span class="stringliteral">&quot;_&quot;</span>;
<a name="l01906"></a>01906             covFileName += stm2.str();
<a name="l01907"></a>01907             covFileName += <span class="stringliteral">&quot;Data&quot;</span>;
<a name="l01908"></a>01908             covFileName += stm4.str();
<a name="l01909"></a>01909             covFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l01910"></a>01910             vector&lt;CollatorSPnode*&gt; covNodes;
<a name="l01911"></a>01911             marginal.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2f477d16af1646398813009e1dabe2c2" title="Find the coverage value for boxes.">findDensityRegion</a>(cov, 0, covNodes, covFileName);            
<a name="l01912"></a>01912             cout &lt;&lt; <span class="stringliteral">&quot;and output to &quot;</span> &lt;&lt; covFileName &lt;&lt; endl;          
<a name="l01913"></a>01913           } <span class="comment">// end of j</span>
<a name="l01914"></a>01914         } <span class="comment">// end of i</span>
<a name="l01915"></a>01915       } <span class="comment">// end of while</span>
<a name="l01916"></a>01916     } <span class="comment">// end of dim &gt; 1</span>
<a name="l01917"></a>01917     D++; <span class="comment">//increment the data container count</span>
<a name="l01918"></a>01918   } <span class="comment">// end of going through unlabDataVed</span>
<a name="l01919"></a>01919   <span class="comment">//----end of marginalising histograms to get scatter histogram plots---//</span>
<a name="l01920"></a>01920   
<a name="l01921"></a>01921   <span class="comment">//TODO: The following procedure takes up a lot of memory. Need to make it </span>
<a name="l01922"></a>01922   <span class="comment">//more memory efficient!!!!</span>
<a name="l01923"></a>01923   <span class="comment">//--Sample from RVecData in unlabData and get estimated log-likelihood-//</span>
<a name="l01924"></a>01924   cout &lt;&lt; <span class="stringliteral">&quot;\nSample from simulated datasets and get estimated log-likelihood&quot;</span> 
<a name="l01925"></a>01925       &lt;&lt; endl;
<a name="l01926"></a>01926   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; numRep; i++) {
<a name="l01927"></a>01927     <span class="comment">//cout &lt;&lt; &quot;===========Round &quot; &lt;&lt; i &lt;&lt; &quot;==============&quot; &lt;&lt; endl;</span>
<a name="l01928"></a>01928     <span class="comment">// container to store the likelihood ratios for this i</span>
<a name="l01929"></a>01929     vector&lt; vector&lt;real&gt; &gt; loglikMat; 
<a name="l01930"></a>01930     
<a name="l01931"></a>01931     <span class="comment">//iterate through unlabDataVec</span>
<a name="l01932"></a>01932     D = 0; <span class="comment">// reset counter for unlabDataVec</span>
<a name="l01933"></a>01933     <span class="keywordflow">for</span> (unlabDataIt = unlabDataVec.begin(); unlabDataIt &lt; unlabDataVec.end(); 
<a name="l01934"></a>01934       unlabDataIt++) 
<a name="l01935"></a>01935     {
<a name="l01936"></a>01936       cout &lt;&lt; <span class="stringliteral">&quot;\nSampling from simulated dataset &quot;</span> &lt;&lt; D &lt;&lt; endl;
<a name="l01937"></a>01937   
<a name="l01938"></a>01938       <span class="comment">//container to store the likelihood ratios for this dataset</span>
<a name="l01939"></a>01939       vector&lt;real&gt; loglikVec; 
<a name="l01940"></a>01940     
<a name="l01941"></a>01941       <span class="comment">//label the data and make into RSSample</span>
<a name="l01942"></a>01942       <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a> labSampledData;
<a name="l01943"></a>01943   
<a name="l01944"></a>01944       <span class="comment">//we need to sample without repetition</span>
<a name="l01945"></a>01945       set&lt;int, less&lt;int&gt; &gt; indexSet;
<a name="l01946"></a>01946       <span class="keywordflow">if</span> ( samplingSize &gt;= (*unlabDataIt).size() ) { 
<a name="l01947"></a>01947         cerr &lt;&lt; <span class="stringliteral">&quot;\nTerminated. Sampling size more than or equal to n.&quot;</span> &lt;&lt; endl;
<a name="l01948"></a>01948         exit(1);
<a name="l01949"></a>01949       }
<a name="l01950"></a>01950       <span class="keywordflow">while</span> ( indexSet.size() &lt; samplingSize ) {
<a name="l01951"></a>01951         <span class="comment">//draw a random number in [0,1)</span>
<a name="l01952"></a>01952         <span class="keywordtype">double</span> rand = gsl_rng_uniform(r);
<a name="l01953"></a>01953         <span class="comment">//turn this into an index in [0, (*unlabDataIt).size()-1]</span>
<a name="l01954"></a>01954         <span class="keywordtype">int</span> index = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(ceil(rand*((*unlabDataIt).size()
<a name="l01955"></a>01955                                           -1)));
<a name="l01956"></a>01956         indexSet.insert(index);
<a name="l01957"></a>01957       }           
<a name="l01958"></a>01958       
<a name="l01959"></a>01959       <span class="comment">// sample from (*unlabDataIt)</span>
<a name="l01960"></a>01960       <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> sampledData;
<a name="l01961"></a>01961       set&lt;int, less&lt;int&gt; &gt;::iterator setIt;
<a name="l01962"></a>01962       <span class="keywordflow">for</span> (setIt = indexSet.begin(); setIt != indexSet.end(); setIt++) {
<a name="l01963"></a>01963         <span class="comment">//put element in allData indexed into data</span>
<a name="l01964"></a>01964         sampledData.push_back((*unlabDataIt)[*setIt]);
<a name="l01965"></a>01965       }
<a name="l01966"></a>01966       
<a name="l01967"></a>01967       <span class="keywordflow">if</span> (dataDim == 1) { <span class="comment">// only filter for 1D</span>
<a name="l01968"></a>01968         <span class="comment">//make a map for value of x (the key) and each of its respective </span>
<a name="l01969"></a>01969         <span class="comment">//counts (the value)</span>
<a name="l01970"></a>01970         map&lt;rvector, size_t, less&lt;rvector&gt; &gt; CountsMap;   
<a name="l01971"></a>01971         <span class="comment">//run a point mass filter to get &quot;atomic&quot; points</span>
<a name="l01972"></a>01972         cout &lt;&lt; <span class="stringliteral">&quot;run point mass filter over sampled data:&quot;</span> &lt;&lt; endl;
<a name="l01973"></a>01973         <a class="code" href="namespacesubpavings.shtml#a1e3a19279d328b2178aaac44beaaf2d6" title="Point mass filtering from data in a RVecData container. Takes an RVecData container and sieves throug...">pointMassFilter</a>(sampledData, CountsMap);
<a name="l01974"></a>01974     
<a name="l01975"></a>01975         <span class="comment">//EMFMap is not needed anymore actually - will see how i can turn it off or do something else</span>
<a name="l01976"></a>01976                                 <span class="comment">//TODO: see TODO comment in &quot;../../../src/sptools.cpp&quot; 1220ish Line</span>
<a name="l01977"></a>01977         map&lt;rvector, double, less&lt;rvector&gt; &gt; EMFMap; 
<a name="l01978"></a>01978         cout &lt;&lt; <span class="stringliteral">&quot;label data&quot;</span> &lt;&lt; endl;
<a name="l01979"></a>01979         <a class="code" href="namespacesubpavings.shtml#ab434c49dd2b267948d0048075ab0298c" title="Labels an RVecData object and store as an RSSample object. Takes an RVecData container and its corres...">labelDataFromFilter</a>(sampledData, labSampledData, CountsMap, EMFMap);
<a name="l01980"></a>01980       }
<a name="l01981"></a>01981       <span class="keywordflow">else</span> { <span class="comment">// for now make RVecData into RSSample object for higher dim</span>
<a name="l01982"></a>01982      <span class="comment">//TODO: This can be done (not for GT&#39;s PhD necessarily) &quot;trans-dimensional density estimation!&quot;</span>
<a name="l01983"></a>01983      <span class="comment">//this is a beautiful extension of estimating axis-parallel low-dimensional atomic densities </span>
<a name="l01984"></a>01984      <span class="comment">//inside root box in R^d or other subsets specified by prior constraints</span>
<a name="l01985"></a>01985         RVecData::iterator it;
<a name="l01986"></a>01986         <span class="keywordflow">for</span> (it = sampledData.begin(); it &lt; sampledData.end(); it++) {
<a name="l01987"></a>01987           <a class="code" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a> labThisData;
<a name="l01988"></a>01988           labThisData.<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a> = (*it);
<a name="l01989"></a>01989           labThisData.<a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a> = 1;
<a name="l01990"></a>01990           <span class="comment">//labThisData.Print(cout);</span>
<a name="l01991"></a>01991           labSampledData.<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.push_back(labThisData);
<a name="l01992"></a>01992         }
<a name="l01993"></a>01993       }
<a name="l01994"></a>01994 
<a name="l01995"></a>01995       cout &lt;&lt; <span class="stringliteral">&quot;Get estimated likelihood&quot;</span> &lt;&lt; endl;
<a name="l01996"></a>01996       <span class="comment">//get estimated log-likelihood over each histogram</span>
<a name="l01997"></a>01997       <span class="comment">//go through each histogram</span>
<a name="l01998"></a>01998       <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> k=0; k &lt; vecMCMCHist.size(); k++) {
<a name="l01999"></a>01999         real estLogLik;
<a name="l02000"></a>02000         <span class="keywordflow">if</span> (dataDim == 1) {
<a name="l02001"></a>02001           estLogLik=vecMCMCHist[k]-&gt;getEstLogLikelihoodFromRSSample(
<a name="l02002"></a>02002           labSampledData, dx, wt, WeightHistVec[k], WeightPMVec[k]);
<a name="l02003"></a>02003         }
<a name="l02004"></a>02004         <span class="keywordflow">else</span> {
<a name="l02005"></a>02005           estLogLik=vecMCMCHist[k]-&gt;getEstLogLikelihoodFromRSSample(
<a name="l02006"></a>02006           labSampledData, dx, wt);
<a name="l02007"></a>02007         }
<a name="l02008"></a>02008         cout &lt;&lt; setprecision(16) &lt;&lt;<span class="stringliteral">&quot;Estimated lik for Hist &quot;</span> &lt;&lt; k &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; estLogLik &lt;&lt; endl;
<a name="l02009"></a>02009         loglikVec.push_back(estLogLik);
<a name="l02010"></a>02010       }       
<a name="l02011"></a>02011       <span class="comment">//now get the ratios</span>
<a name="l02012"></a>02012       real Dividend = loglikVec[D];
<a name="l02013"></a>02013       <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> k=0; k &lt; loglikVec.size(); k++) {
<a name="l02014"></a>02014         <span class="comment">//Gloria&#39;s ratio of loglikelihoods: log(lik1)/log(lik2)</span>
<a name="l02015"></a>02015         <span class="comment">//loglikVec[k] = Dividend/loglikVec[k];</span>
<a name="l02016"></a>02016         <span class="comment">//Not quite log Likelihood Ratio -2log(lik1/lik2)=-2.0*log(lik1)+2*log(lik2)</span>
<a name="l02017"></a>02017         <span class="comment">//loglikVec[k] = -2.0*Dividend + 2.0*loglikVec[k];</span>
<a name="l02018"></a>02018         <span class="comment">//log relative likelihood: lik1/lik2=exp(log(lik1/lik2))=exp(log(lik1)-log(lik2))</span>
<a name="l02019"></a>02019         <span class="comment">//loglikVec[k] = exp(Dividend - loglikVec[k]);</span>
<a name="l02020"></a>02020         <span class="comment">//do nothing and leave the loglikelihoods as it is</span>
<a name="l02021"></a>02021       }
<a name="l02022"></a>02022       <span class="comment">//push back the log-likehood at the end of the vector</span>
<a name="l02023"></a>02023       loglikVec.push_back(Dividend);
<a name="l02024"></a>02024       loglikMat.push_back(loglikVec);
<a name="l02025"></a>02025 
<a name="l02026"></a>02026       D++; <span class="comment">// counter to go through unlabDataVec</span>
<a name="l02027"></a>02027     } <span class="comment">// end of going through unlabDataVec</span>
<a name="l02028"></a>02028 
<a name="l02029"></a>02029     <span class="comment">//output liklogMat for round i to .txt</span>
<a name="l02030"></a>02030     <span class="keywordtype">string</span> EstLikOut = dirName;
<a name="l02031"></a>02031     EstLikOut += <span class="stringliteral">&quot;EstLkl&quot;</span>;
<a name="l02032"></a>02032     ostringstream stm1;
<a name="l02033"></a>02033     stm1 &lt;&lt; i+1;
<a name="l02034"></a>02034     EstLikOut += stm1.str(); 
<a name="l02035"></a>02035     EstLikOut += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l02036"></a>02036     os.open(EstLikOut.c_str());
<a name="l02037"></a>02037     vector&lt; vector&lt;real&gt; &gt;::iterator it1;
<a name="l02038"></a>02038     vector&lt;real&gt;::iterator it2; 
<a name="l02039"></a>02039     <span class="keywordflow">for</span> (it1 = loglikMat.begin(); it1 &lt; loglikMat.end(); it1++) {
<a name="l02040"></a>02040       <span class="keywordflow">for</span> (it2 = (*it1).begin(); it2 &lt; (*it1).end(); it2++) {
<a name="l02041"></a>02041         os &lt;&lt; (*it2) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l02042"></a>02042         <span class="comment">//cout &lt;&lt; setprecision(16) &lt;&lt;(*it2) &lt;&lt; &quot;\t&quot;;</span>
<a name="l02043"></a>02043       }
<a name="l02044"></a>02044       os &lt;&lt; endl;
<a name="l02045"></a>02045       <span class="comment">//cout &lt;&lt; setprecision(16) &lt;&lt;endl;</span>
<a name="l02046"></a>02046     } 
<a name="l02047"></a>02047     os &lt;&lt; flush;
<a name="l02048"></a>02048     os.close();
<a name="l02049"></a>02049     cout &lt;&lt; <span class="stringliteral">&quot;Likelihood ratios output to &quot;</span> &lt;&lt; EstLikOut &lt;&lt; endl; 
<a name="l02050"></a>02050     cout &lt;&lt; <span class="stringliteral">&quot;=================================================&quot;</span> &lt;&lt; endl;          
<a name="l02051"></a>02051   } <span class="comment">// end of numRep</span>
<a name="l02052"></a>02052    <span class="comment">//-----------output the estimated likelihood to .txt file------------//</span>
<a name="l02053"></a>02053  <span class="comment">//---------------end of sampling and estimating likelihood----------------// </span>
<a name="l02054"></a>02054    
<a name="l02055"></a>02055    <span class="comment">//output the weights for the point mass so that we can plot the point mass</span>
<a name="l02056"></a>02056    <span class="comment">//and the normalised histogram</span>
<a name="l02057"></a>02057    <span class="comment">//output liklogMat for round i to .txt</span>
<a name="l02058"></a>02058    <span class="keywordtype">string</span> weightFileName = dirName;
<a name="l02059"></a>02059    weightFileName += <span class="stringliteral">&quot;Weights.txt&quot;</span>;
<a name="l02060"></a>02060     os.open(weightFileName.c_str());
<a name="l02061"></a>02061    vector&lt;map&lt;rvector, double, less&lt;rvector&gt; &gt; &gt;::iterator vecIt;
<a name="l02062"></a>02062    map&lt;rvector, double, less&lt;rvector&gt; &gt; ::iterator mapIt;
<a name="l02063"></a>02063   <span class="keywordflow">for</span> (vecIt = WeightPMVec.begin(); vecIt &lt; WeightPMVec.end(); vecIt++) {
<a name="l02064"></a>02064     <span class="keywordflow">for</span> (mapIt = (*vecIt).begin(); mapIt != (*vecIt).end(); mapIt++) {
<a name="l02065"></a>02065         os &lt;&lt; mapIt-&gt;first &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; mapIt-&gt;second;
<a name="l02066"></a>02066     }
<a name="l02067"></a>02067     os &lt;&lt; endl;
<a name="l02068"></a>02068   } 
<a name="l02069"></a>02069   
<a name="l02070"></a>02070     os &lt;&lt; flush;
<a name="l02071"></a>02071     os.close();
<a name="l02072"></a>02072     cout &lt;&lt; <span class="stringliteral">&quot;Weights output to &quot;</span> &lt;&lt; weightFileName &lt;&lt; endl; 
<a name="l02073"></a>02073     cout &lt;&lt; <span class="stringliteral">&quot;=================================================&quot;</span> &lt;&lt; endl;  
<a name="l02074"></a>02074    
<a name="l02075"></a>02075    <span class="comment">// free the random generator</span>
<a name="l02076"></a>02076    gsl_rng_free(r);
<a name="l02077"></a>02077 
<a name="l02078"></a>02078 
<a name="l02079"></a>02079   <span class="comment">//can i make the doMCMCGRAuto function to be a void function?</span>
<a name="l02080"></a>02080   <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> coll;
<a name="l02081"></a>02081   <span class="keywordflow">return</span> coll;
<a name="l02082"></a>02082 } <span class="comment">// end of AHABC</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="AHABCSimMCMCDblHurdle_8cpp.shtml">AHABCSimMCMCDblHurdle.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:11 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
