<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: IntervalArithIAE.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('IntervalArithIAE_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">IntervalArithIAE.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>1. Build histograms for a finite Gaussian mixture. 2. Locates all roots in a given interval [x] by a combination of a bisection scheme and the interval Newton operator. 3. Computes definite integrals over a given interval X by adaptively subdividing X into subintervals, and enclosing the graph of the integrand by a Taylor series expansion with remainder term. The quadrature scheme in 'riemannTerm' was obtained from the books  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &lt;iostream&gt;</code><br/>
<code>#include &quot;<a class="el" href="errorfunc_8hpp_source.shtml">errorfunc.hpp</a>&quot;</code><br/>
<code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;iterator&gt;</code><br/>
<code>#include &lt;valarray&gt;</code><br/>
<code>#include &lt;map&gt;</code><br/>
<code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;dataprep.hpp&quot;</code><br/>
</div>
<p><a href="IntervalArithIAE_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="IntervalArithIAE_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>1. Build histograms for a finite Gaussian mixture. 2. Locates all roots in a given interval [x] by a combination of a bisection scheme and the interval Newton operator. 3. Computes definite integrals over a given interval X by adaptively subdividing X into subintervals, and enclosing the graph of the integrand by a Taylor series expansion with remainder term. The quadrature scheme in 'riemannTerm' was obtained from the books </p>
<p>Aberth, O. "Precise Numerical Analysis" WCB Publishers, 1988. Aberth, O. "Precise Numerical Methods Using C++" Academic Press, 1998 4. Get the L1-error of the histogram by using steps 2 and 3 </p>

<p>Definition in file <a class="el" href="IntervalArithIAE_8cpp_source.shtml">IntervalArithIAE.cpp</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="IntervalArithIAE.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="IntervalArithIAE_8cpp_source.shtml#l00066">66</a> of file <a class="el" href="IntervalArithIAE_8cpp_source.shtml">IntervalArithIAE.cpp</a>.</p>

<p>References <a class="el" href="errorfunc_8cpp_source.shtml#l01432">bisect()</a>, <a class="el" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2">subpavings::countLinesInTxt()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l00223">findComp()</a>, <a class="el" href="errorfunc_8cpp_source.shtml#l01504">getL1error()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l01328">subpavings::SPSnode::getLeaves()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01216">subpavings::AdaptiveHistogram::getSubPaving()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l00925">subpavings::AdaptiveHistogram::insertFromRVec()</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00221">FinMix::M</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l03546">subpavings::AdaptiveHistogram::outputToTxtTabs()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00815">taylor::pow()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l01150">subpavings::AdaptiveHistogram::prioritySplit()</a>, <a class="el" href="errorfunc_8hpp_source.shtml#l00222">FinMix::S</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l00678">taylor::sqrt()</a>, and <a class="el" href="errorfunc_8hpp_source.shtml#l00220">FinMix::W</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">//-----------user-defined parameters</span>
  <span class="keywordflow">if</span> ( argc != 3 ) {
    cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: IntervalArithIAE Mix SampleSize&quot;</span> &lt;&lt; endl;
    exit(0);
  }
  <span class="keywordtype">int</span> mix = atoi(argv[1]);
  <span class="keywordtype">int</span> n = atoi(argv[2]);

  <span class="keywordtype">double</span> TOL = 1e-15; <span class="comment">// tolerance for root finding and integration routines</span>
  cout &lt;&lt; <span class="stringliteral">&quot;Tolerance is: &quot;</span> &lt;&lt; TOL &lt;&lt; endl;
  <span class="keywordtype">int</span> Deg = 2; <span class="comment">// Degree of Taylor series.</span>

  <span class="comment">//---------get the relevant parameters for the finite mixture density</span>
  <span class="comment">//string formatting</span>
   ofstream oss;         <span class="comment">// ofstream object</span>
    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
    oss.precision(10);

   <span class="comment">// read input from mix*.txt</span>
   <span class="keywordtype">string</span> mixfileName;
   mixfileName = <span class="stringliteral">&quot;MixtureFiles/mix&quot;</span>;
  std::ostringstream stmMix;
  stmMix &lt;&lt; mix;
  mixfileName += stmMix.str();
  mixfileName += <span class="stringliteral">&quot;.txt&quot;</span>;

  ifstream infile(mixfileName.c_str());
  <span class="keywordtype">double</span> Weight1, Weight2, Mean1, Mean2, Var1, Var2;
  <span class="keywordtype">double</span> W, M, V;

  <span class="comment">// create vectors for Weight, Mean, Variance</span>
  vector&lt;double&gt; Weight;
  vector&lt;double&gt; Mean;
  vector&lt;double&gt; Sigma;

  cout &lt;&lt; <span class="stringliteral">&quot;Reading in parameters of mixture &quot;</span> &lt;&lt; mix &lt;&lt; endl;
  ifstream file; <span class="comment">// create file for input</span>
  file.open(mixfileName.c_str());
  <span class="comment">// check if this file exists or not</span>
  <span class="keywordflow">if</span> ( !file ) { <span class="comment">// exit if file doesn&#39;t exists</span>
    cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; mixfileName &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
         &lt;&lt; endl;
    exit(1);
  }
  <span class="keywordflow">while</span> ( !infile.eof() ) {
    infile &gt;&gt; Weight1 &gt;&gt; Weight2 &gt;&gt; Mean1 &gt;&gt; Mean2 &gt;&gt; Var1 &gt;&gt; Var2;
    W=Weight1/Weight2;
    Weight.push_back(W);
    M=Mean1/Mean2;
    Mean.push_back(M);
    V=Var1/Var2;
    Sigma.push_back(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(V));
  }
  Weight.pop_back();
  Mean.pop_back();
  Sigma.pop_back();
  
  <span class="comment">//put the parameters as data members of the structure</span>
  <a class="code" href="structFinMix.shtml">FinMix</a> mixt;
  mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a> = Weight; mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a> = Mean; mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a> = Sigma;
  <span class="comment">//=========================end of setting up parameter===================//</span>

  <span class="comment">// ------- prepare to generate some data for the tests -----------</span>
    <span class="comment">// set up a random number generator for uniform rvs</span>
    <span class="keyword">const</span> gsl_rng_type * T;
    gsl_rng * r;
    <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
    gsl_rng_env_setup();
    T = gsl_rng_default;
    r = gsl_rng_alloc (T);
    <span class="keywordtype">long</span> s = time (NULL) * getpid();
    gsl_rng_set(r, s);

   <span class="comment">//set up a random number generator for gaussian rvs</span>
     <span class="keyword">const</span> gsl_rng_type * T1;
     gsl_rng * r1;
     gsl_rng_env_setup();
     T1 = gsl_rng_default;
     r1 = gsl_rng_alloc (T1);
     gsl_rng_set(r1,s);
     
  <span class="comment">//Generate n U(0,1) r.v. and determine component membership.</span>
  <span class="keywordtype">double</span> a=0, b=1;
  vector&lt;double&gt; u;
  <span class="keywordtype">int</span> j;
  <span class="keywordflow">for</span> (j = 0; j &lt; n; j++) {
      u.push_back(gsl_ran_flat(r, a, b));
  }

  <span class="comment">// number of components</span>
  <span class="keyword">const</span> <span class="keywordtype">int</span> comp = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(mixfileName) - 1;
  cout &lt;&lt; <span class="stringliteral">&quot;There are &quot;</span> &lt;&lt; comp &lt;&lt; <span class="stringliteral">&quot; components in this mixture.&quot;</span> &lt;&lt; endl;

  <span class="comment">// get cumulative sum of the weights</span>
  <span class="keywordtype">double</span> WeightCum[comp];
  <span class="comment">//initialize the array</span>
  WeightCum[0] = Weight[0]; 
  cout &lt;&lt; WeightCum[0] &lt;&lt; endl;
   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 1; j &lt; comp; j++) {
    WeightCum[j] = WeightCum[j-1] + Weight[j];
  }

  <span class="comment">//Create mixture data using component densities that are normal.</span>
  cout&lt;&lt;<span class="stringliteral">&quot;Creating mixture data...&quot;</span>&lt;&lt;endl; 
  <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData; <span class="comment">// a container to keep the data</span>
    cout &lt;&lt; <span class="stringliteral">&quot;Generating data: &quot;</span> &lt;&lt; endl;
    <span class="comment">//find the number of members generated from each component.</span>
    <span class="keywordflow">for</span> (j = 0; j &lt; comp; j++) {  
      <span class="keywordtype">int</span> ind=0;
      <a class="code" href="errorfunc_8cpp.shtml#a9e3934b3e6ab0c312ffc4e1af23b0417" title="Function to find the number of generated U(0,1) data that is less the weight of the components...">findComp</a>(u, ind, n, WeightCum, j);
      cout&lt;&lt;<span class="stringliteral">&quot;Component &quot;</span> &lt;&lt; j &lt;&lt; <span class="stringliteral">&quot; has &quot;</span> &lt;&lt; ind &lt;&lt; <span class="stringliteral">&quot; members.&quot;</span> &lt;&lt;endl;
      <span class="comment">//now generate the data</span>
      <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k =0; k &lt; ind; k++) {
        rvector thisrv(1);
        <span class="keywordtype">double</span> z = gsl_ran_gaussian(r1, Sigma[j]); <span class="comment">// generate a normal r.v.</span>
        thisrv[1] =Mean[j]+z; <span class="comment">// transform the r.v.         </span>
        theData.push_back(thisrv);
      }
    }
  <span class="comment">//-------------finish generating data---------------------------------//</span>

  <span class="comment">//--------make an Adaptive Histogram object with a specified box</span>
  <span class="comment">// domain is a hypercube</span>
   interval pavingInterval(-10,10);
   <span class="keywordtype">int</span> d = 1;
    ivector pavingBox(d);
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) pavingBox[i] = pavingInterval;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist(pavingBox);
  
  <span class="comment">// put the data from the container into the histogram, no splitting here</span>
  <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulPQSplit = <span class="keyword">false</span>;
  cout &lt;&lt; <span class="stringliteral">&quot;Inserting data... &quot;</span> &lt;&lt; endl;
  successfulInsertion = myHist.insertFromRVec(theData);

  <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> nodeCompCount;
  <a class="code" href="classsubpavings_1_1CritLeaves__GTE.shtml" title="Class for testing the number of bins of a histogram.">CritLeaves_GTE</a> critLeavesGTE(2);
  <span class="keywordflow">if</span> (successfulInsertion) {
    cout &lt;&lt; <span class="stringliteral">&quot;building the histogram...&quot;</span> &lt;&lt; endl;
    <span class="comment">// now split with priority queue</span>
    <span class="comment">// split node wth most pointsin first (compCount)</span>
    <span class="comment">// until leaves &gt;= minLeaves (critLeaves_GTE)</span>
    <span class="comment">// no minPoints or minVolB limitations on splittable nodes</span>
    <span class="keywordtype">double</span> beta = 0.99; <span class="comment">//re-calculate this!</span>
    <span class="keywordtype">size_t</span> maxLeafNodes = int(<a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(n, beta)); 
    successfulPQSplit = myHist.prioritySplit(nodeCompCount,
                critLeavesGTE, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, r, maxLeafNodes); <span class="comment">// no logs</span>
  }

  <span class="keywordflow">if</span> (successfulPQSplit) {
    <span class="comment">// optional - if you want to get a txt output of each histogram</span>
    <span class="comment">// create a name for the file to output</span>
     <span class="keywordtype">string</span> fileName;
     fileName = <span class="stringliteral">&quot;Hist&quot;</span>;
    <span class="comment">//convert j to a string</span>
    <span class="comment">// std::ostringstream stm2;</span>
    <span class="comment">// stm2 &lt;&lt; j;</span>
    <span class="comment">// add the stringed j to the filename</span>
    <span class="comment">// fileName += stm2.str();</span>
     fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
    <span class="comment">// To realize a file output</span>
     myHist.outputToTxtTabs(fileName);

    <span class="comment">//-----get the IAE of this histogram</span>
    interval totalArea(0.0);
    
    cout &lt;&lt; <span class="stringliteral">&quot;iterating through the leaf nodes to get the L1-error...&quot;</span> &lt;&lt; endl;
    <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves; <span class="comment">// set up empty container for leaf node pointers</span>
    <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
    myHist.getSubPaving()-&gt;getLeaves(leaves); <span class="comment">// fill the container</span>
    <span class="comment">// container is filled by reading leaves off tree from left to right</span>
    <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
      <span class="comment">//a container for the roots at this leaf node</span>
      vector&lt;intervalw&gt; rootVec;
      
       <span class="comment">// remember that it points to a pointer, so *it is still a ptr</span>
       <span class="comment">//get the height in this leaf node</span>
       <span class="keywordtype">double</span> fhat = (*it)-&gt;getCounter()/(*it)-&gt;nodeVolume()/n;
       cout &lt;&lt; <span class="stringliteral">&quot;-----------------------------&quot;</span> &lt;&lt; endl;
       cout &lt;&lt; <span class="stringliteral">&quot;height at this node: &quot;</span> &lt;&lt; fhat &lt;&lt; endl;
       
       <span class="comment">//get the box of this leaf node</span>
      ivector thisBox = (*it)-&gt;getBox();
      
      <span class="comment">//---------find the root at this domain</span>
      <span class="comment">// make an intervalw object using thisBox</span>
      rvector lb = Inf(thisBox);
      rvector ub = Sup(thisBox);
      <a class="code" href="classintervalw.shtml">intervalw</a> thisIntW(_double(lb[1]),_double(ub[1]));
      interval thisInt(_double(lb[1]),_double(ub[1]));
      
      <span class="comment">// find the root</span>
      cout &lt;&lt; <span class="stringliteral">&quot;finding roots at this node &quot;</span> &lt;&lt; thisInt &lt;&lt; endl;
      <a class="code" href="errorfunc_8cpp.shtml#a4a991d5ab1bd0a117e02af6f83369bab">bisect</a>(thisIntW, TOL, fhat, rootVec, Weight, Mean, Sigma); 
      
      <span class="comment">//---------find the area at this domain and take the absolute value</span>
      <span class="comment">//if rootVec is empty, there are no roots - so we can integrate over</span>
      <span class="comment">//this domain</span>
      <span class="keywordflow">if</span> ((rootVec.size() == 0)) { 
        <span class="comment">//get the L1 error</span>
        interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisInt, Deg, TOL, Weight, Mean, Sigma);
        <span class="comment">//add to totalArea</span>
        totalArea += diffArea;
      } <span class="comment">//end of rootVec is empty</span>

      <span class="keywordflow">else</span> { <span class="comment">//if rootVec is not empty</span>
        cout &lt;&lt; <span class="stringliteral">&quot;There are root(s)&quot;</span> &lt;&lt; endl;

        <span class="comment">// if there&#39;s only 1 root</span>
        <span class="keywordflow">if</span> (rootVec.size() == 1) {
          cout &lt;&lt; <span class="stringliteral">&quot;there is only one root..&quot;</span> &lt;&lt; endl;
          <span class="comment">// is the root at the left or right boundary?</span>
          <span class="keywordflow">if</span> ( (abs(Inf(thisInt) - inf(rootVec[0])) &lt; 1e-10) || 
              (abs(Sup(thisInt) - inf(rootVec[0])) &lt; 1e-10) ) {
            cout &lt;&lt; <span class="stringliteral">&quot;there&#39;s a root at the left/right boundary:&quot;</span> &lt;&lt; rootVec[0] &lt;&lt; endl;
            interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisInt, Deg, TOL, Weight, Mean, Sigma);
            totalArea += diffArea;
          }
          <span class="keywordflow">else</span> { <span class="comment">// the root is not at the boundaries</span>
            cout &lt;&lt; <span class="stringliteral">&quot;no root at the boundaries&quot;</span> &lt;&lt; endl;
            <span class="comment">//get the left sub-interval</span>
            interval thisSubIntLeft = interval(Inf(thisInt), sup(rootVec[0]));
            cout &lt;&lt; <span class="stringliteral">&quot;left interval: &quot;</span> &lt;&lt; thisSubIntLeft &lt;&lt; endl; 
            interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLeft, Deg, TOL, Weight, Mean, Sigma);
            totalArea += diffArea;
            
            <span class="comment">//get the right sub-interval</span>
            <span class="comment">//get the left sub-interval</span>
            interval thisSubIntRight = interval(inf(rootVec[0]), Sup(thisInt));
            cout &lt;&lt; <span class="stringliteral">&quot;right interval: &quot;</span> &lt;&lt; thisSubIntRight &lt;&lt; endl; 
            diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntRight, Deg, TOL, Weight, Mean, Sigma);
            totalArea += diffArea;
          }
        } <span class="comment">// end of rootVec.size() == 1</span>

        <span class="comment">// if there is more than 1 root</span>
        <span class="keywordflow">else</span> {
          cout &lt;&lt; <span class="stringliteral">&quot;let&#39;s have a look at all the roots:&quot;</span> &lt;&lt; endl;
          <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; rootVec.size(); i++) {
            cout &lt;&lt; rootVec[i] &lt;&lt; endl;
          }

          <span class="comment">//first check if the first root is at the boundary</span>
          <span class="keywordflow">if</span> ( abs(Inf(thisInt) - inf(rootVec[0])) &lt; 1e-16 ) {
            cout &lt;&lt; <span class="stringliteral">&quot;there&#39;s a root at the leftmost boundary:&quot;</span> &lt;&lt; endl;
            interval thisSubIntFirst = interval(Inf(thisInt), sup(rootVec[1]));
            cout &lt;&lt; <span class="stringliteral">&quot;0-th interval:&quot;</span> &lt;&lt; thisSubIntFirst &lt;&lt; endl; 
            interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntFirst, Deg, TOL,Weight, Mean, Sigma);
            totalArea += diffArea;
            
            <span class="comment">// now iterate through each root (except the first and last) and </span>
            <span class="comment">// get the sub-itnervals</span>
            cout &lt;&lt; <span class="stringliteral">&quot;iterating through each root&quot;</span> &lt;&lt; endl;
            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (rootVec.size() - 1); i++) {
              <span class="comment">// check that this is a unique root</span>
              cout &lt;&lt; <span class="stringliteral">&quot;checking that this is a unique root&quot;</span> &lt;&lt; endl;
              <span class="comment">// not the best way but temporarily...</span>
              <span class="keywordtype">bool</span> uniq = subset(abs(rootVec[i] - rootVec[i+1]), <a class="code" href="classintervalw.shtml">intervalw</a>(0, 1e-10));
              <span class="keywordflow">if</span> ( uniq ) { i++; }
              <span class="keywordflow">else</span> {
                cout &lt;&lt; <span class="stringliteral">&quot;the &quot;</span> &lt;&lt; i+1 &lt;&lt; <span class="stringliteral">&quot;-th root is: &quot;</span> &lt;&lt; rootVec[i+1] &lt;&lt; endl;
                <span class="keywordflow">if</span> ( (i+2) &gt; rootVec.size() ) { <span class="comment">// already no more roots</span>
                  interval thisSubInt = interval(inf(rootVec[i+1]), Sup(thisInt));
                  cout &lt;&lt; i+1 &lt;&lt; <span class="stringliteral">&quot;-th interval: &quot;</span> &lt;&lt; thisSubInt &lt;&lt; endl;
                  interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt, Deg, TOL, Weight, Mean, Sigma);
                  totalArea += diffArea;
                }
                <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
                  interval thisSubInt = interval(inf(rootVec[i+1]), sup(rootVec[i+2]));
                  cout &lt;&lt; i+1 &lt;&lt; <span class="stringliteral">&quot;-th interval: &quot;</span> &lt;&lt; thisSubInt &lt;&lt; endl;
                  interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt, Deg, TOL, Weight, Mean, Sigma);
                  totalArea += diffArea;
                }
              }
            } <span class="comment">// end of iterate through each root (excep the first and last)</span>
            
            <span class="comment">// now check if the last root is at the boundary</span>
            <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(rootVec[rootVec.size()-1])) &lt; 1e-16 ) {
              cout &lt;&lt; <span class="stringliteral">&quot;there&#39;s a root at the rightmost boundary:&quot;</span> &lt;&lt; endl;
              interval thisSubIntLast = interval(inf(rootVec[rootVec.size()-2]), Sup(thisInt));
              cout &lt;&lt; <span class="stringliteral">&quot;last interval: &quot;</span> &lt;&lt; thisSubIntLast &lt;&lt; endl; 
              interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast, Deg, TOL, Weight, Mean, Sigma);
              totalArea += diffArea;
            }
            <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
            interval thisSubIntLast = interval(inf(rootVec[rootVec.size()-1]), Sup(thisInt));
              cout &lt;&lt; <span class="stringliteral">&quot;last interval: &quot;</span> &lt;&lt; thisSubIntLast &lt;&lt; endl; 
              interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast, Deg, TOL, Weight, Mean, Sigma);
              totalArea += diffArea;
            } 
          } <span class="comment">// end of if first root is the boundary</span>
          <span class="keywordflow">else</span> {
          <span class="comment">//if it is not the boundary, make the first sub-interval</span>
            interval thisSubIntFirst = interval(Inf(thisInt), sup(rootVec[0]));
            cout &lt;&lt; <span class="stringliteral">&quot;0-th interval: &quot;</span> &lt;&lt; thisSubIntFirst &lt;&lt; endl; 
            interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntFirst, Deg, TOL, Weight, Mean, Sigma);
            totalArea += diffArea;
            
            <span class="comment">// now iterate through each root (except the first and last) and </span>
            <span class="comment">// get the sub-itnervals</span>
            cout &lt;&lt; <span class="stringliteral">&quot;iterating through each root&quot;</span> &lt;&lt; endl;
            <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (rootVec.size() - 1); i++) {
              <span class="comment">// check that this is a unique root</span>
              cout &lt;&lt; <span class="stringliteral">&quot;checking that this is a unique root&quot;</span> &lt;&lt; endl;
              <span class="comment">// not the best way but temporarily...</span>
              <span class="keywordtype">bool</span> uniq = subset(abs(rootVec[i] - rootVec[i+1]), <a class="code" href="classintervalw.shtml">intervalw</a>(0, 1e-10));
              <span class="keywordflow">if</span> ( uniq ) { i++; }
              <span class="keywordflow">else</span> {
                cout &lt;&lt; <span class="stringliteral">&quot;the &quot;</span> &lt;&lt; i+1 &lt;&lt; <span class="stringliteral">&quot;-th root is: &quot;</span> &lt;&lt; rootVec[i+1] &lt;&lt; endl;
                <span class="keywordflow">if</span> ( (i+2) &gt; rootVec.size() ) { <span class="comment">// already no more roots</span>
                  interval thisSubInt = interval(inf(rootVec[i+1]), Sup(thisInt));
                  cout &lt;&lt; <span class="stringliteral">&quot;the &quot;</span> &lt;&lt; i+1 &lt;&lt; <span class="stringliteral">&quot;-th interval: &quot;</span> &lt;&lt; thisSubInt &lt;&lt; endl;
                  interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt, Deg, TOL, Weight, Mean, Sigma);
                  totalArea += diffArea;
                }
                <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
                  interval thisSubInt = interval(inf(rootVec[i+1]), sup(rootVec[i+2]));
                  cout &lt;&lt; <span class="stringliteral">&quot;the &quot;</span> &lt;&lt; i+1 &lt;&lt; <span class="stringliteral">&quot;-th interval: &quot;</span> &lt;&lt; thisSubInt &lt;&lt; endl;
                  interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt, Deg, TOL, Weight, Mean, Sigma);
                  totalArea += diffArea;
                }
              }
            } <span class="comment">// end of iterate through each root (excep the first and last)</span>
            
            <span class="comment">// now check if the last root is at the boundary</span>
            <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(rootVec[rootVec.size()-1])) &lt; 1e-16 ) {
              cout &lt;&lt; <span class="stringliteral">&quot;there&#39;s a root at the rightmost boundary:&quot;</span> &lt;&lt; endl;
              interval thisSubIntLast = interval(inf(rootVec[rootVec.size()-2]), Sup(thisInt));
              cout &lt;&lt; <span class="stringliteral">&quot;last interval: &quot;</span> &lt;&lt; thisSubIntLast &lt;&lt; endl; 
              interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast, Deg, TOL, Weight, Mean, Sigma);
              totalArea += diffArea;
            }
            <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
            interval thisSubIntLast = interval(inf(rootVec[rootVec.size()-1]), Sup(thisInt));
              cout &lt;&lt; <span class="stringliteral">&quot;last interval: &quot;</span> &lt;&lt; thisSubIntLast &lt;&lt; endl; 
              interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast, Deg, TOL, Weight, Mean, Sigma);
              totalArea += diffArea;
            } 
          } <span class="comment">// end of first root is not the boundary</span>
        } <span class="comment">// end of rootVec.size() &gt; 1</span>
      } <span class="comment">// end of rootVec is not empty</span>

    } <span class="comment">// end of iterating through the leaf nodes</span>
    
    cout &lt;&lt; <span class="stringliteral">&quot;IAE: &quot;</span> &lt;&lt; totalArea &lt;&lt; endl;
    } <span class="comment">// end of successfulPQsplit</span>
    
  <span class="keywordflow">else</span> {
     cerr &lt;&lt; <span class="stringliteral">&quot;did not make histogram.&quot;</span> &lt;&lt; endl;
   }

  <span class="comment">// free the random number generator</span>
  gsl_rng_free (r);

  <span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="IntervalArithIAE_8cpp.shtml">IntervalArithIAE.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:21 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
