<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: GeneralScheffe.cpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('GeneralScheffe_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">GeneralScheffe.cpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">
<div class="textblock"><code>#include &lt;time.h&gt;</code><br/>
<code>#include &lt;fstream&gt;</code><br/>
<code>#include &lt;sstream&gt;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="histall_8hpp_source.shtml">histall.hpp</a>&quot;</code><br/>
<code>#include &quot;dataprep.hpp&quot;</code><br/>
<code>#include &lt;vector&gt;</code><br/>
<code>#include &lt;iterator&gt;</code><br/>
<code>#include &lt;valarray&gt;</code><br/>
<code>#include &quot;<a class="el" href="errorfunc_8hpp_source.shtml">errorfunc.hpp</a>&quot;</code><br/>
<code>#include &lt;limits&gt;</code><br/>
</div>
<p><a href="GeneralScheffe_8cpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">int&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="GeneralScheffe_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">main</a> (int argc, char *argv[])</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock">
<p>Definition in file <a class="el" href="GeneralScheffe_8cpp_source.shtml">GeneralScheffe.cpp</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="a0ddf1224851353fc92bfbff6f499fa97"></a><!-- doxytag: member="GeneralScheffe.cpp::main" ref="a0ddf1224851353fc92bfbff6f499fa97" args="(int argc, char *argv[])" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">int <a class="el" href="ImageSetDiff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a> </td>
          <td>(</td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>argc</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">char *&#160;</td>
          <td class="paramname"><em>argv</em>[]&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="GeneralScheffe_8cpp_source.shtml#l00042">42</a> of file <a class="el" href="GeneralScheffe_8cpp_source.shtml">GeneralScheffe.cpp</a>.</p>

<p>References <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00521">subpavings::AdaptiveHistogramCollator::addToCollation()</a>, <a class="el" href="toolz_8cpp_source.shtml#l00116">DrawUnifBox()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01658">subpavings::AdaptiveHistogramCollator::getHistScheffeSet()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01683">subpavings::AdaptiveHistogramCollator::getHistScheffeWinner()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01740">subpavings::AdaptiveHistogramCollator::getHistYatSet()</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l01063">subpavings::AdaptiveHistogramCollator::getLeafLevelsString()</a>, <a class="el" href="spsnode_8cpp_source.shtml#l01328">subpavings::SPSnode::getLeaves()</a>, <a class="el" href="adaptivehistogram_8cpp_source.shtml#l01216">subpavings::AdaptiveHistogram::getSubPaving()</a>, <a class="el" href="adaptivehistogram_8hpp_source.shtml#l00925">subpavings::AdaptiveHistogram::insertFromRVec()</a>, <a class="el" href="sptypes_8hpp_source.shtml#l00093">subpavings::NOLOG</a>, <a class="el" href="adaptivehistogramcollator_8cpp_source.shtml#l00802">subpavings::AdaptiveHistogramCollator::outputToTxtTabs()</a>, and <a class="el" href="adaptivehistogram_8cpp_source.shtml#l02971">subpavings::AdaptiveHistogram::splitToShape()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">//===========user-defined parameters==============================//</span>
  <span class="keywordflow">if</span> ( argc != 4 ) {
    cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: UnifScheffe n dataSeed simNum&quot;</span> &lt;&lt; endl;
    exit(0);
  }

   <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[1]); <span class="comment">//number of points</span>
   <span class="keywordtype">int</span> d = 1; <span class="comment">// dimensions</span>
   <span class="keywordtype">long</span> <span class="keywordtype">int</span> dataSeed = atoi(argv[2]); <span class="comment">//seed for generating data</span>
   <span class="keywordtype">size_t</span> simNum = atoi(argv[3]); <span class="comment">//which data set </span>
  
   <span class="comment">//==============set formatting for input to oss=============================</span>
   ofstream oss;         <span class="comment">// ofstream object</span>
   oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
   oss.precision(10);
   std::ostringstream stm;
  stm &lt;&lt; simNum;
  
   <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
   <span class="keyword">const</span> gsl_rng_type * T;
   gsl_rng * r;             
   gsl_rng_env_setup();
   T = gsl_rng_default;
   r = gsl_rng_alloc (T);
   gsl_rng_set(r, dataSeed);

   <span class="comment">//data generating partition</span>
   ivector pavingBox(d);
   interval pavingInterval(0,1);
   <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) { pavingBox[i] = pavingInterval; }

   <span class="comment">// data sampled as uniform mixture over leaves of sub-paving myPart</span>
   <span class="comment">//make an Adaptive Histogram object with a specified box</span>
   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myPart(pavingBox);
   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist(pavingBox);
   
   <span class="keywordtype">double</span> rootBoxVol = (myPart.getSubPaving())-&gt;nodeVolume();
   <span class="comment">// a container for the boxes</span>
   vector&lt;ivector&gt; Pboxes;

  <span class="keywordtype">string</span> mixShape = <span class="stringliteral">&quot;3, 4, 4, 2, 2, 3, 3&quot;</span>; 
  myPart.splitToShape(mixShape);<span class="comment">// uniform mixture   </span>

  <span class="keywordtype">string</span> mixShape2 = <span class="stringliteral">&quot;5,6,7,8,9,10,10,5,5,6,6,5,6,6,7,7,6,5,5,6,7,8,9,10,10,5,7,8,8,6,5,5,5,5,7,7,7,8,9,10,10,5,5,5,6,7,7,5,5,6,6,5,5,5,5,5,5,6,7,8,9,10,10&quot;</span>; 
  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myPart2(pavingBox);
  myPart2.splitToShape(mixShape2);

  myPart.splitToShape(mixShape);<span class="comment">// uniform mixture   </span>
   <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> trueLeaves; <span class="comment">// set up empty container for leaf node pointers</span>
   <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it;
   myPart.getSubPaving()-&gt;getLeaves(trueLeaves); <span class="comment">// fill the container</span>
   
   <span class="comment">// container is filled by reading leaves off tree from left to right</span>
   <span class="keywordflow">for</span>(it = trueLeaves.begin(); it &lt; trueLeaves.end(); it++) {
      Pboxes.push_back((*it)-&gt;getBox());
  }
  <span class="keywordtype">size_t</span> PartSize = Pboxes.size();

  cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Generating dataset &quot;</span> &lt;&lt; simNum &lt;&lt; <span class="stringliteral">&quot;...&quot;</span> &lt;&lt; endl;
   <span class="comment">// data sampled as uniform equi-mixture over leaves of sub-paving myPart</span>
   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   
   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> validData;
   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
        rvector thisrv(d);
        <span class="keywordtype">size_t</span> RndBoxNum = floor(PartSize*gsl_rng_uniform(r));
        <span class="comment">//cout &lt;&lt; RndBoxNum &lt;&lt; &quot;\t&quot; &lt;&lt; Pboxes[RndBoxNum] &lt;&lt; endl;</span>
        thisrv = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a>(r,Pboxes[RndBoxNum]);         
      
      <span class="keywordflow">if</span> ( i &lt; <span class="keywordtype">int</span>(n/3) ) { validData.push_back(thisrv); }
      <span class="keywordflow">else</span> { theData.push_back(thisrv); }
   }  <span class="comment">// data  should be in theData</span>
   
  cout &lt;&lt; n - int(n/3) &lt;&lt; <span class="stringliteral">&quot; training data and &quot;</span> &lt;&lt; int(n/3) &lt;&lt; <span class="stringliteral">&quot; validation data&quot;</span> &lt;&lt; endl;
  <span class="comment">//===============finish generating data============================//</span>

  <span class="comment">//==================Hold-out MDE===========================================</span>
  cout &lt;&lt; <span class="stringliteral">&quot;========================================================&quot;</span> &lt;&lt; endl;
  cout &lt;&lt; <span class="stringliteral">&quot;Run hold out estimation...&quot;</span> &lt;&lt; endl;

  <span class="comment">//=========insert data into an AdaptiveHistogramValidation object=========//</span>
  <span class="comment">// stopping criteria </span>
  <span class="keywordtype">bool</span> stopCrit = <span class="keyword">false</span>; <span class="comment">// to remove this?</span>

  <span class="comment">//maximum number of leaf nodes allowed</span>
  <span class="keywordtype">int</span> holdOutCount = int(n/3);
  <span class="keywordtype">int</span> trainCount = n-holdOutCount; 
  cout &lt;&lt; n-holdOutCount &lt;&lt; <span class="stringliteral">&quot; training data and &quot;</span> 
      &lt;&lt; holdOutCount &lt;&lt; <span class="stringliteral">&quot; validation data inserted.&quot;</span> &lt;&lt; endl; 
  <span class="comment">//size_t maxLeafNodes = int(trainCount/log(trainCount*(2*d+1))); // temporarily</span>
  <span class="keywordtype">size_t</span> maxLeafNodes = 50;
  <span class="comment">//cout &lt;&lt; &quot;max leaf nodes: &quot; &lt;&lt; maxLeafNodes &lt;&lt; endl;</span>

  <span class="comment">// indicators</span>
   <span class="keywordtype">bool</span> successfulInsertion1 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulInsertion2 = <span class="keyword">false</span>;
   
   <span class="keywordtype">bool</span> successfulPQSplit1 = <span class="keyword">false</span>;
   <span class="keywordtype">bool</span> successfulPQSplit2 = <span class="keyword">false</span>;
     

  <span class="comment">//container for scheffe tournament candidates</span>
  vector&lt;AdaptiveHistogram&gt; optHist;
  <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn;
  myHist.insertFromRVec(theData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
  optHist.push_back(myHist);
    
  myPart.insertFromRVec(theData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
  optHist.push_back(myPart);
  
  myPart2.insertFromRVec(theData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
  optHist.push_back(myPart2);
  
  
  cout &lt;&lt; <span class="stringliteral">&quot;==================Start the Scheffe tournament=======&quot;</span> &lt;&lt; endl;
  ofstream os;         <span class="comment">// ofstream object</span>
  os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
  os.precision(5);

  vector&lt;real&gt; TrueDelta;
  
  cout &lt;&lt; optHist.size() &lt;&lt; endl;
  
  <span class="comment">// now run the tournament (pairwise)</span>
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; optHist.size(); i++) {
    <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; optHist.size(); j++) {
      <span class="keywordflow">if</span> ( i!=j &amp;&amp; i &lt; j ) {
          cout &lt;&lt; <span class="stringliteral">&quot;=========&quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot; vs &quot;</span> &lt;&lt; j &lt;&lt; <span class="stringliteral">&quot;==========&quot;</span> &lt;&lt; endl;

          <span class="comment">//set up a vector the scheffe set</span>
          vector&lt; vector&lt; set&lt;CollatorSPnode*, less&lt;CollatorSPnode*&gt; &gt; &gt; &gt; vecScheffeSetVec;

          <span class="comment">//set up vectors for tournament winners</span>
          vector&lt; vector&lt;int&gt; &gt; vecWinnerVec;
          vector&lt; vector&lt;double&gt; &gt; vecDeltaWinnerVec;

          
          <span class="comment">//add into the collator</span>
          <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> coll1;
          coll1.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(optHist[i]);
          coll1.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(optHist[j]);
          
          <span class="comment">//add the validation data into the collator</span>
          <span class="keywordtype">string</span> thisShape = coll1.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2a2da27e64f75b4080d6a967544872e0" title="get leaf levels string">getLeafLevelsString</a>();
          <span class="comment">//cout &lt;&lt; thisShape &lt;&lt; endl;</span>
          <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> validHist(pavingBox);
          validHist.splitToShape(thisShape);
          validHist.insertFromRVec(validData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
          coll1.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(validHist);

          coll1.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(<span class="stringliteral">&quot;Coll.txt&quot;</span>);

          cout &lt;&lt; <span class="stringliteral">&quot;Get the Scheffe Set: &quot;</span> &lt;&lt; endl;
          coll1.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#af9464148c1e5161940b6d6f3c5b2f965">getHistScheffeSet</a>(vecScheffeSetVec);

          cout &lt;&lt; <span class="stringliteral">&quot;Get the winners for each ordered pair: &quot;</span> &lt;&lt; endl; 
          coll1.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ae4dd25063cc945058665a4b0a3150c89">getHistScheffeWinner</a>(vecScheffeSetVec, vecWinnerVec, vecDeltaWinnerVec);
        

          cout &lt;&lt; <span class="stringliteral">&quot;Get the Yatracos set for theorem checks: &quot;</span> &lt;&lt; endl;
          vector&lt; vector&lt; set&lt;CollatorSPnode*, less&lt;CollatorSPnode*&gt; &gt; &gt; &gt; vecYatSetVec;
          coll1.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a60443f6dfa512a30c4b8fb0ee96072b9">getHistYatSet</a>(vecYatSetVec);
        
        <span class="comment">//=======output ST results  to .txt files</span>
        vector&lt; vector&lt;double&gt; &gt;::iterator it1; vector&lt;double&gt;::iterator it2;
        vector&lt; vector&lt;int&gt; &gt;::iterator it11; vector&lt;int&gt;::iterator it22;
        ostringstream stm1, stm2;
        <span class="keywordtype">string</span> fileNameWinner = <span class="stringliteral">&quot;STWinner&quot;</span>;
        stm1 &lt;&lt; i;
        stm2 &lt;&lt; j;
        fileNameWinner += stm1.str();
        fileNameWinner += stm2.str();
        fileNameWinner += <span class="stringliteral">&quot;.txt&quot;</span>;  
        os.open(fileNameWinner.c_str());        
        <span class="keywordflow">for</span> (it11 = vecWinnerVec.begin(); it11 &lt; vecWinnerVec.end(); it11++){ 
          <span class="keywordflow">for</span> (it22 = (*it11).begin(); it22 &lt; (*it11).end(); it22++){
          os &lt;&lt; (*it22) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
          }
          os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
        }          
        os &lt;&lt; flush;
        os.close();
        std::cout &lt;&lt; <span class="stringliteral">&quot;Winners for each theta output to &quot;</span> 
            &lt;&lt; fileNameWinner &lt;&lt; <span class="stringliteral">&quot;.&quot;</span> &lt;&lt; endl; 
      
      }
    }
  }

  <span class="comment">//================scheffe tournament for all the 8 candidates</span>
  cout &lt;&lt; <span class="stringliteral">&quot;Scheffe tounrmanet for all candidates: &quot;</span> &lt;&lt; endl;
  <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> coll;

  <span class="comment">//set up a vector the scheffe set</span>
  vector&lt; vector&lt; set&lt;CollatorSPnode*, less&lt;CollatorSPnode*&gt; &gt; &gt; &gt; vecScheffeSetVec;
  vector&lt;real&gt; IAEMDE;
  <span class="comment">//set up vectors for tournament winners</span>
  vector&lt; vector&lt;int&gt; &gt; vecWinnerVec;
  vector&lt; vector&lt;double&gt; &gt; vecDeltaWinnerVec;
  <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; optHist.size(); i++) {
    coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(optHist[i]);
  }
  
  <span class="keywordtype">string</span> thisShape = coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2a2da27e64f75b4080d6a967544872e0" title="get leaf levels string">getLeafLevelsString</a>();
  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> validHist(pavingBox);
  validHist.splitToShape(thisShape);
  validHist.insertFromRVec(validData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
  coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(validHist);

  cout &lt;&lt; <span class="stringliteral">&quot;Get the Scheffe Set: &quot;</span> &lt;&lt; endl;
  coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#af9464148c1e5161940b6d6f3c5b2f965">getHistScheffeSet</a>(vecScheffeSetVec);

  cout &lt;&lt; <span class="stringliteral">&quot;Get the winners for each ordered pair: &quot;</span> &lt;&lt; endl; 
  coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ae4dd25063cc945058665a4b0a3150c89">getHistScheffeWinner</a>(vecScheffeSetVec, vecWinnerVec, vecDeltaWinnerVec);

  cout &lt;&lt; <span class="stringliteral">&quot;Get the Yatracos set for theorem checks: &quot;</span> &lt;&lt; endl;
  vector&lt; vector&lt; set&lt;CollatorSPnode*, less&lt;CollatorSPnode*&gt; &gt; &gt; &gt; vecYatSetVec;
  coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a60443f6dfa512a30c4b8fb0ee96072b9">getHistYatSet</a>(vecYatSetVec);
  
    <span class="comment">//=======output ST results  to .txt files</span>
    vector&lt; vector&lt;double&gt; &gt;::iterator it1; vector&lt;double&gt;::iterator it2;
    vector&lt; vector&lt;int&gt; &gt;::iterator it11; vector&lt;int&gt;::iterator it22;
    ostringstream stm1, stm2;
    <span class="keywordtype">string</span> fileNameWinner = <span class="stringliteral">&quot;STWinnerAll.txt&quot;</span>;  
    os.open(fileNameWinner.c_str());
    <span class="keywordflow">for</span> (it11 = vecWinnerVec.begin(); it11 &lt; vecWinnerVec.end(); it11++){ 
      <span class="keywordflow">for</span> (it22 = (*it11).begin(); it22 &lt; (*it11).end(); it22++){
      os &lt;&lt; (*it22) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
      }
      os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
    }          
    os &lt;&lt; flush;
    os.close();
    std::cout &lt;&lt; <span class="stringliteral">&quot;Winners for each theta output to &quot;</span> 
        &lt;&lt; fileNameWinner &lt;&lt; <span class="stringliteral">&quot;.&quot;</span> &lt;&lt; endl; 


<span class="comment">/*</span>
<span class="comment">ofstream os1;</span>
<span class="comment">string fileNameDeltaWinner = &quot;STDeltaWinner&quot;;</span>
<span class="comment">fileNameDeltaWinner += &quot;.txt&quot;;  </span>
<span class="comment">os.open(fileNameDeltaWinner.c_str());</span>
<span class="comment">for (it1 = vecDeltaWinnerVec.begin(); it1 &lt; vecDeltaWinnerVec.end(); it1++){ </span>
<span class="comment">  for (it2 = (*it1).begin(); it2 &lt; (*it1).end(); it2++){</span>
<span class="comment">  os &lt;&lt; (*it2) &lt;&lt; &quot;\t&quot;;</span>
<span class="comment">  }</span>
<span class="comment">  os &lt;&lt; &quot;\n&quot;;</span>
<span class="comment">}          </span>
<span class="comment">os &lt;&lt; flush;</span>
<span class="comment">os.close();</span>
<span class="comment">std::cout &lt;&lt; &quot;DeltaWinner for each theta output to &quot; </span>
<span class="comment">    &lt;&lt; fileNameDeltaWinner &lt;&lt; &quot;.&quot; &lt;&lt; endl; </span>
<span class="comment">*/</span> 
<span class="comment">//} // end of if successfulPQSplit</span>
<span class="comment">//========end of Scheffe tournament=====================//</span>

<span class="comment">// free the random number generator</span>
gsl_rng_free(r);

<span class="keywordflow">return</span> 0;
}
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="GeneralScheffe_8cpp.shtml">GeneralScheffe.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:20 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
