<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: GeneralScheffe.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('GeneralScheffe_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">GeneralScheffe.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="GeneralScheffe_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* </span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (c) 2004 Warwick Tucker &lt;warwick@math.uu.se&gt;</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00004"></a>00004 <span class="comment"> * Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00007"></a>00007 <span class="comment"> *</span>
<a name="l00008"></a>00008 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00009"></a>00009 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00010"></a>00010 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00011"></a>00011 <span class="comment"> * your option) any later version.</span>
<a name="l00012"></a>00012 <span class="comment"> * </span>
<a name="l00013"></a>00013 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment"> * General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment"> * </span>
<a name="l00018"></a>00018 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00020"></a>00020 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00026"></a>00026 <span class="comment">// include header files</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;dataprep.hpp&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;iterator&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;valarray&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="errorfunc_8hpp.shtml" title="L1-error function declarations.">errorfunc.hpp</a>&quot;</span> 
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;limits&gt;</span> <span class="comment">// to use negative infinity</span>
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 <span class="keyword">using namespace </span>std;
<a name="l00040"></a>00040 <span class="keyword">using namespace </span>cxsc;
<a name="l00041"></a>00041 
<a name="l00042"></a><a class="code" href="GeneralScheffe_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00042</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00043"></a>00043 {
<a name="l00044"></a>00044   <span class="comment">//===========user-defined parameters==============================//</span>
<a name="l00045"></a>00045   <span class="keywordflow">if</span> ( argc != 4 ) {
<a name="l00046"></a>00046     cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: UnifScheffe n dataSeed simNum&quot;</span> &lt;&lt; endl;
<a name="l00047"></a>00047     exit(0);
<a name="l00048"></a>00048   }
<a name="l00049"></a>00049 
<a name="l00050"></a>00050    <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[1]); <span class="comment">//number of points</span>
<a name="l00051"></a>00051    <span class="keywordtype">int</span> d = 1; <span class="comment">// dimensions</span>
<a name="l00052"></a>00052    <span class="keywordtype">long</span> <span class="keywordtype">int</span> dataSeed = atoi(argv[2]); <span class="comment">//seed for generating data</span>
<a name="l00053"></a>00053    <span class="keywordtype">size_t</span> simNum = atoi(argv[3]); <span class="comment">//which data set </span>
<a name="l00054"></a>00054   
<a name="l00055"></a>00055    <span class="comment">//==============set formatting for input to oss=============================</span>
<a name="l00056"></a>00056    ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00057"></a>00057    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00058"></a>00058    oss.precision(10);
<a name="l00059"></a>00059    std::ostringstream stm;
<a name="l00060"></a>00060   stm &lt;&lt; simNum;
<a name="l00061"></a>00061   
<a name="l00062"></a>00062    <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00063"></a>00063    <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00064"></a>00064    gsl_rng * r;             
<a name="l00065"></a>00065    gsl_rng_env_setup();
<a name="l00066"></a>00066    T = gsl_rng_default;
<a name="l00067"></a>00067    r = gsl_rng_alloc (T);
<a name="l00068"></a>00068    gsl_rng_set(r, dataSeed);
<a name="l00069"></a>00069 
<a name="l00070"></a>00070    <span class="comment">//data generating partition</span>
<a name="l00071"></a>00071    ivector pavingBox(d);
<a name="l00072"></a>00072    interval pavingInterval(0,1);
<a name="l00073"></a>00073    <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=1; i &lt;= d; i++) { pavingBox[i] = pavingInterval; }
<a name="l00074"></a>00074 
<a name="l00075"></a>00075    <span class="comment">// data sampled as uniform mixture over leaves of sub-paving myPart</span>
<a name="l00076"></a>00076    <span class="comment">//make an Adaptive Histogram object with a specified box</span>
<a name="l00077"></a>00077    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myPart(pavingBox);
<a name="l00078"></a>00078    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist(pavingBox);
<a name="l00079"></a>00079    
<a name="l00080"></a>00080    <span class="keywordtype">double</span> rootBoxVol = (myPart.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;nodeVolume();
<a name="l00081"></a>00081    <span class="comment">// a container for the boxes</span>
<a name="l00082"></a>00082    vector&lt;ivector&gt; Pboxes;
<a name="l00083"></a>00083 
<a name="l00084"></a>00084   <span class="keywordtype">string</span> mixShape = <span class="stringliteral">&quot;3, 4, 4, 2, 2, 3, 3&quot;</span>; 
<a name="l00085"></a>00085   myPart.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afac8c0cb4ed44f27e7a3adf1855af676" title="Split a histogram to a specified shape.">splitToShape</a>(mixShape);<span class="comment">// uniform mixture   </span>
<a name="l00086"></a>00086 
<a name="l00087"></a>00087   <span class="keywordtype">string</span> mixShape2 = <span class="stringliteral">&quot;5,6,7,8,9,10,10,5,5,6,6,5,6,6,7,7,6,5,5,6,7,8,9,10,10,5,7,8,8,6,5,5,5,5,7,7,7,8,9,10,10,5,5,5,6,7,7,5,5,6,6,5,5,5,5,5,5,6,7,8,9,10,10&quot;</span>; 
<a name="l00088"></a>00088   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myPart2(pavingBox);
<a name="l00089"></a>00089   myPart2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afac8c0cb4ed44f27e7a3adf1855af676" title="Split a histogram to a specified shape.">splitToShape</a>(mixShape2);
<a name="l00090"></a>00090 
<a name="l00091"></a>00091   myPart.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afac8c0cb4ed44f27e7a3adf1855af676" title="Split a histogram to a specified shape.">splitToShape</a>(mixShape);<span class="comment">// uniform mixture   </span>
<a name="l00092"></a>00092    <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> trueLeaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l00093"></a>00093    <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it;
<a name="l00094"></a>00094    myPart.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(trueLeaves); <span class="comment">// fill the container</span>
<a name="l00095"></a>00095    
<a name="l00096"></a>00096    <span class="comment">// container is filled by reading leaves off tree from left to right</span>
<a name="l00097"></a>00097    <span class="keywordflow">for</span>(it = trueLeaves.begin(); it &lt; trueLeaves.end(); it++) {
<a name="l00098"></a>00098       Pboxes.push_back((*it)-&gt;getBox());
<a name="l00099"></a>00099   }
<a name="l00100"></a>00100   <span class="keywordtype">size_t</span> PartSize = Pboxes.size();
<a name="l00101"></a>00101 
<a name="l00102"></a>00102   cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
<a name="l00103"></a>00103   cout &lt;&lt; <span class="stringliteral">&quot;Generating dataset &quot;</span> &lt;&lt; simNum &lt;&lt; <span class="stringliteral">&quot;...&quot;</span> &lt;&lt; endl;
<a name="l00104"></a>00104    <span class="comment">// data sampled as uniform equi-mixture over leaves of sub-paving myPart</span>
<a name="l00105"></a>00105    <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData;   
<a name="l00106"></a>00106    <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> validData;
<a name="l00107"></a>00107    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; n; i++) {
<a name="l00108"></a>00108         rvector thisrv(d);
<a name="l00109"></a>00109         <span class="keywordtype">size_t</span> RndBoxNum = floor(PartSize*gsl_rng_uniform(r));
<a name="l00110"></a>00110         <span class="comment">//cout &lt;&lt; RndBoxNum &lt;&lt; &quot;\t&quot; &lt;&lt; Pboxes[RndBoxNum] &lt;&lt; endl;</span>
<a name="l00111"></a>00111         thisrv = <a class="code" href="toolz_8cpp.shtml#abc84f170f624cc9d449c0cfcaac0f157" title="Draw a vector uniformly at pseudo-random from a Box.">DrawUnifBox</a>(r,Pboxes[RndBoxNum]);         
<a name="l00112"></a>00112       
<a name="l00113"></a>00113       <span class="keywordflow">if</span> ( i &lt; <span class="keywordtype">int</span>(n/3) ) { validData.push_back(thisrv); }
<a name="l00114"></a>00114       <span class="keywordflow">else</span> { theData.push_back(thisrv); }
<a name="l00115"></a>00115    }  <span class="comment">// data  should be in theData</span>
<a name="l00116"></a>00116    
<a name="l00117"></a>00117   cout &lt;&lt; n - int(n/3) &lt;&lt; <span class="stringliteral">&quot; training data and &quot;</span> &lt;&lt; int(n/3) &lt;&lt; <span class="stringliteral">&quot; validation data&quot;</span> &lt;&lt; endl;
<a name="l00118"></a>00118   <span class="comment">//===============finish generating data============================//</span>
<a name="l00119"></a>00119 
<a name="l00120"></a>00120   <span class="comment">//==================Hold-out MDE===========================================</span>
<a name="l00121"></a>00121   cout &lt;&lt; <span class="stringliteral">&quot;========================================================&quot;</span> &lt;&lt; endl;
<a name="l00122"></a>00122   cout &lt;&lt; <span class="stringliteral">&quot;Run hold out estimation...&quot;</span> &lt;&lt; endl;
<a name="l00123"></a>00123 
<a name="l00124"></a>00124   <span class="comment">//=========insert data into an AdaptiveHistogramValidation object=========//</span>
<a name="l00125"></a>00125   <span class="comment">// stopping criteria </span>
<a name="l00126"></a>00126   <span class="keywordtype">bool</span> stopCrit = <span class="keyword">false</span>; <span class="comment">// to remove this?</span>
<a name="l00127"></a>00127 
<a name="l00128"></a>00128   <span class="comment">//maximum number of leaf nodes allowed</span>
<a name="l00129"></a>00129   <span class="keywordtype">int</span> holdOutCount = int(n/3);
<a name="l00130"></a>00130   <span class="keywordtype">int</span> trainCount = n-holdOutCount; 
<a name="l00131"></a>00131   cout &lt;&lt; n-holdOutCount &lt;&lt; <span class="stringliteral">&quot; training data and &quot;</span> 
<a name="l00132"></a>00132       &lt;&lt; holdOutCount &lt;&lt; <span class="stringliteral">&quot; validation data inserted.&quot;</span> &lt;&lt; endl; 
<a name="l00133"></a>00133   <span class="comment">//size_t maxLeafNodes = int(trainCount/log(trainCount*(2*d+1))); // temporarily</span>
<a name="l00134"></a>00134   <span class="keywordtype">size_t</span> maxLeafNodes = 50;
<a name="l00135"></a>00135   <span class="comment">//cout &lt;&lt; &quot;max leaf nodes: &quot; &lt;&lt; maxLeafNodes &lt;&lt; endl;</span>
<a name="l00136"></a>00136 
<a name="l00137"></a>00137   <span class="comment">// indicators</span>
<a name="l00138"></a>00138    <span class="keywordtype">bool</span> successfulInsertion1 = <span class="keyword">false</span>;
<a name="l00139"></a>00139    <span class="keywordtype">bool</span> successfulInsertion2 = <span class="keyword">false</span>;
<a name="l00140"></a>00140    
<a name="l00141"></a>00141    <span class="keywordtype">bool</span> successfulPQSplit1 = <span class="keyword">false</span>;
<a name="l00142"></a>00142    <span class="keywordtype">bool</span> successfulPQSplit2 = <span class="keyword">false</span>;
<a name="l00143"></a>00143      
<a name="l00144"></a>00144 
<a name="l00145"></a>00145   <span class="comment">//container for scheffe tournament candidates</span>
<a name="l00146"></a>00146   vector&lt;AdaptiveHistogram&gt; optHist;
<a name="l00147"></a>00147   <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn;
<a name="l00148"></a>00148   myHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00149"></a>00149   optHist.push_back(myHist);
<a name="l00150"></a>00150     
<a name="l00151"></a>00151   myPart.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00152"></a>00152   optHist.push_back(myPart);
<a name="l00153"></a>00153   
<a name="l00154"></a>00154   myPart2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00155"></a>00155   optHist.push_back(myPart2);
<a name="l00156"></a>00156   
<a name="l00157"></a>00157   
<a name="l00158"></a>00158   cout &lt;&lt; <span class="stringliteral">&quot;==================Start the Scheffe tournament=======&quot;</span> &lt;&lt; endl;
<a name="l00159"></a>00159   ofstream os;         <span class="comment">// ofstream object</span>
<a name="l00160"></a>00160   os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00161"></a>00161   os.precision(5);
<a name="l00162"></a>00162 
<a name="l00163"></a>00163   vector&lt;real&gt; TrueDelta;
<a name="l00164"></a>00164   
<a name="l00165"></a>00165   cout &lt;&lt; optHist.size() &lt;&lt; endl;
<a name="l00166"></a>00166   
<a name="l00167"></a>00167   <span class="comment">// now run the tournament (pairwise)</span>
<a name="l00168"></a>00168   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; optHist.size(); i++) {
<a name="l00169"></a>00169     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j = 0; j &lt; optHist.size(); j++) {
<a name="l00170"></a>00170       <span class="keywordflow">if</span> ( i!=j &amp;&amp; i &lt; j ) {
<a name="l00171"></a>00171           cout &lt;&lt; <span class="stringliteral">&quot;=========&quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot; vs &quot;</span> &lt;&lt; j &lt;&lt; <span class="stringliteral">&quot;==========&quot;</span> &lt;&lt; endl;
<a name="l00172"></a>00172 
<a name="l00173"></a>00173           <span class="comment">//set up a vector the scheffe set</span>
<a name="l00174"></a>00174           vector&lt; vector&lt; set&lt;CollatorSPnode*, less&lt;CollatorSPnode*&gt; &gt; &gt; &gt; vecScheffeSetVec;
<a name="l00175"></a>00175 
<a name="l00176"></a>00176           <span class="comment">//set up vectors for tournament winners</span>
<a name="l00177"></a>00177           vector&lt; vector&lt;int&gt; &gt; vecWinnerVec;
<a name="l00178"></a>00178           vector&lt; vector&lt;double&gt; &gt; vecDeltaWinnerVec;
<a name="l00179"></a>00179 
<a name="l00180"></a>00180           
<a name="l00181"></a>00181           <span class="comment">//add into the collator</span>
<a name="l00182"></a>00182           <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> coll1;
<a name="l00183"></a>00183           coll1.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(optHist[i]);
<a name="l00184"></a>00184           coll1.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(optHist[j]);
<a name="l00185"></a>00185           
<a name="l00186"></a>00186           <span class="comment">//add the validation data into the collator</span>
<a name="l00187"></a>00187           <span class="keywordtype">string</span> thisShape = coll1.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2a2da27e64f75b4080d6a967544872e0" title="get leaf levels string">getLeafLevelsString</a>();
<a name="l00188"></a>00188           <span class="comment">//cout &lt;&lt; thisShape &lt;&lt; endl;</span>
<a name="l00189"></a>00189           <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> validHist(pavingBox);
<a name="l00190"></a>00190           validHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afac8c0cb4ed44f27e7a3adf1855af676" title="Split a histogram to a specified shape.">splitToShape</a>(thisShape);
<a name="l00191"></a>00191           validHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(validData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00192"></a>00192           coll1.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(validHist);
<a name="l00193"></a>00193 
<a name="l00194"></a>00194           coll1.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(<span class="stringliteral">&quot;Coll.txt&quot;</span>);
<a name="l00195"></a>00195 
<a name="l00196"></a>00196           cout &lt;&lt; <span class="stringliteral">&quot;Get the Scheffe Set: &quot;</span> &lt;&lt; endl;
<a name="l00197"></a>00197           coll1.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#af9464148c1e5161940b6d6f3c5b2f965">getHistScheffeSet</a>(vecScheffeSetVec);
<a name="l00198"></a>00198 
<a name="l00199"></a>00199           cout &lt;&lt; <span class="stringliteral">&quot;Get the winners for each ordered pair: &quot;</span> &lt;&lt; endl; 
<a name="l00200"></a>00200           coll1.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ae4dd25063cc945058665a4b0a3150c89">getHistScheffeWinner</a>(vecScheffeSetVec, vecWinnerVec, vecDeltaWinnerVec);
<a name="l00201"></a>00201         
<a name="l00202"></a>00202 
<a name="l00203"></a>00203           cout &lt;&lt; <span class="stringliteral">&quot;Get the Yatracos set for theorem checks: &quot;</span> &lt;&lt; endl;
<a name="l00204"></a>00204           vector&lt; vector&lt; set&lt;CollatorSPnode*, less&lt;CollatorSPnode*&gt; &gt; &gt; &gt; vecYatSetVec;
<a name="l00205"></a>00205           coll1.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a60443f6dfa512a30c4b8fb0ee96072b9">getHistYatSet</a>(vecYatSetVec);
<a name="l00206"></a>00206         
<a name="l00207"></a>00207         <span class="comment">//=======output ST results  to .txt files</span>
<a name="l00208"></a>00208         vector&lt; vector&lt;double&gt; &gt;::iterator it1; vector&lt;double&gt;::iterator it2;
<a name="l00209"></a>00209         vector&lt; vector&lt;int&gt; &gt;::iterator it11; vector&lt;int&gt;::iterator it22;
<a name="l00210"></a>00210         ostringstream stm1, stm2;
<a name="l00211"></a>00211         <span class="keywordtype">string</span> fileNameWinner = <span class="stringliteral">&quot;STWinner&quot;</span>;
<a name="l00212"></a>00212         stm1 &lt;&lt; i;
<a name="l00213"></a>00213         stm2 &lt;&lt; j;
<a name="l00214"></a>00214         fileNameWinner += stm1.str();
<a name="l00215"></a>00215         fileNameWinner += stm2.str();
<a name="l00216"></a>00216         fileNameWinner += <span class="stringliteral">&quot;.txt&quot;</span>;  
<a name="l00217"></a>00217         os.open(fileNameWinner.c_str());        
<a name="l00218"></a>00218         <span class="keywordflow">for</span> (it11 = vecWinnerVec.begin(); it11 &lt; vecWinnerVec.end(); it11++){ 
<a name="l00219"></a>00219           <span class="keywordflow">for</span> (it22 = (*it11).begin(); it22 &lt; (*it11).end(); it22++){
<a name="l00220"></a>00220           os &lt;&lt; (*it22) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00221"></a>00221           }
<a name="l00222"></a>00222           os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00223"></a>00223         }          
<a name="l00224"></a>00224         os &lt;&lt; flush;
<a name="l00225"></a>00225         os.close();
<a name="l00226"></a>00226         std::cout &lt;&lt; <span class="stringliteral">&quot;Winners for each theta output to &quot;</span> 
<a name="l00227"></a>00227             &lt;&lt; fileNameWinner &lt;&lt; <span class="stringliteral">&quot;.&quot;</span> &lt;&lt; endl; 
<a name="l00228"></a>00228       
<a name="l00229"></a>00229       }
<a name="l00230"></a>00230     }
<a name="l00231"></a>00231   }
<a name="l00232"></a>00232 
<a name="l00233"></a>00233   <span class="comment">//================scheffe tournament for all the 8 candidates</span>
<a name="l00234"></a>00234   cout &lt;&lt; <span class="stringliteral">&quot;Scheffe tounrmanet for all candidates: &quot;</span> &lt;&lt; endl;
<a name="l00235"></a>00235   <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> coll;
<a name="l00236"></a>00236 
<a name="l00237"></a>00237   <span class="comment">//set up a vector the scheffe set</span>
<a name="l00238"></a>00238   vector&lt; vector&lt; set&lt;CollatorSPnode*, less&lt;CollatorSPnode*&gt; &gt; &gt; &gt; vecScheffeSetVec;
<a name="l00239"></a>00239   vector&lt;real&gt; IAEMDE;
<a name="l00240"></a>00240   <span class="comment">//set up vectors for tournament winners</span>
<a name="l00241"></a>00241   vector&lt; vector&lt;int&gt; &gt; vecWinnerVec;
<a name="l00242"></a>00242   vector&lt; vector&lt;double&gt; &gt; vecDeltaWinnerVec;
<a name="l00243"></a>00243   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; optHist.size(); i++) {
<a name="l00244"></a>00244     coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(optHist[i]);
<a name="l00245"></a>00245   }
<a name="l00246"></a>00246   
<a name="l00247"></a>00247   <span class="keywordtype">string</span> thisShape = coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a2a2da27e64f75b4080d6a967544872e0" title="get leaf levels string">getLeafLevelsString</a>();
<a name="l00248"></a>00248   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> validHist(pavingBox);
<a name="l00249"></a>00249   validHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afac8c0cb4ed44f27e7a3adf1855af676" title="Split a histogram to a specified shape.">splitToShape</a>(thisShape);
<a name="l00250"></a>00250   validHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(validData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00251"></a>00251   coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(validHist);
<a name="l00252"></a>00252 
<a name="l00253"></a>00253   cout &lt;&lt; <span class="stringliteral">&quot;Get the Scheffe Set: &quot;</span> &lt;&lt; endl;
<a name="l00254"></a>00254   coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#af9464148c1e5161940b6d6f3c5b2f965">getHistScheffeSet</a>(vecScheffeSetVec);
<a name="l00255"></a>00255 
<a name="l00256"></a>00256   cout &lt;&lt; <span class="stringliteral">&quot;Get the winners for each ordered pair: &quot;</span> &lt;&lt; endl; 
<a name="l00257"></a>00257   coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ae4dd25063cc945058665a4b0a3150c89">getHistScheffeWinner</a>(vecScheffeSetVec, vecWinnerVec, vecDeltaWinnerVec);
<a name="l00258"></a>00258 
<a name="l00259"></a>00259   cout &lt;&lt; <span class="stringliteral">&quot;Get the Yatracos set for theorem checks: &quot;</span> &lt;&lt; endl;
<a name="l00260"></a>00260   vector&lt; vector&lt; set&lt;CollatorSPnode*, less&lt;CollatorSPnode*&gt; &gt; &gt; &gt; vecYatSetVec;
<a name="l00261"></a>00261   coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a60443f6dfa512a30c4b8fb0ee96072b9">getHistYatSet</a>(vecYatSetVec);
<a name="l00262"></a>00262   
<a name="l00263"></a>00263     <span class="comment">//=======output ST results  to .txt files</span>
<a name="l00264"></a>00264     vector&lt; vector&lt;double&gt; &gt;::iterator it1; vector&lt;double&gt;::iterator it2;
<a name="l00265"></a>00265     vector&lt; vector&lt;int&gt; &gt;::iterator it11; vector&lt;int&gt;::iterator it22;
<a name="l00266"></a>00266     ostringstream stm1, stm2;
<a name="l00267"></a>00267     <span class="keywordtype">string</span> fileNameWinner = <span class="stringliteral">&quot;STWinnerAll.txt&quot;</span>;  
<a name="l00268"></a>00268     os.open(fileNameWinner.c_str());
<a name="l00269"></a>00269     <span class="keywordflow">for</span> (it11 = vecWinnerVec.begin(); it11 &lt; vecWinnerVec.end(); it11++){ 
<a name="l00270"></a>00270       <span class="keywordflow">for</span> (it22 = (*it11).begin(); it22 &lt; (*it11).end(); it22++){
<a name="l00271"></a>00271       os &lt;&lt; (*it22) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00272"></a>00272       }
<a name="l00273"></a>00273       os &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00274"></a>00274     }          
<a name="l00275"></a>00275     os &lt;&lt; flush;
<a name="l00276"></a>00276     os.close();
<a name="l00277"></a>00277     std::cout &lt;&lt; <span class="stringliteral">&quot;Winners for each theta output to &quot;</span> 
<a name="l00278"></a>00278         &lt;&lt; fileNameWinner &lt;&lt; <span class="stringliteral">&quot;.&quot;</span> &lt;&lt; endl; 
<a name="l00279"></a>00279 
<a name="l00280"></a>00280 
<a name="l00281"></a>00281 <span class="comment">/*</span>
<a name="l00282"></a>00282 <span class="comment">ofstream os1;</span>
<a name="l00283"></a>00283 <span class="comment">string fileNameDeltaWinner = &quot;STDeltaWinner&quot;;</span>
<a name="l00284"></a>00284 <span class="comment">fileNameDeltaWinner += &quot;.txt&quot;;  </span>
<a name="l00285"></a>00285 <span class="comment">os.open(fileNameDeltaWinner.c_str());</span>
<a name="l00286"></a>00286 <span class="comment">for (it1 = vecDeltaWinnerVec.begin(); it1 &lt; vecDeltaWinnerVec.end(); it1++){ </span>
<a name="l00287"></a>00287 <span class="comment">  for (it2 = (*it1).begin(); it2 &lt; (*it1).end(); it2++){</span>
<a name="l00288"></a>00288 <span class="comment">  os &lt;&lt; (*it2) &lt;&lt; &quot;\t&quot;;</span>
<a name="l00289"></a>00289 <span class="comment">  }</span>
<a name="l00290"></a>00290 <span class="comment">  os &lt;&lt; &quot;\n&quot;;</span>
<a name="l00291"></a>00291 <span class="comment">}          </span>
<a name="l00292"></a>00292 <span class="comment">os &lt;&lt; flush;</span>
<a name="l00293"></a>00293 <span class="comment">os.close();</span>
<a name="l00294"></a>00294 <span class="comment">std::cout &lt;&lt; &quot;DeltaWinner for each theta output to &quot; </span>
<a name="l00295"></a>00295 <span class="comment">    &lt;&lt; fileNameDeltaWinner &lt;&lt; &quot;.&quot; &lt;&lt; endl; </span>
<a name="l00296"></a>00296 <span class="comment">*/</span> 
<a name="l00297"></a>00297 <span class="comment">//} // end of if successfulPQSplit</span>
<a name="l00298"></a>00298 <span class="comment">//========end of Scheffe tournament=====================//</span>
<a name="l00299"></a>00299 
<a name="l00300"></a>00300 <span class="comment">// free the random number generator</span>
<a name="l00301"></a>00301 gsl_rng_free(r);
<a name="l00302"></a>00302 
<a name="l00303"></a>00303 <span class="keywordflow">return</span> 0;
<a name="l00304"></a>00304 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="GeneralScheffe_8cpp.shtml">GeneralScheffe.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:13 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
