<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: FiniteMixtureStats.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('FiniteMixtureStats_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">FiniteMixtureStats.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="FiniteMixtureStats_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* </span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (c) 2004 Warwick Tucker &lt;warwick@math.uu.se&gt;</span>
<a name="l00003"></a>00003 <span class="comment"> * Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00004"></a>00004 <span class="comment"> * Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00007"></a>00007 <span class="comment"> *</span>
<a name="l00008"></a>00008 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00009"></a>00009 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00010"></a>00010 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00011"></a>00011 <span class="comment"> * your option) any later version.</span>
<a name="l00012"></a>00012 <span class="comment"> * </span>
<a name="l00013"></a>00013 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment"> * General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment"> * </span>
<a name="l00018"></a>00018 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00020"></a>00020 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00021"></a>00021 <span class="comment"> */</span>
<a name="l00022"></a>00022 
<a name="l00026"></a>00026 <span class="comment">// include header files</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &lt;time.h&gt;</span>   <span class="comment">// clock and time classes</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// input and output streams</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;sstream&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &quot;<a class="code" href="histall_8hpp.shtml" title="all headers for using adaptive histograms.">histall.hpp</a>&quot;</span>  <span class="comment">// headers for the histograms</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &quot;dataprep.hpp&quot;</span> <span class="comment">// headers for getting data</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;iterator&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;valarray&gt;</span>
<a name="l00036"></a>00036 <span class="preprocessor">#include &quot;<a class="code" href="errorfunc_8hpp.shtml" title="L1-error function declarations.">errorfunc.hpp</a>&quot;</span> 
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="keyword">using namespace </span>std;
<a name="l00039"></a>00039 <span class="keyword">using namespace </span>cxsc;
<a name="l00040"></a>00040 
<a name="l00041"></a><a class="code" href="FiniteMixtureStats_8cpp.shtml#a0ddf1224851353fc92bfbff6f499fa97">00041</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>(<span class="keywordtype">int</span> argc, <span class="keywordtype">char</span>* argv[])
<a name="l00042"></a>00042 {
<a name="l00043"></a>00043   <span class="comment">//===========user-defined parameters==============================//</span>
<a name="l00044"></a>00044   <span class="keywordflow">if</span> ( argc != 11 ) {
<a name="l00045"></a>00045     cerr &lt;&lt; <span class="stringliteral">&quot;Syntax: FiniteMixture n dataSeed mix simNum maxCheck StopVal doEx doTV doMDE doRegHist&quot;</span> &lt;&lt; endl;
<a name="l00046"></a>00046     exit(0);
<a name="l00047"></a>00047   }
<a name="l00048"></a>00048 
<a name="l00049"></a>00049    <span class="keyword">const</span> <span class="keywordtype">int</span> n = atoi(argv[1]); <span class="comment">//number of points</span>
<a name="l00050"></a>00050    <span class="keywordtype">int</span> d = 1; <span class="comment">// dimensions</span>
<a name="l00051"></a>00051    <span class="keywordtype">long</span> <span class="keywordtype">int</span> dataSeed = atoi(argv[2]); <span class="comment">//seed for generating data</span>
<a name="l00052"></a>00052    <span class="keywordtype">int</span> mix = atoi(argv[3]); <span class="comment">//which mixture to use</span>
<a name="l00053"></a>00053    <span class="keywordtype">int</span> simNum = atoi(argv[4]); <span class="comment">//which data set </span>
<a name="l00054"></a>00054    <span class="keywordtype">double</span> alpha = 0.95; <span class="comment">//to compute the coverage</span>
<a name="l00055"></a>00055    <span class="keywordtype">size_t</span> maxCheck = atoi(argv[5]); <span class="comment">//stopping criteria for MDE</span>
<a name="l00056"></a>00056    <span class="keywordtype">int</span> StopVal = atoi(argv[6]); <span class="comment">//stopping criteria for total variation</span>
<a name="l00057"></a>00057    <span class="keywordtype">int</span> doEx = atoi(argv[7]);
<a name="l00058"></a>00058    <span class="keywordtype">int</span> doTV = atoi(argv[8]);
<a name="l00059"></a>00059    <span class="keywordtype">int</span> doMDE = atoi(argv[9]);
<a name="l00060"></a>00060    <span class="keywordtype">int</span> doRegHist = atoi(argv[10]);
<a name="l00061"></a>00061    
<a name="l00062"></a>00062    <span class="keywordtype">double</span> Tol = 1e-15; <span class="comment">// tolerance for root finding and integration routines</span>
<a name="l00063"></a>00063   cout &lt;&lt; <span class="stringliteral">&quot;Tolerance is: &quot;</span> &lt;&lt; Tol &lt;&lt; endl;
<a name="l00064"></a>00064   <span class="keywordtype">int</span> Deg = 2; <span class="comment">// Degree of Taylor series.</span>
<a name="l00065"></a>00065   
<a name="l00066"></a>00066    <span class="comment">//==============set formatting for input to oss=============================</span>
<a name="l00067"></a>00067    ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l00068"></a>00068    oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00069"></a>00069    oss.precision(5);
<a name="l00070"></a>00070    std::ostringstream stm;
<a name="l00071"></a>00071   stm &lt;&lt; simNum;
<a name="l00072"></a>00072 
<a name="l00073"></a>00073   <span class="comment">//==============get distribution parameters==========================//</span>
<a name="l00074"></a>00074    <span class="comment">// read input from mix*.txt</span>
<a name="l00075"></a>00075    <span class="keywordtype">string</span> mixfileName;
<a name="l00076"></a>00076    mixfileName = <span class="stringliteral">&quot;MixtureFiles/mix&quot;</span>;
<a name="l00077"></a>00077   std::ostringstream stmMix;
<a name="l00078"></a>00078   stmMix &lt;&lt; mix;
<a name="l00079"></a>00079   mixfileName += stmMix.str();
<a name="l00080"></a>00080   mixfileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00081"></a>00081 
<a name="l00082"></a>00082   ifstream infile(mixfileName.c_str());
<a name="l00083"></a>00083   <span class="keywordtype">double</span> Weight1, Weight2, Mean1, Mean2, Var1, Var2;
<a name="l00084"></a>00084   <span class="keywordtype">double</span> W, M, V;
<a name="l00085"></a>00085 
<a name="l00086"></a>00086   <span class="comment">// create vectors for Weight, Mean, Variance</span>
<a name="l00087"></a>00087   vector&lt;double&gt; Weight;
<a name="l00088"></a>00088   vector&lt;double&gt; Mean;
<a name="l00089"></a>00089   vector&lt;double&gt; Sigma;
<a name="l00090"></a>00090 
<a name="l00091"></a>00091   cout &lt;&lt; <span class="stringliteral">&quot;Reading in parameters of mixture &quot;</span> &lt;&lt; mix &lt;&lt; endl;
<a name="l00092"></a>00092   ifstream file; <span class="comment">// create file for input</span>
<a name="l00093"></a>00093   file.open(mixfileName.c_str());
<a name="l00094"></a>00094   <span class="comment">// check if this file exists or not</span>
<a name="l00095"></a>00095   <span class="keywordflow">if</span> ( !file ) { <span class="comment">// exit if file doesn&#39;t exists</span>
<a name="l00096"></a>00096     cerr &lt;&lt; <span class="stringliteral">&quot;Could not open &quot;</span> &lt;&lt; mixfileName &lt;&lt; <span class="stringliteral">&quot;. It does not exist.&quot;</span> 
<a name="l00097"></a>00097          &lt;&lt; endl;
<a name="l00098"></a>00098     exit(1);
<a name="l00099"></a>00099   }
<a name="l00100"></a>00100   <span class="keywordflow">while</span> ( !infile.eof() ) {
<a name="l00101"></a>00101     infile &gt;&gt; Weight1 &gt;&gt; Weight2 &gt;&gt; Mean1 &gt;&gt; Mean2 &gt;&gt; Var1 &gt;&gt; Var2;
<a name="l00102"></a>00102     W=Weight1/Weight2;
<a name="l00103"></a>00103     Weight.push_back(W);
<a name="l00104"></a>00104     M=Mean1/Mean2;
<a name="l00105"></a>00105     Mean.push_back(M);
<a name="l00106"></a>00106     V=Var1/Var2;
<a name="l00107"></a>00107     Sigma.push_back(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(V));
<a name="l00108"></a>00108   }
<a name="l00109"></a>00109   Weight.pop_back();
<a name="l00110"></a>00110   Mean.pop_back();
<a name="l00111"></a>00111   Sigma.pop_back();
<a name="l00112"></a>00112   
<a name="l00113"></a>00113   <span class="comment">//put the parameters as data members of the structure</span>
<a name="l00114"></a>00114   <a class="code" href="structFinMix.shtml">FinMix</a> mixt;
<a name="l00115"></a>00115   mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a> = Weight; mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a> = Mean; mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a> = Sigma;
<a name="l00116"></a>00116   <span class="comment">//=========================end of setting up parameter===================//</span>
<a name="l00117"></a>00117 
<a name="l00118"></a>00118   <span class="comment">// ========prepare to generate some data for the tests ================//</span>
<a name="l00119"></a>00119     <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l00120"></a>00120     <span class="keyword">const</span> gsl_rng_type * T;
<a name="l00121"></a>00121     gsl_rng * r;
<a name="l00122"></a>00122     <span class="comment">//create a generator chosen by the environment variable GSL_RNG_TYPE</span>
<a name="l00123"></a>00123     gsl_rng_env_setup();
<a name="l00124"></a>00124     T = gsl_rng_default;
<a name="l00125"></a>00125     r = gsl_rng_alloc (T);
<a name="l00126"></a>00126     gsl_rng_set(r, dataSeed);
<a name="l00127"></a>00127 
<a name="l00128"></a>00128    <span class="comment">//set up a random number generator for gaussian rvs</span>
<a name="l00129"></a>00129      <span class="keyword">const</span> gsl_rng_type * T1;
<a name="l00130"></a>00130      gsl_rng * r1;
<a name="l00131"></a>00131      gsl_rng_env_setup();
<a name="l00132"></a>00132      T1 = gsl_rng_default;
<a name="l00133"></a>00133      r1 = gsl_rng_alloc (T1);
<a name="l00134"></a>00134      gsl_rng_set(r1, dataSeed);
<a name="l00135"></a>00135      
<a name="l00136"></a>00136   <span class="comment">//Generate n U(0,1) r.v. and determine component membership.</span>
<a name="l00137"></a>00137   <span class="keywordtype">double</span> a=0, b=1;
<a name="l00138"></a>00138   vector&lt;double&gt; u;
<a name="l00139"></a>00139   <span class="keywordtype">int</span> j;
<a name="l00140"></a>00140   <span class="keywordflow">for</span> (j = 0; j &lt; n; j++) {
<a name="l00141"></a>00141       u.push_back(gsl_ran_flat(r, a, b));
<a name="l00142"></a>00142   }
<a name="l00143"></a>00143 
<a name="l00144"></a>00144   <span class="comment">// number of components</span>
<a name="l00145"></a>00145   <span class="keyword">const</span> <span class="keywordtype">int</span> comp = <a class="code" href="namespacesubpavings.shtml#a5928e5a1c7fc26e6df9c5bf9eb4a37a2" title="Method to count lines in a txt file.">countLinesInTxt</a>(mixfileName) - 1;
<a name="l00146"></a>00146   cout &lt;&lt; <span class="stringliteral">&quot;There are &quot;</span> &lt;&lt; comp &lt;&lt; <span class="stringliteral">&quot; components in this mixture.&quot;</span> &lt;&lt; endl;
<a name="l00147"></a>00147 
<a name="l00148"></a>00148   <span class="comment">// get cumulative sum of the weights</span>
<a name="l00149"></a>00149   <span class="keywordtype">double</span> WeightCum[comp];
<a name="l00150"></a>00150   <span class="comment">//initialize the array</span>
<a name="l00151"></a>00151   WeightCum[0] = Weight[0]; 
<a name="l00152"></a>00152   cout &lt;&lt; WeightCum[0] &lt;&lt; endl;
<a name="l00153"></a>00153    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j = 1; j &lt; comp; j++) {
<a name="l00154"></a>00154     WeightCum[j] = WeightCum[j-1] + Weight[j];
<a name="l00155"></a>00155   }
<a name="l00156"></a>00156 
<a name="l00157"></a>00157   <span class="comment">//Create mixture data using component densities that are normal.</span>
<a name="l00158"></a>00158   cout&lt;&lt;<span class="stringliteral">&quot;Creating mixture data...&quot;</span> &lt;&lt;endl; 
<a name="l00159"></a>00159   <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> theData; <span class="comment">// a container to keep the data</span>
<a name="l00160"></a>00160   cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
<a name="l00161"></a>00161   cout &lt;&lt; <span class="stringliteral">&quot;Generating dataset &quot;</span> &lt;&lt; simNum &lt;&lt; <span class="stringliteral">&quot;...&quot;</span> &lt;&lt; endl;
<a name="l00162"></a>00162     <span class="comment">//find the number of members generated from each component.</span>
<a name="l00163"></a>00163     <span class="keywordflow">for</span> (j = 0; j &lt; comp; j++) {  
<a name="l00164"></a>00164       <span class="keywordtype">int</span> ind=0;
<a name="l00165"></a>00165       cout &lt;&lt; <span class="stringliteral">&quot;get the component: &quot;</span> &lt;&lt; endl;
<a name="l00166"></a>00166       <a class="code" href="errorfunc_8cpp.shtml#a9e3934b3e6ab0c312ffc4e1af23b0417" title="Function to find the number of generated U(0,1) data that is less the weight of the components...">findComp</a>(u, ind, n, WeightCum, j);
<a name="l00167"></a>00167       cout&lt;&lt;<span class="stringliteral">&quot;Component &quot;</span> &lt;&lt; j &lt;&lt; <span class="stringliteral">&quot; has &quot;</span> &lt;&lt; ind &lt;&lt; <span class="stringliteral">&quot; members.&quot;</span> &lt;&lt;endl;
<a name="l00168"></a>00168       <span class="comment">//now generate the data</span>
<a name="l00169"></a>00169       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> k =0; k &lt; ind; k++) {
<a name="l00170"></a>00170         rvector thisrv(1);
<a name="l00171"></a>00171         <span class="keywordtype">double</span> z = gsl_ran_gaussian(r1, Sigma[j]); <span class="comment">// generate a normal r.v.</span>
<a name="l00172"></a>00172         thisrv[1] =Mean[j]+z; <span class="comment">// transform the r.v. </span>
<a name="l00173"></a>00173         theData.push_back(thisrv);
<a name="l00174"></a>00174       }
<a name="l00175"></a>00175     }
<a name="l00176"></a>00176 
<a name="l00177"></a>00177   ivector pavingBox;
<a name="l00178"></a>00178   <span class="keywordtype">double</span> rootBoxVol;
<a name="l00179"></a>00179   <span class="keywordtype">bool</span> holdAllStats = <span class="keyword">true</span>;
<a name="l00180"></a>00180   <span class="comment">//===============finish generating data============================//</span>
<a name="l00181"></a>00181 
<a name="l00182"></a>00182 
<a name="l00183"></a>00183   <span class="comment">//==============run an exhaustive SEB PQ==================================//</span>
<a name="l00184"></a>00184   <span class="keywordflow">if</span> (doEx == 1) {
<a name="l00185"></a>00185   
<a name="l00186"></a>00186   cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
<a name="l00187"></a>00187   cout &lt;&lt; <span class="stringliteral">&quot;Run exhaustive PQ...&quot;</span> &lt;&lt; endl;
<a name="l00188"></a>00188   <span class="keywordtype">bool</span> successfulInsertion1 = <span class="keyword">false</span>;
<a name="l00189"></a>00189   <span class="keywordtype">bool</span> successfulPQSplit1 = <span class="keyword">false</span>;
<a name="l00190"></a>00190   <span class="keywordtype">bool</span> successfulInsertion2 = <span class="keyword">false</span>;
<a name="l00191"></a>00191   <span class="keywordtype">bool</span> successfulPQSplit2 = <span class="keyword">false</span>;
<a name="l00192"></a>00192   <span class="keywordtype">bool</span> successfulInsertion3 = <span class="keyword">false</span>;
<a name="l00193"></a>00193   <span class="keywordtype">bool</span> successfulPQSplit3 = <span class="keyword">false</span>;
<a name="l00194"></a>00194   <span class="keywordtype">bool</span> successfulInsertion4 = <span class="keyword">false</span>;
<a name="l00195"></a>00195   <span class="keywordtype">bool</span> successfulPQSplit4 = <span class="keyword">false</span>;
<a name="l00196"></a>00196 
<a name="l00197"></a>00197   <span class="comment">// containers for output needed</span>
<a name="l00198"></a>00198    vector&lt;real&gt; IAE1;
<a name="l00199"></a>00199    vector&lt;int&gt; NumLeafNodes1;
<a name="l00200"></a>00200    vector&lt;double&gt; TotalVarDist1;
<a name="l00201"></a>00201    vector&lt;double&gt; Coverage1;
<a name="l00202"></a>00202    vector&lt;double&gt; Times1;
<a name="l00203"></a>00203    
<a name="l00204"></a>00204     vector&lt;real&gt; IAE2;
<a name="l00205"></a>00205    vector&lt;int&gt; NumLeafNodes2;
<a name="l00206"></a>00206    vector&lt;double&gt; TotalVarDist2;
<a name="l00207"></a>00207    vector&lt;double&gt; Coverage2;
<a name="l00208"></a>00208    vector&lt;double&gt; Times2;
<a name="l00209"></a>00209    
<a name="l00210"></a>00210    vector&lt;real&gt; IAE3;
<a name="l00211"></a>00211   vector&lt;int&gt; NumLeafNodes3;
<a name="l00212"></a>00212    vector&lt;double&gt; TotalVarDist3;
<a name="l00213"></a>00213    vector&lt;double&gt; Coverage3;
<a name="l00214"></a>00214    vector&lt;double&gt; Times3;
<a name="l00215"></a>00215    
<a name="l00216"></a>00216   vector&lt;real&gt; IAE4;
<a name="l00217"></a>00217   vector&lt;int&gt; NumLeafNodes4;
<a name="l00218"></a>00218    vector&lt;double&gt; TotalVarDist4;
<a name="l00219"></a>00219    vector&lt;double&gt; Coverage4;
<a name="l00220"></a>00220    vector&lt;double&gt; Times4;
<a name="l00221"></a>00221 
<a name="l00222"></a>00222   <span class="comment">//do exhaustive PQ for steps of n*0.1</span>
<a name="l00223"></a>00223   <span class="comment">// set up function objects for a priority split</span>
<a name="l00224"></a>00224   <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
<a name="l00225"></a>00225   <a class="code" href="classsubpavings_1_1CompVol.shtml" title="Class comparing on volume of box of node.">CompVol</a> compVol;
<a name="l00226"></a>00226   <a class="code" href="classsubpavings_1_1CompArea.shtml" title="Class comparing the area of a histogram.">CompArea</a> compArea;
<a name="l00227"></a>00227   <a class="code" href="classsubpavings_1_1CompExtArea.shtml" title="Class comparing the &quot;extended&quot;area of a histogram.">CompExtArea</a> compExtArea;
<a name="l00228"></a>00228   
<a name="l00229"></a>00229   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= 100; i++) {
<a name="l00230"></a>00230   
<a name="l00231"></a>00231     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist1(holdAllStats); 
<a name="l00232"></a>00232     successfulInsertion1= myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00233"></a>00233     rootBoxVol = (myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>());
<a name="l00234"></a>00234     pavingBox = (myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>());
<a name="l00235"></a>00235     
<a name="l00236"></a>00236     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist2(holdAllStats); 
<a name="l00237"></a>00237     successfulInsertion2= myHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00238"></a>00238     
<a name="l00239"></a>00239     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist3(holdAllStats); 
<a name="l00240"></a>00240     successfulInsertion3= myHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00241"></a>00241     
<a name="l00242"></a>00242     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHist4(holdAllStats); 
<a name="l00243"></a>00243     successfulInsertion4= myHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00244"></a>00244     
<a name="l00245"></a>00245     <span class="keywordflow">if</span> (successfulInsertion1 &amp;&amp; successfulInsertion2 &amp;&amp; successfulInsertion3
<a name="l00246"></a>00246         &amp;&amp; successfulInsertion4) {
<a name="l00247"></a>00247       <span class="keywordtype">int</span> finalK = int(i*0.005*n);
<a name="l00248"></a>00248       cout &lt;&lt; <span class="stringliteral">&quot;Max k: &quot;</span> &lt;&lt; finalK &lt;&lt; endl;
<a name="l00249"></a>00249       <span class="comment">// split until number of leaves is at most minVal</span>
<a name="l00250"></a>00250       <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(finalK);
<a name="l00251"></a>00251       <span class="keywordtype">size_t</span> minPQPoints = 0; <span class="comment">// minimum of one data point in each box</span>
<a name="l00252"></a>00252 
<a name="l00253"></a>00253       <span class="keywordtype">size_t</span> maxLeafNodes = n;
<a name="l00254"></a>00254       <span class="comment">//cout &lt;&lt; &quot;Max leaf nodes allowed: &quot; &lt;&lt; maxLeafNodes &lt;&lt; endl;</span>
<a name="l00255"></a>00255       
<a name="l00256"></a>00256       <span class="comment">// we want to check the timings for this</span>
<a name="l00257"></a>00257       clock_t start, end;
<a name="l00258"></a>00258       <span class="keywordtype">double</span> timing; 
<a name="l00259"></a>00259       
<a name="l00260"></a>00260       <span class="comment">// do the priority split for compCount</span>
<a name="l00261"></a>00261       start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00262"></a>00262       successfulPQSplit1 = myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compCount,
<a name="l00263"></a>00263            critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes); <span class="comment">// no logging</span>
<a name="l00264"></a>00264       end = clock();
<a name="l00265"></a>00265       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00266"></a>00266       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00267"></a>00267       Times1.push_back(timing);
<a name="l00268"></a>00268       
<a name="l00269"></a>00269       <span class="comment">// do the priority split for compVol</span>
<a name="l00270"></a>00270       start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00271"></a>00271       successfulPQSplit2 = myHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compVol,
<a name="l00272"></a>00272            critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes); <span class="comment">// no logging</span>
<a name="l00273"></a>00273       end = clock();
<a name="l00274"></a>00274       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00275"></a>00275       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00276"></a>00276       Times2.push_back(timing);
<a name="l00277"></a>00277       
<a name="l00278"></a>00278       <span class="comment">// do the priority split for compMassVol</span>
<a name="l00279"></a>00279       start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00280"></a>00280       successfulPQSplit3 = myHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compArea,
<a name="l00281"></a>00281            critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes); <span class="comment">// no logging</span>
<a name="l00282"></a>00282       end = clock();
<a name="l00283"></a>00283       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00284"></a>00284       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00285"></a>00285       Times3.push_back(timing);
<a name="l00286"></a>00286       
<a name="l00287"></a>00287       <span class="comment">// do the priority split for compMassVol</span>
<a name="l00288"></a>00288       start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00289"></a>00289       successfulPQSplit4 = myHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compExtArea,
<a name="l00290"></a>00290            critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes); <span class="comment">// no logging</span>
<a name="l00291"></a>00291       end = clock();
<a name="l00292"></a>00292       timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00293"></a>00293       cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00294"></a>00294       Times3.push_back(timing);
<a name="l00295"></a>00295 
<a name="l00296"></a>00296       <span class="keywordflow">if</span> (successfulPQSplit1 &amp;&amp; successfulPQSplit2 &amp;&amp; successfulPQSplit3
<a name="l00297"></a>00297           &amp;&amp; successfulPQSplit4) {
<a name="l00298"></a>00298         
<a name="l00299"></a>00299         <span class="comment">//optional - output the histogram</span>
<a name="l00300"></a>00300         <span class="comment">// create a name for the file to output</span>
<a name="l00301"></a>00301             <span class="keywordtype">string</span> fileName;
<a name="l00302"></a>00302             fileName = <span class="stringliteral">&quot;HistCount&quot;</span>;
<a name="l00303"></a>00303             std::ostringstream stm2;
<a name="l00304"></a>00304             stm2 &lt;&lt; finalK;
<a name="l00305"></a>00305             fileName += stm2.str();
<a name="l00306"></a>00306             fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00307"></a>00307             myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00308"></a>00308             
<a name="l00309"></a>00309             <span class="comment">//optional - output the histogram</span>
<a name="l00310"></a>00310         <span class="comment">// create a name for the file to output</span>
<a name="l00311"></a>00311             fileName = <span class="stringliteral">&quot;HistVol&quot;</span>;
<a name="l00312"></a>00312             fileName += stm2.str();
<a name="l00313"></a>00313             fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00314"></a>00314             myHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00315"></a>00315             
<a name="l00316"></a>00316             <span class="comment">//optional - output the histogram</span>
<a name="l00317"></a>00317         <span class="comment">// create a name for the file to output</span>
<a name="l00318"></a>00318             fileName = <span class="stringliteral">&quot;HistArea&quot;</span>;
<a name="l00319"></a>00319             fileName += stm2.str();
<a name="l00320"></a>00320             fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00321"></a>00321             myHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00322"></a>00322             
<a name="l00323"></a>00323             <span class="comment">//optional - output the histogram</span>
<a name="l00324"></a>00324         <span class="comment">// create a name for the file to output</span>
<a name="l00325"></a>00325             fileName = <span class="stringliteral">&quot;HistExtArea&quot;</span>;
<a name="l00326"></a>00326             fileName += stm2.str();
<a name="l00327"></a>00327             fileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00328"></a>00328             myHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(fileName);
<a name="l00329"></a>00329         <span class="comment">/*</span>
<a name="l00330"></a>00330 <span class="comment">        SPSnodePtrs leaves;</span>
<a name="l00331"></a>00331 <span class="comment">        SPSnodePtrsItr leavesIt;</span>
<a name="l00332"></a>00332 <span class="comment">        (myHist.getSubPaving())-&gt;getLeaves(leaves);</span>
<a name="l00333"></a>00333 <span class="comment"></span>
<a name="l00334"></a>00334 <span class="comment">        //get the number of leaves</span>
<a name="l00335"></a>00335 <span class="comment">        NumLeafNodes.push_back(leaves.size());</span>
<a name="l00336"></a>00336 <span class="comment">        double FUnif = 1.0/leaves.size()*1.0;</span>
<a name="l00337"></a>00337 <span class="comment">        //cout &lt;&lt; &quot;Number of leaf nodes: &quot; &lt;&lt; leaves.size() &lt;&lt; &quot;\t fUnif: &quot; &lt;&lt; FUnif &lt;&lt; endl;</span>
<a name="l00338"></a>00338 <span class="comment"></span>
<a name="l00339"></a>00339 <span class="comment">        //initialize totalvariationdistance</span>
<a name="l00340"></a>00340 <span class="comment">        double totalVarDist = 0.0;</span>
<a name="l00341"></a>00341 <span class="comment"></span>
<a name="l00342"></a>00342 <span class="comment">        //initialize the coverage</span>
<a name="l00343"></a>00343 <span class="comment">        size_t yesCovOne = 0;</span>
<a name="l00344"></a>00344 <span class="comment"></span>
<a name="l00345"></a>00345 <span class="comment">        //iterate through the leaf nodes</span>
<a name="l00346"></a>00346 <span class="comment">        for (leavesIt = leaves.begin(); leavesIt &lt; leaves.end(); leavesIt++) {</span>
<a name="l00347"></a>00347 <span class="comment">          double leafVol = (*leavesIt)-&gt;nodeVolume();</span>
<a name="l00348"></a>00348 <span class="comment">          //get the total variation distance</span>
<a name="l00349"></a>00349 <span class="comment">          //calculate \mu_n - \mu</span>
<a name="l00350"></a>00350 <span class="comment">               double fhat = ((*leavesIt)-&gt;getCounter())/leafVol/n;</span>
<a name="l00351"></a>00351 <span class="comment">               //cout &lt;&lt; fhat &lt;&lt; &quot;\t&quot; &lt;&lt; leafVol &lt;&lt; &quot;\t&quot; &lt;&lt; FUnif &lt;&lt; &quot;\t&quot;;</span>
<a name="l00352"></a>00352 <span class="comment">               double diffMu = fabs(fhat*leafVol - FUnif);</span>
<a name="l00353"></a>00353 <span class="comment">          totalVarDist += diffMu;</span>
<a name="l00354"></a>00354 <span class="comment">          //out &lt;&lt; &quot;previous: &quot; &lt;&lt; totalVarDist &lt;&lt; &quot;\t current: &quot; &lt;&lt; diffMu &lt;&lt; endl;</span>
<a name="l00355"></a>00355 <span class="comment">          //totalVarDist = (diffMu &gt; totalVarDist) ? diffMu : totalVarDist; </span>
<a name="l00356"></a>00356 <span class="comment">          //cout &lt;&lt; &quot;after comparison: &quot; &lt;&lt; totalVarDist &lt;&lt; endl;</span>
<a name="l00357"></a>00357 <span class="comment"></span>
<a name="l00358"></a>00358 <span class="comment">          //get the 95% coverage</span>
<a name="l00359"></a>00359 <span class="comment">          // c - see SAGE worksheet for this - Wasserman&#39;s Varied Bound</span>
<a name="l00360"></a>00360 <span class="comment">          double c = gsl_cdf_ugaussian_Qinv(alpha/2*leafVol)*sqrt(rootBoxVol/leafVol)/2/sqrt(n);</span>
<a name="l00361"></a>00361 <span class="comment"></span>
<a name="l00362"></a>00362 <span class="comment">          // get lower and upper bounds</span>
<a name="l00363"></a>00363 <span class="comment">          double Lb = pow(fmax(sqrt(fhat)-c, 0), 2); // lower bound</span>
<a name="l00364"></a>00364 <span class="comment">          double Ub = pow(sqrt(fhat) + c, 2); // upper bound</span>
<a name="l00365"></a>00365 <span class="comment"></span>
<a name="l00366"></a>00366 <span class="comment">          //get the CDF</span>
<a name="l00367"></a>00367 <span class="comment">          rvector xuppVec = Sup((*leavesIt)-&gt;getBox());</span>
<a name="l00368"></a>00368 <span class="comment">          double xupp = _double(xuppVec[1]);</span>
<a name="l00369"></a>00369 <span class="comment">          rvector xlowVec = Inf((*leavesIt)-&gt;getBox());</span>
<a name="l00370"></a>00370 <span class="comment">          double xlow = _double(xlowVec[1]);</span>
<a name="l00371"></a>00371 <span class="comment">          double F=FinMixCDF(xlow, xupp, Weight, Mean, Sigma);</span>
<a name="l00372"></a>00372 <span class="comment">          </span>
<a name="l00373"></a>00373 <span class="comment">          // see SAGE worksheet for this</span>
<a name="l00374"></a>00374 <span class="comment">          if ( F/leafVol &gt;= Lb &amp;&amp; F/leafVol &lt;= Ub) { yesCovOne += 1;}</span>
<a name="l00375"></a>00375 <span class="comment">        } // end of iterating through the leaves</span>
<a name="l00376"></a>00376 <span class="comment"></span>
<a name="l00377"></a>00377 <span class="comment">        //keep the total variation distance</span>
<a name="l00378"></a>00378 <span class="comment">        //cout &lt;&lt; &quot;final: &quot; &lt;&lt; totalVarDist &lt;&lt; endl;</span>
<a name="l00379"></a>00379 <span class="comment">        TotalVarDist.push_back(totalVarDist);</span>
<a name="l00380"></a>00380 <span class="comment"></span>
<a name="l00381"></a>00381 <span class="comment">        //keep the coverage</span>
<a name="l00382"></a>00382 <span class="comment">        //cout &lt;&lt; yesCovOne*1.0/(leaves.size()*1.0)*100 &lt;&lt; </span>
<a name="l00383"></a>00383 <span class="comment">        //    &quot;% of the bins are the inside envelope.&quot; &lt;&lt; endl;</span>
<a name="l00384"></a>00384 <span class="comment">        Coverage.push_back(yesCovOne*1.0/(leaves.size()*1.0));</span>
<a name="l00385"></a>00385 <span class="comment">        */</span>
<a name="l00386"></a>00386         
<a name="l00387"></a>00387         <span class="comment">//get the IAE</span>
<a name="l00388"></a>00388         real midIAE = mid(myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#abf4e34e57ff3c76828457efaecbf4510">getFinMixIntervalIAE</a>(mixt, Tol, Deg));
<a name="l00389"></a>00389         IAE1.push_back(midIAE);
<a name="l00390"></a>00390         NumLeafNodes1.push_back(myHist1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
<a name="l00391"></a>00391         
<a name="l00392"></a>00392         <span class="comment">//get the IAE</span>
<a name="l00393"></a>00393         midIAE = mid(myHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#abf4e34e57ff3c76828457efaecbf4510">getFinMixIntervalIAE</a>(mixt, Tol, Deg));
<a name="l00394"></a>00394         IAE2.push_back(midIAE);
<a name="l00395"></a>00395         NumLeafNodes2.push_back(myHist2.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
<a name="l00396"></a>00396         
<a name="l00397"></a>00397         <span class="comment">//get the IAE</span>
<a name="l00398"></a>00398         midIAE = mid(myHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#abf4e34e57ff3c76828457efaecbf4510">getFinMixIntervalIAE</a>(mixt, Tol, Deg));
<a name="l00399"></a>00399         IAE3.push_back(midIAE);
<a name="l00400"></a>00400         NumLeafNodes3.push_back(myHist3.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
<a name="l00401"></a>00401         
<a name="l00402"></a>00402         <span class="comment">//get the IAE</span>
<a name="l00403"></a>00403         midIAE = mid(myHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#abf4e34e57ff3c76828457efaecbf4510">getFinMixIntervalIAE</a>(mixt, Tol, Deg));
<a name="l00404"></a>00404         IAE4.push_back(midIAE);
<a name="l00405"></a>00405         NumLeafNodes4.push_back(myHist4.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>());
<a name="l00406"></a>00406         
<a name="l00407"></a>00407       } <span class="comment">// end of if(successfulPQSplit)</span>
<a name="l00408"></a>00408     }<span class="comment">// end of if(successfulInsertion)</span>
<a name="l00409"></a>00409   } <span class="comment">// end of iterating through different kn&#39;s</span>
<a name="l00410"></a>00410 
<a name="l00411"></a>00411   <span class="keywordflow">if</span> (successfulPQSplit1 &amp;&amp; successfulInsertion1 &amp;&amp; successfulPQSplit2 &amp;&amp; 
<a name="l00412"></a>00412       successfulInsertion2 &amp;&amp; successfulPQSplit3 &amp;&amp; successfulInsertion3
<a name="l00413"></a>00413         &amp;&amp; successfulPQSplit4 &amp;&amp; successfulInsertion4) {
<a name="l00414"></a>00414     <span class="comment">// output IAE, number of leaf nodes, totalvardist, coverage to file</span>
<a name="l00415"></a>00415     std::ostringstream stm;
<a name="l00416"></a>00416     stm &lt;&lt; simNum;
<a name="l00417"></a>00417     <span class="keywordtype">string</span> PQFileName = <span class="stringliteral">&quot;FinMixExhaustivePQOutput&quot;</span>;
<a name="l00418"></a>00418     PQFileName += stm.str();
<a name="l00419"></a>00419     PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00420"></a>00420     oss.open(PQFileName.c_str());
<a name="l00421"></a>00421     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; IAE1.size(); i++) {
<a name="l00422"></a>00422       oss &lt;&lt; IAE1[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00423"></a>00423       oss &lt;&lt; NumLeafNodes1[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00424"></a>00424       oss &lt;&lt; IAE2[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00425"></a>00425       oss &lt;&lt; NumLeafNodes2[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00426"></a>00426       oss &lt;&lt; IAE3[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00427"></a>00427       oss &lt;&lt; NumLeafNodes3[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00428"></a>00428       oss &lt;&lt; IAE4[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00429"></a>00429       oss &lt;&lt; NumLeafNodes4[i] &lt;&lt; endl;
<a name="l00430"></a>00430       <span class="comment">//oss &lt;&lt; NumLeafNodes[i] &lt;&lt; &quot;\t&quot;;</span>
<a name="l00431"></a>00431       <span class="comment">//oss &lt;&lt; TotalVarDist[i] &lt;&lt; &quot;\t&quot;;</span>
<a name="l00432"></a>00432       <span class="comment">//oss &lt;&lt; Coverage[i] &lt;&lt; &quot;\t&quot;;</span>
<a name="l00433"></a>00433       <span class="comment">//oss &lt;&lt; Times[i] &lt;&lt; endl;</span>
<a name="l00434"></a>00434     }
<a name="l00435"></a>00435     oss &lt;&lt; flush;
<a name="l00436"></a>00436     oss.close();
<a name="l00437"></a>00437     cout &lt;&lt; <span class="stringliteral">&quot;IAE, number of leaf nodes, total variation distance, coverage and times output to &quot;</span> 
<a name="l00438"></a>00438         &lt;&lt; PQFileName &lt;&lt; endl;
<a name="l00439"></a>00439   }
<a name="l00440"></a>00440 } <span class="comment">// end of doEx</span>
<a name="l00441"></a>00441 <span class="comment">//=================end of exhaustive PQ=================================// </span>
<a name="l00442"></a>00442 
<a name="l00443"></a>00443 <span class="keywordflow">if</span> (doTV == 1) {
<a name="l00444"></a>00444 <span class="comment">//===using total variation to determine best histogram and a stopping rule=//</span>
<a name="l00445"></a>00445 cout &lt;&lt; <span class="stringliteral">&quot;\n========================================================&quot;</span> &lt;&lt; endl;
<a name="l00446"></a>00446 cout &lt;&lt; <span class="stringliteral">&quot;Run PQ with total variation...&quot;</span> &lt;&lt; endl;
<a name="l00447"></a>00447 
<a name="l00448"></a>00448 <span class="comment">//containers to store needed output</span>
<a name="l00449"></a>00449 vector&lt;real&gt; IAETotal;
<a name="l00450"></a>00450 vector&lt;int&gt; CoverageTotal;
<a name="l00451"></a>00451 vector&lt;int&gt; NumLeafNodesTotal;
<a name="l00452"></a>00452 vector&lt;double&gt; TotalVarDistTotal;
<a name="l00453"></a>00453 <span class="keywordtype">double</span> timing; 
<a name="l00454"></a>00454 
<a name="l00455"></a>00455 <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
<a name="l00456"></a>00456 <span class="keywordtype">bool</span> successfulPQSplit = <span class="keyword">false</span>;
<a name="l00457"></a>00457 
<a name="l00458"></a>00458 vector&lt;AdaptiveHistogram&gt; HistAtValley;
<a name="l00459"></a>00459 
<a name="l00460"></a>00460 <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> myHistTot(holdAllStats); 
<a name="l00461"></a>00461 successfulInsertion= myHistTot.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(theData);
<a name="l00462"></a>00462 
<a name="l00463"></a>00463 <span class="keywordflow">if</span> (successfulInsertion) {
<a name="l00464"></a>00464   <span class="keywordtype">int</span> finalK = 1;
<a name="l00465"></a>00465   cout &lt;&lt; <span class="stringliteral">&quot;Max k: &quot;</span> &lt;&lt; finalK &lt;&lt; endl;
<a name="l00466"></a>00466   
<a name="l00467"></a>00467   <span class="keywordtype">size_t</span> maxLeafNodes = int(n/log(n*(2*d+1))); <span class="comment">// temporarily</span>
<a name="l00468"></a>00468   cout &lt;&lt; <span class="stringliteral">&quot;Max leaf nodes allowed: &quot;</span> &lt;&lt; maxLeafNodes &lt;&lt; endl;
<a name="l00469"></a>00469 
<a name="l00470"></a>00470   <a class="code" href="classsubpavings_1_1CompCount.shtml" title="Class comparing on count of data points associated with a node.">CompCount</a> compCount;
<a name="l00471"></a>00471   <a class="code" href="classsubpavings_1_1CritLargestCount__LTE.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTE</a> critCount(finalK);
<a name="l00472"></a>00472   <span class="keywordtype">size_t</span> minPQPoints = 0; <span class="comment">// minimum of one data point in each box</span>
<a name="l00473"></a>00473 
<a name="l00474"></a>00474   <span class="comment">// we want to check the timings for this</span>
<a name="l00475"></a>00475   clock_t start, end;
<a name="l00476"></a>00476 
<a name="l00477"></a>00477   <span class="comment">// do the priority split</span>
<a name="l00478"></a>00478   start  = clock(); <span class="comment">// and keep the time</span>
<a name="l00479"></a>00479   <span class="keywordtype">bool</span>  successfulPQSplit = myHistTot.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6a4b39b06259e03b84b5131299334416">prioritySplitWithTotalVar</a>(compCount,
<a name="l00480"></a>00480          critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, minPQPoints, maxLeafNodes, StopVal, 
<a name="l00481"></a>00481          HistAtValley, simNum); <span class="comment">// no logging</span>
<a name="l00482"></a>00482   end = clock();
<a name="l00483"></a>00483   timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00484"></a>00484   cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00485"></a>00485 
<a name="l00486"></a>00486   <span class="keywordflow">if</span> (successfulPQSplit) {
<a name="l00487"></a>00487     <span class="comment">//iterate through the &quot;best&quot; histograms to get the MIAE</span>
<a name="l00488"></a>00488     vector&lt;AdaptiveHistogram&gt;::iterator it;
<a name="l00489"></a>00489     <span class="keywordflow">for</span> (it = HistAtValley.begin(); it &lt; HistAtValley.end(); it++) {
<a name="l00490"></a>00490       <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
<a name="l00491"></a>00491       <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> leavesIt;
<a name="l00492"></a>00492       ((*it).getSubPaving())-&gt;getLeaves(leaves);
<a name="l00493"></a>00493       (*it).outputToTxtTabs(<span class="stringliteral">&quot;HistTotal.txt&quot;</span>);
<a name="l00494"></a>00494       <span class="comment">//get the IAE</span>
<a name="l00495"></a>00495       real midIAE = mid((*it).getFinMixIntervalIAE(mixt, Tol, Deg));
<a name="l00496"></a>00496       IAETotal.push_back(midIAE);
<a name="l00497"></a>00497 
<a name="l00498"></a>00498       <span class="comment">//get the number of leaves</span>
<a name="l00499"></a>00499       NumLeafNodesTotal.push_back(leaves.size());
<a name="l00500"></a>00500       <span class="keywordtype">double</span> FUnif = 1.0/leaves.size()*1.0;
<a name="l00501"></a>00501       cout &lt;&lt; <span class="stringliteral">&quot;Number of leaf nodes: &quot;</span> &lt;&lt; leaves.size() &lt;&lt; <span class="stringliteral">&quot;\t fUnif: &quot;</span> &lt;&lt; FUnif &lt;&lt; endl;
<a name="l00502"></a>00502 
<a name="l00503"></a>00503       <span class="comment">//initialize the coverage</span>
<a name="l00504"></a>00504       <span class="keywordtype">size_t</span> yesCovOne = 0;
<a name="l00505"></a>00505       
<a name="l00506"></a>00506       <span class="comment">//initialize the total variation distance</span>
<a name="l00507"></a>00507       <span class="keywordtype">double</span> totalVarDist = 0.0;
<a name="l00508"></a>00508 
<a name="l00509"></a>00509       <span class="comment">//iterate through the leaf nodes</span>
<a name="l00510"></a>00510       <span class="keywordflow">for</span> (leavesIt = leaves.begin(); leavesIt &lt; leaves.end(); leavesIt++) {
<a name="l00511"></a>00511         <span class="keywordtype">double</span> leafVol = (*leavesIt)-&gt;nodeVolume();
<a name="l00512"></a>00512         <span class="keywordtype">double</span> fhat = ((*leavesIt)-&gt;getCounter())/leafVol/n;
<a name="l00513"></a>00513         <span class="comment">//cout &lt;&lt; fhat &lt;&lt; &quot;\t&quot; &lt;&lt; leafVol &lt;&lt; &quot;\t&quot; &lt;&lt; FUnif &lt;&lt; &quot;\t&quot;;</span>
<a name="l00514"></a>00514         <span class="keywordtype">double</span> diffMu = fabs(fhat*leafVol - FUnif);
<a name="l00515"></a>00515         totalVarDist += diffMu;
<a name="l00516"></a>00516         <span class="comment">//cout &lt;&lt; &quot;previous: &quot; &lt;&lt; totalVarDist &lt;&lt; &quot;\t current: &quot; &lt;&lt; diffMu &lt;&lt; endl;</span>
<a name="l00517"></a>00517         <span class="comment">//totalVarDist = (diffMu &gt; totalVarDist) ? diffMu : totalVarDist; </span>
<a name="l00518"></a>00518         <span class="comment">//cout &lt;&lt; &quot;after comparison: &quot; &lt;&lt; totalVarDist &lt;&lt; endl;</span>
<a name="l00519"></a>00519         
<a name="l00520"></a>00520         <span class="comment">//get the 95% coverage</span>
<a name="l00521"></a>00521         <span class="comment">// c - see SAGE worksheet for this - Wasserman&#39;s Varied Bound</span>
<a name="l00522"></a>00522         <span class="keywordtype">double</span> c = gsl_cdf_ugaussian_Qinv(alpha/2*leafVol)*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(rootBoxVol/leafVol)/2/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(n);
<a name="l00523"></a>00523 
<a name="l00524"></a>00524         <span class="comment">// get lower and upper bounds</span>
<a name="l00525"></a>00525         <span class="keywordtype">double</span> <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(fmax(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat)-c, 0), 2); <span class="comment">// lower bound</span>
<a name="l00526"></a>00526         <span class="keywordtype">double</span> <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat) + c, 2); <span class="comment">// upper bound</span>
<a name="l00527"></a>00527 
<a name="l00528"></a>00528         <span class="comment">//get the CDF</span>
<a name="l00529"></a>00529         rvector xuppVec = Sup((*leavesIt)-&gt;getBox());
<a name="l00530"></a>00530         <span class="keywordtype">double</span> xupp = _double(xuppVec[1]);
<a name="l00531"></a>00531         rvector xlowVec = Inf((*leavesIt)-&gt;getBox());
<a name="l00532"></a>00532         <span class="keywordtype">double</span> xlow = _double(xlowVec[1]);
<a name="l00533"></a>00533         <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a>=<a class="code" href="errorfunc_8cpp.shtml#a762104bf01c093a245dfcde680fd5edd" title="Get the cumulative distribution function of a finite mixture r.v.">FinMixCDF</a>(xlow, xupp, Weight, Mean, Sigma);
<a name="l00534"></a>00534         
<a name="l00535"></a>00535         <span class="comment">// see SAGE worksheet for this</span>
<a name="l00536"></a>00536         <span class="keywordflow">if</span> ( F/leafVol &gt;= Lb &amp;&amp; F/leafVol &lt;= Ub) { yesCovOne += 1;}
<a name="l00537"></a>00537       } <span class="comment">// end of iterating through the leaves</span>
<a name="l00538"></a>00538 
<a name="l00539"></a>00539       <span class="comment">//keep the total variation distance</span>
<a name="l00540"></a>00540       TotalVarDistTotal.push_back(totalVarDist);
<a name="l00541"></a>00541 
<a name="l00542"></a>00542       <span class="comment">//keep the coverage</span>
<a name="l00543"></a>00543       <span class="comment">//cout &lt;&lt; yesCovOne*1.0/(leaves.size()*1.0)*100 &lt;&lt; </span>
<a name="l00544"></a>00544       <span class="comment">//    &quot;% of the bins are the inside envelope.&quot; &lt;&lt; endl;</span>
<a name="l00545"></a>00545       CoverageTotal.push_back(yesCovOne*1.0/(leaves.size()*1.0));
<a name="l00546"></a>00546     } <span class="comment">// end of iterating through the &quot;best&quot; histograms</span>
<a name="l00547"></a>00547   } <span class="comment">// end of successfulPQSplit</span>
<a name="l00548"></a>00548 } <span class="comment">// end of successfulInsertion</span>
<a name="l00549"></a>00549 
<a name="l00550"></a>00550 <span class="keywordflow">if</span> (successfulPQSplit &amp;&amp; successfulInsertion) {
<a name="l00551"></a>00551   <span class="comment">// output IAE, number of leaf nodes, totalvardist, coverage to file</span>
<a name="l00552"></a>00552   <span class="keywordtype">string</span> PQFileName = <span class="stringliteral">&quot;FinMixTotalVariationPQOutput&quot;</span>;
<a name="l00553"></a>00553   PQFileName += stm.str();
<a name="l00554"></a>00554   PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00555"></a>00555   oss.open(PQFileName.c_str());
<a name="l00556"></a>00556   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; CoverageTotal.size(); i++) {
<a name="l00557"></a>00557     oss &lt;&lt; IAETotal[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00558"></a>00558     oss &lt;&lt; NumLeafNodesTotal[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00559"></a>00559     oss &lt;&lt; TotalVarDistTotal[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00560"></a>00560     oss &lt;&lt; CoverageTotal[i] &lt;&lt; endl;
<a name="l00561"></a>00561   }
<a name="l00562"></a>00562   oss &lt;&lt; timing &lt;&lt; endl;
<a name="l00563"></a>00563   oss &lt;&lt; flush;
<a name="l00564"></a>00564   oss.close();
<a name="l00565"></a>00565   cout &lt;&lt; <span class="stringliteral">&quot;IAE, number of leaf nodes, total variation distance, coverage and times output to &quot;</span> 
<a name="l00566"></a>00566       &lt;&lt; PQFileName &lt;&lt; endl;
<a name="l00567"></a>00567 }
<a name="l00568"></a>00568 }<span class="comment">// end of do TV</span>
<a name="l00569"></a>00569 <span class="comment">//=================end of total variation with stopping rule=================================// </span>
<a name="l00570"></a>00570 
<a name="l00571"></a>00571 <span class="comment">//==================Hold-out MDE===========================================//</span>
<a name="l00572"></a>00572 <span class="keywordflow">if</span> (doMDE == 1) {
<a name="l00573"></a>00573   cout &lt;&lt; <span class="stringliteral">&quot;========================================================&quot;</span> &lt;&lt; endl;
<a name="l00574"></a>00574   cout &lt;&lt; <span class="stringliteral">&quot;Run hold out estimation...&quot;</span> &lt;&lt; endl;
<a name="l00575"></a>00575 
<a name="l00576"></a>00576   <span class="comment">//=========insert data into an AdaptiveHistogramValidation object=========//</span>
<a name="l00577"></a>00577   <span class="comment">// indicators</span>
<a name="l00578"></a>00578    <span class="keywordtype">bool</span> successfulInsertion = <span class="keyword">false</span>;
<a name="l00579"></a>00579    <span class="keywordtype">bool</span> successfulPQSplit = <span class="keyword">false</span>;
<a name="l00580"></a>00580    <span class="keywordtype">double</span> timing = 0;
<a name="l00581"></a>00581    
<a name="l00582"></a>00582   <span class="comment">// Put the data from the container into the histogram  </span>
<a name="l00583"></a>00583   <a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml" title="A wrapper or manager for an SPSVnode aka StatsSubPavingVal in conjunction with massive amounts of sam...">AdaptiveHistogramValidation</a> myHistVal(holdAllStats);
<a name="l00584"></a>00584   <span class="keywordtype">int</span> holdOutCount = int(n*0.3);
<a name="l00585"></a>00585   <a class="code" href="classsubpavings_1_1SplitNever.shtml" title="Class for never splitting.">SplitNever</a> sn;   
<a name="l00586"></a>00586   successfulInsertion = myHistVal.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a6817e38bd1c2749a711f702c70dd16b5">insertFromRVecForHoldOut</a>(theData, sn, holdOutCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l00587"></a>00587   cout &lt;&lt; n-holdOutCount &lt;&lt; <span class="stringliteral">&quot; training data and &quot;</span> 
<a name="l00588"></a>00588       &lt;&lt; holdOutCount &lt;&lt; <span class="stringliteral">&quot; validation data inserted.&quot;</span> &lt;&lt; endl; 
<a name="l00589"></a>00589 
<a name="l00590"></a>00590   <span class="comment">//containers for output needed</span>
<a name="l00591"></a>00591   vector&lt;real&gt; IAEV;
<a name="l00592"></a>00592   vector&lt;int&gt; NumLeafNodesV;
<a name="l00593"></a>00593   vector&lt;double&gt; TotalVarDistV;
<a name="l00594"></a>00594   vector&lt;double&gt; CoverageV;
<a name="l00595"></a>00595   vector&lt;AdaptiveHistogramValidation&gt; HistsKept;
<a name="l00596"></a>00596   
<a name="l00597"></a>00597   <span class="keywordflow">if</span> (successfulInsertion) { <span class="comment">// if data successfully inserted       </span>
<a name="l00598"></a>00598     <a class="code" href="classsubpavings_1_1CompCountVal.shtml" title="Class comparing on count of data points associated with a node.">CompCountVal</a> nodeCompCount;
<a name="l00599"></a>00599     <span class="keywordtype">int</span> finalK = 1;
<a name="l00600"></a>00600     <a class="code" href="classsubpavings_1_1CritLargestCount__LTEV.shtml" title="Class for testing the count of the node with the largest count in histogram&#39;s subpaving.">CritLargestCount_LTEV</a> critCount(finalK);
<a name="l00601"></a>00601 
<a name="l00602"></a>00602     <span class="comment">//start the hold out estimation</span>
<a name="l00603"></a>00603     <span class="comment">//with stopping criteria</span>
<a name="l00604"></a>00604     <span class="keywordtype">bool</span> stopCrit = <span class="keyword">false</span>;
<a name="l00605"></a>00605     cout &lt;&lt; <span class="stringliteral">&quot;------Running MDEAll with stopping criteria-----------&quot;</span> &lt;&lt; endl;
<a name="l00606"></a>00606     <span class="keywordtype">int</span> method = 2; <span class="comment">// MDE</span>
<a name="l00607"></a>00607 
<a name="l00608"></a>00608     <span class="comment">//maximum number of leaf nodes allowed</span>
<a name="l00609"></a>00609     <span class="keywordtype">int</span> trainCount = n-holdOutCount; 
<a name="l00610"></a>00610     <span class="keywordtype">size_t</span> maxLeafNodes = int(trainCount/log(trainCount*(2*d+1))); <span class="comment">// temporarily</span>
<a name="l00611"></a>00611 
<a name="l00612"></a>00612     clock_t start, end;
<a name="l00613"></a>00613     start = clock();
<a name="l00614"></a>00614     successfulPQSplit = myHistVal.<a class="code" href="classsubpavings_1_1AdaptiveHistogramValidation.shtml#a261b3220218fe58d08713381aa7b0b44">prioritySplitAndEstimate</a>(nodeCompCount, critCount, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 
<a name="l00615"></a>00615                            0, 0.0, stopCrit, mixt, method, simNum, 
<a name="l00616"></a>00616                            maxLeafNodes, maxCheck, Tol, Deg, HistsKept);
<a name="l00617"></a>00617       end = clock();  
<a name="l00618"></a>00618     timing = ((<span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end - start)) / CLOCKS_PER_SEC);
<a name="l00619"></a>00619     cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt; timing &lt;&lt; <span class="stringliteral">&quot; s.&quot;</span>&lt;&lt; endl;
<a name="l00620"></a>00620     
<a name="l00621"></a>00621     <span class="keywordflow">if</span> (successfulPQSplit) {
<a name="l00622"></a>00622       <span class="comment">// get the final histograms</span>
<a name="l00623"></a>00623       vector&lt;AdaptiveHistogramValidation&gt;::iterator it;
<a name="l00624"></a>00624       <span class="keywordflow">for</span> (it = HistsKept.begin(); it &lt; HistsKept.end(); it++) {
<a name="l00625"></a>00625         <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a> leaves;
<a name="l00626"></a>00626         <a class="code" href="namespacesubpavings.shtml#ab5ab2047c25b17d5bb636a25ff65b0b0" title="Define type SPSVnodePtrsItr as an iterator over SPSVnodePtrs.">SPSVnodePtrsItr</a> leavesIt;
<a name="l00627"></a>00627         ((*it).getSubPaving())-&gt;getLeaves(leaves);
<a name="l00628"></a>00628 
<a name="l00629"></a>00629         <span class="comment">//get the IAE</span>
<a name="l00630"></a>00630         real midIAE = mid((*it).getFinMixIntervalIAE(mixt, Tol, Deg));
<a name="l00631"></a>00631         IAEV.push_back(midIAE);
<a name="l00632"></a>00632 
<a name="l00633"></a>00633         <span class="comment">//get the number of leaves</span>
<a name="l00634"></a>00634         NumLeafNodesV.push_back(leaves.size());
<a name="l00635"></a>00635         <span class="keywordtype">double</span> FUnif = 1.0/leaves.size()*1.0;
<a name="l00636"></a>00636         cout &lt;&lt; <span class="stringliteral">&quot;Number of leaf nodes: &quot;</span> &lt;&lt; leaves.size() &lt;&lt; <span class="stringliteral">&quot;\t fUnif: &quot;</span> &lt;&lt; FUnif &lt;&lt; endl;
<a name="l00637"></a>00637 
<a name="l00638"></a>00638         <span class="comment">//initialize the coverage</span>
<a name="l00639"></a>00639         <span class="keywordtype">size_t</span> yesCovOne = 0;
<a name="l00640"></a>00640         
<a name="l00641"></a>00641         <span class="comment">//initialize the total variation distance</span>
<a name="l00642"></a>00642         <span class="keywordtype">double</span> totalVarDist = 0.0;
<a name="l00643"></a>00643 
<a name="l00644"></a>00644         <span class="comment">//iterate through the leaf nodes</span>
<a name="l00645"></a>00645         <span class="keywordflow">for</span> (leavesIt = leaves.begin(); leavesIt &lt; leaves.end(); leavesIt++) {
<a name="l00646"></a>00646           <span class="keywordtype">double</span> leafVol = (*leavesIt)-&gt;nodeVolume();
<a name="l00647"></a>00647                <span class="keywordtype">double</span> fhat = ((*leavesIt)-&gt;getCounter())/leafVol/(n-holdOutCount);
<a name="l00648"></a>00648                <span class="comment">//cout &lt;&lt; fhat &lt;&lt; &quot;\t&quot; &lt;&lt; leafVol &lt;&lt; &quot;\t&quot; &lt;&lt; FUnif &lt;&lt; &quot;\t&quot;;</span>
<a name="l00649"></a>00649                <span class="keywordtype">double</span> diffMu = fabs(fhat*leafVol - FUnif);
<a name="l00650"></a>00650           totalVarDist += diffMu;
<a name="l00651"></a>00651           <span class="comment">//cout &lt;&lt; &quot;previous: &quot; &lt;&lt; totalVarDist &lt;&lt; &quot;\t current: &quot; &lt;&lt; diffMu &lt;&lt; endl;</span>
<a name="l00652"></a>00652           <span class="comment">//totalVarDist = (diffMu &gt; totalVarDist) ? diffMu : totalVarDist; </span>
<a name="l00653"></a>00653           <span class="comment">//cout &lt;&lt; &quot;after comparison: &quot; &lt;&lt; totalVarDist &lt;&lt; endl;</span>
<a name="l00654"></a>00654           
<a name="l00655"></a>00655           <span class="comment">//get the 95% coverage</span>
<a name="l00656"></a>00656           <span class="comment">// c - see SAGE worksheet for this - Wasserman&#39;s Varied Bound</span>
<a name="l00657"></a>00657           <span class="keywordtype">double</span> c = gsl_cdf_ugaussian_Qinv(alpha/2*leafVol)*<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(rootBoxVol/leafVol)/2/<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(n);
<a name="l00658"></a>00658           <span class="comment">// get lower and upper bounds</span>
<a name="l00659"></a>00659           <span class="keywordtype">double</span> <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a> = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(fmax(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat)-c, 0), 2); <span class="comment">// lower bound</span>
<a name="l00660"></a>00660           <span class="keywordtype">double</span> <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a> = <a class="code" href="namespacetaylor.shtml#a769606a4634cc75e25da1a652cf19b14">pow</a>(<a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>(fhat) + c, 2); <span class="comment">// upper bound</span>
<a name="l00661"></a>00661           
<a name="l00662"></a>00662           <span class="comment">//get the CDF</span>
<a name="l00663"></a>00663           rvector xuppVec = Sup((*leavesIt)-&gt;getBox());
<a name="l00664"></a>00664           <span class="keywordtype">double</span> xupp = _double(xuppVec[1]);
<a name="l00665"></a>00665           rvector xlowVec = Inf((*leavesIt)-&gt;getBox());
<a name="l00666"></a>00666           <span class="keywordtype">double</span> xlow = _double(xlowVec[1]);
<a name="l00667"></a>00667           <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a>=<a class="code" href="errorfunc_8cpp.shtml#a762104bf01c093a245dfcde680fd5edd" title="Get the cumulative distribution function of a finite mixture r.v.">FinMixCDF</a>(xlow, xupp, Weight, Mean, Sigma);
<a name="l00668"></a>00668         
<a name="l00669"></a>00669           <span class="comment">// see SAGE worksheet for this</span>
<a name="l00670"></a>00670           <span class="keywordflow">if</span> ( F/leafVol &gt;= Lb &amp;&amp; F/leafVol &lt;= Ub) { yesCovOne += 1;}
<a name="l00671"></a>00671         } <span class="comment">// end of iterating through the leaves</span>
<a name="l00672"></a>00672 
<a name="l00673"></a>00673         <span class="comment">//keep the total variation distance</span>
<a name="l00674"></a>00674         TotalVarDistV.push_back(totalVarDist);
<a name="l00675"></a>00675         
<a name="l00676"></a>00676   
<a name="l00677"></a>00677 
<a name="l00678"></a>00678         <span class="comment">//keep the coverage</span>
<a name="l00679"></a>00679         <span class="comment">//cout &lt;&lt; yesCovOne*1.0/(leaves.size()*1.0)*100 &lt;&lt; </span>
<a name="l00680"></a>00680         <span class="comment">//    &quot;% of the bins are the inside envelope.&quot; &lt;&lt; endl;</span>
<a name="l00681"></a>00681         CoverageV.push_back(yesCovOne*1.0/(leaves.size()*1.0));
<a name="l00682"></a>00682       } <span class="comment">// end of iterating through the &quot;best&quot; histograms</span>
<a name="l00683"></a>00683     } <span class="comment">// end of successfulPQSplit</span>
<a name="l00684"></a>00684   } <span class="comment">// end of successfulInsertion</span>
<a name="l00685"></a>00685 
<a name="l00686"></a>00686   <span class="keywordflow">if</span> (successfulPQSplit &amp;&amp; successfulInsertion) {
<a name="l00687"></a>00687     <span class="comment">// output IAE, number of leaf nodes, totalvardist, coverage to file</span>
<a name="l00688"></a>00688     std::ostringstream stm;
<a name="l00689"></a>00689     stm &lt;&lt; simNum;
<a name="l00690"></a>00690     <span class="keywordtype">string</span> PQFileName = <span class="stringliteral">&quot;FinMixMDEPQOutput&quot;</span>;
<a name="l00691"></a>00691     PQFileName += stm.str();
<a name="l00692"></a>00692     PQFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00693"></a>00693     oss.open(PQFileName.c_str());
<a name="l00694"></a>00694     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i=0; i &lt; CoverageV.size(); i++) {
<a name="l00695"></a>00695       oss &lt;&lt; IAEV[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00696"></a>00696       oss &lt;&lt; NumLeafNodesV[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00697"></a>00697       oss &lt;&lt; TotalVarDistV[i] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span>;
<a name="l00698"></a>00698       oss &lt;&lt; CoverageV[i] &lt;&lt; endl;
<a name="l00699"></a>00699     }
<a name="l00700"></a>00700     oss &lt;&lt; timing &lt;&lt; endl;
<a name="l00701"></a>00701     oss &lt;&lt; flush;
<a name="l00702"></a>00702     oss.close();
<a name="l00703"></a>00703     cout &lt;&lt; <span class="stringliteral">&quot;IAE, number of leaf nodes, total variation distance, coverage and times output to &quot;</span> 
<a name="l00704"></a>00704         &lt;&lt; PQFileName &lt;&lt; endl;
<a name="l00705"></a>00705   }
<a name="l00706"></a>00706 } <span class="comment">// end of do MDE</span>
<a name="l00707"></a>00707 <span class="comment">//====================end of MDE===================================//</span>
<a name="l00708"></a>00708 
<a name="l00709"></a>00709 <span class="comment">//==============Regular histogram==================================//</span>
<a name="l00710"></a>00710 <span class="keywordflow">if</span> (doRegHist == 1) {
<a name="l00711"></a>00711    
<a name="l00712"></a>00712    cout &lt;&lt; <span class="stringliteral">&quot;===========Making regular histograms using the different rules==&quot;</span> &lt;&lt; endl;
<a name="l00713"></a>00713    
<a name="l00714"></a>00714    vector&lt;real&gt; regHistIAE;
<a name="l00715"></a>00715    vector&lt;int&gt; nBins;
<a name="l00716"></a>00716    
<a name="l00717"></a>00717    <span class="keywordflow">for</span> (<span class="keywordtype">int</span> bw = 0; bw &lt; 3; bw++) {
<a name="l00718"></a>00718     cout &lt;&lt; <span class="stringliteral">&quot;Method &quot;</span> &lt;&lt; bw &lt;&lt; endl;
<a name="l00719"></a>00719     <a class="code" href="structRegHist.shtml">RegHist</a> myRegHist;
<a name="l00720"></a>00720     <a class="code" href="errorfunc_8cpp.shtml#a61145b8e6b4bbb68339137b4b788bc92" title="Make a regular histogram (using Dominic&#39;s histogram.m file)">makeRegularHist</a>(myRegHist, theData, pavingBox, bw);
<a name="l00721"></a>00721     nBins.push_back(myRegHist.<a class="code" href="structRegHist.shtml#a587ad6fc6b0ba0a0c723efeafe299189">heights</a>.size());
<a name="l00722"></a>00722     real midIAE = mid(<a class="code" href="errorfunc_8cpp.shtml#a3b281b5e62f571e14e7c127af8d7e74a">getRegHistFinMixIntervalIAE</a>(n, myRegHist, mixt, Tol, Deg));
<a name="l00723"></a>00723     regHistIAE.push_back(midIAE);
<a name="l00724"></a>00724   }
<a name="l00725"></a>00725 
<a name="l00726"></a>00726   <span class="comment">//output IAE to .txt file------------------</span>
<a name="l00727"></a>00727   ofstream os;         <span class="comment">// ofstream object</span>
<a name="l00728"></a>00728   os &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l00729"></a>00729   os.precision(5);
<a name="l00730"></a>00730 
<a name="l00731"></a>00731   <span class="keywordtype">string</span> outputFileName;<span class="comment">// for output file</span>
<a name="l00732"></a>00732   outputFileName = <span class="stringliteral">&quot;FinMixIAERegHist&quot;</span>;
<a name="l00733"></a>00733   outputFileName += stm.str();
<a name="l00734"></a>00734   outputFileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00735"></a>00735   os.open(outputFileName.c_str());
<a name="l00736"></a>00736   <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> bw = 0; bw &lt; 3; bw++) {
<a name="l00737"></a>00737     os &lt;&lt; regHistIAE[bw] &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; nBins[bw] &lt;&lt; endl;
<a name="l00738"></a>00738   }
<a name="l00739"></a>00739   os &lt;&lt; flush;
<a name="l00740"></a>00740   os.close();
<a name="l00741"></a>00741   
<a name="l00742"></a>00742   std::cout &lt;&lt; <span class="stringliteral">&quot;IAE output to &quot;</span> &lt;&lt; outputFileName &lt;&lt; endl;
<a name="l00743"></a>00743 } <span class="comment">// end of doRegHist</span>
<a name="l00744"></a>00744 
<a name="l00745"></a>00745 <span class="comment">// free the random number generator</span>
<a name="l00746"></a>00746 gsl_rng_free(r);
<a name="l00747"></a>00747 gsl_rng_free(r1);
<a name="l00748"></a>00748 
<a name="l00749"></a>00749 <span class="keywordflow">return</span> 0;
<a name="l00750"></a>00750 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="FiniteMixtureStats_8cpp.shtml">FiniteMixtureStats.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:12 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
