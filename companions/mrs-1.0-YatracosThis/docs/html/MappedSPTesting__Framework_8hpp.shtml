<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: MappedSPTesting_Framework.hpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('MappedSPTesting__Framework_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">MappedSPTesting_Framework.hpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Templatised procedures for testing MappedSPnode class.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &quot;<a class="el" href="mappedspnode_8hpp_source.shtml">mappedspnode.hpp</a>&quot;</code><br/>
</div>
<p><a href="MappedSPTesting__Framework_8hpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="MappedSPTesting__Framework_8hpp.shtml#a6b3f69953d9f4c87002c0204d03d7b8f">printTestTrees</a> (const <a class="el" href="classsubpavings_1_1MappedSPnode.shtml">MappedSPnode</a>&lt; T &gt; *const lhs, const <a class="el" href="classsubpavings_1_1MappedSPnode.shtml">MappedSPnode</a>&lt; T &gt; *const rhs)</td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="MappedSPTesting__Framework_8hpp.shtml#ad83a42a81322a7cb1cd5727e0a885d98">mappedAdditionTest</a> (const <a class="el" href="classsubpavings_1_1MappedSPnode.shtml">MappedSPnode</a>&lt; T &gt; *const lhs, const <a class="el" href="classsubpavings_1_1MappedSPnode.shtml">MappedSPnode</a>&lt; T &gt; *const rhs)</td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="MappedSPTesting__Framework_8hpp.shtml#a6e2ac216092625d408efa2a69eb8389c">mappedProductTest</a> (const <a class="el" href="classsubpavings_1_1MappedSPnode.shtml">MappedSPnode</a>&lt; T &gt; *const lhs, const <a class="el" href="classsubpavings_1_1MappedSPnode.shtml">MappedSPnode</a>&lt; T &gt; *const rhs)</td></tr>
<tr><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr><td class="memTemplItemLeft" align="right" valign="top">void&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="MappedSPTesting__Framework_8hpp.shtml#ac9d6517d005d4b9c92a1362e9f4b1a4a">mappedScalarMultTest</a> (const <a class="el" href="classsubpavings_1_1MappedSPnode.shtml">MappedSPnode</a>&lt; T &gt; *const lhs, const <a class="el" href="classsubpavings_1_1MappedSPnode.shtml">MappedSPnode</a>&lt; T &gt; *const rhs, const T multiplier)</td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Templatised procedures for testing MappedSPnode class. </p>

<p>Definition in file <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml">MappedSPTesting_Framework.hpp</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="ad83a42a81322a7cb1cd5727e0a885d98"></a><!-- doxytag: member="MappedSPTesting_Framework.hpp::mappedAdditionTest" ref="ad83a42a81322a7cb1cd5727e0a885d98" args="(const MappedSPnode&lt; T &gt; *const lhs, const MappedSPnode&lt; T &gt; *const rhs)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="MappedSPTesting__Framework_8hpp.shtml#ad83a42a81322a7cb1cd5727e0a885d98">mappedAdditionTest</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1MappedSPnode.shtml">MappedSPnode</a>&lt; T &gt; *const&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1MappedSPnode.shtml">MappedSPnode</a>&lt; T &gt; *const&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml#l00030">30</a> of file <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml">MappedSPTesting_Framework.hpp</a>.</p>

<p>References <a class="el" href="spnode_8cpp_source.shtml#l01363">subpavings::SPnode::nodeReabsorbChildren()</a>.</p>

<p>Referenced by <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00189">testingIntervals()</a>, <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00028">testingInts()</a>, <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00108">testingReals()</a>, and <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00277">testingRvectors()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* addedLazy1 = NULL;
    <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* addedLazy2 = NULL;
    <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* addedReduced = NULL;

    <span class="keywordflow">try</span> {


        cout &lt;&lt; <span class="stringliteral">&quot;Trying lazy &#39;addition&#39;, creating addedLazy1 = addedLazy2 = rhs lazy(+) lhs&quot;</span> &lt;&lt; endl;
        cout &lt;&lt; endl;

        addedLazy1 = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;::lazyCollationNonMinimalUnion</a>(lhs, rhs);

        addedLazy2 = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>(*addedLazy1);

        cout &lt;&lt; <span class="stringliteral">&quot;addedLazy1 and addedLazy2 are the same, both are &quot;</span> &lt;&lt; endl;
        cout &lt;&lt; addedLazy1-&gt;nodesAllPrint(cout) &lt;&lt; endl;
        cout &lt;&lt; endl;

        cout &lt;&lt; <span class="stringliteral">&quot;Trying addition with reduction, creating addedReduced = rhs reduced(+) lhs&quot;</span> &lt;&lt; endl;

        addedReduced = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;::reducedAddNonMinimalUnion</a>(lhs, rhs);


        cout &lt;&lt; <span class="stringliteral">&quot;addedReduced is &quot;</span> &lt;&lt; endl;
        cout &lt;&lt; addedReduced-&gt;nodesAllPrint(cout) &lt;&lt; endl;
        cout &lt;&lt; endl;

        cout &lt;&lt; <span class="stringliteral">&quot;Trying nodeReabsorbChildren() on addedLazy1&quot;</span> &lt;&lt; endl;
        addedLazy1-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab92c1accdfd155898e63e26a112b8e36" title="Reabsorbs both children of the node.">nodeReabsorbChildren</a>();

        cout &lt;&lt; <span class="stringliteral">&quot;addedLazy1 now is &quot;</span> &lt;&lt; endl;
        cout &lt;&lt; addedLazy1-&gt;nodesAllPrint(cout) &lt;&lt; endl;
        cout &lt;&lt; endl;

        cout &lt;&lt; <span class="stringliteral">&quot;Trying nodeReabsorbChildrenWithHullPropagation() on addedLazy2&quot;</span> &lt;&lt; endl;
        addedLazy2-&gt;nodeReabsorbChildrenWithHullPropagation();

        cout &lt;&lt; <span class="stringliteral">&quot;addedLazy2 now is &quot;</span> &lt;&lt; endl;
        cout &lt;&lt; addedLazy2-&gt;nodesAllPrint(cout) &lt;&lt; endl;
        cout &lt;&lt; endl;

        cout &lt;&lt; <span class="stringliteral">&quot;Trying nodeReabsorbChildrenWithHullPropagation() on addedReduced&quot;</span> &lt;&lt; endl;
        addedReduced-&gt;nodeReabsorbChildrenWithHullPropagation();

        cout &lt;&lt; <span class="stringliteral">&quot;addedReduced now is &quot;</span> &lt;&lt; endl;
        cout &lt;&lt; addedReduced-&gt;nodesAllPrint(cout) &lt;&lt; endl;
        cout &lt;&lt; endl;

        <span class="keyword">delete</span> addedLazy1;
        <span class="keyword">delete</span> addedLazy2;
        <span class="keyword">delete</span> addedReduced;
        addedLazy1 = NULL; addedLazy2 = NULL; addedReduced = NULL;
    }
    <span class="keywordflow">catch</span> (exception&amp; e) {
            <span class="keywordflow">if</span> (addedLazy1) {
                <span class="keyword">delete</span> addedLazy1;
                addedLazy1 = NULL;
            }
            <span class="keywordflow">if</span> (addedLazy2) {
                <span class="keyword">delete</span> addedLazy2;
                addedLazy2 = NULL;
            }
            <span class="keywordflow">if</span> (addedReduced) {
                <span class="keyword">delete</span> addedReduced;
                addedReduced = NULL;
            }
            <span class="keywordflow">throw</span>;
    }


} <span class="comment">// end of absolute difference test</span>
</pre></div>
</div>
</div>
<a class="anchor" id="a6e2ac216092625d408efa2a69eb8389c"></a><!-- doxytag: member="MappedSPTesting_Framework.hpp::mappedProductTest" ref="a6e2ac216092625d408efa2a69eb8389c" args="(const MappedSPnode&lt; T &gt; *const lhs, const MappedSPnode&lt; T &gt; *const rhs)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="MappedSPTesting__Framework_8hpp.shtml#a6e2ac216092625d408efa2a69eb8389c">mappedProductTest</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1MappedSPnode.shtml">MappedSPnode</a>&lt; T &gt; *const&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1MappedSPnode.shtml">MappedSPnode</a>&lt; T &gt; *const&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml#l00108">108</a> of file <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml">MappedSPTesting_Framework.hpp</a>.</p>

<p>Referenced by <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00189">testingIntervals()</a>, <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00028">testingInts()</a>, <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00108">testingReals()</a>, and <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00277">testingRvectors()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* addedLazy1 = NULL;

    <span class="keywordflow">try</span> {

        cout &lt;&lt; <span class="stringliteral">&quot;creating addedLazy1 rhs lazy(+) lhs&quot;</span> &lt;&lt; endl;
        cout &lt;&lt; endl;

        addedLazy1 = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;::lazyCollationNonMinimalUnion</a>(lhs, rhs);

        cout &lt;&lt; <span class="stringliteral">&quot;addedLazy1 is &quot;</span> &lt;&lt; endl;
        cout &lt;&lt; addedLazy1-&gt;nodesAllPrint(cout) &lt;&lt; endl;
        cout &lt;&lt; endl;

        cout &lt;&lt; <span class="stringliteral">&quot;Trying productUnion() on addedLazy1&quot;</span> &lt;&lt; endl;
        addedLazy1-&gt;productUnion();

        cout &lt;&lt; <span class="stringliteral">&quot;addedLazy1 now is &quot;</span> &lt;&lt; endl;
        cout &lt;&lt; addedLazy1-&gt;nodesAllPrint(cout) &lt;&lt; endl;
        cout &lt;&lt; endl;

        <span class="keyword">delete</span> addedLazy1;
        addedLazy1 = NULL;
    }
    <span class="keywordflow">catch</span> (exception&amp; e) {
            <span class="keywordflow">if</span> (addedLazy1) {
                <span class="keyword">delete</span> addedLazy1;
                addedLazy1 = NULL;
            }
            <span class="keywordflow">throw</span>;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="ac9d6517d005d4b9c92a1362e9f4b1a4a"></a><!-- doxytag: member="MappedSPTesting_Framework.hpp::mappedScalarMultTest" ref="ac9d6517d005d4b9c92a1362e9f4b1a4a" args="(const MappedSPnode&lt; T &gt; *const lhs, const MappedSPnode&lt; T &gt; *const rhs, const T multiplier)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="MappedSPTesting__Framework_8hpp.shtml#ac9d6517d005d4b9c92a1362e9f4b1a4a">mappedScalarMultTest</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1MappedSPnode.shtml">MappedSPnode</a>&lt; T &gt; *const&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1MappedSPnode.shtml">MappedSPnode</a>&lt; T &gt; *const&#160;</td>
          <td class="paramname"><em>rhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T&#160;</td>
          <td class="paramname"><em>multiplier</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml#l00143">143</a> of file <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml">MappedSPTesting_Framework.hpp</a>.</p>

<p>Referenced by <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00189">testingIntervals()</a>, <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00028">testingInts()</a>, <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00108">testingReals()</a>, and <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00277">testingRvectors()</a>.</p>
<div class="fragment"><pre class="fragment">{
    <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* addedLazy = NULL;
    <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* multAdded = NULL;
    <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;</a>* multLhs = NULL;

    <span class="keywordflow">try</span> {


        cout &lt;&lt; <span class="stringliteral">&quot;creating addedLazy rhs lazy(+) lhs&quot;</span> &lt;&lt; endl;
        cout &lt;&lt; endl;

        addedLazy = <a class="code" href="classsubpavings_1_1MappedSPnode.shtml" title="A templated derived class based on SPnode.">MappedSPnode&lt;T&gt;::lazyCollationNonMinimalUnion</a>(lhs, rhs);

        cout &lt;&lt; <span class="stringliteral">&quot;addedLazy is &quot;</span> &lt;&lt; endl;
        cout &lt;&lt; addedLazy-&gt;nodesAllPrint(cout) &lt;&lt; endl;
        cout &lt;&lt; endl;


        cout &lt;&lt; <span class="stringliteral">&quot;Trying own type scalar multiplication multLhs = lhs * (supplied multiplier)&quot;</span> &lt;&lt; endl;
        cout &lt;&lt; <span class="stringliteral">&quot;Supplied multiplier is &quot;</span> &lt;&lt; multiplier &lt;&lt; endl;
        cout &lt;&lt; endl;

        multLhs = lhs-&gt;scalarMult(multiplier);

        cout &lt;&lt; <span class="stringliteral">&quot;multLhs now is &quot;</span> &lt;&lt; endl;
        cout &lt;&lt; multLhs-&gt;nodesAllPrint(cout) &lt;&lt; endl;
        cout &lt;&lt; endl;

        cout &lt;&lt; <span class="stringliteral">&quot;Trying own type scalar multiplication multAdded = addedLazy * (supplied multiplier)&quot;</span> &lt;&lt; endl;
        cout &lt;&lt; <span class="stringliteral">&quot;Supplied multiplier is &quot;</span> &lt;&lt; multiplier &lt;&lt; endl;
        cout &lt;&lt; endl;

        multAdded = addedLazy-&gt;scalarMult(multiplier);

        cout &lt;&lt; <span class="stringliteral">&quot;multAdded now is &quot;</span> &lt;&lt; endl;
        cout &lt;&lt; multAdded-&gt;nodesAllPrint(cout) &lt;&lt; endl;
        cout &lt;&lt; endl;


        <span class="keyword">delete</span> addedLazy;
        addedLazy = NULL;
        <span class="keyword">delete</span> multAdded;
        multAdded = NULL;
        <span class="keyword">delete</span> multLhs;
        multLhs = NULL;
    }
    <span class="keywordflow">catch</span> (exception&amp; e) {
            <span class="keywordflow">if</span> (addedLazy) {
                <span class="keyword">delete</span> addedLazy;
                addedLazy = NULL;
            }
            <span class="keywordflow">if</span> (multAdded) {
                <span class="keyword">delete</span> multAdded;
                multAdded = NULL;
            }
            <span class="keywordflow">if</span> (multLhs) {
                <span class="keyword">delete</span> multLhs;
                multLhs = NULL;
            }
            <span class="keywordflow">throw</span>;
    }
}
</pre></div>
</div>
</div>
<a class="anchor" id="a6b3f69953d9f4c87002c0204d03d7b8f"></a><!-- doxytag: member="MappedSPTesting_Framework.hpp::printTestTrees" ref="a6b3f69953d9f4c87002c0204d03d7b8f" args="(const MappedSPnode&lt; T &gt; *const lhs, const MappedSPnode&lt; T &gt; *const rhs)" -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="MappedSPTesting__Framework_8hpp.shtml#a6b3f69953d9f4c87002c0204d03d7b8f">printTestTrees</a> </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1MappedSPnode.shtml">MappedSPnode</a>&lt; T &gt; *const&#160;</td>
          <td class="paramname"><em>lhs</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classsubpavings_1_1MappedSPnode.shtml">MappedSPnode</a>&lt; T &gt; *const&#160;</td>
          <td class="paramname"><em>rhs</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml#l00017">17</a> of file <a class="el" href="MappedSPTesting__Framework_8hpp_source.shtml">MappedSPTesting_Framework.hpp</a>.</p>

<p>Referenced by <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00189">testingIntervals()</a>, <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00028">testingInts()</a>, <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00108">testingReals()</a>, and <a class="el" href="MappedSPTesting_8cpp_source.shtml#l00277">testingRvectors()</a>.</p>
<div class="fragment"><pre class="fragment">{
    cout &lt;&lt; <span class="stringliteral">&quot;lhs is &quot;</span> &lt;&lt; endl;
    cout &lt;&lt;lhs-&gt;nodesAllPrint(cout) &lt;&lt; endl;
    cout &lt;&lt; endl;

    cout &lt;&lt; <span class="stringliteral">&quot;rhs is &quot;</span> &lt;&lt; endl;
    cout &lt;&lt;rhs-&gt;nodesAllPrint(cout) &lt;&lt; endl;
    cout &lt;&lt; endl;

}
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="MappedSPTesting__Framework_8hpp.shtml">MappedSPTesting_Framework.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:21 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
