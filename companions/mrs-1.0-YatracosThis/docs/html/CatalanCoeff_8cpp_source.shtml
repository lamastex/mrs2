<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: CatalanCoeff.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('CatalanCoeff_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">CatalanCoeff.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="CatalanCoeff_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2009 Raazesh Sainudiin and Gloria Teng</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment"> * your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00020"></a>00020 
<a name="l00025"></a>00025 <span class="comment">// Purpose: To compute the Catalan Coefficients of a spatial binary branching </span>
<a name="l00026"></a>00026 <span class="comment">// process based on the SAGE worksheet </span>
<a name="l00027"></a>00027 <span class="comment">// (http://sage.math.canterbury.ac.nz/home/pub/15/) authored by </span>
<a name="l00028"></a>00028 <span class="comment">// Raazesh Sainudiin, 2009.</span>
<a name="l00029"></a>00029 
<a name="l00030"></a>00030 <span class="preprocessor">#include &quot;<a class="code" href="CatalanCoeff_8hpp.shtml" title="Declarations for Computing Catalan Coefficients and their Frequencies.">CatalanCoeff.hpp</a>&quot;</span>
<a name="l00031"></a>00031 
<a name="l00034"></a><a class="code" href="CatalanCoeff_8cpp.shtml#aa461afbfcfb8c1fda93e7ca635f8e949">00034</a> <span class="keyword">inline</span> std::string <a class="code" href="CatalanCoeff_8cpp.shtml#aa461afbfcfb8c1fda93e7ca635f8e949">getStringState</a>(vector&lt;int&gt; intState)
<a name="l00035"></a>00035 {
<a name="l00036"></a>00036   <span class="keywordtype">string</span> stateString;
<a name="l00037"></a>00037   vector&lt;int&gt;::iterator iterIntState;
<a name="l00038"></a>00038 
<a name="l00039"></a>00039   iterIntState = intState.begin();
<a name="l00040"></a>00040   <span class="keywordflow">while</span> (iterIntState != intState.end())
<a name="l00041"></a>00041   {
<a name="l00042"></a>00042     <span class="keywordtype">int</span> c =  *iterIntState++;
<a name="l00043"></a>00043     stateString += <a class="code" href="CatalanCoeff_8hpp.shtml#a6080956340fc2c25c8caf627e74ddbc3">to_string</a>(c);
<a name="l00044"></a>00044   }
<a name="l00045"></a>00045   <span class="keywordflow">return</span> stateString;
<a name="l00046"></a>00046 }
<a name="l00047"></a>00047 
<a name="l00050"></a><a class="code" href="CatalanCoeff_8cpp.shtml#a9627831e826937a7113bc8cd7b6b6f14">00050</a> <span class="keyword">inline</span> vector&lt;int&gt; <a class="code" href="CatalanCoeff_8cpp.shtml#a9627831e826937a7113bc8cd7b6b6f14">getNextState</a>(vector&lt;int&gt; currSState, <span class="keywordtype">int</span> nodeI)
<a name="l00051"></a>00051 {
<a name="l00052"></a>00052   vector&lt;int&gt; nextSState;
<a name="l00053"></a>00053   <span class="keywordtype">int</span> i = nodeI;
<a name="l00054"></a>00054   <span class="keywordtype">int</span> j;
<a name="l00055"></a>00055   <span class="keywordtype">int</span> currSStateSize = currSState.size();
<a name="l00056"></a>00056   <span class="keywordtype">int</span> currNode, nextNode;
<a name="l00057"></a>00057   currNode = currSState[i];
<a name="l00058"></a>00058   nextNode = currNode + 1;
<a name="l00059"></a>00059   <span class="comment">//concatenate to get nextSState</span>
<a name="l00060"></a>00060   <span class="keywordflow">for</span> (j=0; j &lt;i; j++)
<a name="l00061"></a>00061   {
<a name="l00062"></a>00062     nextSState.push_back(currSState[j]); 
<a name="l00063"></a>00063   <span class="comment">//cout &lt;&lt; nextSState[j] &lt;&lt; endl;</span>
<a name="l00064"></a>00064   }
<a name="l00065"></a>00065 
<a name="l00066"></a>00066   nextSState.push_back(nextNode);
<a name="l00067"></a>00067   nextSState.push_back(nextNode);
<a name="l00068"></a>00068 
<a name="l00069"></a>00069   <span class="keywordflow">for</span> (j=(i+1); j &lt; currSStateSize; j++)
<a name="l00070"></a>00070   {
<a name="l00071"></a>00071     nextSState.push_back(currSState[j]); 
<a name="l00072"></a>00072   <span class="comment">//cout &lt;&lt; nextSState[j] &lt;&lt; endl;</span>
<a name="l00073"></a>00073   }
<a name="l00074"></a>00074   <span class="comment">//while(!nextSState.empty())</span>
<a name="l00075"></a>00075   <span class="comment">//nextSState.pop_back();</span>
<a name="l00076"></a>00076   <span class="keywordflow">return</span> nextSState;
<a name="l00077"></a>00077 }
<a name="l00078"></a>00078 
<a name="l00079"></a>00079 
<a name="l00083"></a><a class="code" href="CatalanCoeff_8cpp.shtml#a254b5f00927ec8c755c78a1c1a4092a1">00083</a> <span class="keyword">inline</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> <a class="code" href="CatalanCoeff_8cpp.shtml#a254b5f00927ec8c755c78a1c1a4092a1">factorial</a>(<span class="keywordtype">int</span> num)
<a name="l00084"></a>00084 {
<a name="l00085"></a>00085   <span class="keywordflow">if</span> (num==1 || num==0)
<a name="l00086"></a>00086     <span class="keywordflow">return</span> 1;
<a name="l00087"></a>00087   <span class="keywordflow">else</span>
<a name="l00088"></a>00088     <span class="keywordflow">return</span> <a class="code" href="CatalanCoeff_8cpp.shtml#a254b5f00927ec8c755c78a1c1a4092a1">factorial</a>(num-1)*num;
<a name="l00089"></a>00089 }
<a name="l00090"></a>00090 
<a name="l00093"></a>00093 <span class="comment">//factorial(2*k)/factorial(k+1)/factorial(k);</span>
<a name="l00094"></a><a class="code" href="CatalanCoeff_8cpp.shtml#a6808f01fc81a71c5e3544ba056ce3af1">00094</a> <span class="keyword">inline</span> <span class="keywordtype">long</span> <span class="keywordtype">double</span> <a class="code" href="CatalanCoeff_8cpp.shtml#a6808f01fc81a71c5e3544ba056ce3af1">Catalan</a>(<span class="keywordtype">int</span> num)
<a name="l00095"></a>00095 {
<a name="l00096"></a>00096   <span class="keywordtype">int</span> endNum = num-1;
<a name="l00097"></a>00097   <span class="keywordtype">int</span> i;
<a name="l00098"></a>00098   <span class="keywordtype">long</span> <span class="keywordtype">double</span> CatNum = 1;
<a name="l00099"></a>00099   <span class="keywordflow">if</span>(num==0 || num==1)
<a name="l00100"></a>00100   <span class="keywordflow">return</span> 1;
<a name="l00101"></a>00101   <span class="keywordflow">for</span> (i=0; i &lt; endNum; i++)
<a name="l00102"></a>00102   {
<a name="l00103"></a>00103     CatNum *= (2.0*num - i)/(1.0*num - i);
<a name="l00104"></a>00104   }
<a name="l00105"></a>00105   <span class="keywordflow">return</span> CatNum;
<a name="l00106"></a>00106 }
<a name="l00107"></a>00107 
<a name="l00110"></a><a class="code" href="CatalanCoeff_8cpp.shtml#a5f0f6ac6988917d707fc53d422077409">00110</a> <span class="keyword">inline</span> vector&lt; vector&lt;int&gt; &gt; <a class="code" href="CatalanCoeff_8cpp.shtml#a5f0f6ac6988917d707fc53d422077409">emptyStates</a>(vector&lt; vector&lt;int&gt; &gt; SStates)
<a name="l00111"></a>00111 {
<a name="l00112"></a>00112   <span class="keywordflow">while</span> ( !SStates.empty())
<a name="l00113"></a>00113   SStates.pop_back();
<a name="l00114"></a>00114   <span class="comment">/*</span>
<a name="l00115"></a>00115 <span class="comment">  if (SStates.empty())</span>
<a name="l00116"></a>00116 <span class="comment">  cout &lt;&lt; &quot;state space emptied&quot; &lt;&lt; endl;</span>
<a name="l00117"></a>00117 <span class="comment">  */</span>
<a name="l00118"></a>00118   <span class="keywordflow">return</span> SStates;
<a name="l00119"></a>00119 }
<a name="l00120"></a>00120 
<a name="l00121"></a><a class="code" href="CatalanCoeff_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">00121</a> <span class="keywordtype">int</span> <a class="code" href="Exm__3__3_8cpp.shtml#ae66f6b31b5ad750f1fe042a706a4e3d4">main</a>()
<a name="l00122"></a>00122 {
<a name="l00123"></a>00123   <span class="keywordtype">int</span> i; <span class="comment">//for &#39;for&#39; loops</span>
<a name="l00124"></a>00124 
<a name="l00125"></a>00125   <span class="comment">//level to stop splitting</span>
<a name="l00126"></a>00126   <span class="keywordtype">int</span> L, L1; <span class="comment">//this means each state has L leaves resulting from k splits</span>
<a name="l00127"></a>00127   cout &lt;&lt; <span class="stringliteral">&quot;Number of splits? &quot;</span>;
<a name="l00128"></a>00128   cin &gt;&gt; L1;
<a name="l00129"></a>00129   L = L1 + 1;
<a name="l00130"></a>00130 
<a name="l00131"></a>00131   <span class="comment">//number of splits</span>
<a name="l00132"></a>00132   <span class="keywordtype">int</span> k;
<a name="l00133"></a>00133 
<a name="l00134"></a>00134   <span class="comment">//number of distinct states or Catalan number</span>
<a name="l00135"></a>00135   <span class="keywordtype">long</span> <span class="keywordtype">double</span> Csplit[L];
<a name="l00136"></a>00136 
<a name="l00137"></a>00137   <span class="comment">//total number of possible paths to reach any state at level L</span>
<a name="l00138"></a>00138   <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> <span class="keywordtype">int</span> totalPaths[L];
<a name="l00139"></a>00139 
<a name="l00140"></a>00140   <span class="comment">//container for states</span>
<a name="l00141"></a>00141   <a class="code" href="CatalanCoeff_8hpp.shtml#ac525a0f6dc3802f95ee1ea51f9be6826">States</a> currStates, nextStates;
<a name="l00142"></a>00142   States::iterator iterCurrStates;
<a name="l00143"></a>00143   <a class="code" href="CatalanCoeff_8hpp.shtml#a98ed33b51a54c7e2fed40a258d2fc1b4">State</a> currState, nextState;
<a name="l00144"></a>00144   State::iterator iterCurrState;
<a name="l00145"></a>00145 
<a name="l00146"></a>00146   <span class="comment">// a map for the Catalan Coefficients</span>
<a name="l00147"></a>00147   <span class="keyword">typedef</span> map&lt;State, int, LexicoSorting&lt;State&gt; &gt; StatesMap;
<a name="l00148"></a>00148   StatesMap StateCount;
<a name="l00149"></a>00149   StatesMap::iterator iterStateCount;
<a name="l00150"></a>00150   std::pair&lt;StatesMap::iterator, bool&gt; boolStateCount;
<a name="l00151"></a>00151 
<a name="l00152"></a>00152   <span class="comment">//state space at 0 split</span>
<a name="l00153"></a>00153   <a class="code" href="CatalanCoeff_8hpp.shtml#a98ed33b51a54c7e2fed40a258d2fc1b4">State</a> state0;
<a name="l00154"></a>00154   state0.push_back(0);
<a name="l00155"></a>00155 
<a name="l00156"></a>00156   StateCount.insert(make_pair(state0,1));
<a name="l00157"></a>00157 
<a name="l00158"></a>00158   Csplit[0]=1;
<a name="l00159"></a>00159   totalPaths[0]=1;
<a name="l00160"></a>00160 
<a name="l00161"></a>00161   <span class="comment">//ofstream to output CatalanCoefficient and CatalanFrequencies to .txt.</span>
<a name="l00162"></a>00162   ofstream oss;
<a name="l00163"></a>00163 
<a name="l00164"></a>00164   clock_t start, end;
<a name="l00165"></a>00165   <span class="keywordtype">double</span> timeTaken;
<a name="l00166"></a>00166 
<a name="l00167"></a>00167   <span class="comment">//Loop to get Catalan coefficients and frequencies using L-R leaf-depth encoding</span>
<a name="l00168"></a>00168   <span class="keywordflow">for</span> (k=1; k &lt; L; k++)  <span class="comment">//for a given number of splits</span>
<a name="l00169"></a>00169   {
<a name="l00170"></a>00170     <span class="comment">//Set up string for filename to output the Catalan coefficients and frequencies</span>
<a name="l00171"></a>00171     <span class="keywordtype">string</span> fileNameCC, fileNameCF;
<a name="l00172"></a>00172     fileNameCC = <span class="stringliteral">&quot;CatalanCoefficientSplit&quot;</span>;
<a name="l00173"></a>00173     fileNameCF = <span class="stringliteral">&quot;CatalanFrequencySplit&quot;</span>;
<a name="l00174"></a>00174     std::ostringstream stm1;  <span class="comment">//convert k to std::ostringstream</span>
<a name="l00175"></a>00175 
<a name="l00176"></a>00176     start=clock();  <span class="comment">//record the time taken to get the Catalan coefficient and frequencies </span>
<a name="l00177"></a>00177 
<a name="l00178"></a>00178     <span class="comment">//Get number of nodes, Catalan number and total possible paths for each split</span>
<a name="l00179"></a>00179     Csplit[k] = <a class="code" href="CatalanCoeff_8cpp.shtml#a6808f01fc81a71c5e3544ba056ce3af1">Catalan</a>(k); 
<a name="l00180"></a>00180     totalPaths[k] = <a class="code" href="CatalanCoeff_8cpp.shtml#a254b5f00927ec8c755c78a1c1a4092a1">factorial</a>(k);
<a name="l00181"></a>00181     cout &lt;&lt; <span class="stringliteral">&quot;========================================&quot;</span> &lt;&lt; endl;
<a name="l00182"></a>00182     cout &lt;&lt; <span class="stringliteral">&quot;At &quot;</span> &lt;&lt; k &lt;&lt; <span class="stringliteral">&quot; splits:&quot;</span> &lt;&lt; endl;
<a name="l00183"></a>00183     cout &lt;&lt; Csplit[k] &lt;&lt; <span class="stringliteral">&quot; distinct states &quot;</span> &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; totalPaths[k] &lt;&lt; <span class="stringliteral">&quot; possible paths &quot;</span> &lt;&lt; endl;
<a name="l00184"></a>00184 
<a name="l00185"></a>00185     <span class="comment">//Set up an empty map to store new states</span>
<a name="l00186"></a>00186     StatesMap newStateCount;
<a name="l00187"></a>00187     StatesMap::iterator iterNewStateCount;
<a name="l00188"></a>00188     std::pair&lt;StatesMap::iterator, bool&gt; boolNewStateCount;
<a name="l00189"></a>00189 
<a name="l00190"></a>00190     <span class="comment">//for each state in current states map, StateCount</span>
<a name="l00191"></a>00191     <span class="keywordflow">for</span> (iterStateCount=StateCount.begin(); iterStateCount != StateCount.end(); iterStateCount++)
<a name="l00192"></a>00192     {
<a name="l00193"></a>00193       currState = iterStateCount-&gt;first;  <span class="comment">//current state in current states map</span>
<a name="l00194"></a>00194       <span class="comment">//cout &lt;&lt; &quot;Current state:&quot; &lt;&lt; getStringState(currState) &lt;&lt; endl;</span>
<a name="l00195"></a>00195 
<a name="l00196"></a>00196       <span class="comment">//for each node in current state</span>
<a name="l00197"></a>00197       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> node = 0; node &lt; currState.size(); node++)
<a name="l00198"></a>00198       {
<a name="l00199"></a>00199   <span class="comment">//get state for each node in current state</span>
<a name="l00200"></a>00200   nextState = <a class="code" href="CatalanCoeff_8cpp.shtml#a9627831e826937a7113bc8cd7b6b6f14">getNextState</a>(currState, node);
<a name="l00201"></a>00201   <span class="comment">//cout &lt;&lt; &quot;Next state: &quot; &lt;&lt; getStringState(nextState) &lt;&lt; endl;</span>
<a name="l00202"></a>00202 
<a name="l00203"></a>00203   <span class="comment">//insert the new state into newStateMap</span>
<a name="l00204"></a>00204   boolNewStateCount = newStateCount.insert(make_pair(nextState, 1));
<a name="l00205"></a>00205   <span class="comment">//Check if insertion is successful - a unique set will render a successful insertion.</span>
<a name="l00206"></a>00206   <span class="keywordflow">if</span>(!(boolNewStateCount.second)) <span class="comment">//if state is not unique</span>
<a name="l00207"></a>00207   {
<a name="l00208"></a>00208     <span class="comment">//increment by the Catalan coefficient of the current state producing this next state</span>
<a name="l00209"></a>00209           newStateCount[nextState] += StateCount[currState];  
<a name="l00210"></a>00210     <span class="comment">//cout &lt;&lt; &quot;this state already exist&quot;  &lt;&lt; endl;</span>
<a name="l00211"></a>00211   }  <span class="comment">//end of &quot;non-unique state&quot;</span>
<a name="l00212"></a>00212   <span class="keywordflow">else</span>
<a name="l00213"></a>00213   {
<a name="l00214"></a>00214           <span class="comment">//set the count of this next state as the Catalan coefficient of current state</span>
<a name="l00215"></a>00215           newStateCount[nextState] = StateCount[currState];
<a name="l00216"></a>00216           <span class="comment">//cout &lt;&lt; &quot;this is a unique state&quot; &lt;&lt; endl;</span>
<a name="l00217"></a>00217   }  <span class="comment">//end of &quot;unique state&quot;</span>
<a name="l00218"></a>00218       } <span class="comment">//end of looping over node in current state</span>
<a name="l00219"></a>00219     } <span class="comment">//end of looping through all Ck states in current states map</span>
<a name="l00220"></a>00220 
<a name="l00221"></a>00221     cout &lt;&lt; <span class="stringliteral">&quot;There are &quot;</span> &lt;&lt; newStateCount.size() &lt;&lt; endl;
<a name="l00222"></a>00222     <span class="comment">//cout &lt;&lt; &quot; distinct states with the following breakdown:&quot; &lt;&lt; endl; </span>
<a name="l00223"></a>00223 
<a name="l00224"></a>00224     <span class="comment">//Catalan Coefficients</span>
<a name="l00225"></a>00225     <span class="comment">//Output states with corresponding counts in .txt.</span>
<a name="l00226"></a>00226     stm1 &lt;&lt; k; <span class="comment">//name file according to the number of splits k</span>
<a name="l00227"></a>00227     fileNameCC += stm1.str();
<a name="l00228"></a>00228     fileNameCC += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00229"></a>00229     oss.open(fileNameCC.c_str());
<a name="l00230"></a>00230 
<a name="l00231"></a>00231     <span class="comment">//set up a vector for the number of paths leading to each state in newStateCount</span>
<a name="l00232"></a>00232     vector&lt;int&gt; StatePathVec;
<a name="l00233"></a>00233     vector&lt;int&gt;::iterator iterStatePathVec;
<a name="l00234"></a>00234 
<a name="l00235"></a>00235     <span class="comment">//set up a map for the frequencies corresponding to state paths</span>
<a name="l00236"></a>00236     map&lt;int, int, less&lt;int&gt; &gt; StateFreqMap;
<a name="l00237"></a>00237     map&lt;int, int, less&lt;int&gt; &gt;::iterator iterStateFreqMap;
<a name="l00238"></a>00238     std::pair&lt;map&lt;int, int, less&lt;int&gt; &gt;::iterator, <span class="keywordtype">bool</span>&gt; boolStateFreqMap;
<a name="l00239"></a>00239     <span class="keywordtype">int</span> Path;
<a name="l00240"></a>00240 
<a name="l00241"></a>00241     <span class="keywordflow">for</span>(iterNewStateCount=newStateCount.begin(); 
<a name="l00242"></a>00242         iterNewStateCount != newStateCount.end(); iterNewStateCount++)
<a name="l00243"></a>00243     {
<a name="l00244"></a>00244       <a class="code" href="CatalanCoeff_8hpp.shtml#a98ed33b51a54c7e2fed40a258d2fc1b4">State</a> thisState = iterNewStateCount-&gt;first;
<a name="l00245"></a>00245       <span class="comment">//cout &lt;&lt; getStringState(thisState) &lt;&lt; &quot;\t\t&quot; &lt;&lt; iterNewStateCount-&gt;second &lt;&lt; endl;</span>
<a name="l00246"></a>00246       oss &lt;&lt; <a class="code" href="CatalanCoeff_8cpp.shtml#aa461afbfcfb8c1fda93e7ca635f8e949">getStringState</a>(thisState) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; (iterNewStateCount-&gt;second)&lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00247"></a>00247 
<a name="l00248"></a>00248       <span class="comment">//Find frequencies for state paths</span>
<a name="l00249"></a>00249       Path = iterNewStateCount-&gt;second;
<a name="l00250"></a>00250       boolStateFreqMap = StateFreqMap.insert(make_pair(Path, 1));
<a name="l00251"></a>00251 
<a name="l00252"></a>00252       <span class="keywordflow">if</span> (!(boolStateFreqMap.second)) <span class="comment">//if there is more than one state with Path</span>
<a name="l00253"></a>00253       {
<a name="l00254"></a>00254         StateFreqMap[Path] += 1;
<a name="l00255"></a>00255       }
<a name="l00256"></a>00256     }
<a name="l00257"></a>00257 
<a name="l00258"></a>00258     <span class="comment">//close ostream for CatalanCoefficientSplitk.txt</span>
<a name="l00259"></a>00259     oss &lt;&lt; flush;
<a name="l00260"></a>00260     oss.close();
<a name="l00261"></a>00261     cout &lt;&lt; <span class="stringliteral">&quot;State counts output to &quot;</span> &lt;&lt; fileNameCC &lt;&lt; endl;
<a name="l00262"></a>00262 
<a name="l00263"></a>00263 
<a name="l00264"></a>00264     <span class="comment">//output Catalan Frequencies to.txt</span>
<a name="l00265"></a>00265     fileNameCF += stm1.str();
<a name="l00266"></a>00266     fileNameCF += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l00267"></a>00267     oss.open(fileNameCF.c_str());
<a name="l00268"></a>00268     oss &lt;&lt; <span class="stringliteral">&quot;Paths&quot;</span> &lt;&lt; <span class="stringliteral">&quot;\t\t&quot;</span> &lt;&lt; <span class="stringliteral">&quot;States&quot;</span> &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00269"></a>00269     <span class="comment">//Output to .txt</span>
<a name="l00270"></a>00270     <span class="keywordflow">for</span> (iterStateFreqMap = StateFreqMap.begin(); iterStateFreqMap != StateFreqMap.end(); iterStateFreqMap++)
<a name="l00271"></a>00271     {
<a name="l00272"></a>00272       <span class="comment">//cout &lt;&lt; &quot;There are &quot; &lt;&lt; iterStateFreqMap-&gt;second &lt;&lt; &quot; states with &quot; </span>
<a name="l00273"></a>00273       <span class="comment">//     &lt;&lt; iterStateFreqMap-&gt;first &lt;&lt; &quot; paths.&quot; &lt;&lt; endl;</span>
<a name="l00274"></a>00274       oss &lt;&lt; iterStateFreqMap-&gt;first &lt;&lt; <span class="stringliteral">&quot;\t\t&quot;</span> &lt;&lt; iterStateFreqMap-&gt;second &lt;&lt; <span class="stringliteral">&quot;\n&quot;</span>;
<a name="l00275"></a>00275     }
<a name="l00276"></a>00276 
<a name="l00277"></a>00277     oss &lt;&lt; flush;
<a name="l00278"></a>00278     oss.close();
<a name="l00279"></a>00279     cout &lt;&lt; <span class="stringliteral">&quot;State frequencies output to &quot;</span> &lt;&lt; fileNameCF &lt;&lt; endl;
<a name="l00280"></a>00280 
<a name="l00281"></a>00281 
<a name="l00282"></a>00282     <span class="comment">//Empty current states map</span>
<a name="l00283"></a>00283     StateCount.clear();
<a name="l00284"></a>00284 
<a name="l00285"></a>00285     <span class="keywordflow">if</span> ( StateCount.empty())
<a name="l00286"></a>00286     {
<a name="l00287"></a>00287       <span class="comment">//set nextStateCount map to be StateCount to continue loop</span>
<a name="l00288"></a>00288       <span class="comment">//cout &lt;&lt; &quot;space emptied&quot; &lt;&lt; endl;</span>
<a name="l00289"></a>00289       StateCount = newStateCount;
<a name="l00290"></a>00290     }
<a name="l00291"></a>00291     <span class="keywordflow">else</span>
<a name="l00292"></a>00292     {
<a name="l00293"></a>00293       cout &lt;&lt; <span class="stringliteral">&quot;space not emptied. Should not proceed.&quot;</span> &lt;&lt; endl;
<a name="l00294"></a>00294       <span class="keywordflow">break</span>;
<a name="l00295"></a>00295     }
<a name="l00296"></a>00296 
<a name="l00297"></a>00297     end=clock();
<a name="l00298"></a>00298     timeTaken = <span class="keyword">static_cast&lt;</span><span class="keywordtype">double</span><span class="keyword">&gt;</span>(end-start)/CLOCKS_PER_SEC;
<a name="l00299"></a>00299     cout &lt;&lt; <span class="stringliteral">&quot;Computing time : &quot;</span> &lt;&lt;timeTaken&lt;&lt; <span class="stringliteral">&quot; s.&quot;</span> &lt;&lt; endl;
<a name="l00300"></a>00300   }
<a name="l00301"></a>00301 
<a name="l00302"></a>00302   <span class="keywordflow">return</span> 0;
<a name="l00303"></a>00303 }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="CatalanCoeff_8cpp.shtml">CatalanCoeff.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:11 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
