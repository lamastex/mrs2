<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: GOpt.hpp File Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('GOpt_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#func-members">Functions</a>  </div>
  <div class="headertitle">
<div class="title">GOpt.hpp File Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p>Global Optimisation declarations. Global optimisation using the C++ Toolbox for Verified Computing See Hammer, R., Hocks, M., Kulisch, U., and Ratz, D (1995), C++ Toolbox for Verified Computing, Springer, pp. 312-342.  
<a href="#details">More...</a></p>
<div class="textblock"><code>#include &quot;<a class="el" href="Fobj_8hpp_source.shtml">Fobj.hpp</a>&quot;</code><br/>
<code>#include &quot;<a class="el" href="toolz_8hpp_source.shtml">toolz.hpp</a>&quot;</code><br/>
</div>
<p><a href="GOpt_8hpp_source.shtml">Go to the source code of this file.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="func-members"></a>
Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="GOpt_8hpp.shtml#abcc17b8ab0c15811dd2d1c6e6b760007">GOptMin</a> (<a class="el" href="classFobj.shtml">Fobj</a> *<a class="el" href="errorfunc_8hpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, ivector search, real t, const int label=0)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">This runs the global optimisation procedure AllGOp for global minimums and prints results.  <a href="#abcc17b8ab0c15811dd2d1c6e6b760007"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="GOpt_8hpp.shtml#a89c491798147580e08ebb3349e9b146f">GOptMax</a> (<a class="el" href="classFobj.shtml">Fobj</a> *<a class="el" href="errorfunc_8hpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>, ivector search, real t, const int label=0)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">This runs the global optimisation procedure AllGOp for global maximums and prints results.  <a href="#a89c491798147580e08ebb3349e9b146f"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">HessType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="GOpt_8hpp.shtml#a3f84a8488c00dd1560b0a3ba013d90fe">funcHessMin</a> (const HTvector &amp;x)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Function conforming to typedef HTscalar_FctPtr for global minimums.  <a href="#a3f84a8488c00dd1560b0a3ba013d90fe"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">HessType&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="GOpt_8hpp.shtml#aa604d9b6cc2535d0b422a9838de48b2b">funcHessMax</a> (const HTvector &amp;x)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Function conforming to typedef HTscalar_FctPtr for global maximums.  <a href="#aa604d9b6cc2535d0b422a9838de48b2b"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="GOpt_8hpp.shtml#a82f1bc87790710a1599bc1dc2906339a">printOutcomeMin</a> (ivector &amp;SearchInterval, real &amp;Tolerance, imatrix &amp;Opti, intvector &amp;Unique, int NumberOfOptis, interval &amp;Minimum, int Error)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Print the results for mimimums.  <a href="#a82f1bc87790710a1599bc1dc2906339a"></a><br/></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="GOpt_8hpp.shtml#aa50f2e0b46bc83d573cd3971624f0d3d">printOutcomeMax</a> (ivector &amp;SearchInterval, real &amp;Tolerance, imatrix &amp;Opti, intvector &amp;Unique, int NumberOfOptis, interval &amp;Maximum, int Error)</td></tr>
<tr><td class="mdescLeft">&#160;</td><td class="mdescRight">Print the results for maximums.  <a href="#aa50f2e0b46bc83d573cd3971624f0d3d"></a><br/></td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><p>Global Optimisation declarations. Global optimisation using the C++ Toolbox for Verified Computing See Hammer, R., Hocks, M., Kulisch, U., and Ratz, D (1995), C++ Toolbox for Verified Computing, Springer, pp. 312-342. </p>
<p>This routine uses a global variable. This is not ideal but seems, on balance, to be the most sensible way around the problems of having a polymorphic implemention of AllGop, ie one that can take some function object and use the appropriate method of that function object as the HTscalar_FctPtr needed by AllGop. Ideally, we would take an fObj as the parameter and use its HTscalar_FctPtr method directly but to do that we have to bind 'this', the function object, into the call to the method. That is possible, but in this case the signature of the HTscalar_FctPtr type, as defined for AllGop, is HessType (*) (const HTvector&amp;) and using the basic stl functional binders, we can't bind to when one of the arguments is a reference. We could get around this by using the std::tr1::function binders, which have wrappers for references, but this would mean that the process would only compile and run where some implementation of tr1 is available and this would be a severe limitiation. If and when tr1 is 'officially' implemented, we could clean all this up and get rid of the global. We have to use a pointer to an <a class="el" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a> as the global because <a class="el" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a> is an abstract class and so cannot be declared on just as <a class="el" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a>. But in this only when the other arguments </p>

<p>Definition in file <a class="el" href="GOpt_8hpp_source.shtml">GOpt.hpp</a>.</p>
</div><hr/><h2>Function Documentation</h2>
<a class="anchor" id="aa604d9b6cc2535d0b422a9838de48b2b"></a><!-- doxytag: member="GOpt.hpp::funcHessMax" ref="aa604d9b6cc2535d0b422a9838de48b2b" args="(const HTvector &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">HessType <a class="el" href="GOpt_8hpp.shtml#aa604d9b6cc2535d0b422a9838de48b2b">funcHessMax</a> </td>
          <td>(</td>
          <td class="paramtype">const HTvector &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Function conforming to typedef HTscalar_FctPtr for global maximums. </p>

<p>Definition at line <a class="el" href="GOpt_8cpp_source.shtml#l00152">152</a> of file <a class="el" href="GOpt_8cpp_source.shtml">GOpt.cpp</a>.</p>

<p>References <a class="el" href="GOpt_8cpp_source.shtml#l00055">flabel</a>.</p>

<p>Referenced by <a class="el" href="GOpt_8cpp_source.shtml#l00100">GOptMax()</a>.</p>
<div class="fragment"><pre class="fragment">{
  HessType hh;
  <span class="comment">// use negative of the operator () of the function pointed to by global</span>
  <span class="comment">// fToOpt to calculate hh</span>
  hh = -((*fToOtp)(x, <a class="code" href="GOpt_8cpp.shtml#a290cffa14d3090442edf93f1400230c7" title="declare a global pointer to an int for target function label">flabel</a>));
  <span class="keywordflow">return</span> hh;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a3f84a8488c00dd1560b0a3ba013d90fe"></a><!-- doxytag: member="GOpt.hpp::funcHessMin" ref="a3f84a8488c00dd1560b0a3ba013d90fe" args="(const HTvector &amp;x)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">HessType <a class="el" href="GOpt_8hpp.shtml#a3f84a8488c00dd1560b0a3ba013d90fe">funcHessMin</a> </td>
          <td>(</td>
          <td class="paramtype">const HTvector &amp;&#160;</td>
          <td class="paramname"><em>x</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Function conforming to typedef HTscalar_FctPtr for global minimums. </p>

<p>Definition at line <a class="el" href="GOpt_8cpp_source.shtml#l00139">139</a> of file <a class="el" href="GOpt_8cpp_source.shtml">GOpt.cpp</a>.</p>

<p>References <a class="el" href="GOpt_8cpp_source.shtml#l00055">flabel</a>.</p>

<p>Referenced by <a class="el" href="GOpt_8cpp_source.shtml#l00061">GOptMin()</a>.</p>
<div class="fragment"><pre class="fragment">{
  HessType hh;
  <span class="comment">// use the operator () of the function pointed to by global fToOpt to</span>
  <span class="comment">// calculate hh</span>
  hh = (*fToOtp)(x, <a class="code" href="GOpt_8cpp.shtml#a290cffa14d3090442edf93f1400230c7" title="declare a global pointer to an int for target function label">flabel</a>);
  <span class="keywordflow">return</span> hh;
}
</pre></div>
</div>
</div>
<a class="anchor" id="a89c491798147580e08ebb3349e9b146f"></a><!-- doxytag: member="GOpt.hpp::GOptMax" ref="a89c491798147580e08ebb3349e9b146f" args="(Fobj *f, ivector search, real t, const int label=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="GOpt_8hpp.shtml#a89c491798147580e08ebb3349e9b146f">GOptMax</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classFobj.shtml">Fobj</a> *&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ivector&#160;</td>
          <td class="paramname"><em>search</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">real&#160;</td>
          <td class="paramname"><em>t</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>label</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This runs the global optimisation procedure AllGOp for global maximums and prints results. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">f</td><td>a pointer to the <a class="el" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a> we want to do global optimisation on </td></tr>
    <tr><td class="paramname">search</td><td>an initial search box </td></tr>
    <tr><td class="paramname">t</td><td>a tolerance for optimisation -- stops search when interval searched is below t in width </td></tr>
    <tr><td class="paramname">label</td><td>the model or topology label </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="GOpt_8cpp_source.shtml#l00100">100</a> of file <a class="el" href="GOpt_8cpp_source.shtml">GOpt.cpp</a>.</p>

<p>References <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="GOpt_8cpp_source.shtml#l00055">flabel</a>, <a class="el" href="GOpt_8cpp_source.shtml#l00152">funcHessMax()</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00202">Fobj::getLabeledDomainDim()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="GOpt_8cpp_source.shtml#l00209">printOutcomeMax()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>.</p>

<p>Referenced by <a class="el" href="GOpt_2Levy_2Levy2D_8cpp_source.shtml#l00064">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="GOpt_8cpp.shtml#ae1bcefa049228309fc096c4030a54728" title="declare a global pointer to an Fobj">fToOtp</a> = <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;       <span class="comment">// point the global pointer to f</span>
  <a class="code" href="GOpt_8cpp.shtml#a290cffa14d3090442edf93f1400230c7" title="declare a global pointer to an int for target function label">flabel</a> = label;   <span class="comment">// and set flabel = label</span>
  ivector SearchInterval = search;
  real Tolerance = t;
  <span class="comment">// check the dimensions match</span>
  <span class="keywordtype">int</span> search_dim = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(search) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(search) +1;
                    <span class="comment">// get the dimensions of the domain for boxes labelled 0;</span>
  <span class="keywordtype">size_t</span> func_dim = f-&gt;<a class="code" href="classFobj.shtml#add9a33b412a85fb11102eb4bd5998669" title="Get the dimensions of the list of labeled domains.">getLabeledDomainDim</a>(0);
  <span class="keywordflow">if</span>(static_cast&lt;int&gt;(func_dim) != search_dim)
  {
    std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in GOpt: dimensions of search box &quot;</span> &lt;&lt; search_dim
      &lt;&lt; <span class="stringliteral">&quot; do not match dimensions of function domain &quot;</span> &lt;&lt; func_dim &lt;&lt; std::endl
      &lt;&lt; std::endl;
    exit(1);
  }
  <span class="comment">// these are filled in by running AllGOp</span>
  interval    Maximum;
  imatrix     Opti;
  intvector   Unique;
  <span class="keywordtype">int</span>         NumberOfOptis;
  <span class="keywordtype">int</span>   Error;
  <span class="comment">// running AllGop fills in Opti, Unique, NumberOfOptis, Mimimum and Error,</span>
  <span class="comment">// all of which are passed by reference</span>
  AllGOp(<a class="code" href="GOpt_8cpp.shtml#aa604d9b6cc2535d0b422a9838de48b2b" title="Function conforming to typedef HTscalar_FctPtr for global maximums.">funcHessMax</a>, SearchInterval, Tolerance,
         Opti, Unique, NumberOfOptis, Maximum, Error);
  <span class="comment">// AllGOp also takes a final optional parameter for maximum number of</span>
  <span class="comment">// optimisation attemtps to perform</span>
  <span class="comment">// this has default value of MaxCount = 10000 - see gop.hpp</span>
  <span class="comment">// print the outcomes</span>
  <a class="code" href="GOpt_8cpp.shtml#aa50f2e0b46bc83d573cd3971624f0d3d" title="Print the results for maximums.">printOutcomeMax</a>(SearchInterval, Tolerance, Opti, Unique, NumberOfOptis,
                  Maximum, Error);
}
</pre></div>
</div>
</div>
<a class="anchor" id="abcc17b8ab0c15811dd2d1c6e6b760007"></a><!-- doxytag: member="GOpt.hpp::GOptMin" ref="abcc17b8ab0c15811dd2d1c6e6b760007" args="(Fobj *f, ivector search, real t, const int label=0)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="GOpt_8hpp.shtml#abcc17b8ab0c15811dd2d1c6e6b760007">GOptMin</a> </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classFobj.shtml">Fobj</a> *&#160;</td>
          <td class="paramname"><em>f</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">ivector&#160;</td>
          <td class="paramname"><em>search</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">real&#160;</td>
          <td class="paramname"><em>t</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const int&#160;</td>
          <td class="paramname"><em>label</em> = <code>0</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>This runs the global optimisation procedure AllGOp for global minimums and prints results. </p>
<dl class="params"><dt><b>Parameters:</b></dt><dd>
  <table class="params">
    <tr><td class="paramname">f</td><td>a pointer to the <a class="el" href="classFobj.shtml" title="An abstract class for target function objects.">Fobj</a> we want to do global optimisation on </td></tr>
    <tr><td class="paramname">search</td><td>an initial search box </td></tr>
    <tr><td class="paramname">t</td><td>a tolerance for optimisation -- stops search when interval searched is below t in width </td></tr>
    <tr><td class="paramname">label</td><td>the model or topology label </td></tr>
  </table>
  </dd>
</dl>

<p>Definition at line <a class="el" href="GOpt_8cpp_source.shtml#l00061">61</a> of file <a class="el" href="GOpt_8cpp_source.shtml">GOpt.cpp</a>.</p>

<p>References <a class="el" href="errorfunc_8cpp_source.shtml#l01529">f()</a>, <a class="el" href="GOpt_8cpp_source.shtml#l00055">flabel</a>, <a class="el" href="GOpt_8cpp_source.shtml#l00139">funcHessMin()</a>, <a class="el" href="Fobj_8hpp_source.shtml#l00202">Fobj::getLabeledDomainDim()</a>, <a class="el" href="dim2taylor_8cpp_source.shtml#l01624">taylor::Lb()</a>, <a class="el" href="GOpt_8cpp_source.shtml#l00162">printOutcomeMin()</a>, and <a class="el" href="dim2taylor_8cpp_source.shtml#l01629">taylor::Ub()</a>.</p>

<p>Referenced by <a class="el" href="GOpt_2Levy_2Levy2D_8cpp_source.shtml#l00064">main()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <a class="code" href="GOpt_8cpp.shtml#ae1bcefa049228309fc096c4030a54728" title="declare a global pointer to an Fobj">fToOtp</a> = <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a>;       <span class="comment">// point the global pointer to f</span>
  <a class="code" href="GOpt_8cpp.shtml#a290cffa14d3090442edf93f1400230c7" title="declare a global pointer to an int for target function label">flabel</a> = label;   <span class="comment">// and set flabel = label</span>
  ivector SearchInterval = search;
  real Tolerance = t;
  <span class="comment">// check the dimensions match</span>
  <span class="keywordtype">int</span> search_dim = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(search) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(search) +1;
  <span class="comment">// get the dimensions of the domain for boxes labelled 0;</span>
  <span class="keywordtype">size_t</span> func_dim = f-&gt;<a class="code" href="classFobj.shtml#add9a33b412a85fb11102eb4bd5998669" title="Get the dimensions of the list of labeled domains.">getLabeledDomainDim</a>(0);
  <span class="keywordflow">if</span>(static_cast&lt;int&gt;(func_dim) != search_dim)
  {
    std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in GOpt: dimensions of search box &quot;</span>
      &lt;&lt; search_dim &lt;&lt; <span class="stringliteral">&quot; do not match dimensions of function domain &quot;</span>
      &lt;&lt; func_dim &lt;&lt; endl&lt;&lt; std::endl;
    exit(1);
  }
  <span class="comment">// these are filled in by running AllGOp</span>
  interval    Minimum;
  imatrix     Opti;
  intvector   Unique;
  <span class="keywordtype">int</span>         NumberOfOptis;
  <span class="keywordtype">int</span>   Error;
  <span class="comment">// running AllGop fills in Opti, Unique, NumberOfOptis, Mimimum and Error,</span>
  <span class="comment">// all of which are passed by reference</span>
  AllGOp(<a class="code" href="GOpt_8cpp.shtml#a3f84a8488c00dd1560b0a3ba013d90fe" title="Function conforming to typedef HTscalar_FctPtr for global minimums.">funcHessMin</a>, SearchInterval, Tolerance,
    Opti, Unique, NumberOfOptis, Minimum, Error);
  <span class="comment">// AllGOp also takes a final optional parameter for maximum number of</span>
  <span class="comment">// optimisation attemtps to perform</span>
  <span class="comment">// this has default value of MaxCount = 10000 - see gop.hpp</span>
  <span class="comment">// print the outcomes</span>
  <a class="code" href="GOpt_8cpp.shtml#a82f1bc87790710a1599bc1dc2906339a" title="Print the results for mimimums.">printOutcomeMin</a>(SearchInterval, Tolerance, Opti, Unique, NumberOfOptis,
                  Minimum, Error);
}
</pre></div>
</div>
</div>
<a class="anchor" id="aa50f2e0b46bc83d573cd3971624f0d3d"></a><!-- doxytag: member="GOpt.hpp::printOutcomeMax" ref="aa50f2e0b46bc83d573cd3971624f0d3d" args="(ivector &amp;SearchInterval, real &amp;Tolerance, imatrix &amp;Opti, intvector &amp;Unique, int NumberOfOptis, interval &amp;Maximum, int Error)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="GOpt_8hpp.shtml#aa50f2e0b46bc83d573cd3971624f0d3d">printOutcomeMax</a> </td>
          <td>(</td>
          <td class="paramtype">ivector &amp;&#160;</td>
          <td class="paramname"><em>SearchInterval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">real &amp;&#160;</td>
          <td class="paramname"><em>Tolerance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">imatrix &amp;&#160;</td>
          <td class="paramname"><em>Opti</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">intvector &amp;&#160;</td>
          <td class="paramname"><em>Unique</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>NumberOfOptis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">interval &amp;&#160;</td>
          <td class="paramname"><em>Maximum</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>Error</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Print the results for maximums. </p>

<p>Definition at line <a class="el" href="GOpt_8cpp_source.shtml#l00209">209</a> of file <a class="el" href="GOpt_8cpp_source.shtml">GOpt.cpp</a>.</p>

<p>Referenced by <a class="el" href="GOpt_8cpp_source.shtml#l00100">GOptMax()</a>.</p>
<div class="fragment"><pre class="fragment">{
                    <span class="comment">// Output format</span>
  std::cout &lt;&lt; SetPrecision(23,15) &lt;&lt; Scientific;

  std::cout &lt;&lt; std::endl &lt;&lt; std::endl &lt;&lt; std:: endl;
  std::cout &lt;&lt; <span class="stringliteral">&quot;Global optimisation: Maximums&quot;</span> &lt;&lt; std::endl;
  std::cout &lt;&lt; <span class="stringliteral">&quot;Results of running AllGOp with Tolerance &quot;</span> &lt;&lt; Tolerance
    &lt;&lt; std::endl;
  std::cout &lt;&lt; <span class="stringliteral">&quot;with an initial search box of: &quot;</span> &lt;&lt; std::endl;
  std::cout &lt;&lt; SearchInterval &lt;&lt; endl&lt;&lt;endl;

  std::cout &lt;&lt; <span class="stringliteral">&quot;The results for global optimisation (maximums) are &quot;</span>
    &lt;&lt; std::endl;

  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= NumberOfOptis; i++)
  {
    std::cout &lt;&lt; Opti[i];
    <span class="keywordflow">if</span> (Unique[i])
      std::cout
        &lt;&lt; <span class="stringliteral">&quot; encloses a locally unique candidate for a global maximiser!&quot;</span>;
    <span class="keywordflow">else</span>
      std::cout &lt;&lt; <span class="stringliteral">&quot; may contain a local or global maximiser!&quot;</span>;
    std::cout &lt;&lt; std::endl &lt;&lt; std::endl;
  }

  <span class="keywordflow">if</span> (NumberOfOptis != 0)
  {
    std::cout &lt;&lt; Maximum &lt;&lt; std::endl
      &lt;&lt; <span class="stringliteral">&quot;encloses the global maximum value!&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;
  }

  std::cout &lt;&lt; NumberOfOptis &lt;&lt; <span class="stringliteral">&quot; interval enclosure(s)&quot;</span> &lt;&lt; std::endl;

  <span class="keywordflow">if</span> (Error)
    std::cout &lt;&lt; endl &lt;&lt; AllGOpErrMsg(Error) &lt;&lt; std::endl;
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (NumberOfOptis == 1 &amp;&amp; Unique[1])
    std::cout &lt;&lt; std::endl &lt;&lt; <span class="stringliteral">&quot;We have validated that there is &quot;</span>
        <span class="stringliteral">&quot;a unique global optimiser!&quot;</span> &lt;&lt; std::endl;

  std::cout &lt;&lt; std::endl &lt;&lt; <span class="stringliteral">&quot;End of global optimisation for maximums&quot;</span>
    &lt;&lt; std::endl &lt;&lt; std::endl;

}
</pre></div>
</div>
</div>
<a class="anchor" id="a82f1bc87790710a1599bc1dc2906339a"></a><!-- doxytag: member="GOpt.hpp::printOutcomeMin" ref="a82f1bc87790710a1599bc1dc2906339a" args="(ivector &amp;SearchInterval, real &amp;Tolerance, imatrix &amp;Opti, intvector &amp;Unique, int NumberOfOptis, interval &amp;Minimum, int Error)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void <a class="el" href="GOpt_8hpp.shtml#a82f1bc87790710a1599bc1dc2906339a">printOutcomeMin</a> </td>
          <td>(</td>
          <td class="paramtype">ivector &amp;&#160;</td>
          <td class="paramname"><em>SearchInterval</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">real &amp;&#160;</td>
          <td class="paramname"><em>Tolerance</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">imatrix &amp;&#160;</td>
          <td class="paramname"><em>Opti</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">intvector &amp;&#160;</td>
          <td class="paramname"><em>Unique</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>NumberOfOptis</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">interval &amp;&#160;</td>
          <td class="paramname"><em>Minimum</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">int&#160;</td>
          <td class="paramname"><em>Error</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Print the results for mimimums. </p>

<p>Definition at line <a class="el" href="GOpt_8cpp_source.shtml#l00162">162</a> of file <a class="el" href="GOpt_8cpp_source.shtml">GOpt.cpp</a>.</p>

<p>Referenced by <a class="el" href="GOpt_8cpp_source.shtml#l00061">GOptMin()</a>.</p>
<div class="fragment"><pre class="fragment">{
  <span class="comment">// Output format</span>
  std::cout &lt;&lt; SetPrecision(23,15) &lt;&lt; Scientific;

  std::cout &lt;&lt; std::endl &lt;&lt; std::endl &lt;&lt; std:: endl;
  std::cout &lt;&lt; <span class="stringliteral">&quot;Global optimisation: minimums &quot;</span> &lt;&lt; std::endl;
  std::cout &lt;&lt; <span class="stringliteral">&quot;Results of running AllGOp with Tolerance &quot;</span> &lt;&lt; Tolerance
    &lt;&lt; std::endl;
  std::cout &lt;&lt; <span class="stringliteral">&quot;with an initial search box of: &quot;</span> &lt;&lt; std::endl;
  std::cout &lt;&lt; SearchInterval &lt;&lt; endl&lt;&lt;endl;

  std::cout &lt;&lt; <span class="stringliteral">&quot;The results for global optimisation (minimums) are &quot;</span>
    &lt;&lt; std::endl;

  <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 1; i &lt;= NumberOfOptis; i++)
  {
    std::cout &lt;&lt; Opti[i];
    <span class="keywordflow">if</span> (Unique[i])
      std::cout
        &lt;&lt; <span class="stringliteral">&quot; encloses a locally unique candidate for a global minimiser!&quot;</span>;
    <span class="keywordflow">else</span>
      std::cout &lt;&lt; <span class="stringliteral">&quot; may contain a local or global minimiser!&quot;</span>;
    std::cout &lt;&lt; std::endl &lt;&lt; std::endl;
  }

  <span class="keywordflow">if</span> (NumberOfOptis != 0)
  {
    std::cout &lt;&lt; Minimum &lt;&lt; std::endl
      &lt;&lt; <span class="stringliteral">&quot;encloses the global minimum value!&quot;</span> &lt;&lt; std::endl &lt;&lt; std::endl;
  }

  std::cout &lt;&lt; NumberOfOptis &lt;&lt; <span class="stringliteral">&quot; interval enclosure(s)&quot;</span> &lt;&lt; std::endl;

  <span class="keywordflow">if</span> (Error)
    std::cout &lt;&lt; endl &lt;&lt; AllGOpErrMsg(Error) &lt;&lt; std::endl;
  <span class="keywordflow">else</span> <span class="keywordflow">if</span> (NumberOfOptis == 1 &amp;&amp; Unique[1])
    std::cout &lt;&lt; std::endl &lt;&lt; <span class="stringliteral">&quot;We have validated that there is &quot;</span>
        <span class="stringliteral">&quot;a unique global optimiser!&quot;</span> &lt;&lt; std::endl;

  std::cout &lt;&lt; std::endl &lt;&lt; <span class="stringliteral">&quot;End of global optimisation for minimums&quot;</span>
    &lt;&lt; std::endl &lt;&lt; std::endl;
}
</pre></div>
</div>
</div>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="GOpt_8hpp.shtml">GOpt.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:20 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
