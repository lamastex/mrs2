<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: SmallClasses.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('SmallClasses_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">SmallClasses.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="SmallClasses_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/* </span>
<a name="l00002"></a>00002 <span class="comment"> * Copyright (C) 2005, 2006, 2007, 2008 Raazesh Sainudiin and Thomas York</span>
<a name="l00003"></a>00003 <span class="comment"> *</span>
<a name="l00004"></a>00004 <span class="comment"> * This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00005"></a>00005 <span class="comment"> *</span>
<a name="l00006"></a>00006 <span class="comment"> * mrs is free software; you can redistribute it and/or modify</span>
<a name="l00007"></a>00007 <span class="comment"> * it under the terms of the GNU General Public License as published by</span>
<a name="l00008"></a>00008 <span class="comment"> * the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00009"></a>00009 <span class="comment"> * your option) any later version.</span>
<a name="l00010"></a>00010 <span class="comment"> *</span>
<a name="l00011"></a>00011 <span class="comment"> * This program is distributed in the hope that it will be useful, but</span>
<a name="l00012"></a>00012 <span class="comment"> * WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00013"></a>00013 <span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00014"></a>00014 <span class="comment"> * General Public License for more details.</span>
<a name="l00015"></a>00015 <span class="comment"> *</span>
<a name="l00016"></a>00016 <span class="comment"> * You should have received a copy of the GNU General Public License</span>
<a name="l00017"></a>00017 <span class="comment"> * along with this program; if not, write to the Free Software</span>
<a name="l00018"></a>00018 <span class="comment"> * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00019"></a>00019 <span class="comment"> */</span>
<a name="l00020"></a>00020 
<a name="l00021"></a>00021 <span class="preprocessor">#ifndef __SMALLCLASSES_HPP__</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span><span class="preprocessor">#define __SMALLCLASSES_HPP__</span>
<a name="l00023"></a>00023 <span class="preprocessor"></span>
<a name="l00024"></a>00024 <span class="preprocessor">#include &lt;algorithm&gt;</span>
<a name="l00025"></a>00025 <span class="preprocessor">#include &lt;set&gt;</span>
<a name="l00026"></a>00026 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00027"></a>00027 
<a name="l00029"></a><a class="code" href="classLabPnt.shtml">00029</a> <span class="keyword">class </span><a class="code" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a>
<a name="l00030"></a>00030 {
<a name="l00031"></a>00031   <span class="keyword">public</span>:
<a name="l00033"></a><a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276">00033</a>     rvector <a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>;
<a name="l00035"></a><a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44">00035</a>     <span class="keywordtype">int</span> <a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a>;
<a name="l00037"></a><a class="code" href="classLabPnt.shtml#ac3062583331b0ca4591047cc79a0c3af">00037</a>     <span class="keywordtype">void</span> <a class="code" href="classLabPnt.shtml#ac3062583331b0ca4591047cc79a0c3af" title="print Pnt of the labeled point LabPnt to an output file stream out">Print</a>(ostream&amp; out)
<a name="l00038"></a>00038     {
<a name="l00039"></a>00039       out &lt;&lt; <a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a>; <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>); i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>); i++)
<a name="l00040"></a>00040       {
<a name="l00041"></a>00041         out &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; <a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[i];
<a name="l00042"></a>00042       }
<a name="l00043"></a>00043       out &lt;&lt; endl; <span class="keywordflow">return</span>;
<a name="l00044"></a>00044     }
<a name="l00045"></a>00045 };
<a name="l00046"></a>00046 
<a name="l00052"></a><a class="code" href="classWLabPnt.shtml">00052</a> <span class="keyword">class </span><a class="code" href="classWLabPnt.shtml" title="A weighted labeled point class for a labeled point-valued particle.">WLabPnt</a>: <span class="keyword">public</span> <a class="code" href="classLabPnt.shtml" title="A labeled point class.">LabPnt</a>
<a name="l00053"></a>00053 {
<a name="l00054"></a>00054   <span class="keyword">public</span>:
<a name="l00055"></a><a class="code" href="classWLabPnt.shtml#a571c18b84ec2394bb517bee7b1a225f0">00055</a>     <span class="keywordtype">double</span> <a class="code" href="classWLabPnt.shtml#a571c18b84ec2394bb517bee7b1a225f0" title="Proposal density of labeled point.">qPnt</a>;    
<a name="l00056"></a><a class="code" href="classWLabPnt.shtml#a5578d8ba94fa38860ea5b10527327ff3">00056</a>     <span class="keywordtype">double</span> <a class="code" href="classWLabPnt.shtml#a5578d8ba94fa38860ea5b10527327ff3" title="Target shape at labeled point -- f^*(Pnt)">fPnt</a>;    
<a name="l00057"></a><a class="code" href="classWLabPnt.shtml#a570ae2d3848d909ce95291f8d7ffc573">00057</a>     <span class="keywordtype">double</span> <a class="code" href="classWLabPnt.shtml#a570ae2d3848d909ce95291f8d7ffc573" title="Weight of the labeled point -- fPnt/qPnt.">Wt</a>;      
<a name="l00058"></a>00058     
<a name="l00060"></a><a class="code" href="classWLabPnt.shtml#a8c511a61a9524e2db1c3fa58b1d37293">00060</a>     <span class="keywordtype">void</span> <a class="code" href="classWLabPnt.shtml#a8c511a61a9524e2db1c3fa58b1d37293" title="Print the weight, label and the point of the particle.">Print</a>(ostream&amp; out)
<a name="l00061"></a>00061     {
<a name="l00062"></a>00062       out &lt;&lt; <a class="code" href="classWLabPnt.shtml#a570ae2d3848d909ce95291f8d7ffc573" title="Weight of the labeled point -- fPnt/qPnt.">Wt</a> &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; <a class="code" href="classLabPnt.shtml#ac63f9c6a9263427b84e7f576a122ae44" title="specifies the label L of the labeled point LabPnt">L</a>; <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>); i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(<a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>); i++)
<a name="l00063"></a>00063       {
<a name="l00064"></a>00064         out &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; <a class="code" href="classLabPnt.shtml#a57c17e6672679825de3ba13b7486d276" title="specifies the point as cxsc::rvector Pnt of the labeled point LabPnt">Pnt</a>[i];
<a name="l00065"></a>00065       }
<a name="l00066"></a>00066       out &lt;&lt; endl; <span class="keywordflow">return</span>;
<a name="l00067"></a>00067     }
<a name="l00068"></a>00068 };
<a name="l00069"></a>00069 
<a name="l00071"></a><a class="code" href="classLabBox.shtml">00071</a> <span class="keyword">class </span><a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>
<a name="l00072"></a>00072 {
<a name="l00073"></a>00073   <span class="keyword">public</span>:
<a name="l00075"></a><a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849">00075</a>     ivector <a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>;
<a name="l00077"></a><a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b">00077</a>     <span class="keywordtype">int</span> <a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a>;
<a name="l00079"></a><a class="code" href="classLabBox.shtml#a54c51c9c9300c28e166fac122b2bd9a9">00079</a>     <span class="keywordtype">int</span> <a class="code" href="classLabBox.shtml#a54c51c9c9300c28e166fac122b2bd9a9" title="number of samples to be drawn from each labeled box LabBox">SamplesToDo</a>;
<a name="l00080"></a>00080 
<a name="l00082"></a><a class="code" href="classLabBox.shtml#a93f97cf6932b8caf8911a0cf440807e6">00082</a>     <span class="keywordtype">void</span> <a class="code" href="classLabBox.shtml#a93f97cf6932b8caf8911a0cf440807e6" title="Output formatted with brackets etc, suitable for human reading.">Print</a>(ostream&amp; out)
<a name="l00083"></a>00083     {
<a name="l00084"></a>00084       out &lt;&lt; <a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a>;
<a name="l00085"></a>00085       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>); i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>); i++)
<a name="l00086"></a>00086       {
<a name="l00087"></a>00087         out &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; <a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[i];
<a name="l00088"></a>00088       }
<a name="l00089"></a>00089       out &lt;&lt; endl;
<a name="l00090"></a>00090       <span class="keywordflow">return</span>;
<a name="l00091"></a>00091     }
<a name="l00092"></a>00092 
<a name="l00097"></a><a class="code" href="classLabBox.shtml#a1bed774c2eb23a4b94b2a9934610faea">00097</a>     <span class="keywordtype">void</span> <a class="code" href="classLabBox.shtml#a1bed774c2eb23a4b94b2a9934610faea" title="Tab-delimited output format for a labelled box, numeric only.">Output</a>(ostream&amp; out)
<a name="l00098"></a>00098     {
<a name="l00099"></a>00099       out &lt;&lt; <a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a>;
<a name="l00100"></a>00100       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>); i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>); i++)
<a name="l00101"></a>00101       {
<a name="l00102"></a>00102         out &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[i]) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[i]);
<a name="l00103"></a>00103       }
<a name="l00104"></a>00104       out &lt;&lt; endl;
<a name="l00105"></a>00105       <span class="keywordflow">return</span>;
<a name="l00106"></a>00106     }
<a name="l00107"></a>00107 
<a name="l00108"></a>00108 };
<a name="l00109"></a>00109 
<a name="l00111"></a><a class="code" href="classNormalParam.shtml">00111</a> <span class="keyword">class </span><a class="code" href="classNormalParam.shtml" title="A parameters class for an isotropic normal distribution.">NormalParam</a>
<a name="l00112"></a>00112 {
<a name="l00113"></a>00113   <span class="keyword">public</span>:
<a name="l00114"></a><a class="code" href="classNormalParam.shtml#a8f60cfaeb0658b177a776ea186e56484">00114</a>     <a class="code" href="classNormalParam.shtml#a8f60cfaeb0658b177a776ea186e56484">NormalParam</a>(){}
<a name="l00115"></a><a class="code" href="classNormalParam.shtml#a817ec325de646ceafcd43d2090dd94fc">00115</a>     <a class="code" href="classNormalParam.shtml#a817ec325de646ceafcd43d2090dd94fc">NormalParam</a>(<span class="keyword">const</span> <a class="code" href="classNormalParam.shtml" title="A parameters class for an isotropic normal distribution.">NormalParam</a>&amp; np){ <a class="code" href="classNormalParam.shtml#ad54ec401e0de60337f44f4101875d9e1">Mean</a> = np.<a class="code" href="classNormalParam.shtml#ad54ec401e0de60337f44f4101875d9e1">Mean</a>; <a class="code" href="classNormalParam.shtml#a187da2672eb7dcd5d9916eb751aad0ea">Sigma</a> = np.<a class="code" href="classNormalParam.shtml#a187da2672eb7dcd5d9916eb751aad0ea">Sigma</a>; }
<a name="l00116"></a><a class="code" href="classNormalParam.shtml#aac875191462b1b9784c1a2d86baed1c9">00116</a>     <a class="code" href="classNormalParam.shtml#aac875191462b1b9784c1a2d86baed1c9">NormalParam</a>(rvector M, real S):<a class="code" href="classNormalParam.shtml#ad54ec401e0de60337f44f4101875d9e1">Mean</a>(M), <a class="code" href="classNormalParam.shtml#a187da2672eb7dcd5d9916eb751aad0ea">Sigma</a>(S){}
<a name="l00117"></a><a class="code" href="classNormalParam.shtml#ad54ec401e0de60337f44f4101875d9e1">00117</a>     rvector <a class="code" href="classNormalParam.shtml#ad54ec401e0de60337f44f4101875d9e1">Mean</a>;
<a name="l00118"></a><a class="code" href="classNormalParam.shtml#a187da2672eb7dcd5d9916eb751aad0ea">00118</a>     real <a class="code" href="classNormalParam.shtml#a187da2672eb7dcd5d9916eb751aad0ea">Sigma</a>;
<a name="l00119"></a>00119 };
<a name="l00120"></a>00120 
<a name="l00122"></a><a class="code" href="classRangedLabBox.shtml">00122</a> <span class="keyword">class </span><a class="code" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a>
<a name="l00123"></a>00123 {
<a name="l00124"></a>00124   <span class="keyword">public</span>:
<a name="l00126"></a><a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89">00126</a>     <a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a> <a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89" title="The labeled box.">LBox</a>;
<a name="l00128"></a><a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411">00128</a>     interval <a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a>;
<a name="l00130"></a><a class="code" href="classRangedLabBox.shtml#a39c03a61c15dd970e865d0619e81fa03">00130</a>     real <a class="code" href="classRangedLabBox.shtml#a39c03a61c15dd970e865d0619e81fa03" title="Product of diams of intervals in labeled box, ie volume of labeled box.">BoxVol</a>;
<a name="l00132"></a><a class="code" href="classRangedLabBox.shtml#a748168b1418e7a0a4f42a3373be377f2">00132</a>     real <a class="code" href="classRangedLabBox.shtml#a748168b1418e7a0a4f42a3373be377f2" title="Integral of the prior density over the box.">BoxPriorIntegral</a>;
<a name="l00133"></a>00133     
<a name="l00140"></a><a class="code" href="classRangedLabBox.shtml#a42112d471f344fe4b1d6b25ad69dbe24">00140</a>     interval <a class="code" href="classRangedLabBox.shtml#a42112d471f344fe4b1d6b25ad69dbe24" title="interval enclosure of the integral of the function over the labeled box with scaling.">BoxIntegral</a>(<span class="keywordtype">bool</span> logpi, real f_scale)<span class="keyword"> const</span>
<a name="l00141"></a>00141 <span class="keyword">    </span>{
<a name="l00142"></a>00142       <span class="keywordflow">return</span> (logpi)? 
<a name="l00143"></a>00143         <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(<a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a>-f_scale)*<a class="code" href="classRangedLabBox.shtml#a748168b1418e7a0a4f42a3373be377f2" title="Integral of the prior density over the box.">BoxPriorIntegral</a>: <a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a>/f_scale*<a class="code" href="classRangedLabBox.shtml#a748168b1418e7a0a4f42a3373be377f2" title="Integral of the prior density over the box.">BoxPriorIntegral</a>;
<a name="l00144"></a>00144     }
<a name="l00145"></a>00145 
<a name="l00147"></a><a class="code" href="classRangedLabBox.shtml#aa1df213904910695bc467278ac2c8ab8">00147</a>     interval <a class="code" href="classRangedLabBox.shtml#a42112d471f344fe4b1d6b25ad69dbe24" title="interval enclosure of the integral of the function over the labeled box with scaling.">BoxIntegral</a>(<span class="keywordtype">bool</span> logpi)<span class="keyword"> const</span>
<a name="l00148"></a>00148 <span class="keyword">    </span>{
<a name="l00149"></a>00149       <span class="keywordflow">return</span> (logpi)? <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(<a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a>)*<a class="code" href="classRangedLabBox.shtml#a748168b1418e7a0a4f42a3373be377f2" title="Integral of the prior density over the box.">BoxPriorIntegral</a>: <a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a>*<a class="code" href="classRangedLabBox.shtml#a748168b1418e7a0a4f42a3373be377f2" title="Integral of the prior density over the box.">BoxPriorIntegral</a>;
<a name="l00150"></a>00150     }
<a name="l00151"></a>00151     
<a name="l00153"></a><a class="code" href="classRangedLabBox.shtml#a9e8b6e359342c3273f655507a7b9c6b9">00153</a>     <span class="keywordtype">void</span> <a class="code" href="classRangedLabBox.shtml#a9e8b6e359342c3273f655507a7b9c6b9" title="print the label, components of the box, range enclosure and integral.">Print</a>(ostream&amp; out)<span class="keyword"> const</span>
<a name="l00154"></a>00154 <span class="keyword">    </span>{
<a name="l00155"></a>00155       out &lt;&lt; <a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89" title="The labeled box.">LBox</a>.<a class="code" href="classLabBox.shtml#a4f0197d8aaeb58676d6c50f0f229a63b" title="specifies the label L of the labeled box LabBox">L</a>;
<a name="l00156"></a>00156       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(<a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89" title="The labeled box.">LBox</a>.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>); i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(<a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89" title="The labeled box.">LBox</a>.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>); i++) out &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; <a class="code" href="classRangedLabBox.shtml#a2e70b4cbd89cb43736b04612d35efd89" title="The labeled box.">LBox</a>.<a class="code" href="classLabBox.shtml#a65253d570e3236bde747ddfabc7c6849" title="specifies the box as cxsc::ivector Box of the labeled box LabBox">Box</a>[i];
<a name="l00157"></a>00157       out &lt;&lt; <span class="stringliteral">&quot; RE: &quot;</span> &lt;&lt; <a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a> &lt;&lt;  <span class="stringliteral">&quot; BoxIntegral: &quot;</span> &lt;&lt; <a class="code" href="classRangedLabBox.shtml#a42112d471f344fe4b1d6b25ad69dbe24" title="interval enclosure of the integral of the function over the labeled box with scaling.">BoxIntegral</a>(0) &lt;&lt; endl;
<a name="l00158"></a>00158       <span class="keywordflow">return</span>;
<a name="l00159"></a>00159     }
<a name="l00160"></a>00160 };
<a name="l00161"></a>00161 
<a name="l00192"></a><a class="code" href="classSortBox.shtml">00192</a> <span class="keyword">class </span><a class="code" href="classSortBox.shtml" title="A Function Object class for a sorting criterion between one RangedLabBox and another.">SortBox</a>
<a name="l00193"></a>00193 {
<a name="l00199"></a><a class="code" href="classSortBox.shtml#a3abbd28beba68a39e80544412e7adc46">00199</a>   <span class="keywordtype">bool</span> <a class="code" href="classSortBox.shtml#a3abbd28beba68a39e80544412e7adc46" title="Boolean flag for the natural logarithmic scale for the function.">UsingLogDensity</a>;
<a name="l00200"></a>00200   <span class="keyword">public</span>:
<a name="l00202"></a><a class="code" href="classSortBox.shtml#ab3269a31ecf0c23162eb1ea11b007d31">00202</a>     <a class="code" href="classSortBox.shtml#ab3269a31ecf0c23162eb1ea11b007d31" title="Comparison operator.">SortBox</a>(<span class="keywordtype">bool</span> LogPi = <span class="keyword">false</span>):<a class="code" href="classSortBox.shtml#a3abbd28beba68a39e80544412e7adc46" title="Boolean flag for the natural logarithmic scale for the function.">UsingLogDensity</a>(LogPi){}
<a name="l00203"></a><a class="code" href="classSortBox.shtml#ae1b1f1b6857d51efac4b49789ec442d4">00203</a>     <span class="keywordtype">bool</span> <a class="code" href="classSortBox.shtml#ae1b1f1b6857d51efac4b49789ec442d4">operator() </a>( <span class="keyword">const</span> <a class="code" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a>&amp; P1, <span class="keyword">const</span> <a class="code" href="classRangedLabBox.shtml" title="A class for `labeled box with range&#39; of a real-valued function over it.">RangedLabBox</a>&amp; P2 )<span class="keyword"> const</span>
<a name="l00204"></a>00204 <span class="keyword">    </span>{
<a name="l00205"></a>00205       <span class="comment">//  cout &lt;&lt; diam(P1.BoxRE) &lt;&lt; &quot; &quot; &lt;&lt; P1.BoxVol &lt;&lt; &quot; &quot; </span>
<a name="l00206"></a>00206       <span class="comment">//       &lt;&lt; diam(P2.BoxRE) &lt;&lt; &quot; &quot; &lt;&lt; P2.BoxVol &lt;&lt; endl;</span>
<a name="l00207"></a>00207       <span class="keywordflow">return</span> (<a class="code" href="classSortBox.shtml#a3abbd28beba68a39e80544412e7adc46" title="Boolean flag for the natural logarithmic scale for the function.">UsingLogDensity</a>)?
<a name="l00208"></a>00208       (<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(P1.<a class="code" href="classRangedLabBox.shtml#a748168b1418e7a0a4f42a3373be377f2" title="Integral of the prior density over the box.">BoxPriorIntegral</a>)+Sup(P1.<a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a>)+<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(1.0 - <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-diam(P1.<a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a>))) &gt;=
<a name="l00209"></a>00209        <a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(P2.<a class="code" href="classRangedLabBox.shtml#a748168b1418e7a0a4f42a3373be377f2" title="Integral of the prior density over the box.">BoxPriorIntegral</a>)+Sup(P2.<a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a>)+<a class="code" href="namespacetaylor.shtml#a41b79fca8d7b9a92dee56066fe632560">ln</a>(1.0 - <a class="code" href="namespacetaylor.shtml#a478ad7631859d3793d8fc867cbd813d6">exp</a>(-diam(P2.<a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a>))) ):
<a name="l00210"></a>00210       (diam(P1.<a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a>)*P1.<a class="code" href="classRangedLabBox.shtml#a748168b1418e7a0a4f42a3373be377f2" title="Integral of the prior density over the box.">BoxPriorIntegral</a>&gt;=diam(P2.<a class="code" href="classRangedLabBox.shtml#ae8b300e377bb19858a20929900e56411" title="The interval range enclosure of the function over the labeled box.">BoxRE</a>)*P2.<a class="code" href="classRangedLabBox.shtml#a748168b1418e7a0a4f42a3373be377f2" title="Integral of the prior density over the box.">BoxPriorIntegral</a>);
<a name="l00211"></a>00211     }
<a name="l00212"></a>00212 };
<a name="l00213"></a>00213 
<a name="l00218"></a><a class="code" href="SmallClasses_8hpp.shtml#a620bc30fe4c7a65c0a4cdbaf724bd9e9">00218</a> <span class="keyword">typedef</span>  set&lt;RangedLabBox, SortBox&gt; <a class="code" href="SmallClasses_8hpp.shtml#a620bc30fe4c7a65c0a4cdbaf724bd9e9" title="Sorted associative STL set container for RangedLabBoxes.">RangedLabBoxSet</a>;
<a name="l00219"></a>00219 
<a name="l00221"></a><a class="code" href="classRSSample.shtml">00221</a> <span class="keyword">class </span><a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>
<a name="l00222"></a>00222 {
<a name="l00223"></a>00223   <span class="keyword">public</span>:
<a name="l00224"></a>00224   
<a name="l00226"></a><a class="code" href="classRSSample.shtml#ada252846a5f08bfad0ceb6debd2054b8">00226</a>     <span class="keywordtype">long</span> <a class="code" href="classRSSample.shtml#ada252846a5f08bfad0ceb6debd2054b8" title="Number of draws from proposal distribution.">Nprop</a>;
<a name="l00227"></a>00227     
<a name="l00229"></a><a class="code" href="classRSSample.shtml#aaef16832fe9e088f8d99019ae024ecd4">00229</a>     <span class="keywordtype">long</span> <a class="code" href="classRSSample.shtml#aaef16832fe9e088f8d99019ae024ecd4" title="Number of labels or topologies.">Ntopologies</a>;
<a name="l00230"></a>00230     
<a name="l00232"></a><a class="code" href="classRSSample.shtml#a1a4bb7b0764f4d82e6db5eb24ce86d34">00232</a>     vector&lt;int&gt; <a class="code" href="classRSSample.shtml#a1a4bb7b0764f4d82e6db5eb24ce86d34" title="The set of unique integer labels in LabDomainList.">LabelSet</a>;
<a name="l00233"></a>00233     
<a name="l00235"></a><a class="code" href="classRSSample.shtml#a7aff363040b93e76f56f58db43b68894">00235</a>     <span class="keywordtype">int</span> <a class="code" href="classRSSample.shtml#a7aff363040b93e76f56f58db43b68894" title="The maximum dimension of the labeled boxes in LabDomainList.">n_Dim_Max</a>; 
<a name="l00236"></a>00236     
<a name="l00238"></a><a class="code" href="classRSSample.shtml#aa3f52ce941256fc7d6cf71347fdfa67c">00238</a>     real <a class="code" href="classRSSample.shtml#aa3f52ce941256fc7d6cf71347fdfa67c" title="The envelope integral as a cxsc::real.">EnvelopeIntegral</a>;
<a name="l00239"></a>00239     
<a name="l00241"></a><a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12">00241</a>     vector&lt;LabPnt&gt; <a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>;
<a name="l00242"></a>00242     
<a name="l00244"></a>00244 
<a name="l00245"></a><a class="code" href="classRSSample.shtml#a9537562ed9b4bc945e4c92b2237732a8">00245</a>     real <a class="code" href="classRSSample.shtml#a9537562ed9b4bc945e4c92b2237732a8" title="A real estimate of the integral of the function over the domain.">IntegralEstimate</a>()
<a name="l00246"></a>00246     { 
<a name="l00247"></a>00247       <span class="keywordflow">return</span> <a class="code" href="classRSSample.shtml#aa3f52ce941256fc7d6cf71347fdfa67c" title="The envelope integral as a cxsc::real.">EnvelopeIntegral</a>*real(<span class="keywordtype">int</span>(<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.size()))/real(<a class="code" href="classRSSample.shtml#ada252846a5f08bfad0ceb6debd2054b8" title="Number of draws from proposal distribution.">Nprop</a>);
<a name="l00248"></a>00248     }
<a name="l00249"></a>00249     <span class="comment">/*</span>
<a name="l00250"></a>00250 <span class="comment">    rvector Mean(){</span>
<a name="l00251"></a>00251 <span class="comment">      vector&lt;LabPnt&gt;::const_iterator it = Samples.begin();</span>
<a name="l00252"></a>00252 <span class="comment">      rvector mean = it-&gt;Pnt;</span>
<a name="l00253"></a>00253 <span class="comment">      for(it++; it != Samples.end(); it++){ mean += it-&gt;Pnt; }</span>
<a name="l00254"></a>00254 <span class="comment">      mean /= (real)(int)Samples.size();</span>
<a name="l00255"></a>00255 <span class="comment">      return mean;</span>
<a name="l00256"></a>00256 <span class="comment">    }</span>
<a name="l00257"></a>00257 <span class="comment">    */</span>
<a name="l00258"></a>00258     
<a name="l00260"></a><a class="code" href="classRSSample.shtml#a6e553a95e36dbecd6f0491bf71c6a761">00260</a>     vector&lt;rvector&gt; <a class="code" href="classRSSample.shtml#a6e553a95e36dbecd6f0491bf71c6a761" title="Arithmetic mean of the sampled labeled points in a label-specific way.">Mean</a>()
<a name="l00261"></a>00261     {
<a name="l00262"></a>00262       cout &lt;&lt; <span class="stringliteral">&quot;   Number of labels or topologies = &quot;</span> &lt;&lt; <a class="code" href="classRSSample.shtml#aaef16832fe9e088f8d99019ae024ecd4" title="Number of labels or topologies.">Ntopologies</a> &lt;&lt; endl;
<a name="l00263"></a>00263       vector&lt;int&gt;::const_iterator itINTV = 
<a name="l00264"></a>00264         max_element(<a class="code" href="classRSSample.shtml#a1a4bb7b0764f4d82e6db5eb24ce86d34" title="The set of unique integer labels in LabDomainList.">LabelSet</a>.begin(),<a class="code" href="classRSSample.shtml#a1a4bb7b0764f4d82e6db5eb24ce86d34" title="The set of unique integer labels in LabDomainList.">LabelSet</a>.end());
<a name="l00265"></a>00265       <span class="keywordtype">int</span> MaxLabelNum = *itINTV;
<a name="l00266"></a>00266       
<a name="l00268"></a>00268       vector&lt;bool&gt; first(MaxLabelNum+1, <span class="keyword">true</span>);
<a name="l00269"></a>00269       
<a name="l00271"></a>00271       vector&lt;long&gt; L_sums(MaxLabelNum+1, 0);
<a name="l00272"></a>00272                     
<a name="l00274"></a>00274       vector&lt;rvector&gt; sums(MaxLabelNum+1);
<a name="l00279"></a>00279       vector&lt;LabPnt&gt;::const_iterator it = <a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.begin();
<a name="l00280"></a>00280       <span class="keywordflow">for</span>(; it != <a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.end(); it++)
<a name="l00281"></a>00281       {
<a name="l00282"></a>00282         <span class="keywordtype">int</span> label = it-&gt;L;
<a name="l00283"></a>00283         <span class="keywordflow">if</span>(first[label])
<a name="l00284"></a>00284         {
<a name="l00285"></a>00285           sums[label] = rvector(it-&gt;Pnt);
<a name="l00286"></a>00286           L_sums[label] = 1;
<a name="l00287"></a>00287           first[label] = <span class="keyword">false</span>;
<a name="l00288"></a>00288         }
<a name="l00289"></a>00289         <span class="keywordflow">else</span>
<a name="l00290"></a>00290         {
<a name="l00291"></a>00291           sums[label] += it-&gt;Pnt;
<a name="l00292"></a>00292           L_sums[label] += 1;
<a name="l00293"></a>00293         }
<a name="l00294"></a>00294       }
<a name="l00295"></a>00295       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;<a class="code" href="classRSSample.shtml#aaef16832fe9e088f8d99019ae024ecd4" title="Number of labels or topologies.">Ntopologies</a>; i++)
<a name="l00296"></a>00296       {
<a name="l00297"></a>00297         <span class="keywordflow">if</span>(L_sums[<a class="code" href="classRSSample.shtml#a1a4bb7b0764f4d82e6db5eb24ce86d34" title="The set of unique integer labels in LabDomainList.">LabelSet</a>[i]] &gt; 0)
<a name="l00298"></a>00298         { 
<a name="l00299"></a>00299           sums[<a class="code" href="classRSSample.shtml#a1a4bb7b0764f4d82e6db5eb24ce86d34" title="The set of unique integer labels in LabDomainList.">LabelSet</a>[i]] /= (real)L_sums[<a class="code" href="classRSSample.shtml#a1a4bb7b0764f4d82e6db5eb24ce86d34" title="The set of unique integer labels in LabDomainList.">LabelSet</a>[i]];
<a name="l00300"></a>00300         }
<a name="l00301"></a>00301         real SampleSizeR = (real)(<span class="keywordtype">long</span>)<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.size();
<a name="l00302"></a>00302         real propR = (real)L_sums[<a class="code" href="classRSSample.shtml#a1a4bb7b0764f4d82e6db5eb24ce86d34" title="The set of unique integer labels in LabDomainList.">LabelSet</a>[i]]/SampleSizeR;
<a name="l00303"></a>00303         real propRUp = propR;
<a name="l00304"></a>00304         interval propI = interval(propR);
<a name="l00305"></a>00305         <span class="keywordflow">if</span> (propR==0.0) propI=interval(1.0/SampleSizeR);
<a name="l00306"></a>00306         cout &lt;&lt; <span class="stringliteral">&quot;label: &quot;</span> &lt;&lt; <a class="code" href="classRSSample.shtml#a1a4bb7b0764f4d82e6db5eb24ce86d34" title="The set of unique integer labels in LabDomainList.">LabelSet</a>[i] &lt;&lt; <span class="stringliteral">&quot;  proportion: &quot;</span> 
<a name="l00307"></a>00307              &lt;&lt; propR &lt;&lt; endl;
<a name="l00308"></a>00308         cout &lt;&lt; <span class="stringliteral">&quot;Standard Error: &quot;</span> 
<a name="l00309"></a>00309              &lt;&lt; <a class="code" href="namespacetaylor.shtml#af90786d46d07cc1e02c6011fee55f165">sqrt</a>((propI*(1.0-propI))/SampleSizeR) &lt;&lt; endl;
<a name="l00310"></a>00310              
<a name="l00311"></a>00311         <span class="keywordflow">if</span>(L_sums[<a class="code" href="classRSSample.shtml#a1a4bb7b0764f4d82e6db5eb24ce86d34" title="The set of unique integer labels in LabDomainList.">LabelSet</a>[i]]&gt;0){ 
<a name="l00312"></a>00312           cout &lt;&lt; <span class="stringliteral">&quot;Labelled Mean:&quot;</span> &lt;&lt; endl;
<a name="l00313"></a>00313           cout &lt;&lt; sums[<a class="code" href="classRSSample.shtml#a1a4bb7b0764f4d82e6db5eb24ce86d34" title="The set of unique integer labels in LabDomainList.">LabelSet</a>[i]] &lt;&lt; endl;
<a name="l00314"></a>00314         }
<a name="l00315"></a>00315         <span class="keywordflow">else</span> {
<a name="l00316"></a>00316           cout &lt;&lt; <span class="stringliteral">&quot;Labelled Mean:&quot;</span> &lt;&lt; endl;
<a name="l00317"></a>00317           cout &lt;&lt; <span class="stringliteral">&quot;no samples&quot;</span> &lt;&lt; endl;
<a name="l00318"></a>00318         }
<a name="l00319"></a>00319       }
<a name="l00320"></a>00320       <span class="keywordflow">return</span> sums;
<a name="l00321"></a>00321     }
<a name="l00322"></a>00322     
<a name="l00324"></a><a class="code" href="classRSSample.shtml#a9a5acffe7b2445f5cf588b0f34256993">00324</a>     <span class="keywordtype">void</span> <a class="code" href="classRSSample.shtml#a9a5acffe7b2445f5cf588b0f34256993" title="Print label-specific sample means from Mean().">PrintMeans</a>(ostream&amp; out)
<a name="l00325"></a>00325     {
<a name="l00326"></a>00326       vector&lt;rvector&gt; means = <a class="code" href="classRSSample.shtml#a6e553a95e36dbecd6f0491bf71c6a761" title="Arithmetic mean of the sampled labeled points in a label-specific way.">Mean</a>();
<a name="l00327"></a>00327       vector&lt;rvector&gt;::const_iterator it;
<a name="l00328"></a>00328       <span class="keywordflow">for</span>(<span class="keywordtype">size_t</span> i=0; i&lt;means.size(); i++)
<a name="l00329"></a>00329       {
<a name="l00330"></a>00330         out &lt;&lt; <span class="stringliteral">&quot;label: &quot;</span> &lt;&lt; <a class="code" href="classRSSample.shtml#a1a4bb7b0764f4d82e6db5eb24ce86d34" title="The set of unique integer labels in LabDomainList.">LabelSet</a>[i] &lt;&lt; <span class="stringliteral">&quot;   mean: &quot;</span> 
<a name="l00331"></a>00331             &lt;&lt; means[<a class="code" href="classRSSample.shtml#a1a4bb7b0764f4d82e6db5eb24ce86d34" title="The set of unique integer labels in LabDomainList.">LabelSet</a>[i]] &lt;&lt; endl;
<a name="l00332"></a>00332       }
<a name="l00333"></a>00333     }
<a name="l00334"></a>00334     
<a name="l00336"></a><a class="code" href="classRSSample.shtml#ae38d39be1ed34d9a06df7f3d76ab2962">00336</a>     <span class="keywordtype">void</span> <a class="code" href="classRSSample.shtml#ae38d39be1ed34d9a06df7f3d76ab2962" title="Print sampled labeled points in Samples as a matrix with TAB padding.">Print</a>(ostream&amp; out)
<a name="l00337"></a>00337     {
<a name="l00338"></a>00338       vector&lt;LabPnt&gt;::const_iterator it = <a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.begin();
<a name="l00339"></a>00339       <span class="keywordflow">for</span>(; it!=<a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>.end(); it++)
<a name="l00340"></a>00340       {
<a name="l00341"></a>00341         out &lt;&lt; it-&gt;L;
<a name="l00342"></a>00342         <span class="keywordtype">int</span> Current_Dim=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(it-&gt;Pnt)-<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(it-&gt;Pnt)+1;
<a name="l00343"></a>00343         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(it-&gt;Pnt); i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(it-&gt;Pnt); i++)
<a name="l00344"></a>00344         {
<a name="l00345"></a>00345           out &lt;&lt; <span class="charliteral">&#39;\t&#39;</span> &lt;&lt; (it-&gt;Pnt[i]);
<a name="l00346"></a>00346         }
<a name="l00347"></a>00347         <span class="keywordflow">if</span>(<a class="code" href="classRSSample.shtml#a7aff363040b93e76f56f58db43b68894" title="The maximum dimension of the labeled boxes in LabDomainList.">n_Dim_Max</a> &gt; Current_Dim) 
<a name="l00348"></a>00348         {
<a name="l00349"></a>00349           <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=Current_Dim+1; i&lt;=<a class="code" href="classRSSample.shtml#a7aff363040b93e76f56f58db43b68894" title="The maximum dimension of the labeled boxes in LabDomainList.">n_Dim_Max</a>; i++) out &lt;&lt; <span class="charliteral">&#39;\t&#39;</span>;
<a name="l00350"></a>00350         }
<a name="l00351"></a>00351         out &lt;&lt; endl;
<a name="l00352"></a>00352       }
<a name="l00353"></a>00353       <span class="keywordflow">return</span>;
<a name="l00354"></a>00354     }
<a name="l00355"></a>00355 
<a name="l00357"></a><a class="code" href="classRSSample.shtml#a3966506ff75f99c21ffef23f6ca490f4">00357</a>     vector&lt;LabPnt&gt; <a class="code" href="classRSSample.shtml#a3966506ff75f99c21ffef23f6ca490f4" title="Return a copy of the Samples of sampled labeled points.">getSample</a>()
<a name="l00358"></a>00358     {
<a name="l00359"></a>00359       <span class="keywordflow">return</span> <a class="code" href="classRSSample.shtml#a16622505cb282b5ebe608479fc026c12" title="An STL vector container to store accepted samples of labeled points.">Samples</a>;
<a name="l00360"></a>00360     }
<a name="l00361"></a>00361 
<a name="l00362"></a>00362 };                  <span class="comment">// end of RSample class</span>
<a name="l00363"></a>00363 
<a name="l00365"></a><a class="code" href="classISSample.shtml">00365</a> <span class="keyword">class </span><a class="code" href="classISSample.shtml" title="A class for the status of an Importance Sampler.">ISSample</a>
<a name="l00366"></a>00366 {
<a name="l00367"></a>00367   <span class="keyword">public</span>:
<a name="l00369"></a><a class="code" href="classISSample.shtml#a83dec86101f85594fee6ed9f55954445">00369</a>     <span class="keywordtype">long</span> <a class="code" href="classISSample.shtml#a83dec86101f85594fee6ed9f55954445" title="Number of topologies or model labels.">Ntopologies</a>;
<a name="l00370"></a>00370     
<a name="l00372"></a><a class="code" href="classISSample.shtml#a7aeb58094643516127d1df6fe71fec3c">00372</a>     vector&lt;int&gt; <a class="code" href="classISSample.shtml#a7aeb58094643516127d1df6fe71fec3c" title="The set of unique integer labels in LabDomainList.">LabelSet</a>;
<a name="l00373"></a>00373     
<a name="l00375"></a><a class="code" href="classISSample.shtml#a72e8c06106f7b47f432f2fcbf9bc80bd">00375</a>     real <a class="code" href="classISSample.shtml#a72e8c06106f7b47f432f2fcbf9bc80bd" title="The integral of the envelope function.">EnvelopeIntegral</a>;
<a name="l00376"></a>00376     
<a name="l00378"></a><a class="code" href="classISSample.shtml#a07b1930fbb119b2561e1ad4fdd760e0f">00378</a>     vector&lt;WLabPnt&gt; <a class="code" href="classISSample.shtml#a07b1930fbb119b2561e1ad4fdd760e0f" title="vector of weighted labeled points -- our labeled point-valued particles">Samples</a>;
<a name="l00379"></a>00379     
<a name="l00381"></a><a class="code" href="classISSample.shtml#ab2913a50ee258c5b55d91202ac35ff00">00381</a>     real <a class="code" href="classISSample.shtml#ab2913a50ee258c5b55d91202ac35ff00">IntegralEstimate</a>(vector&lt;real&gt;&amp; IntegralEsts)
<a name="l00382"></a>00382     {
<a name="l00386"></a>00386       vector&lt;WLabPnt&gt;::const_iterator it = <a class="code" href="classISSample.shtml#a07b1930fbb119b2561e1ad4fdd760e0f" title="vector of weighted labeled points -- our labeled point-valued particles">Samples</a>.begin();
<a name="l00387"></a>00387       real wsum = it-&gt;Wt;
<a name="l00388"></a>00388       <span class="keywordflow">for</span>(; it != <a class="code" href="classISSample.shtml#a07b1930fbb119b2561e1ad4fdd760e0f" title="vector of weighted labeled points -- our labeled point-valued particles">Samples</a>.end(); it++)
<a name="l00389"></a>00389       {
<a name="l00390"></a>00390         <span class="keywordtype">int</span> label = it-&gt;L;
<a name="l00391"></a>00391         real weight = it-&gt;Wt;
<a name="l00392"></a>00392         IntegralEsts[label] += weight;
<a name="l00393"></a>00393         wsum += weight;
<a name="l00394"></a>00394       }
<a name="l00395"></a>00395       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;<a class="code" href="classISSample.shtml#a83dec86101f85594fee6ed9f55954445" title="Number of topologies or model labels.">Ntopologies</a>; i++)
<a name="l00396"></a>00396       {
<a name="l00397"></a>00397         IntegralEsts[i] /= (real)(<span class="keywordtype">int</span>)<a class="code" href="classISSample.shtml#a07b1930fbb119b2561e1ad4fdd760e0f" title="vector of weighted labeled points -- our labeled point-valued particles">Samples</a>.size(); 
<a name="l00398"></a>00398       }
<a name="l00399"></a>00399       <span class="keywordflow">return</span> wsum/(real)(<span class="keywordtype">int</span>)<a class="code" href="classISSample.shtml#a07b1930fbb119b2561e1ad4fdd760e0f" title="vector of weighted labeled points -- our labeled point-valued particles">Samples</a>.size();
<a name="l00400"></a>00400     }
<a name="l00401"></a>00401     
<a name="l00403"></a><a class="code" href="classISSample.shtml#a67d18d57af02d5adc0025eeb025db972">00403</a>     vector&lt;rvector&gt; <a class="code" href="classISSample.shtml#a67d18d57af02d5adc0025eeb025db972" title="Sample mean of lableled points.">Mean</a>()
<a name="l00404"></a>00404     {
<a name="l00405"></a>00405       cout &lt;&lt; <span class="stringliteral">&quot;   Number of labels or topologies = &quot;</span> &lt;&lt; <a class="code" href="classISSample.shtml#a83dec86101f85594fee6ed9f55954445" title="Number of topologies or model labels.">Ntopologies</a> &lt;&lt; endl;
<a name="l00406"></a>00406       vector&lt;int&gt;::const_iterator itINTV = 
<a name="l00407"></a>00407         max_element(<a class="code" href="classISSample.shtml#a7aeb58094643516127d1df6fe71fec3c" title="The set of unique integer labels in LabDomainList.">LabelSet</a>.begin(),<a class="code" href="classISSample.shtml#a7aeb58094643516127d1df6fe71fec3c" title="The set of unique integer labels in LabDomainList.">LabelSet</a>.end());
<a name="l00408"></a>00408       <span class="keywordtype">int</span> MaxLabelNum = *itINTV;
<a name="l00409"></a>00409       
<a name="l00411"></a>00411       vector&lt;bool&gt; first(MaxLabelNum+1, <span class="keyword">true</span>);
<a name="l00412"></a>00412                     
<a name="l00414"></a>00414       vector&lt;real&gt; w_sums(MaxLabelNum+1, 0);
<a name="l00415"></a>00415                     
<a name="l00417"></a>00417       vector&lt;rvector&gt; sums(MaxLabelNum+1);
<a name="l00422"></a>00422       vector&lt;WLabPnt&gt;::const_iterator it = <a class="code" href="classISSample.shtml#a07b1930fbb119b2561e1ad4fdd760e0f" title="vector of weighted labeled points -- our labeled point-valued particles">Samples</a>.begin();
<a name="l00423"></a>00423       <span class="keywordflow">for</span>(; it != <a class="code" href="classISSample.shtml#a07b1930fbb119b2561e1ad4fdd760e0f" title="vector of weighted labeled points -- our labeled point-valued particles">Samples</a>.end(); it++)
<a name="l00424"></a>00424       {
<a name="l00425"></a>00425         <span class="keywordtype">int</span> label = it-&gt;L;
<a name="l00426"></a>00426         <span class="keywordflow">if</span>(first[label])
<a name="l00427"></a>00427         {
<a name="l00428"></a>00428           sums[label] = rvector(it-&gt;Pnt);
<a name="l00429"></a>00429           sums[label] *= it-&gt;Wt;
<a name="l00430"></a>00430           w_sums[label] = it-&gt;Wt;
<a name="l00431"></a>00431           first[label] = <span class="keyword">false</span>;
<a name="l00432"></a>00432         }
<a name="l00433"></a>00433         <span class="keywordflow">else</span>
<a name="l00434"></a>00434         {
<a name="l00435"></a>00435           sums[label] += it-&gt;Wt*it-&gt;Pnt;
<a name="l00436"></a>00436           w_sums[label] += it-&gt;Wt;
<a name="l00437"></a>00437         }
<a name="l00438"></a>00438       }
<a name="l00439"></a>00439       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;<a class="code" href="classISSample.shtml#a83dec86101f85594fee6ed9f55954445" title="Number of topologies or model labels.">Ntopologies</a>; i++)
<a name="l00440"></a>00440       {
<a name="l00441"></a>00441         <span class="keywordflow">if</span>(w_sums[<a class="code" href="classISSample.shtml#a7aeb58094643516127d1df6fe71fec3c" title="The set of unique integer labels in LabDomainList.">LabelSet</a>[i]] &gt; 0){ sums[<a class="code" href="classISSample.shtml#a7aeb58094643516127d1df6fe71fec3c" title="The set of unique integer labels in LabDomainList.">LabelSet</a>[i]] /= w_sums[<a class="code" href="classISSample.shtml#a7aeb58094643516127d1df6fe71fec3c" title="The set of unique integer labels in LabDomainList.">LabelSet</a>[i]]; }
<a name="l00442"></a>00442         cout &lt;&lt; <span class="stringliteral">&quot;label: &quot;</span> &lt;&lt; <a class="code" href="classISSample.shtml#a7aeb58094643516127d1df6fe71fec3c" title="The set of unique integer labels in LabDomainList.">LabelSet</a>[i] &lt;&lt; <span class="stringliteral">&quot;  weight: &quot;</span> 
<a name="l00443"></a>00443              &lt;&lt; w_sums[<a class="code" href="classISSample.shtml#a7aeb58094643516127d1df6fe71fec3c" title="The set of unique integer labels in LabDomainList.">LabelSet</a>[i]] &lt;&lt; endl &lt;&lt; <span class="stringliteral">&quot;mean: &quot;</span> &lt;&lt; sums[<a class="code" href="classISSample.shtml#a7aeb58094643516127d1df6fe71fec3c" title="The set of unique integer labels in LabDomainList.">LabelSet</a>[i]] 
<a name="l00444"></a>00444              &lt;&lt; endl;
<a name="l00445"></a>00445       }
<a name="l00446"></a>00446       <span class="keywordflow">return</span> sums;
<a name="l00447"></a>00447     }
<a name="l00448"></a>00448     
<a name="l00450"></a><a class="code" href="classISSample.shtml#a38b62082187bfa35faa6564b0ce874f7">00450</a>     <span class="keywordtype">void</span> <a class="code" href="classISSample.shtml#a38b62082187bfa35faa6564b0ce874f7" title="Print labeled means.">PrintMeans</a>(ostream&amp; out)
<a name="l00451"></a>00451     {
<a name="l00452"></a>00452       vector&lt;rvector&gt; means = <a class="code" href="classISSample.shtml#a67d18d57af02d5adc0025eeb025db972" title="Sample mean of lableled points.">Mean</a>();
<a name="l00453"></a>00453       vector&lt;rvector&gt;::const_iterator it;
<a name="l00454"></a>00454       <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=0; i&lt;<a class="code" href="classISSample.shtml#a83dec86101f85594fee6ed9f55954445" title="Number of topologies or model labels.">Ntopologies</a>; i++)
<a name="l00455"></a>00455       {
<a name="l00456"></a>00456         out &lt;&lt; <span class="stringliteral">&quot;label: &quot;</span> &lt;&lt; <a class="code" href="classISSample.shtml#a7aeb58094643516127d1df6fe71fec3c" title="The set of unique integer labels in LabDomainList.">LabelSet</a>[i] &lt;&lt; <span class="stringliteral">&quot;   mean: &quot;</span> 
<a name="l00457"></a>00457             &lt;&lt; means[<a class="code" href="classISSample.shtml#a7aeb58094643516127d1df6fe71fec3c" title="The set of unique integer labels in LabDomainList.">LabelSet</a>[i]] &lt;&lt; endl;
<a name="l00458"></a>00458       }
<a name="l00459"></a>00459     }
<a name="l00460"></a>00460     
<a name="l00461"></a>00461     <span class="comment">//Print weighted labeled points.</span>
<a name="l00462"></a><a class="code" href="classISSample.shtml#ae167a6228819ab69bfd4868b455733fd">00462</a>     <span class="keywordtype">void</span> <a class="code" href="classISSample.shtml#ae167a6228819ab69bfd4868b455733fd">Print</a>(ostream&amp; out)
<a name="l00463"></a>00463     {
<a name="l00464"></a>00464       vector&lt;WLabPnt&gt;::const_iterator it = <a class="code" href="classISSample.shtml#a07b1930fbb119b2561e1ad4fdd760e0f" title="vector of weighted labeled points -- our labeled point-valued particles">Samples</a>.begin();
<a name="l00465"></a>00465                     <span class="comment">// it-&gt;Print(out); }</span>
<a name="l00466"></a>00466       <span class="keywordflow">for</span>(; it!=<a class="code" href="classISSample.shtml#a07b1930fbb119b2561e1ad4fdd760e0f" title="vector of weighted labeled points -- our labeled point-valued particles">Samples</a>.end(); it++)
<a name="l00467"></a>00467       {
<a name="l00468"></a>00468         out &lt;&lt; it-&gt;Wt &lt;&lt; <span class="stringliteral">&quot;     &quot;</span> &lt;&lt; it-&gt;L; 
<a name="l00469"></a>00469         <span class="keywordflow">for</span>(<span class="keywordtype">int</span> i=<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(it-&gt;Pnt); i&lt;=<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(it-&gt;Pnt); i++){ out &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; it-&gt;Pnt[i]; }
<a name="l00470"></a>00470         out &lt;&lt; endl;
<a name="l00471"></a>00471       }
<a name="l00472"></a>00472       <span class="keywordflow">return</span>;
<a name="l00473"></a>00473     }
<a name="l00474"></a>00474 };
<a name="l00475"></a>00475 <span class="preprocessor">#endif</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="SmallClasses_8hpp.shtml">SmallClasses.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:17 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
