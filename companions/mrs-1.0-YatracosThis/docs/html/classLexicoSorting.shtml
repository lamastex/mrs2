<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: LexicoSorting&lt; T &gt; Class Template Reference</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('classLexicoSorting.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a>  </div>
  <div class="headertitle">
<div class="title">LexicoSorting&lt; T &gt; Class Template Reference</div>  </div>
</div><!--header-->
<div class="contents">
<!-- doxytag: class="LexicoSorting" -->
<p><code>#include &lt;<a class="el" href="CatalanCoeff_8hpp_source.shtml">CatalanCoeff.hpp</a>&gt;</code></p>

<p><a href="classLexicoSorting-members.shtml">List of all members.</a></p>
<table class="memberdecls">
<tr><td colspan="2"><h2><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLexicoSorting.shtml#ab411e7952cbda7be9138cf5704dfb453">operator()</a> (const T &amp;t1, const T &amp;t2) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLexicoSorting.shtml#ab411e7952cbda7be9138cf5704dfb453">operator()</a> (const T &amp;t1, const T &amp;t2) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLexicoSorting.shtml#ab411e7952cbda7be9138cf5704dfb453">operator()</a> (const T &amp;t1, const T &amp;t2) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLexicoSorting.shtml#ab411e7952cbda7be9138cf5704dfb453">operator()</a> (const T &amp;t1, const T &amp;t2) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLexicoSorting.shtml#ab411e7952cbda7be9138cf5704dfb453">operator()</a> (const T &amp;t1, const T &amp;t2) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLexicoSorting.shtml#ab411e7952cbda7be9138cf5704dfb453">operator()</a> (const T &amp;t1, const T &amp;t2) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLexicoSorting.shtml#ab411e7952cbda7be9138cf5704dfb453">operator()</a> (const T &amp;t1, const T &amp;t2) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLexicoSorting.shtml#ab411e7952cbda7be9138cf5704dfb453">operator()</a> (const T &amp;t1, const T &amp;t2) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLexicoSorting.shtml#ab411e7952cbda7be9138cf5704dfb453">operator()</a> (const T &amp;t1, const T &amp;t2) const </td></tr>
<tr><td class="memItemLeft" align="right" valign="top">bool&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classLexicoSorting.shtml#ab411e7952cbda7be9138cf5704dfb453">operator()</a> (const T &amp;t1, const T &amp;t2) const </td></tr>
</table>
<hr/><a name="details" id="details"></a><h2>Detailed Description</h2>
<div class="textblock"><h3>template&lt;class T&gt;<br/>
class LexicoSorting&lt; T &gt;</h3>

<p>templatized function object for lexicographical sorting of vectors whose elements have total ordering</p>
<p>templatized function object for lexicographical sorting of vec tors whose elements have total ordering </p>

<p>Definition at line <a class="el" href="multitreemanager_8cpp_source.shtml#l00037">37</a> of file <a class="el" href="multitreemanager_8cpp_source.shtml">multitreemanager.cpp</a>.</p>
</div><hr/><h2>Member Function Documentation</h2>
<a class="anchor" id="ab411e7952cbda7be9138cf5704dfb453"></a><!-- doxytag: member="LexicoSorting::operator()" ref="ab411e7952cbda7be9138cf5704dfb453" args="(const T &amp;t1, const T &amp;t2) const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classLexicoSorting.shtml">LexicoSorting</a>&lt; T &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="multitreemanager_8cpp_source.shtml#l00040">40</a> of file <a class="el" href="multitreemanager_8cpp_source.shtml">multitreemanager.cpp</a>.</p>
<div class="fragment"><pre class="fragment">                                                     {
      <span class="keywordflow">return</span> std::lexicographical_compare(&amp;t1[0], &amp;t1[t1.size()-1], &amp;t2[0], &amp;t2[t2.size()-1]);
      <span class="comment">//return lexicographical_compare(t1.begin(), t1.end(), t2.begin(), t2.end());</span>
    }
</pre></div>
</div>
</div>
<a class="anchor" id="ab411e7952cbda7be9138cf5704dfb453"></a><!-- doxytag: member="LexicoSorting::operator()" ref="ab411e7952cbda7be9138cf5704dfb453" args="(const T &amp;t1, const T &amp;t2) const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classLexicoSorting.shtml">LexicoSorting</a>&lt; T &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="InsideBoxOri_8cpp_source.shtml#l00051">51</a> of file <a class="el" href="InsideBoxOri_8cpp_source.shtml">InsideBoxOri.cpp</a>.</p>
<div class="fragment"><pre class="fragment">                                                     {
      <span class="keywordflow">return</span> std::lexicographical_compare(&amp;t1[0], &amp;t1[t1.size()-1], &amp;t2[0], &amp;t2[t2.size()-1]);
      <span class="comment">//return lexicographical_compare(t1.begin(), t1.end(), t2.begin(), t2.end());</span>
    }
</pre></div>
</div>
</div>
<a class="anchor" id="ab411e7952cbda7be9138cf5704dfb453"></a><!-- doxytag: member="LexicoSorting::operator()" ref="ab411e7952cbda7be9138cf5704dfb453" args="(const T &amp;t1, const T &amp;t2) const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classLexicoSorting.shtml">LexicoSorting</a>&lt; T &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="InsideBox_8cpp_source.shtml#l00051">51</a> of file <a class="el" href="InsideBox_8cpp_source.shtml">InsideBox.cpp</a>.</p>
<div class="fragment"><pre class="fragment">                                                     {
      <span class="keywordflow">return</span> std::lexicographical_compare(&amp;t1[0], &amp;t1[t1.size()-1], &amp;t2[0], &amp;t2[t2.size()-1]);
      <span class="comment">//return lexicographical_compare(t1.begin(), t1.end(), t2.begin(), t2.end());</span>
    }
</pre></div>
</div>
</div>
<a class="anchor" id="ab411e7952cbda7be9138cf5704dfb453"></a><!-- doxytag: member="LexicoSorting::operator()" ref="ab411e7952cbda7be9138cf5704dfb453" args="(const T &amp;t1, const T &amp;t2) const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classLexicoSorting.shtml">LexicoSorting</a>&lt; T &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="HistReport_8cpp_source.shtml#l00052">52</a> of file <a class="el" href="HistReport_8cpp_source.shtml">HistReport.cpp</a>.</p>
<div class="fragment"><pre class="fragment">                                                     {
      <span class="keywordflow">return</span> std::lexicographical_compare(&amp;t1[0], &amp;t1[t1.size()-1], &amp;t2[0], &amp;t2[t2.size()-1]);
      <span class="comment">//return lexicographical_compare(t1.begin(), t1.end(), t2.begin(), t2.end());</span>
    }
</pre></div>
</div>
</div>
<a class="anchor" id="ab411e7952cbda7be9138cf5704dfb453"></a><!-- doxytag: member="LexicoSorting::operator()" ref="ab411e7952cbda7be9138cf5704dfb453" args="(const T &amp;t1, const T &amp;t2) const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classLexicoSorting.shtml">LexicoSorting</a>&lt; T &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedFiniteMixtureLeafCounts_8cpp_source.shtml#l00053">53</a> of file <a class="el" href="MappedFiniteMixtureLeafCounts_8cpp_source.shtml">MappedFiniteMixtureLeafCounts.cpp</a>.</p>
<div class="fragment"><pre class="fragment">                                                     {
      <span class="keywordflow">return</span> std::lexicographical_compare(&amp;t1[0], &amp;t1[t1.size()-1], &amp;t2[0], &amp;t2[t2.size()-1]);
    }
</pre></div>
</div>
</div>
<a class="anchor" id="ab411e7952cbda7be9138cf5704dfb453"></a><!-- doxytag: member="LexicoSorting::operator()" ref="ab411e7952cbda7be9138cf5704dfb453" args="(const T &amp;t1, const T &amp;t2) const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classLexicoSorting.shtml">LexicoSorting</a>&lt; T &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedSPSamplingTest_8cpp_source.shtml#l00059">59</a> of file <a class="el" href="MappedSPSamplingTest_8cpp_source.shtml">MappedSPSamplingTest.cpp</a>.</p>
<div class="fragment"><pre class="fragment">                                                     {
      <span class="keywordflow">return</span> std::lexicographical_compare(&amp;t1[0], &amp;t1[t1.size()-1], &amp;t2[0], &amp;t2[t2.size()-1]);
      <span class="comment">//return lexicographical_compare(t1.begin(), t1.end(), t2.begin(), t2.end());</span>
    }
</pre></div>
</div>
</div>
<a class="anchor" id="ab411e7952cbda7be9138cf5704dfb453"></a><!-- doxytag: member="LexicoSorting::operator()" ref="ab411e7952cbda7be9138cf5704dfb453" args="(const T &amp;t1, const T &amp;t2) const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classLexicoSorting.shtml">LexicoSorting</a>&lt; T &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="CatalanCoeff_8hpp_source.shtml#l00062">62</a> of file <a class="el" href="CatalanCoeff_8hpp_source.shtml">CatalanCoeff.hpp</a>.</p>
<div class="fragment"><pre class="fragment">{
<span class="keywordflow">return</span> std::lexicographical_compare(&amp;t1[0], &amp;t1[t1.size()-1], &amp;t2[0], &amp;t2[t2.size()-1]);
}
</pre></div>
</div>
</div>
<a class="anchor" id="ab411e7952cbda7be9138cf5704dfb453"></a><!-- doxytag: member="LexicoSorting::operator()" ref="ab411e7952cbda7be9138cf5704dfb453" args="(const T &amp;t1, const T &amp;t2) const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classLexicoSorting.shtml">LexicoSorting</a>&lt; T &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedSPSamplingGaussian_8cpp_source.shtml#l00063">63</a> of file <a class="el" href="MappedSPSamplingGaussian_8cpp_source.shtml">MappedSPSamplingGaussian.cpp</a>.</p>
<div class="fragment"><pre class="fragment">                                                     {
      <span class="keywordflow">return</span> std::lexicographical_compare(&amp;t1[0], &amp;t1[t1.size()-1], &amp;t2[0], &amp;t2[t2.size()-1]);
      <span class="comment">//return lexicographical_compare(t1.begin(), t1.end(), t2.begin(), t2.end());</span>
    }
</pre></div>
</div>
</div>
<a class="anchor" id="ab411e7952cbda7be9138cf5704dfb453"></a><!-- doxytag: member="LexicoSorting::operator()" ref="ab411e7952cbda7be9138cf5704dfb453" args="(const T &amp;t1, const T &amp;t2) const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classLexicoSorting.shtml">LexicoSorting</a>&lt; T &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="IAECalculations_2MappedSPSampling_8cpp_source.shtml#l00064">64</a> of file <a class="el" href="IAECalculations_2MappedSPSampling_8cpp_source.shtml">IAECalculations/MappedSPSampling.cpp</a>.</p>
<div class="fragment"><pre class="fragment">                                                     {
      <span class="keywordflow">return</span> std::lexicographical_compare(&amp;t1[0], &amp;t1[t1.size()-1], &amp;t2[0], &amp;t2[t2.size()-1]);
    }
</pre></div>
</div>
</div>
<a class="anchor" id="ab411e7952cbda7be9138cf5704dfb453"></a><!-- doxytag: member="LexicoSorting::operator()" ref="ab411e7952cbda7be9138cf5704dfb453" args="(const T &amp;t1, const T &amp;t2) const " -->
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;class T &gt; </div>
      <table class="memname">
        <tr>
          <td class="memname">bool <a class="el" href="classLexicoSorting.shtml">LexicoSorting</a>&lt; T &gt;::operator() </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t1</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>t2</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td> const<code> [inline]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>Definition at line <a class="el" href="MappedSPSamplingScheffe_8cpp_source.shtml#l00075">75</a> of file <a class="el" href="MappedSPSamplingScheffe_8cpp_source.shtml">MappedSPSamplingScheffe.cpp</a>.</p>
<div class="fragment"><pre class="fragment">                                                     {
      <span class="keywordflow">return</span> std::lexicographical_compare(&amp;t1[0], &amp;t1[t1.size()-1], &amp;t2[0], &amp;t2[t2.size()-1]);
    }
</pre></div>
</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="multitreemanager_8cpp_source.shtml">multitreemanager.cpp</a></li>
<li><a class="el" href="CatalanCoeff_8hpp_source.shtml">CatalanCoeff.hpp</a></li>
<li><a class="el" href="HistReport_8cpp_source.shtml">HistReport.cpp</a></li>
<li><a class="el" href="MappedFiniteMixtureLeafCounts_8cpp_source.shtml">MappedFiniteMixtureLeafCounts.cpp</a></li>
<li><a class="el" href="IAECalculations_2MappedSPSampling_8cpp_source.shtml">IAECalculations/MappedSPSampling.cpp</a></li>
<li><a class="el" href="MappedSPSamplingScheffe_8cpp_source.shtml">MappedSPSamplingScheffe.cpp</a></li>
<li><a class="el" href="InsideBox_8cpp_source.shtml">InsideBox.cpp</a></li>
<li><a class="el" href="InsideBoxOri_8cpp_source.shtml">InsideBoxOri.cpp</a></li>
<li><a class="el" href="MappedSPSamplingGaussian_8cpp_source.shtml">MappedSPSamplingGaussian.cpp</a></li>
<li><a class="el" href="MappedSPSamplingTest_8cpp_source.shtml">MappedSPSamplingTest.cpp</a></li>
</ul>
</div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="classLexicoSorting.shtml">LexicoSorting</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:26 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
