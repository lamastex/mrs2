<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: spsvnode.hpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('spsvnode_8hpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">spsvnode.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="spsvnode_8hpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">* Copyright (C) 2011 Gloria Teng</span>
<a name="l00005"></a>00005 <span class="comment">* </span>
<a name="l00006"></a>00006 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00007"></a>00007 <span class="comment">*</span>
<a name="l00008"></a>00008 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00009"></a>00009 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00010"></a>00010 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00011"></a>00011 <span class="comment">* your option) any later version.</span>
<a name="l00012"></a>00012 <span class="comment">*</span>
<a name="l00013"></a>00013 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00014"></a>00014 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00015"></a>00015 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00016"></a>00016 <span class="comment">* General Public License for more details.</span>
<a name="l00017"></a>00017 <span class="comment">*</span>
<a name="l00018"></a>00018 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00019"></a>00019 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00020"></a>00020 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00021"></a>00021 <span class="comment">*/</span>
<a name="l00022"></a>00022 
<a name="l00023"></a>00023 <span class="preprocessor">#ifndef ___SPSVnode_HPP__</span>
<a name="l00024"></a>00024 <span class="preprocessor"></span><span class="preprocessor">#define ___SPSVnode_HPP__</span>
<a name="l00025"></a>00025 <span class="preprocessor"></span>
<a name="l00026"></a>00026 <span class="comment">// for spnode class</span>
<a name="l00027"></a>00027 <span class="preprocessor">#include &quot;<a class="code" href="spnode_8hpp.shtml" title="SPnode (SubPaving) and associated non-member functions declarations.">spnode.hpp</a>&quot;</span> <span class="comment">// includes sptypes.hpp</span>
<a name="l00028"></a>00028 <span class="preprocessor">#include &quot;<a class="code" href="spsnode_8hpp.shtml" title="SPSnode (StatsSubPaving) declarations.">spsnode.hpp</a>&quot;</span> 
<a name="l00029"></a>00029 
<a name="l00040"></a>00040 <span class="keyword">namespace </span>subpavings {
<a name="l00041"></a>00041 
<a name="l00043"></a><a class="code" href="namespacesubpavings.shtml#a2ef81a0baf365fed575183b748d8b8ff">00043</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>;
<a name="l00044"></a>00044 
<a name="l00047"></a>00047     <span class="keyword">typedef</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* <a class="code" href="namespacesubpavings.shtml#a2ef81a0baf365fed575183b748d8b8ff" title="StatsSubPavingVal is an alias for a pointer to an SPSVnode.">StatsSubPavingVal</a>;
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 
<a name="l00070"></a>00070     <span class="comment">//---------------declaration of the SPSVnode class----------------------//</span>
<a name="l00071"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml">00071</a>     <span class="keyword">class </span><a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> : <span class="keyword">public</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> {
<a name="l00072"></a>00072     <span class="comment">//-----------private methods</span>
<a name="l00073"></a>00073     <span class="keyword">private</span>:
<a name="l00074"></a>00074         <span class="comment">/* theBox, dimension, label, parent, leftChild,</span>
<a name="l00075"></a>00075 <span class="comment">        rightChild, nodeName and recursively computable statistcs are inherited from base class */</span>
<a name="l00076"></a>00076 
<a name="l00084"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#ae284ba2007e19bf4e2d546d6d844346aa0a41030519d8a235798dcc07a0c2948c">00084</a>         <span class="keyword">enum</span> {<a class="code" href="classsubpavings_1_1SPSVnode.shtml#ae284ba2007e19bf4e2d546d6d844346aa0a41030519d8a235798dcc07a0c2948c">defaultMaxPts</a> = 1000};
<a name="l00085"></a>00085 
<a name="l00091"></a>00091         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#af37c85866ee5bdb968faf84856b51291" title="Recalculate summary statistics associated with node.">recalculateStats</a>(rvector&amp; newdata, <span class="keywordtype">bool</span> boolVal) <span class="keyword">const</span>;
<a name="l00092"></a>00092 
<a name="l00097"></a>00097         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a7590c8e3a8502b3b8a15bc2c4c494904" title="Recalculate summary statistics associated with node.">recalculateSums</a>(rvector&amp; newdata) <span class="keyword">const</span>;
<a name="l00098"></a>00098 
<a name="l00103"></a>00103         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3df955b69f0e3d73efd0ccc3026fe0e7" title="Recalculate summary statistics associated with node.">recalculateSumProducts</a>(rvector&amp; newdata) <span class="keyword">const</span>;
<a name="l00104"></a>00104 
<a name="l00111"></a>00111         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a747a3c135503cbf1f1b349a5898cebc4" title="Expand the node with no reallocation of data.">nodeExpansionOnly</a>(<span class="keywordtype">int</span> comp);
<a name="l00112"></a>00112 
<a name="l00117"></a>00117         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a82423d1ad9f1589dbeef2018705591ad" title="Send the data associated with this down to children.">splitData</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest, <span class="keywordtype">bool</span> boolVal);
<a name="l00118"></a>00118 
<a name="l00128"></a>00128         std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a5868a7661363e2f3bd7d2e267c22ceb1" title="Print the data in a specified format.">nodeDataPrint</a>(std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00129"></a>00129 
<a name="l00132"></a>00132         std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a768f9507517be618970d19874b1ff992" title="Print the mean in a specified format.">nodeMeanPrint</a>(std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00133"></a>00133 
<a name="l00136"></a>00136         std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a096bff1081ceb308590aac8f2f3ee660" title="Print the variance-covariance in a specified format.">nodeVarCovarPrint</a>(std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00137"></a>00137 
<a name="l00143"></a>00143         <span class="keyword">static</span> <a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a>&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ad9b78707e372d9b66876e6afa0cb8eb1" title="Return a reference to the node data.">gatherData</a>(<a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a>&amp; container, <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * spn);
<a name="l00144"></a>00144 
<a name="l00145"></a>00145 
<a name="l00167"></a>00167         std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a2ab7acc0aff92694976546f1555f67ed" title="Output for a node in a binary tree, tab-delimited.">leafOutputTabsWithEMPs</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> bigN,
<a name="l00168"></a>00168                         std::ostream &amp;os, <span class="keyword">const</span> <span class="keywordtype">int</span> prec = 5) <span class="keyword">const</span>;
<a name="l00169"></a>00169 
<a name="l00170"></a>00170 
<a name="l00190"></a>00190         <span class="keyword">virtual</span> std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a6eff83d7095798158c0bc17ee70e54c0" title="Output for a node in a binary tree, tab-delimited.">leafOutputTabsWithHistHeight</a>(
<a name="l00191"></a>00191                                 <span class="keyword">const</span> <span class="keywordtype">size_t</span> bigN, std::ostream &amp;os,
<a name="l00192"></a>00192                                 <span class="keyword">const</span> <span class="keywordtype">int</span> prec = 5) <span class="keyword">const</span>;
<a name="l00193"></a>00193 
<a name="l00194"></a>00194 
<a name="l00219"></a>00219         std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a4ed4d26826f77814558a0ad3770582f4" title="Output for a node in a binary tree, tab-delimited.">leafOutputTabsWithHistHeightAndEMPs</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> bigN,
<a name="l00220"></a>00220                         std::ostream &amp;os, <span class="keyword">const</span> <span class="keywordtype">int</span> prec = 5) <span class="keyword">const</span>;
<a name="l00221"></a>00221 
<a name="l00222"></a>00222 
<a name="l00223"></a>00223 
<a name="l00232"></a>00232         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a5d6459ebf84a81b4759a3dd6524df4cf" title="Set the splitDimension and SplitValue when children grafted.">setSplits</a>();
<a name="l00233"></a>00233 
<a name="l00234"></a>00234 
<a name="l00247"></a>00247         <span class="keyword">static</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ab79e2b1aa783e2df56abf8279c5dc564">unionNoData</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> lhs,
<a name="l00248"></a>00248                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> rhs);
<a name="l00249"></a>00249 
<a name="l00250"></a>00250 
<a name="l00251"></a>00251     <span class="keyword">protected</span>:
<a name="l00252"></a>00252 
<a name="l00260"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a98a73d1c8dafe1d9248aeec76c8f74ef">00260</a>         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a98a73d1c8dafe1d9248aeec76c8f74ef" title="An indication of the maximum number of data points a node needs to carry.">spaceIndication</a>;
<a name="l00261"></a>00261 
<a name="l00266"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a288af7a8149effcb2d19e163e217e951">00266</a>         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a288af7a8149effcb2d19e163e217e951" title="A boolean flag to know if this node was being split or node.">justSplit</a>;
<a name="l00267"></a>00267         
<a name="l00284"></a>00284 
<a name="l00285"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a5d0154d5c5d30fa214b8a2d9deedee12">00285</a>         <span class="keyword">mutable</span> <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a5d0154d5c5d30fa214b8a2d9deedee12" title="A counter for how many data points from the validation set that are covered by theBox.">Vcounter</a>;
<a name="l00286"></a>00286          
<a name="l00313"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a60f29b9bd7f1a448515c5465e5f7f1ba">00313</a>         <span class="keyword">mutable</span> <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a60f29b9bd7f1a448515c5465e5f7f1ba" title="A container representing the sum of the data points covered by theBox.">dpVSums</a>;
<a name="l00314"></a>00314 
<a name="l00350"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#af35e25f257c98de51097428419d0cf81">00350</a>         <span class="keyword">mutable</span> <a class="code" href="namespacesubpavings.shtml#ad8f0a077ee1c4678bcd1868f3aecd605" title="Define type VecDotPrec as a container of cxsc dotprecision variables.">VecDotPrec</a> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#af35e25f257c98de51097428419d0cf81" title="A container representing the sumproduct matrix of the data points covered by theBox.">dpVSumProducts</a>;
<a name="l00351"></a>00351 
<a name="l00363"></a><a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e6c6ea9c454b9ce280915b59c7f3647">00363</a>         <span class="keyword">mutable</span> <a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e6c6ea9c454b9ce280915b59c7f3647" title="A container for the association of validation data with a node.">VdataItrs</a>;
<a name="l00365"></a>00365         
<a name="l00366"></a>00366   <span class="comment">//-----------end of private methods</span>
<a name="l00367"></a>00367    
<a name="l00368"></a>00368    <span class="comment">//-----------public methods   </span>
<a name="l00369"></a>00369       <span class="keyword">public</span>:
<a name="l00372"></a>00372         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a1fac8007420cae9fb27af8e7c81eaa52" title="Default constructor.">SPSVnode</a>();
<a name="l00373"></a>00373 
<a name="l00381"></a>00381         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a1fac8007420cae9fb27af8e7c81eaa52" title="Default constructor.">SPSVnode</a>(ivector&amp; v, <span class="keywordtype">bool</span> cntOnly, <span class="keywordtype">int</span> lab = 0);
<a name="l00382"></a>00382 
<a name="l00390"></a>00390         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a1fac8007420cae9fb27af8e7c81eaa52" title="Default constructor.">SPSVnode</a>(ivector&amp; v, <span class="keywordtype">int</span> lab = 0);
<a name="l00391"></a>00391 
<a name="l00392"></a>00392 
<a name="l00401"></a>00401         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a1fac8007420cae9fb27af8e7c81eaa52" title="Default constructor.">SPSVnode</a>(ivector&amp; v, <span class="keywordtype">size_t</span> max, <span class="keywordtype">bool</span> cntOnly, <span class="keywordtype">int</span> lab = 0);
<a name="l00402"></a>00402 
<a name="l00410"></a>00410         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a1fac8007420cae9fb27af8e7c81eaa52" title="Default constructor.">SPSVnode</a>(ivector&amp; v, <span class="keywordtype">size_t</span> max, <span class="keywordtype">int</span> lab = 0);
<a name="l00411"></a>00411 
<a name="l00418"></a>00418         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a1fac8007420cae9fb27af8e7c81eaa52" title="Default constructor.">SPSVnode</a>(<a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; lb, <span class="keywordtype">bool</span> cntOnly = <span class="keyword">true</span>);
<a name="l00419"></a>00419 
<a name="l00426"></a>00426         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a1fac8007420cae9fb27af8e7c81eaa52" title="Default constructor.">SPSVnode</a>(<a class="code" href="classLabBox.shtml" title="A labeled box class.">LabBox</a>&amp; lb, <span class="keywordtype">size_t</span> max, <span class="keywordtype">bool</span> cntOnly = <span class="keyword">true</span>);
<a name="l00427"></a>00427 
<a name="l00430"></a>00430         <span class="keyword">explicit</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a1fac8007420cae9fb27af8e7c81eaa52" title="Default constructor.">SPSVnode</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>&amp; other);
<a name="l00431"></a>00431 
<a name="l00432"></a>00432         <span class="comment">// Use base class destructor</span>
<a name="l00433"></a>00433 
<a name="l00436"></a>00436         <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ad4e310986c60dcebb3fd3c54dab19c33" title="Copy assignment operator.">operator=</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>&amp; rhs);
<a name="l00437"></a>00437 
<a name="l00438"></a>00438         <span class="keyword">static</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0e051b28a89645eb09e8bbccc7b13780">strippedConstructor</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> other);
<a name="l00439"></a>00439                      
<a name="l00444"></a>00444         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a7d7f4ecaaf020bcb614557eba4743f6a" title="Accessor for the node&#39;s validation data counter.">getVcounter</a>() <span class="keyword">const</span>;
<a name="l00445"></a>00445 
<a name="l00450"></a>00450         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a899334f4e1760a380a776bc38d664710" title="Accessor for the node&#39;s justSplit boolean flag.">getJustSplit</a>() <span class="keyword">const</span>;
<a name="l00451"></a>00451 
<a name="l00457"></a>00457         <a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a05d47c013af462f857c6f54b20cb3404" title="Accessor for the node&#39;s validation data collection.">getVdata</a>() <span class="keyword">const</span>;
<a name="l00458"></a>00458          
<a name="l00462"></a>00462          <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#af7739cf5333fccbe27610cbbd1138719" title="Clears the node&#39;s data collection for both training and validation set.">clearData</a>() <span class="keyword">const</span>;
<a name="l00463"></a>00463 
<a name="l00487"></a>00487         <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ae42cbf85bd00caf12e6acac68ae1fcd3" title="Accessor for the parent of a node.">getParent</a>() <span class="keyword">const</span>;
<a name="l00488"></a>00488 
<a name="l00495"></a>00495         <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3ef0b662df21eb88689644cb5d1279d2" title="Accessor for the left child of a node.">getLeftChild</a>() <span class="keyword">const</span>;
<a name="l00496"></a>00496 
<a name="l00503"></a>00503         <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* <a class="code" href="classsubpavings_1_1SPSVnode.shtml#af681e178575b285f123c1c01bac9ac42" title="Accessor for the right child of a node.">getRightChild</a>() <span class="keyword">const</span>;
<a name="l00505"></a>00505 
<a name="l00512"></a>00512         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a9a51fbde60e061846a93981688cc67af" title="The count the right child would have if this node was split.">getRightCountIfSplit</a>() <span class="keyword">const</span>;
<a name="l00513"></a>00513 
<a name="l00520"></a>00520         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a64b5d63790c02a454aa0e86222b1a3d3" title="The count the left child would have if this node was split.">getLeftCountIfSplit</a>() <span class="keyword">const</span>;
<a name="l00521"></a>00521 
<a name="l00528"></a>00528         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a43024ae81075f8a822ccccad013b3ef7" title="Smallest number of points in either child if this was split.">getMinChildCountIfSplit</a>() <span class="keyword">const</span>;
<a name="l00529"></a>00529 
<a name="l00543"></a>00543         <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a>&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ad1e930cb7befb42cd1985e91f3ddd9b6" title="return a container of counts for prospective grandchildren.">getChildrensLeftAndRightCountsIfSplit</a>
<a name="l00544"></a>00544                     (<a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a>&amp; grandchildCounts) <span class="keyword">const</span>;
<a name="l00545"></a>00545 
<a name="l00553"></a>00553         <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a>&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0d6df4752e05170510e43b67d8eb3110">getLeafNodeCounts</a>(<a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a>&amp; counts) <span class="keyword">const</span>;
<a name="l00554"></a>00554 
<a name="l00555"></a>00555 
<a name="l00562"></a>00562         <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a>&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a6f3850e716947e051a9e9af16c2b4508" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(<a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a>&amp; leaves) <span class="keyword">const</span>;
<a name="l00563"></a>00563 
<a name="l00573"></a>00573         <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a>&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#aa5408d2d74de8b95325c5973cf43f7fb" title="Return a reference to all sub-leaf descendent nodes.">getSubLeaves</a>(<a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a>&amp; subleaves) <span class="keyword">const</span>;
<a name="l00574"></a>00574 
<a name="l00579"></a>00579         <a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a>&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ac637655f207bc9bc049145a2bd904fdf" title="Return a reference to all nodes.">getAllNodes</a>(<a class="code" href="namespacesubpavings.shtml#a90b5f0e33fa46403066cc5a89929e6a9" title="Define type SPSVnodePtrs as container of pointers to SPSVnodes.">SPSVnodePtrs</a>&amp; allNodes) <span class="keyword">const</span>;
<a name="l00580"></a>00580 
<a name="l00581"></a>00581 
<a name="l00584"></a>00584         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a346a5ff0d8177212b23342cada4b5c18" title="The count in the node&#39;s ultimate ancestor root.">getRootCounter</a>() <span class="keyword">const</span>;
<a name="l00585"></a>00585         
<a name="l00588"></a>00588         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#acb4a623e5679b79f05244e79a078e6c1" title="The count in the node&#39;s ultimate ancestor root.">getRootVcounter</a>() <span class="keyword">const</span>;
<a name="l00589"></a>00589 
<a name="l00595"></a>00595         rvector <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a2d2b97cb6916b19ad2affc4907265b6f" title="Get the sample mean.">getMean</a>() <span class="keyword">const</span>;
<a name="l00596"></a>00596         
<a name="l00597"></a>00597         <span class="comment">//gat41</span>
<a name="l00601"></a>00601 <span class="comment"></span>         rvector <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ae2cfb09a96d3c6b0d716236cbfccebd3" title="Get the uniform mean vector where each element is the midpoint of the coordinate.">getUniformMean</a>() <span class="keyword">const</span>;
<a name="l00602"></a>00602          
<a name="l00603"></a>00603          <span class="comment">//gat41</span>
<a name="l00606"></a>00606 <span class="comment"></span>         real <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a24fc7b09a8293edce2e3b602763a45e3" title="Get the Chebyshev distance for the mean.">getChebDistMean</a>() <span class="keyword">const</span>; 
<a name="l00607"></a>00607 
<a name="l00608"></a>00608       <span class="comment">//gat41</span>
<a name="l00611"></a>00611 <span class="comment"></span>       <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#afb9e32e6d78db527309d95ccc8c0049f" title="get the empirical mass of the node">getEmpMass</a>() <span class="keyword">const</span>;
<a name="l00612"></a>00612        
<a name="l00613"></a>00613        <span class="comment">//gat41</span>
<a name="l00616"></a>00616 <span class="comment"></span>         real <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a63ea0f67b354888a8a12c0ffc81b0e5e" title="Get the Chebyshev distance for the var-covar.">getChebDistCovar</a>() <span class="keyword">const</span>; 
<a name="l00617"></a>00617       
<a name="l00618"></a>00618       <span class="comment">//gat41</span>
<a name="l00621"></a>00621 <span class="comment"></span>      real <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a2e0a1a393daed9e3f5887162b68b0e6e" title="Get the Bhattarchaya coefficient.">getHellingerDist</a>() <span class="keyword">const</span>;
<a name="l00622"></a>00622       real <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a3b56f3b8a024ab6929087e803e7af765">getHellingerDist1D</a>() <span class="keyword">const</span>;
<a name="l00623"></a>00623       
<a name="l00624"></a>00624       <span class="comment">//gat41</span>
<a name="l00625"></a>00625       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0a9c9ba4802d37fdb0ee1fff25908fbb">getUniformVarCovar</a>() <span class="keyword">const</span>;
<a name="l00626"></a>00626       <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0a9c9ba4802d37fdb0ee1fff25908fbb">getUniformVarCovar</a>(<a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; varCovar) <span class="keyword">const</span>;
<a name="l00627"></a>00627 
<a name="l00641"></a>00641 
<a name="l00642"></a>00642         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#abdef36aad99bfe53f78d4e8304ac59d6">getVarCovar</a>() <span class="keyword">const</span>;
<a name="l00643"></a>00643 
<a name="l00644"></a>00644         <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#abdef36aad99bfe53f78d4e8304ac59d6">getVarCovar</a>(<a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a>&amp; varCovar) <span class="keyword">const</span>;
<a name="l00645"></a>00645 
<a name="l00647"></a>00647 
<a name="l00650"></a>00650         real <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ac741a9772d992ba74911cf692e1ed772" title="Get the sum of the count over volume in the leaf nodes.">getSumLeafCountOverVol</a>() <span class="keyword">const</span>;
<a name="l00651"></a>00651 
<a name="l00656"></a>00656         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a5d355f8da3eb609f5c81ce63b437fcf9" title="Get the count of the leaf with the smallest count.">getSmallestLeafCount</a>() <span class="keyword">const</span>;
<a name="l00657"></a>00657 
<a name="l00662"></a>00662         <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#adfb30c9946f868e143c81e6bf35a7a6f" title="Get the count in the leaf with the smallest count.">getLargestLeafCount</a>() <span class="keyword">const</span>;
<a name="l00663"></a>00663 
<a name="l00664"></a>00664 
<a name="l00665"></a>00665 
<a name="l00671"></a>00671         <span class="keyword">virtual</span> std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a51715ef7b6e370006e914fee15061cfc" title="Output details of a specific node.">nodePrint</a>(std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00672"></a>00672 
<a name="l00686"></a>00686         <span class="keyword">virtual</span> std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a01b35db8ce4b99460ff352f6d25a529c" title="Output for a node in a binary tree, tab-delimited.">leafOutputTabs</a>(std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00687"></a>00687 
<a name="l00695"></a>00695         <span class="keyword">virtual</span> std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#abcac815b9e5e60a3d18fa3534a12c518" title="Output for for all leaves of a binary tree.">leavesOutputTabs</a>(std::ostream &amp;os) <span class="keyword">const</span>;
<a name="l00696"></a>00696 
<a name="l00708"></a>00708         std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#adc55cda7856cfdd854051b891263d3bf" title="Output for for all leaves of a binary tree.">leavesOutputTabsWithHistHeight</a>(std::ostream &amp;os,
<a name="l00709"></a>00709                                     <span class="keyword">const</span> <span class="keywordtype">int</span> prec) <span class="keyword">const</span>;
<a name="l00710"></a>00710 
<a name="l00723"></a>00723         std::ostream&amp; <a class="code" href="classsubpavings_1_1SPSVnode.shtml#adc55cda7856cfdd854051b891263d3bf" title="Output for for all leaves of a binary tree.">leavesOutputTabsWithHistHeight</a>(<span class="keyword">const</span> <span class="keywordtype">size_t</span> bigN,
<a name="l00724"></a>00724                         std::ostream &amp;os, <span class="keyword">const</span> <span class="keywordtype">int</span> prec = 5) <span class="keyword">const</span>;
<a name="l00725"></a>00725 
<a name="l00737"></a>00737         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0eb85efd74fa770f3259d6ba948b65b8" title="Expand a leaf node.">nodeExpand</a>(<span class="keywordtype">int</span> comp);
<a name="l00738"></a>00738 
<a name="l00748"></a>00748         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0eb85efd74fa770f3259d6ba948b65b8" title="Expand a leaf node.">nodeExpand</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest, <span class="keywordtype">int</span> comp);
<a name="l00749"></a>00749 
<a name="l00757"></a>00757         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0eb85efd74fa770f3259d6ba948b65b8" title="Expand a leaf node.">nodeExpand</a>();
<a name="l00758"></a>00758 
<a name="l00759"></a>00759 
<a name="l00770"></a>00770         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0eb85efd74fa770f3259d6ba948b65b8" title="Expand a leaf node.">nodeExpand</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest, <span class="keywordtype">bool</span> boolVal);
<a name="l00771"></a>00771         
<a name="l00772"></a>00772         <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a0eb85efd74fa770f3259d6ba948b65b8" title="Expand a leaf node.">nodeExpand</a>(<span class="keywordtype">bool</span> boolVal);
<a name="l00773"></a>00773 
<a name="l00783"></a>00783         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#aed19a06dc479c2edc865243d2c131c30" title="Reabsorbs both children of the node.">nodeReabsorbChildren</a>();
<a name="l00784"></a>00784 
<a name="l00785"></a>00785 
<a name="l00812"></a>00812         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a5abf598ead77d94aa130a8a7bf78f1f7" title="Try to reunite nodes to form one leaf.">nodeReunite</a>(<a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> *lChild, <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* rChild);
<a name="l00813"></a>00813 
<a name="l00819"></a>00819         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a928db3d7b687a9fb5d50fa135f51b040" title="Builds a higher level of a tree from existing nodes.">nodeAdoptLeft</a>(<a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> *lChild);
<a name="l00820"></a>00820 
<a name="l00826"></a>00826         <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a33d64bef2bd9dd7f430b732719eab71d" title="Builds a higher level of a tree from existing nodes.">nodeAdoptRight</a>(<a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> *rChild);
<a name="l00827"></a>00827 
<a name="l00828"></a>00828 
<a name="l00848"></a>00848         <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a58deac20a0a5b69bb06cdc04fc059135" title="Inserts data into this node.">insertOneFind</a>(<a class="code" href="namespacesubpavings.shtml#a8792314c11b28ac2b8c4c85c47526f3a" title="Define type BigDataItr as an iterator BigData.">BigDataItr</a> newItr,
<a name="l00849"></a>00849                             <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98" title="Define a type OPERATION_ON.">OPERATIONS_ON</a> childInd,
<a name="l00850"></a>00850                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest, <span class="keywordtype">bool</span> boolVal);
<a name="l00851"></a>00851                             
<a name="l00872"></a>00872         <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml#a803d11f31d86f0565dbe682a33099698" title="Check if the box a node represents contains a datapoint p.">nodeContains</a>(<span class="keyword">const</span> rvector&amp; p,
<a name="l00873"></a>00873                         <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98" title="Define a type OPERATION_ON.">OPERATIONS_ON</a> childInd) <span class="keyword">const</span>;
<a name="l00874"></a>00874 
<a name="l00875"></a>00875 
<a name="l00888"></a>00888         <span class="keyword">static</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a>* <a class="code" href="classsubpavings_1_1SPSVnode.shtml#ad61518c409809cca73c262dbd17d320f">unionTreeStructure</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> lhs,
<a name="l00889"></a>00889                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSVnode.shtml" title="A derived class based on SPSnode for processing sample data split to training and validation sets...">SPSVnode</a> * <span class="keyword">const</span> rhs);
<a name="l00890"></a>00890 
<a name="l00891"></a>00891          <span class="comment">//--------end of public methods</span>
<a name="l00892"></a>00892     };    <span class="comment">// end of SPSVnode class derived from SPnode class</span>
<a name="l00893"></a>00893 
<a name="l00894"></a>00894 
<a name="l00895"></a>00895 } <span class="comment">// end namespace subpavings</span>
<a name="l00896"></a>00896 
<a name="l00897"></a>00897 <span class="preprocessor">#endif</span>
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="spsvnode_8hpp.shtml">spsvnode.hpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:17 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
