<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<title>MRS: A C++ Class Library for Statistical Set Processing: adaptivehistogram.cpp Source File</title>

<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
</script>


</head>
<body>
<div id="top"><!-- do not remove this div! -->


<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  
  
  <td style="padding-left: 0.5em;">
   <div id="projectname">MRS: A C++ Class Library for Statistical Set Processing
   &#160;<span id="projectnumber">0.1.2-beta1300</span>
   </div>
   
  </td>
  
  
  
   
  
 </tr>
 </tbody>
</table>
</div>

<!-- Generated by Doxygen 1.7.6.1 -->
<script type="text/javascript" src="dynsections.js"></script>
</div>
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
  initNavTree('adaptivehistogram_8cpp.shtml','');
</script>
<div id="doc-content">
<div class="header">
  <div class="headertitle">
<div class="title">adaptivehistogram.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="adaptivehistogram_8cpp.shtml">Go to the documentation of this file.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment">* Copyright (C) 2007, 2008, 2009 Raazesh Sainudiin</span>
<a name="l00003"></a>00003 <span class="comment">* Copyright (C) 2009 Jennifer Harlow</span>
<a name="l00004"></a>00004 <span class="comment">*</span>
<a name="l00005"></a>00005 <span class="comment">* This file is part of mrs, a C++ class library for statistical set processing.</span>
<a name="l00006"></a>00006 <span class="comment">*</span>
<a name="l00007"></a>00007 <span class="comment">* mrs is free software; you can redistribute it and/or modify</span>
<a name="l00008"></a>00008 <span class="comment">* it under the terms of the GNU General Public License as published by</span>
<a name="l00009"></a>00009 <span class="comment">* the Free Software Foundation; either version 3 of the License, or (at</span>
<a name="l00010"></a>00010 <span class="comment">* your option) any later version.</span>
<a name="l00011"></a>00011 <span class="comment">*</span>
<a name="l00012"></a>00012 <span class="comment">* This program is distributed in the hope that it will be useful, but</span>
<a name="l00013"></a>00013 <span class="comment">* WITHOUT ANY WARRANTY; without even the implied warranty of</span>
<a name="l00014"></a>00014 <span class="comment">* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</span>
<a name="l00015"></a>00015 <span class="comment">* General Public License for more details.</span>
<a name="l00016"></a>00016 <span class="comment">*</span>
<a name="l00017"></a>00017 <span class="comment">* You should have received a copy of the GNU General Public License</span>
<a name="l00018"></a>00018 <span class="comment">* along with this program; if not, write to the Free Software</span>
<a name="l00019"></a>00019 <span class="comment">* Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.</span>
<a name="l00020"></a>00020 <span class="comment">*/</span>
<a name="l00021"></a>00021 
<a name="l00026"></a>00026 <span class="preprocessor">#include &quot;<a class="code" href="adaptivehistogram_8hpp.shtml" title="AdaptiveHistogram declarations.">adaptivehistogram.hpp</a>&quot;</span>
<a name="l00027"></a>00027 
<a name="l00028"></a>00028 <span class="preprocessor">#include &lt;iostream&gt;</span> <span class="comment">// to use standard input and output</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;string&gt;</span>   <span class="comment">// to use the C++ string class</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;set&gt;</span>      <span class="comment">// to use the stl::multiset container</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;algorithm&gt;</span><span class="comment">// to use stl::algorithms</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;list&gt;</span>     <span class="comment">// to use stl:: lists</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;fstream&gt;</span>  <span class="comment">// for ifstream, ofstream</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;sstream&gt;</span>  <span class="comment">// to be able to manipulate strings as streams</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;exception&gt;</span> <span class="comment">// use exceptions</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 <span class="preprocessor">#include &lt;gsl/gsl_math.h&gt;</span> <span class="comment">// to use the constant M_PI </span>
<a name="l00038"></a>00038 <span class="preprocessor">#include &lt;math.h&gt;</span> <span class="comment">// math library</span>
<a name="l00039"></a>00039 <span class="preprocessor">#include &lt;gsl/gsl_rng.h&gt;</span>        <span class="comment">// to know about the gsl random number generator</span>
<a name="l00040"></a>00040 <span class="preprocessor">#include &lt;gsl/gsl_randist.h&gt;</span>    <span class="comment">// to get the IAE </span>
<a name="l00041"></a>00041 <span class="preprocessor">#include &lt;gsl/gsl_cdf.h&gt;</span>
<a name="l00042"></a>00042 <span class="preprocessor">#include &lt;gsl/gsl_integration.h&gt;</span>
<a name="l00043"></a>00043 
<a name="l00044"></a>00044 <span class="comment">// to use toolz includes (including std::vector) and toolz methods</span>
<a name="l00045"></a>00045 <span class="preprocessor">#include &quot;<a class="code" href="toolz_8hpp.shtml" title="Declaration of various tools; functions and structs, for MRS.">toolz.hpp</a>&quot;</span>
<a name="l00046"></a>00046 <span class="comment">// to use LabBox and RSSample objects</span>
<a name="l00047"></a>00047 <span class="preprocessor">#include &quot;<a class="code" href="SmallClasses_8hpp.shtml">SmallClasses.hpp</a>&quot;</span>
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 <span class="comment">//to use subpavings</span>
<a name="l00050"></a>00050 <span class="preprocessor">#include &quot;<a class="code" href="sptools_8hpp.shtml" title="General tools for subpavings.">sptools.hpp</a>&quot;</span>
<a name="l00051"></a>00051 <span class="preprocessor">#include &quot;<a class="code" href="spalgorithms_8hpp.shtml" title="SPnode (SubPaving) algorithm function declarations.">spalgorithms.hpp</a>&quot;</span>
<a name="l00052"></a>00052 
<a name="l00053"></a>00053 <span class="comment">// to use stats subpavings</span>
<a name="l00054"></a>00054 <span class="preprocessor">#include &quot;<a class="code" href="collatorspnode_8hpp.shtml" title="CollatorSPnode declarations.">collatorspnode.hpp</a>&quot;</span>
<a name="l00055"></a>00055 
<a name="l00056"></a>00056 <span class="comment">// to use mcmc function objects</span>
<a name="l00057"></a>00057 <span class="preprocessor">#include &quot;<a class="code" href="histmcmcobjs_8hpp.shtml" title="Function objects for MCMC with adaptive histograms.">histmcmcobjs.hpp</a>&quot;</span>
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 <span class="comment">// to use histogram penalty function objects</span>
<a name="l00060"></a>00060 <span class="preprocessor">#include &quot;<a class="code" href="histpenalty_8hpp.shtml" title="Declaration of classes for histogram penalty objects declarations.">histpenalty.hpp</a>&quot;</span>
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="comment">// to use histogram evaluation objects</span>
<a name="l00063"></a>00063 <span class="preprocessor">#include &quot;<a class="code" href="histevalobj_8hpp.shtml" title="Declarations for classes for evaluating when to stop changing histograms.">histevalobj.hpp</a>&quot;</span>
<a name="l00064"></a>00064 
<a name="l00065"></a>00065 <span class="comment">// to use collator objects</span>
<a name="l00066"></a>00066 <span class="preprocessor">#include &quot;<a class="code" href="adaptivehistogramcollator_8hpp.shtml" title="AdaptiveHistogramCollator declarations.">adaptivehistogramcollator.hpp</a>&quot;</span>
<a name="l00067"></a>00067 
<a name="l00068"></a>00068 <span class="comment">// to use error functions</span>
<a name="l00069"></a>00069 <span class="preprocessor">#include &quot;<a class="code" href="errorfunc_8hpp.shtml" title="L1-error function declarations.">errorfunc.hpp</a>&quot;</span>
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 <span class="comment">// to use 2D integration using taylor methods</span>
<a name="l00072"></a>00072 <span class="preprocessor">#include &quot;../examples/StatsSubPav/ExactInt/Int.h&quot;</span>
<a name="l00073"></a>00073 <span class="preprocessor">#include &quot;../examples/StatsSubPav/ExactInt/dim2taylor.hpp&quot;</span>
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 <span class="keyword">using namespace </span>subpavings;
<a name="l00076"></a>00076 <span class="keyword">using namespace </span>std;
<a name="l00077"></a>00077 
<a name="l00078"></a>00078 <span class="comment">// a class for comparison between spsnodes</span>
<a name="l00079"></a><a class="code" href="classMyCompare.shtml">00079</a> <span class="keyword">class </span><a class="code" href="classMyCompare.shtml">MyCompare</a>
<a name="l00080"></a>00080 {
<a name="l00081"></a><a class="code" href="classMyCompare.shtml#af0e29031d7490821548f19f8f993b297">00081</a>     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; <a class="code" href="classMyCompare.shtml#af0e29031d7490821548f19f8f993b297">myNC</a>;
<a name="l00082"></a>00082 
<a name="l00083"></a>00083     <span class="keyword">public</span>:
<a name="l00084"></a><a class="code" href="classMyCompare.shtml#a07bd4f4cbba1f03bce0db9991ceb5e07">00084</a>     <a class="code" href="classMyCompare.shtml#a07bd4f4cbba1f03bce0db9991ceb5e07">MyCompare</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; nc) : myNC(nc) {}
<a name="l00085"></a>00085 
<a name="l00086"></a><a class="code" href="classMyCompare.shtml#ab8e83151fa901c20449290ba5e8fb735">00086</a>     <span class="keywordtype">bool</span> operator()   (<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> lhs,
<a name="l00087"></a>00087                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> rhs)<span class="keyword"> const</span>
<a name="l00088"></a>00088 <span class="keyword">    </span>{ <span class="keywordflow">return</span> myNC(lhs, rhs); }
<a name="l00089"></a>00089 
<a name="l00090"></a>00090 };
<a name="l00091"></a>00091 
<a name="l00092"></a>00092 <span class="comment">// -------------------implementation of AdaptiveHistogram class --------------</span>
<a name="l00093"></a>00093 
<a name="l00094"></a>00094 <span class="comment">// --------------------------- private ---------------------------------------</span>
<a name="l00095"></a>00095 
<a name="l00096"></a>00096 <span class="comment">// a constant for padding a box if it is tailor-made for data</span>
<a name="l00097"></a>00097 <span class="keyword">const</span> real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a73e006381e43e152b7dbb63211a3ac09" title="a constant for padding a box if it is tailor-made for data.">AdaptiveHistogram::padding</a> = 0.000005;
<a name="l00098"></a>00098 
<a name="l00099"></a>00099 <span class="comment">// initialised constructor, initialised with a subpaving pointer</span>
<a name="l00100"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a40e81bf270e245055b487e3f9fa28a7f">00100</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa863ff24ef4af6b084f515f702bbe09e" title="Default constructor.">AdaptiveHistogram::AdaptiveHistogram</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * spn, <span class="keywordtype">bool</span> as)
<a name="l00101"></a>00101         : holdAllStats(as),
<a name="l00102"></a>00102           scaledEMPSumCOPERR(0.0), scaledEMPSumAIC(0.0)
<a name="l00103"></a>00103 {
<a name="l00104"></a>00104     <span class="keywordflow">if</span> (NULL == spn) {
<a name="l00105"></a>00105         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Cannot use null SPSnode pointer in constructor&quot;</span>);
<a name="l00106"></a>00106     }
<a name="l00107"></a>00107     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a> = spn;
<a name="l00108"></a>00108     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a> = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l00109"></a>00109     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a> += <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l00110"></a>00110 
<a name="l00111"></a>00111     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a5afac4246153fef0b383f6eb2e9d23a6" title="The root box used to form the subpaving tree.">rootBox</a> = spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l00112"></a>00112 
<a name="l00113"></a>00113     <span class="comment">// nothing happens to dataCollection when object is constructed</span>
<a name="l00114"></a>00114 }
<a name="l00115"></a>00115 
<a name="l00116"></a>00116 
<a name="l00117"></a>00117 <span class="comment">// complete insertion of data from a vector of data</span>
<a name="l00118"></a>00118 <span class="comment">// given a container of rvectors of the data  to insert</span>
<a name="l00119"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a929e006a5a2a0f40c68d77bc7dff70e7">00119</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a929e006a5a2a0f40c68d77bc7dff70e7" title="Complete insertion of data from a vector container.">AdaptiveHistogram::completeDataInsertionFromVec</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; theData,
<a name="l00120"></a>00120                                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l00121"></a>00121                                 <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging)
<a name="l00122"></a>00122 {
<a name="l00123"></a>00123 
<a name="l00124"></a>00124     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l00125"></a>00125 
<a name="l00126"></a>00126     <span class="comment">//find the data dimensions from the first datapoint</span>
<a name="l00127"></a>00127     <span class="keywordtype">int</span> dataDim = <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(*theData.begin()) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(*theData.begin()) + 1;
<a name="l00128"></a>00128 
<a name="l00129"></a>00129     <span class="comment">// ensure the paving exists</span>
<a name="l00130"></a>00130     <span class="keywordtype">bool</span> hadToMakePaving = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab5d45e2f1966bd43a7bb8bf041ea29db" title="Checks if we need to make root paving for the histogram object.">haveMadePaving</a>(theData, dataDim);
<a name="l00131"></a>00131 
<a name="l00132"></a>00132     <span class="comment">// if we did not make the paving we have to check data dimensions</span>
<a name="l00133"></a>00133     <span class="keywordflow">if</span> (!hadToMakePaving) {
<a name="l00134"></a>00134         <span class="keywordflow">if</span>(dataDim != (<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a5afac4246153fef0b383f6eb2e9d23a6" title="The root box used to form the subpaving tree.">rootBox</a>) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a5afac4246153fef0b383f6eb2e9d23a6" title="The root box used to form the subpaving tree.">rootBox</a>)) + 1) {
<a name="l00135"></a>00135 
<a name="l00136"></a>00136             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Dimensions of data do not match paving&quot;</span>);
<a name="l00137"></a>00137         }
<a name="l00138"></a>00138     }
<a name="l00139"></a>00139 
<a name="l00140"></a>00140     <span class="comment">// insert the data</span>
<a name="l00141"></a>00141     <span class="keywordtype">size_t</span> dataCountInserted
<a name="l00142"></a>00142             = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a0eaca3eebf10b3d251ed284f0317c593" title="Insert data from a container.">insertDataFromContainer</a>(theData, boolTest, logging);
<a name="l00143"></a>00143 
<a name="l00144"></a>00144     <span class="keywordflow">if</span> (dataCountInserted &gt; 0) {
<a name="l00145"></a>00145         retValue = <span class="keyword">true</span>;
<a name="l00146"></a>00146         <span class="comment">// switch on for more output during histogram creation &quot;</span>
<a name="l00147"></a>00147         <span class="comment">/*</span>
<a name="l00148"></a>00148 <span class="comment">        std::cout &lt;&lt; &quot;End of inserting data: &quot; &lt;&lt; dataCountInserted</span>
<a name="l00149"></a>00149 <span class="comment">            &lt;&lt; &quot; data points inserted to dataCollection &quot;</span>
<a name="l00150"></a>00150 <span class="comment">            &lt;&lt; std:: endl;</span>
<a name="l00151"></a>00151 <span class="comment">        std::cout &lt;&lt; &quot;and associated with the tree if &quot;</span>
<a name="l00152"></a>00152 <span class="comment">            &lt;&lt; &quot;they fit into the root box&quot; &lt;&lt; std::endl;</span>
<a name="l00153"></a>00153 <span class="comment">        std::cout &lt;&lt; &quot;(check console output for possible records &quot;</span>
<a name="l00154"></a>00154 <span class="comment">            &lt;&lt; &quot;of datapoints which did not fit)&quot; &lt;&lt; std::endl;</span>
<a name="l00155"></a>00155 <span class="comment">        */</span>
<a name="l00156"></a>00156         }
<a name="l00157"></a>00157 
<a name="l00158"></a>00158     <span class="keywordflow">if</span> (dataCountInserted == 0) {
<a name="l00159"></a>00159         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No data inserted&quot;</span>);
<a name="l00160"></a>00160 
<a name="l00161"></a>00161     }
<a name="l00162"></a>00162 
<a name="l00163"></a>00163     <span class="keywordflow">return</span> retValue;
<a name="l00164"></a>00164 }
<a name="l00165"></a>00165 
<a name="l00166"></a>00166 
<a name="l00167"></a>00167 <span class="comment">// check if we need to make a paving for the histogram object</span>
<a name="l00168"></a>00168 <span class="comment">// make it if we need to, matching the dimensions of the data</span>
<a name="l00169"></a>00169 <span class="comment">// as given in function argument</span>
<a name="l00170"></a>00170 <span class="comment">// return true if needed to make the paving</span>
<a name="l00171"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab5d45e2f1966bd43a7bb8bf041ea29db">00171</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab5d45e2f1966bd43a7bb8bf041ea29db" title="Checks if we need to make root paving for the histogram object.">AdaptiveHistogram::haveMadePaving</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; theData,
<a name="l00172"></a>00172                                     <span class="keyword">const</span> <span class="keywordtype">size_t</span> dim)
<a name="l00173"></a>00173 {
<a name="l00174"></a>00174 
<a name="l00175"></a>00175     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l00176"></a>00176 
<a name="l00177"></a>00177     <span class="keywordflow">try</span> {
<a name="l00178"></a>00178 
<a name="l00179"></a>00179         <span class="comment">// check if we need to make the paving on the basis of the data</span>
<a name="l00180"></a>00180         <span class="keywordflow">if</span> (<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>)) {
<a name="l00181"></a>00181 
<a name="l00182"></a>00182             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a5afac4246153fef0b383f6eb2e9d23a6" title="The root box used to form the subpaving tree.">rootBox</a> = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4e40497a24ce0807235196e17ca21456" title="Make a box to contain all the data.">makeBox</a>(theData, dim);
<a name="l00183"></a>00183 
<a name="l00184"></a>00184             <span class="comment">// point rootPaving to a new SPSnode with box myBox</span>
<a name="l00185"></a>00185             <span class="comment">// and also pass in the not value of holdAllStats which controls</span>
<a name="l00186"></a>00186             <span class="comment">// whether all available statistics are maintained in the</span>
<a name="l00187"></a>00187             <span class="comment">// rootPaving (true) or just counts (false)</span>
<a name="l00188"></a>00188             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a> = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a5afac4246153fef0b383f6eb2e9d23a6" title="The root box used to form the subpaving tree.">rootBox</a>, !<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3f9319019a75ea477804d02762602d17" title="Controls whether all available statistics are maintained in the rootPaving. If set to false (default)...">holdAllStats</a>);
<a name="l00189"></a>00189             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a> = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l00190"></a>00190 
<a name="l00191"></a>00191             retValue = <span class="keyword">true</span>;
<a name="l00192"></a>00192         }
<a name="l00193"></a>00193     }
<a name="l00194"></a>00194 
<a name="l00195"></a>00195     <span class="keywordflow">catch</span> (bad_alloc&amp; e)
<a name="l00196"></a>00196     {
<a name="l00197"></a>00197         <span class="keyword">const</span> <span class="keywordtype">char</span>* msg = e.what();
<a name="l00198"></a>00198         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l00199"></a>00199         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in &quot;</span>
<a name="l00200"></a>00200             &lt;&lt; <span class="stringliteral">&quot;AdaptiveHistogram::haveMadePaving()&quot;</span>
<a name="l00201"></a>00201             &lt;&lt; std::endl;
<a name="l00202"></a>00202         <span class="keywordflow">throw</span>;
<a name="l00203"></a>00203     }
<a name="l00204"></a>00204 
<a name="l00205"></a>00205     <span class="keywordflow">return</span> retValue;
<a name="l00206"></a>00206     <span class="comment">// end of making the subpaving if there was not one</span>
<a name="l00207"></a>00207 }
<a name="l00208"></a>00208 
<a name="l00209"></a>00209 
<a name="l00210"></a>00210 
<a name="l00211"></a>00211 
<a name="l00212"></a>00212 <span class="comment">// make a box to fit all the data</span>
<a name="l00213"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4e40497a24ce0807235196e17ca21456">00213</a> ivector <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4e40497a24ce0807235196e17ca21456" title="Make a box to contain all the data.">AdaptiveHistogram::makeBox</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; theData, <span class="keyword">const</span> <span class="keywordtype">size_t</span> dim)
<a name="l00214"></a>00214 {
<a name="l00215"></a>00215     <span class="comment">// set up a vector of maxes</span>
<a name="l00216"></a>00216     vector&lt;real&gt; maxs;
<a name="l00217"></a>00217 
<a name="l00218"></a>00218     <span class="comment">// give maxs starting values from the first element in the rvectors</span>
<a name="l00219"></a>00219     rvector first = *theData.begin();
<a name="l00220"></a>00220 
<a name="l00221"></a>00221     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 1; i &lt;=dim; i++) {
<a name="l00222"></a>00222         maxs.push_back(first[i]);
<a name="l00223"></a>00223     }
<a name="l00224"></a>00224 
<a name="l00225"></a>00225     <span class="comment">// make mins the same as maxes to start with</span>
<a name="l00226"></a>00226     vector&lt;real&gt; mins = maxs;
<a name="l00227"></a>00227 
<a name="l00228"></a>00228     <a class="code" href="namespacesubpavings.shtml#a0e6592215c5f3504143e6c5ac38dcfec" title="Define type RVecDataCItr as const_iterator over RVecData.">RVecDataCItr</a> cit;
<a name="l00229"></a>00229 
<a name="l00230"></a>00230     <span class="comment">// go over the rest of the container</span>
<a name="l00231"></a>00231     <span class="keywordflow">for</span>(cit = theData.begin()+1; cit &lt; theData.end(); cit++) {
<a name="l00232"></a>00232         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 1; i &lt;= dim; i++) {
<a name="l00233"></a>00233             real r = (*cit)[i];
<a name="l00234"></a>00234             <span class="comment">// vectors indexed 0 - n-1, rvectors ndexed 1 - n</span>
<a name="l00235"></a>00235             <span class="keywordflow">if</span>(r &lt; mins[i-1]) {
<a name="l00236"></a>00236                 mins[i-1] = r;
<a name="l00237"></a>00237             }
<a name="l00238"></a>00238             <span class="keywordflow">if</span>(r &gt; maxs[i-1]) {
<a name="l00239"></a>00239                 maxs[i-1] = r;
<a name="l00240"></a>00240             }
<a name="l00241"></a>00241         } <span class="comment">// end going through rvector elements</span>
<a name="l00242"></a>00242     } <span class="comment">// end going through rvectors</span>
<a name="l00243"></a>00243 
<a name="l00244"></a>00244     ivector retVal(dim);    <span class="comment">// set up an ivector to become the return value</span>
<a name="l00245"></a>00245 
<a name="l00246"></a>00246     <span class="comment">// and make each interval the (min, max) of the corresponding elements</span>
<a name="l00247"></a>00247     <span class="comment">// of the rvectors -/+ some padding</span>
<a name="l00248"></a>00248 
<a name="l00249"></a>00249     std::cout &lt;&lt; <span class="stringliteral">&quot;A box is being made for the data.  &quot;</span>
<a name="l00250"></a>00250         &lt;&lt; <span class="stringliteral">&quot;The box is &quot;</span> &lt;&lt; std::endl;  <span class="comment">// standard output message</span>
<a name="l00251"></a>00251 
<a name="l00252"></a>00252     <span class="comment">// make intervals and make them elements of the ivector</span>
<a name="l00253"></a>00253     <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 1; i &lt;=dim; i++) {
<a name="l00254"></a>00254         interval myInterval(mins[i-1]-<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a73e006381e43e152b7dbb63211a3ac09" title="a constant for padding a box if it is tailor-made for data.">padding</a>, maxs[i-1]+<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a73e006381e43e152b7dbb63211a3ac09" title="a constant for padding a box if it is tailor-made for data.">padding</a>);
<a name="l00255"></a>00255         std::cout &lt;&lt; myInterval &lt;&lt; <span class="stringliteral">&quot;  &quot;</span>;    <span class="comment">// output</span>
<a name="l00256"></a>00256         retVal[i]=myInterval;
<a name="l00257"></a>00257     }
<a name="l00258"></a>00258     std::cout &lt;&lt; std::endl;
<a name="l00259"></a>00259 
<a name="l00260"></a>00260     <span class="keywordflow">return</span> retVal;
<a name="l00261"></a>00261 
<a name="l00262"></a>00262 }
<a name="l00263"></a>00263 
<a name="l00264"></a>00264 
<a name="l00265"></a>00265 <span class="comment">// insert data from a container</span>
<a name="l00266"></a>00266 <span class="comment">// return number of data points inserted into dataCollection</span>
<a name="l00267"></a>00267 <span class="comment">// (and for which insertion into subpaving was attempted)</span>
<a name="l00268"></a>00268 <span class="comment">// used by all the other bulk-insert methods</span>
<a name="l00269"></a>00269 <span class="comment">// recalculates the scaled EMP Sums for COPERR and AIC</span>
<a name="l00270"></a>00270 <span class="comment">// creates log file of process if logging is true.</span>
<a name="l00271"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a0eaca3eebf10b3d251ed284f0317c593">00271</a> <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a0eaca3eebf10b3d251ed284f0317c593" title="Insert data from a container.">AdaptiveHistogram::insertDataFromContainer</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; theData,
<a name="l00272"></a>00272                                     <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l00273"></a>00273                                     <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging)
<a name="l00274"></a>00274 {
<a name="l00275"></a>00275     <span class="keywordtype">size_t</span> counter = 0;    <span class="comment">// to count the input</span>
<a name="l00276"></a>00276 
<a name="l00277"></a>00277     <span class="comment">// for logging output to keep track of splits if necessary</span>
<a name="l00278"></a>00278     <span class="keywordtype">int</span> i = 0;
<a name="l00279"></a>00279     std::string baseFileName = <span class="stringliteral">&quot;&quot;</span>;
<a name="l00280"></a>00280     std::string s = <span class="stringliteral">&quot;&quot;</span>;
<a name="l00281"></a>00281 
<a name="l00282"></a>00282     <span class="comment">// if we are splitting as we go and logging, set up a log file</span>
<a name="l00283"></a>00283     <span class="keywordflow">if</span> ((logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) &amp;&amp; (boolTest() == <span class="keyword">true</span>)) {
<a name="l00284"></a>00284         baseFileName = <span class="stringliteral">&quot;splitOutput&quot;</span>;
<a name="l00285"></a>00285         s = <a class="code" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609" title="Construct a unique filename from base and timestamp number.">getUniqueFilename</a>(baseFileName);
<a name="l00286"></a>00286         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad847a4add7e72eac564daa44835dba5b" title="Opening line of a txt log file.">outputLogStart</a>(s);
<a name="l00287"></a>00287         <span class="comment">// log the current state of the histogram</span>
<a name="l00288"></a>00288         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">outputLog</a>(s, i);
<a name="l00289"></a>00289         i++;
<a name="l00290"></a>00290     }
<a name="l00291"></a>00291 
<a name="l00292"></a>00292     <a class="code" href="namespacesubpavings.shtml#a0e6592215c5f3504143e6c5ac38dcfec" title="Define type RVecDataCItr as const_iterator over RVecData.">RVecDataCItr</a> cit;
<a name="l00293"></a>00293 
<a name="l00294"></a>00294     <span class="comment">// feed the data to myHist</span>
<a name="l00295"></a>00295     <span class="keywordflow">for</span>(cit = theData.begin(); cit &lt; theData.end(); cit++) {
<a name="l00296"></a>00296 
<a name="l00297"></a>00297         <span class="comment">// put it into dataCollection</span>
<a name="l00298"></a>00298         <a class="code" href="namespacesubpavings.shtml#a8792314c11b28ac2b8c4c85c47526f3a" title="Define type BigDataItr as an iterator BigData.">BigDataItr</a> it = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb02d0a6fe2258620130b97b7901e214" title="A container for all sample data passed to this.">dataCollection</a>.end();
<a name="l00299"></a>00299         it = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb02d0a6fe2258620130b97b7901e214" title="A container for all sample data passed to this.">dataCollection</a>.insert(it, *cit);
<a name="l00300"></a>00300 
<a name="l00301"></a>00301         <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* insertedInto = NULL;
<a name="l00302"></a>00302 
<a name="l00303"></a>00303         <span class="comment">// try inserting</span>
<a name="l00304"></a>00304         insertedInto =
<a name="l00305"></a>00305                 <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af0d351af2a515188522e13e0c6502a18" title="Inserts data into this node.">insertOneFind</a>(it,<a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a4863db89a4712e90bb113f9acf898781">ON_PARENT</a>, boolTest);
<a name="l00306"></a>00306 
<a name="l00307"></a>00307         <span class="comment">//insertOneFind returns either NULL if no insert possible</span>
<a name="l00308"></a>00308         <span class="comment">// or a pointer to the node the data goes to before that node</span>
<a name="l00309"></a>00309         <span class="comment">// is split (it could be split more than once)</span>
<a name="l00310"></a>00310         <span class="keywordflow">if</span> (NULL == insertedInto) { <span class="comment">// failed to insert</span>
<a name="l00311"></a>00311             std::cout &lt;&lt; <span class="stringliteral">&quot;Failed to insert point &quot;</span>
<a name="l00312"></a>00312                 &lt;&lt; *cit &lt;&lt; std::endl;
<a name="l00313"></a>00313             std::cout &lt;&lt; <span class="stringliteral">&quot;Root node of subpaving has box &quot;</span>
<a name="l00314"></a>00314                 &lt;&lt; <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a> &lt;&lt; std::endl;
<a name="l00315"></a>00315         }
<a name="l00316"></a>00316         <span class="comment">// successful insertion, and we are splitting as we go</span>
<a name="l00317"></a>00317         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (boolTest() == <span class="keyword">true</span>) {
<a name="l00318"></a>00318             std::string newNames = insertedInto-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l00319"></a>00319 
<a name="l00320"></a>00320             <span class="keywordflow">if</span>(newNames.length() &gt; 0) { <span class="comment">// there are new nodes</span>
<a name="l00321"></a>00321                 <span class="comment">//add the new child names if any</span>
<a name="l00322"></a>00322                 <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a> += newNames;
<a name="l00323"></a>00323 
<a name="l00324"></a>00324                 <span class="keywordflow">if</span> (logging) { <span class="comment">// log the current state of the histogram</span>
<a name="l00325"></a>00325                     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">outputLog</a>(s, i);
<a name="l00326"></a>00326                     i++;
<a name="l00327"></a>00327                 }
<a name="l00328"></a>00328             }
<a name="l00329"></a>00329        }
<a name="l00330"></a>00330 
<a name="l00331"></a>00331         counter++;
<a name="l00332"></a>00332     }
<a name="l00333"></a>00333 
<a name="l00334"></a>00334     <span class="keywordflow">if</span> (counter &gt; 0) { <span class="comment">// data inserted</span>
<a name="l00335"></a>00335         <span class="comment">//recalculate the scaled EMP sum values;</span>
<a name="l00336"></a>00336         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6456652ee831cee0ec4184440cd84ec9" title="Recalculate the scaled EMP part of COPERR score.">recalcScaledEMPSumCOPERR</a>();
<a name="l00337"></a>00337         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab8a546d8d85be0ffac955f7886d5c7aa" title="Recalculate the unscaled EMP part of AIC score.">recalcScaledEMPSumAIC</a>();
<a name="l00338"></a>00338 
<a name="l00339"></a>00339         <span class="keywordflow">if</span> ((logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) &amp;&amp; (boolTest() == <span class="keyword">true</span>))  {
<a name="l00340"></a>00340             <span class="comment">// add leaf node levels string to log</span>
<a name="l00341"></a>00341             <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aca69edc461799f9d867d7eea6cb76f8e">getLeafLevelsString</a>());
<a name="l00342"></a>00342         }
<a name="l00343"></a>00343     }
<a name="l00344"></a>00344 
<a name="l00345"></a>00345     <span class="keywordflow">return</span> counter;
<a name="l00346"></a>00346 }
<a name="l00347"></a>00347 
<a name="l00348"></a>00348 
<a name="l00349"></a>00349 <span class="comment">// Recalculate the scaled EMP part of COPERR score.</span>
<a name="l00350"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6456652ee831cee0ec4184440cd84ec9">00350</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6456652ee831cee0ec4184440cd84ec9" title="Recalculate the scaled EMP part of COPERR score.">AdaptiveHistogram::recalcScaledEMPSumCOPERR</a>()<span class="keyword"> const</span>
<a name="l00351"></a>00351 <span class="keyword"></span>{
<a name="l00352"></a>00352     <span class="comment">// use the scaled EMP Sum from the root node&#39;s getEMPSumCOPERR()</span>
<a name="l00353"></a>00353     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acd3c0bacd5148b82188cc129b3a59e96" title="A value for the unscaled EMP part of COPERR score.">scaledEMPSumCOPERR</a> = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ad8b17faf69caa46fcfa021b61d09e278" title="Get scaled EMP sum under COPERR for tree rooted at this.">getEMPSumCOPERR</a>(
<a name="l00354"></a>00354                         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>());
<a name="l00355"></a>00355 }
<a name="l00356"></a>00356 
<a name="l00357"></a>00357 <span class="comment">// Recalculate the unscaled EMP part of AIC score.</span>
<a name="l00358"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab8a546d8d85be0ffac955f7886d5c7aa">00358</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab8a546d8d85be0ffac955f7886d5c7aa" title="Recalculate the unscaled EMP part of AIC score.">AdaptiveHistogram::recalcScaledEMPSumAIC</a>()<span class="keyword"> const</span>
<a name="l00359"></a>00359 <span class="keyword"></span>{
<a name="l00360"></a>00360     <span class="comment">// use the scaled EMP Sum from the root node&#39;s getEMPSumCOPERR()</span>
<a name="l00361"></a>00361     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad5748390a25f398475bb60575f0e9a89" title="A value for the unscaled EMP part of AIC score.">scaledEMPSumAIC</a> = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a26329c8ddf55f351a673fe258e5abd15" title="Get the unscaled EMP sum under AIC for tree rooted at this.">getEMPSumAIC</a>(
<a name="l00362"></a>00362                         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>());
<a name="l00363"></a>00363 }
<a name="l00364"></a>00364 
<a name="l00365"></a>00365 <span class="comment">// Update the scaled EMP part COPERR score given change.</span>
<a name="l00366"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a71122bfe1d3dfad1f2b55585326334ac">00366</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a71122bfe1d3dfad1f2b55585326334ac" title="Update the scaled EMP part COPERR score given change.">AdaptiveHistogram::updateScaledEMPSumCOPERR</a>(dotprecision change)<span class="keyword"> const</span>
<a name="l00367"></a>00367 <span class="keyword"></span>{
<a name="l00368"></a>00368     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acd3c0bacd5148b82188cc129b3a59e96" title="A value for the unscaled EMP part of COPERR score.">scaledEMPSumCOPERR</a> = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acd3c0bacd5148b82188cc129b3a59e96" title="A value for the unscaled EMP part of COPERR score.">scaledEMPSumCOPERR</a> + change;
<a name="l00369"></a>00369 }
<a name="l00370"></a>00370 
<a name="l00371"></a>00371 <span class="comment">// Update the the scaled EMP part AIC score given change.</span>
<a name="l00372"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a79fe01c35fba2bbdb1df5e8eb1d3a78b">00372</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a79fe01c35fba2bbdb1df5e8eb1d3a78b" title="Update the the scaled EMP part AIC score given change.">AdaptiveHistogram::updateScaledEMPSumAIC</a>(dotprecision change)<span class="keyword"> const</span>
<a name="l00373"></a>00373 <span class="keyword"></span>{
<a name="l00374"></a>00374     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad5748390a25f398475bb60575f0e9a89" title="A value for the unscaled EMP part of AIC score.">scaledEMPSumAIC</a> = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad5748390a25f398475bb60575f0e9a89" title="A value for the unscaled EMP part of AIC score.">scaledEMPSumAIC</a> + change;
<a name="l00375"></a>00375 }
<a name="l00376"></a>00376 
<a name="l00377"></a>00377 
<a name="l00378"></a>00378 
<a name="l00379"></a>00379 <span class="comment">// Method to add current state of the histogram during splitting to a log file</span>
<a name="l00380"></a>00380 <span class="comment">// Output goes to file named according to argument s</span>
<a name="l00381"></a>00381 <span class="comment">// Output includes scaled EMP contributions under COPERR and AIC</span>
<a name="l00382"></a>00382 <span class="comment">// and changes if split</span>
<a name="l00383"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f">00383</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">AdaptiveHistogram::outputLog</a>(<span class="keyword">const</span> std::string&amp; s, <span class="keyword">const</span> <span class="keywordtype">int</span> i)<span class="keyword"> const</span>
<a name="l00384"></a>00384 <span class="keyword"></span>{
<a name="l00385"></a>00385     <span class="comment">// To add output of the AdaptiveHistogram object to file</span>
<a name="l00386"></a>00386     ofstream os(s.c_str(), ios::app);         <span class="comment">// append</span>
<a name="l00387"></a>00387     <span class="keywordflow">if</span> (os.is_open()) {
<a name="l00388"></a>00388         <span class="keywordtype">size_t</span> n = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l00389"></a>00389 
<a name="l00390"></a>00390         os &lt;&lt; std::endl;
<a name="l00391"></a>00391         os &lt;&lt; <span class="stringliteral">&quot;Pass &quot;</span> &lt;&lt; i &lt;&lt; std::endl; <span class="comment">// numbering</span>
<a name="l00392"></a>00392         os &lt;&lt; <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a> &lt;&lt; std::endl; <span class="comment">// creation string so far</span>
<a name="l00393"></a>00393         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a817a8a29925937c189cc009366fe6bfb" title="Output for for all leaves of a binary tree.">leavesOutputTabsWithEMPs</a>(n, os); <span class="comment">// the output</span>
<a name="l00394"></a>00394         os.close();
<a name="l00395"></a>00395     }
<a name="l00396"></a>00396     <span class="keywordflow">else</span> {
<a name="l00397"></a>00397         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error: could not open file named &quot;</span>
<a name="l00398"></a>00398             &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00399"></a>00399     }
<a name="l00400"></a>00400 }
<a name="l00401"></a>00401 
<a name="l00402"></a>00402 
<a name="l00403"></a>00403 <span class="comment">// Method to put opening line into a log file</span>
<a name="l00404"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad847a4add7e72eac564daa44835dba5b">00404</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad847a4add7e72eac564daa44835dba5b" title="Opening line of a txt log file.">AdaptiveHistogram::outputLogStart</a>(<span class="keyword">const</span> std::string&amp; s)<span class="keyword"> const</span>
<a name="l00405"></a>00405 <span class="keyword"></span>{
<a name="l00406"></a>00406     <span class="comment">// Make a string with filename and timestamp to start log file</span>
<a name="l00407"></a>00407     time_t rawtime;
<a name="l00408"></a>00408     <span class="keyword">struct </span>tm * timeinfo;
<a name="l00409"></a>00409     time ( &amp;rawtime );
<a name="l00410"></a>00410     timeinfo = localtime ( &amp;rawtime );
<a name="l00411"></a>00411     ofstream os(s.c_str());         <span class="comment">// replace data</span>
<a name="l00412"></a>00412     <span class="keywordflow">if</span> (os.is_open()) {
<a name="l00413"></a>00413         os &lt;&lt; <span class="stringliteral">&quot;File &quot;</span> &lt;&lt; s &lt;&lt; <span class="stringliteral">&quot; created &quot;</span> &lt;&lt;  asctime (timeinfo) &lt;&lt; std::endl;
<a name="l00414"></a>00414         os.close();
<a name="l00415"></a>00415     }
<a name="l00416"></a>00416     <span class="keywordflow">else</span> {
<a name="l00417"></a>00417         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error: could not open file named &quot;</span>
<a name="l00418"></a>00418             &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00419"></a>00419     }
<a name="l00420"></a>00420 }
<a name="l00421"></a>00421 
<a name="l00422"></a>00422 <span class="comment">// log changes in log of MCMC proposal probabilty compared to random (0,1)</span>
<a name="l00423"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aedb9ab3c2240403c63f2f5c1d0218350">00423</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aedb9ab3c2240403c63f2f5c1d0218350" title="Send a collection of changes in MCMC probabilities to log file.">AdaptiveHistogram::logMCMCDeltas</a>(std::string s, <span class="keywordtype">int</span> i,
<a name="l00424"></a>00424                             real deltaL, real deltaP, real deltaQ, real deltaPi,
<a name="l00425"></a>00425                             <span class="keywordtype">double</span> randChange)
<a name="l00426"></a>00426 {
<a name="l00427"></a>00427     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> vals;
<a name="l00428"></a>00428     vals.push_back(deltaL);
<a name="l00429"></a>00429     vals.push_back(deltaP);
<a name="l00430"></a>00430     vals.push_back(deltaQ);
<a name="l00431"></a>00431     vals.push_back(deltaPi+deltaQ);
<a name="l00432"></a>00432     vals.push_back(log(randChange));
<a name="l00433"></a>00433     vals.push_back(<a class="code" href="namespacesubpavings.shtml#ada0daf400b54e571b4f8d83bd32861c5" title="Work arround for c-xsc math library for exponentiation of reals.">tryExp</a>(deltaL));
<a name="l00434"></a>00434     vals.push_back(<a class="code" href="namespacesubpavings.shtml#ada0daf400b54e571b4f8d83bd32861c5" title="Work arround for c-xsc math library for exponentiation of reals.">tryExp</a>(deltaP));
<a name="l00435"></a>00435     vals.push_back(<a class="code" href="namespacesubpavings.shtml#ada0daf400b54e571b4f8d83bd32861c5" title="Work arround for c-xsc math library for exponentiation of reals.">tryExp</a>(deltaQ));
<a name="l00436"></a>00436     vals.push_back(<a class="code" href="namespacesubpavings.shtml#ada0daf400b54e571b4f8d83bd32861c5" title="Work arround for c-xsc math library for exponentiation of reals.">tryExp</a>(deltaPi+deltaQ));
<a name="l00437"></a>00437     vals.push_back(randChange);
<a name="l00438"></a>00438     <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, vals, i);
<a name="l00439"></a>00439 }
<a name="l00440"></a>00440 
<a name="l00441"></a>00441 
<a name="l00442"></a>00442 <span class="comment">// start a log file for MCMC</span>
<a name="l00443"></a>00443 <span class="comment">// s is the file name</span>
<a name="l00444"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adf589f52a0cd3e2371c288aa6bca7d37">00444</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adf589f52a0cd3e2371c288aa6bca7d37" title="Put header in a log file for MCMC.">AdaptiveHistogram::MCMCStartLogFile</a>(std::string s, <span class="keywordtype">int</span> i,
<a name="l00445"></a>00445                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MCMCProposal.shtml" title="Abstract class for MCMC proposal distributions.">MCMCProposal</a>&amp; proposal, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>&amp; logPrior)
<a name="l00446"></a>00446 {
<a name="l00447"></a>00447     <span class="comment">// Start log file with filename and timestamp</span>
<a name="l00448"></a>00448     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad847a4add7e72eac564daa44835dba5b" title="Opening line of a txt log file.">outputLogStart</a>(s);
<a name="l00449"></a>00449     <span class="comment">// put in the name of the proposal and prior</span>
<a name="l00450"></a>00450     std::string line = <span class="stringliteral">&quot;Prior is &quot;</span> + logPrior.<a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml#ace14dfa0a28927d063d091e13f9ead1c">getName</a>();
<a name="l00451"></a>00451     line += <span class="stringliteral">&quot;, proposal is &quot;</span> + proposal.<a class="code" href="classsubpavings_1_1MCMCProposal.shtml#a8b96ad3e975f60ad938d4aaf6d1009b3">getName</a>();
<a name="l00452"></a>00452     <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, line);
<a name="l00453"></a>00453     <span class="comment">// log the current state of the histogram</span>
<a name="l00454"></a>00454     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">outputLog</a>(s, i);
<a name="l00455"></a>00455     <span class="comment">// output AIC score information</span>
<a name="l00456"></a>00456     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a602b8b4081d3cae20308aa6644a83fa9" title="Add AIC EMP score to log file.">outputLogEMPAIC</a>(s);
<a name="l00457"></a>00457     <span class="comment">// output COPERR score information</span>
<a name="l00458"></a>00458     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad2360173a5963ecbca37e0a78ce98879" title="Add COPERR EMP score to log file.">outputLogEMPCOPERR</a>(s);
<a name="l00459"></a>00459     std::string headers = <span class="stringliteral">&quot;deltaL \t deltaP \t deltaQ \t deltaPi&amp;Q \t ln(rand)&quot;</span>;
<a name="l00460"></a>00460     headers += <span class="stringliteral">&quot;\t ratioL \t ratioP \t ratioQ \t ratioPi&amp;Q \t rand&quot;</span>;
<a name="l00461"></a>00461     <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, headers);
<a name="l00462"></a>00462 
<a name="l00463"></a>00463 }
<a name="l00464"></a>00464 
<a name="l00465"></a>00465 <span class="comment">// output the state of this histogram as an MCMC sample</span>
<a name="l00466"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4e7d34aea502906cb2230c0732d752b3">00466</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4e7d34aea502906cb2230c0732d752b3" title="Output the state of this histogram as an MCMC sample.">AdaptiveHistogram::outputMCMCStateSample</a>(<span class="keywordtype">int</span> i)
<a name="l00467"></a>00467 {
<a name="l00468"></a>00468     <span class="comment">// create a name for the file to output</span>
<a name="l00469"></a>00469     std::string sampleFileName = <span class="stringliteral">&quot;MCMCSample&quot;</span>;
<a name="l00470"></a>00470     <span class="comment">//convert i to a string</span>
<a name="l00471"></a>00471     std::ostringstream stm;
<a name="l00472"></a>00472     stm &lt;&lt; i;
<a name="l00473"></a>00473 
<a name="l00474"></a>00474     <span class="comment">// add the stringed i to the filename</span>
<a name="l00475"></a>00475     sampleFileName += stm.str();
<a name="l00476"></a>00476     sampleFileName += <span class="stringliteral">&quot;.txt&quot;</span>; <span class="comment">// and finish the filename</span>
<a name="l00477"></a>00477 
<a name="l00478"></a>00478     <span class="comment">// To realize a file output</span>
<a name="l00479"></a>00479     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(sampleFileName);
<a name="l00480"></a>00480 
<a name="l00481"></a>00481 }
<a name="l00482"></a>00482 
<a name="l00483"></a>00483 <span class="comment">// To add final state of histogram to log file</span>
<a name="l00484"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a10fc830a1dd32fe83aa3846a6fb2af35">00484</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a10fc830a1dd32fe83aa3846a6fb2af35" title="Capture the final state of this histogram after MCMC.">AdaptiveHistogram::MCMCLogFinalState</a>(std::string s, <span class="keywordtype">int</span> i)
<a name="l00485"></a>00485 {
<a name="l00486"></a>00486     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">outputLog</a>(s, i);
<a name="l00487"></a>00487     <span class="comment">// output AIC score information</span>
<a name="l00488"></a>00488     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a602b8b4081d3cae20308aa6644a83fa9" title="Add AIC EMP score to log file.">outputLogEMPAIC</a>(s);
<a name="l00489"></a>00489     <span class="comment">// output COPERR score information</span>
<a name="l00490"></a>00490     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad2360173a5963ecbca37e0a78ce98879" title="Add COPERR EMP score to log file.">outputLogEMPCOPERR</a>(s);
<a name="l00491"></a>00491     <span class="comment">// log the leaf levels line</span>
<a name="l00492"></a>00492     <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aca69edc461799f9d867d7eea6cb76f8e">getLeafLevelsString</a>());
<a name="l00493"></a>00493 
<a name="l00494"></a>00494 }
<a name="l00495"></a>00495 
<a name="l00496"></a>00496 
<a name="l00497"></a>00497 
<a name="l00498"></a>00498 <span class="comment">// Method to append COPERR EMP Score values to output log file</span>
<a name="l00499"></a>00499 <span class="comment">// Output goes to file named according to argument s</span>
<a name="l00500"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad2360173a5963ecbca37e0a78ce98879">00500</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad2360173a5963ecbca37e0a78ce98879" title="Add COPERR EMP score to log file.">AdaptiveHistogram::outputLogEMPCOPERR</a>(<span class="keyword">const</span> std::string&amp; s)<span class="keyword"> const</span>
<a name="l00501"></a>00501 <span class="keyword"></span>{
<a name="l00502"></a>00502     <span class="comment">// To add output of the AdaptiveHistogram object to file</span>
<a name="l00503"></a>00503     ofstream os(s.c_str(), ios::app);         <span class="comment">// append</span>
<a name="l00504"></a>00504     <span class="keywordflow">if</span> (os.is_open()) {
<a name="l00505"></a>00505 
<a name="l00506"></a>00506         real emp = rnd(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acd3c0bacd5148b82188cc129b3a59e96" title="A value for the unscaled EMP part of COPERR score.">scaledEMPSumCOPERR</a>);
<a name="l00507"></a>00507         os &lt;&lt; std::endl &lt;&lt; <span class="stringliteral">&quot;COPERR EMP is \t&quot;</span> &lt;&lt; emp;
<a name="l00508"></a>00508         os.close();
<a name="l00509"></a>00509     }
<a name="l00510"></a>00510     <span class="keywordflow">else</span> {
<a name="l00511"></a>00511         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error: could not open file named &quot;</span>
<a name="l00512"></a>00512             &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00513"></a>00513     }
<a name="l00514"></a>00514 }
<a name="l00515"></a>00515 
<a name="l00516"></a>00516 <span class="comment">// Method to append AIC EMP Score values to output log file</span>
<a name="l00517"></a>00517 <span class="comment">// Output goes to file named according to argument s</span>
<a name="l00518"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a602b8b4081d3cae20308aa6644a83fa9">00518</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a602b8b4081d3cae20308aa6644a83fa9" title="Add AIC EMP score to log file.">AdaptiveHistogram::outputLogEMPAIC</a>(<span class="keyword">const</span> std::string&amp; s)<span class="keyword"> const</span>
<a name="l00519"></a>00519 <span class="keyword"></span>{
<a name="l00520"></a>00520     <span class="comment">// To add output of the AdaptiveHistogram object to file</span>
<a name="l00521"></a>00521     ofstream os(s.c_str(), ios::app);         <span class="comment">// append</span>
<a name="l00522"></a>00522 
<a name="l00523"></a>00523     <span class="keywordflow">if</span> (os.is_open()) {
<a name="l00524"></a>00524         real emp = rnd(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad5748390a25f398475bb60575f0e9a89" title="A value for the unscaled EMP part of AIC score.">scaledEMPSumAIC</a>);
<a name="l00525"></a>00525         os &lt;&lt; std::endl &lt;&lt; <span class="stringliteral">&quot;AIC EMP is \t&quot;</span> &lt;&lt; emp;
<a name="l00526"></a>00526         os.close();
<a name="l00527"></a>00527     }
<a name="l00528"></a>00528     <span class="keywordflow">else</span> {
<a name="l00529"></a>00529         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error: could not open file named &quot;</span>
<a name="l00530"></a>00530             &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l00531"></a>00531     }
<a name="l00532"></a>00532 }
<a name="l00533"></a>00533 
<a name="l00534"></a>00534 <span class="comment">// Returns an iterator to node to propose for changes</span>
<a name="l00535"></a>00535 <span class="comment">// alters haveNode to true if a proposal node has been found (otherwise the</span>
<a name="l00536"></a>00536 <span class="comment">// iterator just points to the beginning of nodes and should not be used).</span>
<a name="l00537"></a>00537 <a class="code" href="namespacesubpavings.shtml#a984883a654b8d040041f722f8ead7dc2" title="Define type SPSnodeListItr as an iterator over SPSnodeList.">SPSnodeListItr</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae7f23176e9afea24c51c6a37cbcc4b0a" title="Finds the node to target for change in MCMC on SPSnode trees.">AdaptiveHistogram::proposeChangeMCMCState</a>
<a name="l00538"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae7f23176e9afea24c51c6a37cbcc4b0a">00538</a>                         (<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MCMCProposal.shtml" title="Abstract class for MCMC proposal distributions.">MCMCProposal</a>&amp; proposal, <a class="code" href="namespacesubpavings.shtml#ae7645253328c3b5fc137829039d971e3" title="Define type SPSnodeList as a list of pointers to SPSnodes.">SPSnodeList</a> &amp; nodes,
<a name="l00539"></a>00539                         <span class="keywordtype">size_t</span> numLeaves, <span class="keywordtype">size_t</span> numCherries,
<a name="l00540"></a>00540                         gsl_rng* rgsl, <span class="keywordtype">bool</span>&amp; haveNode)
<a name="l00541"></a>00541 {
<a name="l00542"></a>00542     <span class="comment">//cout &lt;&lt; &quot;---&gt; calling propose change&quot; &lt;&lt; endl;</span>
<a name="l00543"></a>00543     
<a name="l00544"></a>00544     <a class="code" href="namespacesubpavings.shtml#a984883a654b8d040041f722f8ead7dc2" title="Define type SPSnodeListItr as an iterator over SPSnodeList.">SPSnodeListItr</a> it;
<a name="l00545"></a>00545 
<a name="l00546"></a>00546     <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> probs;
<a name="l00547"></a>00547     <a class="code" href="namespacesubpavings.shtml#aca205cec2a67bee00aee408d0cc6f3a1" title="Define type RealVecItr as iterator over RealVec.">RealVecItr</a> pit;
<a name="l00548"></a>00548 
<a name="l00549"></a>00549     <span class="comment">// fillNodeProposalProbs returns the sum of the probabilities and</span>
<a name="l00550"></a>00550     <span class="comment">// also fills in probs</span>
<a name="l00551"></a>00551     <span class="comment">// the sum of the probabilities may be &lt; 1 if for instance we fix the</span>
<a name="l00552"></a>00552     <span class="comment">// probability of a split or merge in advance</span>
<a name="l00553"></a>00553     real psum = proposal.<a class="code" href="classsubpavings_1_1MCMCProposal.shtml#a9a41619f829a7fd3c080f3f9c0bed705">fillNodeProposalProbs</a>(numLeaves, numCherries, probs);
<a name="l00554"></a>00554 
<a name="l00555"></a>00555     <span class="comment">// check we got back the right number of probabilites</span>
<a name="l00556"></a>00556     <span class="keywordflow">if</span> (!nodes.empty() &amp;&amp; nodes.size() == probs.size()) {
<a name="l00557"></a>00557 
<a name="l00558"></a>00558         <span class="comment">// pick a node at random  by drawing a random number in [0,1)</span>
<a name="l00559"></a>00559         <span class="keywordtype">double</span> rand = gsl_rng_uniform(rgsl);
<a name="l00560"></a>00560        
<a name="l00561"></a>00561         <span class="keywordflow">if</span> ((numLeaves &gt; 0) &amp;&amp; (numCherries &gt; 0)) {
<a name="l00562"></a>00562             
<a name="l00563"></a>00563           <span class="comment">//  cout &lt;&lt; &quot;----&gt; cherry and leaf &quot; &lt;&lt; endl;</span>
<a name="l00564"></a>00564             
<a name="l00565"></a>00565             pit = probs.begin();
<a name="l00566"></a>00566             it = nodes.begin();
<a name="l00567"></a>00567             real sum = 0.0;
<a name="l00568"></a>00568 
<a name="l00569"></a>00569             <span class="keywordflow">for</span> (pit = probs.begin(); pit &lt; probs.end(); pit++) {
<a name="l00570"></a>00570 
<a name="l00571"></a>00571                     sum += *pit;
<a name="l00572"></a>00572                     <span class="keywordflow">if</span> (rand &lt; sum) {
<a name="l00573"></a>00573                         haveNode = <span class="keyword">true</span>;
<a name="l00574"></a>00574                         <span class="keywordflow">break</span>;
<a name="l00575"></a>00575                     }
<a name="l00576"></a>00576                     it++; <span class="comment">// using this to point to nodes relies on having got</span>
<a name="l00577"></a>00577                             <span class="comment">// the right number of probabilities to match nodes</span>
<a name="l00578"></a>00578              }
<a name="l00579"></a>00579         }
<a name="l00580"></a>00580         <span class="comment">// if we only have leaves (which should mean one leaf, no cherries)</span>
<a name="l00581"></a>00581         <span class="comment">// then we&#39;ll only pick a leaf if rand &lt; psum</span>
<a name="l00582"></a>00582         <span class="keywordflow">if</span> ((numLeaves &gt; 0) &amp;&amp; (numCherries == 0) &amp;&amp; (rand &lt; psum)) {
<a name="l00583"></a>00583             
<a name="l00584"></a>00584             
<a name="l00585"></a>00585             pit = probs.begin();
<a name="l00586"></a>00586             it = nodes.begin();
<a name="l00587"></a>00587             real sum = 0.0;
<a name="l00588"></a>00588 
<a name="l00589"></a>00589             <span class="keywordflow">for</span> (pit = probs.begin(); pit &lt; probs.end(); pit++) {
<a name="l00590"></a>00590                     
<a name="l00591"></a>00591                     sum += *pit;
<a name="l00592"></a>00592                     <span class="keywordflow">if</span> (rand &lt; sum) {
<a name="l00593"></a>00593                         haveNode = <span class="keyword">true</span>;
<a name="l00594"></a>00594                        <span class="keywordflow">break</span>;
<a name="l00595"></a>00595                     }
<a name="l00596"></a>00596                     it++; <span class="comment">// using this to point to nodes relies on having got</span>
<a name="l00597"></a>00597                             <span class="comment">// the right number of probabilities to match nodes</span>
<a name="l00598"></a>00598             }
<a name="l00599"></a>00599         }
<a name="l00600"></a>00600         <span class="comment">// if we only have cherries</span>
<a name="l00601"></a>00601         <span class="comment">// then we&#39;ll only pick a cherry if rand &gt;= 1-psum</span>
<a name="l00602"></a>00602         <span class="keywordflow">if</span> ((numLeaves == 0) &amp;&amp; (numCherries &gt; 0) &amp;&amp; (rand &gt;= 1.0-psum)) {
<a name="l00603"></a>00603             
<a name="l00604"></a>00604             pit = probs.begin();
<a name="l00605"></a>00605             it = nodes.begin();
<a name="l00606"></a>00606             real sum = 1.0-psum; <span class="comment">// note that sum starts at 1-psum</span>
<a name="l00607"></a>00607 
<a name="l00608"></a>00608             <span class="keywordflow">for</span> (pit = probs.begin(); pit &lt; probs.end(); pit++) {
<a name="l00609"></a>00609          
<a name="l00610"></a>00610                    
<a name="l00611"></a>00611                     sum += *pit;
<a name="l00612"></a>00612                     <span class="keywordflow">if</span> (rand &lt; sum) {
<a name="l00613"></a>00613                         haveNode = <span class="keyword">true</span>;
<a name="l00614"></a>00614                         <span class="keywordflow">break</span>;
<a name="l00615"></a>00615                     }
<a name="l00616"></a>00616                     it++; <span class="comment">// using this to point to nodes relies on having got</span>
<a name="l00617"></a>00617                             <span class="comment">// the right number of probabilities to match nodes</span>
<a name="l00618"></a>00618                    
<a name="l00619"></a>00619             }
<a name="l00620"></a>00620         }
<a name="l00621"></a>00621         <span class="comment">// it iterator should now point to the node we want to target</span>
<a name="l00622"></a>00622         <span class="comment">//else we&#39;ve not taken a node</span>
<a name="l00623"></a>00623 
<a name="l00624"></a>00624     }
<a name="l00625"></a>00625 
<a name="l00626"></a>00626     <span class="keywordflow">return</span> it;
<a name="l00627"></a>00627 }
<a name="l00628"></a>00628 
<a name="l00629"></a>00629 <span class="comment">// returns true/false decision on whether to split or not</span>
<a name="l00630"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a89aa9c37916fcac47cf273f512bca019">00630</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a89aa9c37916fcac47cf273f512bca019" title="Determines whether to split a node to get a new MCMC state.">AdaptiveHistogram::decisionMCMCSplit</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* target,
<a name="l00631"></a>00631                         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MCMCProposal.shtml" title="Abstract class for MCMC proposal distributions.">MCMCProposal</a>&amp; proposal,
<a name="l00632"></a>00632                         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>&amp; logPrior, gsl_rng* rgsl,
<a name="l00633"></a>00633                         <span class="keywordtype">size_t</span> numLeaves, <span class="keywordtype">size_t</span> numCherries, <span class="keywordtype">size_t</span> minPoints,
<a name="l00634"></a>00634                         <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keyword">const</span> std::string&amp; s, <span class="keywordtype">int</span> i)<span class="keyword"> const</span>
<a name="l00635"></a>00635 <span class="keyword"></span>{
<a name="l00636"></a>00636     <span class="keywordtype">bool</span> willSplit = <span class="keyword">false</span>;
<a name="l00637"></a>00637 
<a name="l00638"></a>00638   <span class="comment">//cout &lt;&lt; &quot;split or not split with minpoints = &quot; &lt;&lt; minPoints &lt;&lt; endl;</span>
<a name="l00639"></a>00639   
<a name="l00640"></a>00640     <span class="keywordflow">if</span> ((logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089ab2890a6eb7493029f41cf871d43877c3">TXT</a>) || (logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a37f328b2c4c91409b43fc74e7f299118">TXTANDGRAPH</a>))
<a name="l00641"></a>00641         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, <span class="stringliteral">&quot;grabbing leaf &quot;</span> + target-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>());
<a name="l00642"></a>00642 
<a name="l00643"></a>00643     <span class="comment">// change in contribution to log likelihood for this node on split</span>
<a name="l00644"></a>00644     real deltaL = rnd(target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab28c35298b721467721228a33a194433" title="Get change in log likelihood on split of this node.">getSplitChangeLogLik</a>());
<a name="l00645"></a>00645 
<a name="l00646"></a>00646     <span class="keywordtype">size_t</span> realNumLeaves = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>(); <span class="comment">// realNumLeaves is the number of </span>
<a name="l00647"></a>00647                             <span class="comment">//leaf nodes of the &#39;old&#39; state</span>
<a name="l00648"></a>00648 
<a name="l00649"></a>00649     <span class="comment">// use the prior distribution object to find the change in prior</span>
<a name="l00650"></a>00650     <span class="comment">// here realNumLeaves = #leaves in new state - 1 </span>
<a name="l00651"></a>00651     real deltaP = logPrior(realNumLeaves) - logPrior(realNumLeaves - 1);
<a name="l00652"></a>00652 
<a name="l00653"></a>00653     <span class="comment">// posterior is proportional to likelihood * prior</span>
<a name="l00654"></a>00654     real deltaPi = deltaL + deltaP;
<a name="l00655"></a>00655 
<a name="l00656"></a>00656     <span class="comment">// new numbers of leaves and cherries under proposal depends on minPoints</span>
<a name="l00657"></a>00657     <span class="comment">// because this determines whether the new leaf children will go into the</span>
<a name="l00658"></a>00658     <span class="comment">// nodes container</span>
<a name="l00659"></a>00659     <span class="keywordtype">size_t</span> newNumLeaves = numLeaves - 1; <span class="comment">// current number of leaves less this</span>
<a name="l00660"></a>00660     <span class="comment">// increase the number of new leaves for each new child that can</span>
<a name="l00661"></a>00661     <span class="comment">// go into the nodes container</span>
<a name="l00662"></a>00662 
<a name="l00663"></a>00663     <span class="comment">//childrensSpread will be a container of the number of points the children</span>
<a name="l00664"></a>00664     <span class="comment">// of each child of target might have, in order</span>
<a name="l00665"></a>00665     <span class="comment">// [0] = left child&#39;s left child count, [1] = left child&#39;s rght child count,</span>
<a name="l00666"></a>00666     <span class="comment">// [2] = rght child&#39;s left child count, [3] = rght child&#39;s rght child count,</span>
<a name="l00667"></a>00667     <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> childrensSpread;
<a name="l00668"></a>00668     childrensSpread =
<a name="l00669"></a>00669                 target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acbe47754c218f0c895a900330491cbb3" title="return a container of counts for prospective grandchildren.">getChildrensLeftAndRightCountsIfSplit</a>(childrensSpread);
<a name="l00670"></a>00670 
<a name="l00671"></a>00671     <span class="keywordflow">if</span> ((childrensSpread[2] &gt;= minPoints) &amp;&amp;
<a name="l00672"></a>00672     (childrensSpread[3] &gt;= minPoints)) {
<a name="l00673"></a>00673      <span class="comment">//   cout &lt;&lt; childrensSpread[2] &lt;&lt; &quot;\t&quot; &lt;&lt; childrensSpread[3] &lt;&lt; endl;        </span>
<a name="l00674"></a>00674         newNumLeaves++;
<a name="l00675"></a>00675     } <span class="comment">// this will add one to the leaf numbers if minPoints == 0</span>
<a name="l00676"></a>00676 
<a name="l00677"></a>00677     <span class="comment">// we will also be prepared to put the right child into the container if</span>
<a name="l00678"></a>00678     <span class="comment">// there is a minPoints &gt; 0 but one of its</span>
<a name="l00679"></a>00679     <span class="comment">// children would take all the points, the other getting none</span>
<a name="l00680"></a>00680     <span class="keywordtype">size_t</span> rightChildCount = childrensSpread[2] + childrensSpread[3];
<a name="l00681"></a>00681     <span class="keywordflow">if</span> ((minPoints &gt; 0) &amp;&amp; (rightChildCount &gt;= minPoints) &amp;&amp;
<a name="l00682"></a>00682         ((childrensSpread[2] == 0) || (childrensSpread[3] == 0))) {
<a name="l00683"></a>00683         <span class="comment">//cout &lt;&lt; rightChildCount &lt;&lt; endl;</span>
<a name="l00684"></a>00684         newNumLeaves++;
<a name="l00685"></a>00685     }
<a name="l00686"></a>00686 
<a name="l00687"></a>00687     <span class="keywordflow">if</span> ((childrensSpread[0] &gt;= minPoints) &amp;&amp;
<a name="l00688"></a>00688     (childrensSpread[1] &gt;= minPoints)) {
<a name="l00689"></a>00689      
<a name="l00690"></a>00690       <span class="comment">//cout &lt;&lt; childrensSpread[0] &lt;&lt; &quot;\t&quot; &lt;&lt; childrensSpread[1] &lt;&lt; endl;</span>
<a name="l00691"></a>00691         newNumLeaves++;
<a name="l00692"></a>00692     }  <span class="comment">// this will add one to the leaf numbers if minPoints == 0</span>
<a name="l00693"></a>00693 
<a name="l00694"></a>00694     <span class="comment">// we would also be prepared to put the left child into the container if</span>
<a name="l00695"></a>00695     <span class="comment">// there is a minPoints &gt; 0 but one of its</span>
<a name="l00696"></a>00696     <span class="comment">// children would take all the points, the other getting none</span>
<a name="l00697"></a>00697     <span class="keywordtype">size_t</span> leftChildCount = childrensSpread[0] + childrensSpread[1];
<a name="l00698"></a>00698     <span class="keywordflow">if</span> ((minPoints &gt; 0) &amp;&amp; (leftChildCount &gt;= minPoints) &amp;&amp;
<a name="l00699"></a>00699         ((childrensSpread[0] == 0) || (childrensSpread[1] == 0))) {
<a name="l00700"></a>00700         newNumLeaves++;
<a name="l00701"></a>00701     }
<a name="l00702"></a>00702 
<a name="l00703"></a>00703     <span class="keywordtype">size_t</span> newNumCherries = numCherries;
<a name="l00704"></a>00704     <span class="keywordflow">if</span> (!(target-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0b8af2e1f907279d8a153129aa37aa8e" title="Check if this has a leaf sibling.">hasLeafSibling</a>())) newNumCherries = numCherries + 1;
<a name="l00705"></a>00705 
<a name="l00706"></a>00706     <span class="comment">// Using proposal distribution object</span>
<a name="l00707"></a>00707     real deltaQ = proposal.<a class="code" href="classsubpavings_1_1MCMCProposal.shtml#acd6dda5380192dfc3bd38a28925dd1ce">getLogQRatioSplitProposal</a>(numLeaves, numCherries,
<a name="l00708"></a>00708                                                 newNumLeaves, newNumCherries);
<a name="l00709"></a>00709     <span class="comment">//get another random number</span>
<a name="l00710"></a>00710     <span class="keywordtype">double</span> randChange = gsl_rng_uniform(rgsl);
<a name="l00711"></a>00711 <span class="comment">//  cout &lt;&lt; log(randChange) &lt;&lt; &quot;\t&quot; &lt;&lt; (deltaPi + deltaQ) &lt;&lt; endl;</span>
<a name="l00712"></a>00712 
<a name="l00713"></a>00713     <span class="keywordflow">if</span> (log(randChange) &lt; deltaPi + deltaQ) { willSplit = <span class="keyword">true</span>; }
<a name="l00714"></a>00714 
<a name="l00715"></a>00715     <span class="keywordflow">if</span> ((logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089ab2890a6eb7493029f41cf871d43877c3">TXT</a>) || (logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a37f328b2c4c91409b43fc74e7f299118">TXTANDGRAPH</a>)) { <span class="comment">// log these values</span>
<a name="l00716"></a>00716         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aedb9ab3c2240403c63f2f5c1d0218350" title="Send a collection of changes in MCMC probabilities to log file.">logMCMCDeltas</a>(s, i, deltaL, deltaP, deltaQ, deltaPi, randChange);
<a name="l00717"></a>00717         <span class="keywordflow">if</span> (willSplit) <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, <span class="stringliteral">&quot;Splitting&quot;</span>);
<a name="l00718"></a>00718         <span class="keywordflow">else</span> <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, <span class="stringliteral">&quot;Not splitting&quot;</span>);
<a name="l00719"></a>00719     }
<a name="l00720"></a>00720 
<a name="l00721"></a>00721     <span class="keywordflow">return</span> willSplit;
<a name="l00722"></a>00722 }
<a name="l00723"></a>00723 
<a name="l00724"></a>00724 <span class="comment">// returns true false decision on whether to merge or not</span>
<a name="l00725"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae2df56ec733843dffcc6af094637758d">00725</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae2df56ec733843dffcc6af094637758d" title="Determines whether to merge a node to get a new MCMC state.">AdaptiveHistogram::decisionMCMCMerge</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* target,
<a name="l00726"></a>00726                         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1MCMCProposal.shtml" title="Abstract class for MCMC proposal distributions.">MCMCProposal</a>&amp; proposal,
<a name="l00727"></a>00727                         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>&amp; logPrior, gsl_rng* rgsl,
<a name="l00728"></a>00728                         <span class="keywordtype">size_t</span> numLeaves, <span class="keywordtype">size_t</span> numCherries, <span class="keywordtype">size_t</span> minPoints,
<a name="l00729"></a>00729                         <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keyword">const</span> std::string&amp; s, <span class="keywordtype">int</span> i)<span class="keyword"> const</span>
<a name="l00730"></a>00730 <span class="keyword"></span>{
<a name="l00731"></a>00731     <span class="keywordtype">bool</span> willMerge = <span class="keyword">false</span>;
<a name="l00732"></a>00732 
<a name="l00733"></a>00733   <span class="comment">//cout &lt;&lt; &quot;merge or not merge?&quot; &lt;&lt; endl;</span>
<a name="l00734"></a>00734   <span class="comment">//cout &lt;&lt; target-&gt;getLeftChild()-&gt;getCounter() &lt;&lt; &quot;\t&quot; &lt;&lt; </span>
<a name="l00735"></a>00735   <span class="comment">//target-&gt;getRightChild()-&gt;getCounter() &lt;&lt; endl;</span>
<a name="l00736"></a>00736 
<a name="l00737"></a>00737     <span class="comment">// cherry so we are merging</span>
<a name="l00738"></a>00738     <span class="keywordflow">if</span> ((logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089ab2890a6eb7493029f41cf871d43877c3">TXT</a>) || (logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a37f328b2c4c91409b43fc74e7f299118">TXTANDGRAPH</a>))
<a name="l00739"></a>00739         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s,<span class="stringliteral">&quot;grabbing cherry &quot;</span> + target-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>());
<a name="l00740"></a>00740 
<a name="l00741"></a>00741     <span class="comment">// change in log likelihood on merge is getMergeChangeLogLik</span>
<a name="l00742"></a>00742     <span class="comment">// for this node</span>
<a name="l00743"></a>00743     real deltaL = rnd(target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a9fd3a2a06ee14b5d5c307a2c7d795cef" title="Get change in log likelihood on merge of this&#39; leaf chidren.">getMergeChangeLogLik</a>());
<a name="l00744"></a>00744 
<a name="l00745"></a>00745     <span class="keywordtype">size_t</span> realNumLeaves = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>();
<a name="l00746"></a>00746 
<a name="l00747"></a>00747     real deltaP = logPrior(realNumLeaves - 2) - logPrior(realNumLeaves - 1);
<a name="l00748"></a>00748 
<a name="l00749"></a>00749     <span class="comment">// posterior is proportional to likelihood * prior</span>
<a name="l00750"></a>00750     real deltaPi = deltaL + deltaP;
<a name="l00751"></a>00751 
<a name="l00752"></a>00752     <span class="comment">// calculate the number of leaves and cherries after proposed merge</span>
<a name="l00753"></a>00753     <span class="comment">// we have to take into account minPoints and the effect that this will have</span>
<a name="l00754"></a>00754     <span class="comment">// had on whether the target&#39;s children are in the nodes container</span>
<a name="l00755"></a>00755     <span class="keywordtype">size_t</span> newNumLeaves = numLeaves + 1; <span class="comment">// current number of leaves plus target</span>
<a name="l00756"></a>00756     <span class="comment">// but decrement newNumLeaves for each of the target&#39;s children that comes</span>
<a name="l00757"></a>00757     <span class="comment">// out of the container</span>
<a name="l00758"></a>00758     <span class="keywordflow">if</span> (target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1b3356a466432a282290af76df3adb08" title="Smallest number of points in either child if this was split.">getMinChildCountIfSplit</a>() &gt;= minPoints) {
<a name="l00759"></a>00759         newNumLeaves--;
<a name="l00760"></a>00760     }
<a name="l00761"></a>00761     <span class="comment">// the left child would also have been in the container if it had enough</span>
<a name="l00762"></a>00762     <span class="comment">// points and all of them went to one child, the other getting nothing</span>
<a name="l00763"></a>00763     <span class="keywordflow">if</span> ((minPoints &gt; 0)
<a name="l00764"></a>00764         &amp;&amp; (target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() &gt;= minPoints)
<a name="l00765"></a>00765         &amp;&amp; (target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1b3356a466432a282290af76df3adb08" title="Smallest number of points in either child if this was split.">getMinChildCountIfSplit</a>() == 0)) {
<a name="l00766"></a>00766             newNumLeaves--;
<a name="l00767"></a>00767     }
<a name="l00768"></a>00768 
<a name="l00769"></a>00769     <span class="keywordflow">if</span> (target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1b3356a466432a282290af76df3adb08" title="Smallest number of points in either child if this was split.">getMinChildCountIfSplit</a>() &gt;= minPoints) {
<a name="l00770"></a>00770         newNumLeaves--;
<a name="l00771"></a>00771     }
<a name="l00772"></a>00772     <span class="comment">// the right child would also have been in the container if it had enough</span>
<a name="l00773"></a>00773     <span class="comment">// points and all of them went to one child, the other getting nothing</span>
<a name="l00774"></a>00774     <span class="keywordflow">if</span> ((minPoints &gt; 0)
<a name="l00775"></a>00775         &amp;&amp; (target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() &gt;= minPoints)
<a name="l00776"></a>00776         &amp;&amp; (target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1b3356a466432a282290af76df3adb08" title="Smallest number of points in either child if this was split.">getMinChildCountIfSplit</a>() == 0)) {
<a name="l00777"></a>00777             newNumLeaves--;
<a name="l00778"></a>00778     }
<a name="l00779"></a>00779 
<a name="l00780"></a>00780     <span class="keywordtype">size_t</span> newNumCherries = numCherries;
<a name="l00781"></a>00781     <span class="keywordflow">if</span> (!(target-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0b8af2e1f907279d8a153129aa37aa8e" title="Check if this has a leaf sibling.">hasLeafSibling</a>())) { 
<a name="l00782"></a>00782      
<a name="l00783"></a>00783      <span class="comment">//cout &lt;&lt; &quot;only remove cherry if it doesn&#39;t have a sibling leaf node&quot; &lt;&lt; endl;</span>
<a name="l00784"></a>00784      newNumCherries = numCherries - 1; }
<a name="l00785"></a>00785 
<a name="l00786"></a>00786     <span class="comment">// Using proposal distribution object</span>
<a name="l00787"></a>00787     real deltaQ = proposal.<a class="code" href="classsubpavings_1_1MCMCProposal.shtml#ae39f9b3d8afbc8be9a10d6947f59798e">getLogQRatioMergeProposal</a>(numLeaves, numCherries,
<a name="l00788"></a>00788                                                 newNumLeaves, newNumCherries);
<a name="l00789"></a>00789     <span class="comment">//get another random number</span>
<a name="l00790"></a>00790     <span class="keywordtype">double</span> randChange = gsl_rng_uniform(rgsl);
<a name="l00791"></a>00791     <span class="keywordflow">if</span> (log(randChange) &lt; deltaPi + deltaQ) willMerge = <span class="keyword">true</span>;
<a name="l00792"></a>00792 
<a name="l00793"></a>00793     <span class="keywordflow">if</span> ((logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089ab2890a6eb7493029f41cf871d43877c3">TXT</a>) || (logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a37f328b2c4c91409b43fc74e7f299118">TXTANDGRAPH</a>)) {
<a name="l00794"></a>00794         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aedb9ab3c2240403c63f2f5c1d0218350" title="Send a collection of changes in MCMC probabilities to log file.">logMCMCDeltas</a>(s, i, deltaL, deltaP, deltaQ, deltaPi, randChange);
<a name="l00795"></a>00795         <span class="keywordflow">if</span> (willMerge) <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, <span class="stringliteral">&quot;Merging&quot;</span>);
<a name="l00796"></a>00796         <span class="keywordflow">else</span> <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, <span class="stringliteral">&quot;Not merging&quot;</span>);
<a name="l00797"></a>00797     }
<a name="l00798"></a>00798 
<a name="l00799"></a>00799     <span class="keywordflow">return</span> willMerge;
<a name="l00800"></a>00800 }
<a name="l00801"></a>00801 
<a name="l00802"></a>00802 
<a name="l00803"></a>00803 <span class="comment">// change histogram state by splitting the target leaf node</span>
<a name="l00804"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1544712de53718450f5f13fee5738a92">00804</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1544712de53718450f5f13fee5738a92" title="Changes the state of this Adaptive Histogram by splitting a node.">AdaptiveHistogram::changeStateForSplit</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* target,
<a name="l00805"></a>00805                         <a class="code" href="namespacesubpavings.shtml#ae7645253328c3b5fc137829039d971e3" title="Define type SPSnodeList as a list of pointers to SPSnodes.">SPSnodeList</a>&amp; nodes, <span class="keywordtype">size_t</span>&amp; numLeaves,
<a name="l00806"></a>00806                         <span class="keywordtype">size_t</span>&amp; numCherries, <span class="keywordtype">size_t</span> minPoints)
<a name="l00807"></a>00807 {
<a name="l00808"></a>00808     <span class="keywordtype">bool</span> success = <span class="keyword">true</span>;
<a name="l00809"></a>00809 
<a name="l00810"></a>00810     <span class="keywordtype">size_t</span> points = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>(); <span class="comment">// need to recalculate COPERR EMP</span>
<a name="l00811"></a>00811 
<a name="l00812"></a>00812     <span class="comment">// accumulate the changes in scaled EMP sums that will result</span>
<a name="l00813"></a>00813     <span class="comment">// from this expansion</span>
<a name="l00814"></a>00814    <span class="comment">// updateScaledEMPSumCOPERR(target-&gt;getSplitChangeEMPCOPERR(points));</span>
<a name="l00815"></a>00815    <span class="comment">// updateScaledEMPSumAIC(target-&gt;getSplitChangeEMPAIC());</span>
<a name="l00816"></a>00816 
<a name="l00817"></a>00817     <span class="comment">// split the target and divvie up its data</span>
<a name="l00818"></a>00818     <a class="code" href="namespacesubpavings.shtml#a6bce1a57598248196dd6b3e6010e724a" title="Expand a leaf node to have two child nodes.">Expand</a>(target);
<a name="l00819"></a>00819     numLeaves--;
<a name="l00820"></a>00820 
<a name="l00821"></a>00821     <span class="comment">// add the new child names to the creation string</span>
<a name="l00822"></a>00822     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a> += target-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l00823"></a>00823 
<a name="l00824"></a>00824     <span class="comment">// but only put the children into the container if they can be split, which</span>
<a name="l00825"></a>00825     <span class="comment">// means if their children would have more than minPoints points in them</span>
<a name="l00826"></a>00826     <span class="comment">// or if minPoints &gt; 0 and right child has enough points and splitting it would</span>
<a name="l00827"></a>00827     <span class="comment">// give all its points to one child, none to the other</span>
<a name="l00828"></a>00828     <span class="keywordflow">if</span> ((target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1b3356a466432a282290af76df3adb08" title="Smallest number of points in either child if this was split.">getMinChildCountIfSplit</a>() &gt;= minPoints)
<a name="l00829"></a>00829         ||
<a name="l00830"></a>00830         ((minPoints &gt; 0) &amp;&amp; (target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() &gt;= minPoints)
<a name="l00831"></a>00831         &amp;&amp; (target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1b3356a466432a282290af76df3adb08" title="Smallest number of points in either child if this was split.">getMinChildCountIfSplit</a>() == 0))
<a name="l00832"></a>00832         ) {
<a name="l00833"></a>00833 
<a name="l00834"></a>00834         <span class="comment">// insert the new children ptrs into the list at the beginning</span>
<a name="l00835"></a>00835         nodes.push_front(target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l00836"></a>00836         numLeaves++;
<a name="l00837"></a>00837     }
<a name="l00838"></a>00838 
<a name="l00839"></a>00839     <span class="keywordflow">if</span> ((target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1b3356a466432a282290af76df3adb08" title="Smallest number of points in either child if this was split.">getMinChildCountIfSplit</a>() &gt;= minPoints)
<a name="l00840"></a>00840         ||
<a name="l00841"></a>00841         ((minPoints &gt; 0) &amp;&amp; (target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() &gt;= minPoints)
<a name="l00842"></a>00842         &amp;&amp; (target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1b3356a466432a282290af76df3adb08" title="Smallest number of points in either child if this was split.">getMinChildCountIfSplit</a>() == 0))
<a name="l00843"></a>00843         ) {
<a name="l00844"></a>00844         <span class="comment">// insert the new children ptrs into the list at the beginning</span>
<a name="l00845"></a>00845         nodes.push_front(target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>());<span class="comment">// left goes first</span>
<a name="l00846"></a>00846         numLeaves++;
<a name="l00847"></a>00847     }
<a name="l00848"></a>00848 
<a name="l00849"></a>00849     <span class="comment">// if sibling was a leaf, take parent out of cherries</span>
<a name="l00850"></a>00850     <span class="keywordflow">if</span>(target-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0b8af2e1f907279d8a153129aa37aa8e" title="Check if this has a leaf sibling.">hasLeafSibling</a>()) {
<a name="l00851"></a>00851 
<a name="l00852"></a>00852         <span class="comment">// how to find parent? - search the cherries?</span>
<a name="l00853"></a>00853         <span class="keywordtype">bool</span> foundParent = <span class="keyword">false</span>;
<a name="l00854"></a>00854         std::string nodeParent = target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a88c1d25d8e0b9738f5199cc4435c08b4" title="Accessor for the parent of a node.">getParent</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l00855"></a>00855 
<a name="l00856"></a>00856         <a class="code" href="namespacesubpavings.shtml#a984883a654b8d040041f722f8ead7dc2" title="Define type SPSnodeListItr as an iterator over SPSnodeList.">SPSnodeListItr</a> git = nodes.begin();
<a name="l00857"></a>00857         advance(git, numLeaves); <span class="comment">// advance to the cherries</span>
<a name="l00858"></a>00858         <span class="comment">// break out of loop if we find parent</span>
<a name="l00859"></a>00859         <a class="code" href="namespacesubpavings.shtml#a984883a654b8d040041f722f8ead7dc2" title="Define type SPSnodeListItr as an iterator over SPSnodeList.">SPSnodeListItr</a> it;
<a name="l00860"></a>00860         <span class="keywordflow">for</span> (it = git ; it != nodes.end(); it++ ) {
<a name="l00861"></a>00861             <span class="keywordflow">if</span> ((*it)-&gt;getNodeName() == nodeParent) {
<a name="l00862"></a>00862                 nodes.erase(it);
<a name="l00863"></a>00863                 numCherries--;
<a name="l00864"></a>00864                 foundParent = <span class="keyword">true</span>;
<a name="l00865"></a>00865                 <span class="keywordflow">break</span>;
<a name="l00866"></a>00866             }
<a name="l00867"></a>00867         }
<a name="l00868"></a>00868         success = foundParent;
<a name="l00869"></a>00869 
<a name="l00870"></a>00870     }
<a name="l00871"></a>00871 
<a name="l00872"></a>00872     <span class="comment">// put this node ptr into the cherries, ie at end of list</span>
<a name="l00873"></a>00873     nodes.push_back(target);
<a name="l00874"></a>00874 
<a name="l00875"></a>00875     numCherries++;
<a name="l00876"></a>00876 
<a name="l00877"></a>00877     <span class="keywordflow">return</span> success;
<a name="l00878"></a>00878 }
<a name="l00879"></a>00879 
<a name="l00880"></a>00880 <span class="comment">// change histogram state by merging the target cherry node</span>
<a name="l00881"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4ff31f6b6d944c0c1e71ae4e7586cc2a">00881</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4ff31f6b6d944c0c1e71ae4e7586cc2a" title="Changes the state of this Adaptive Histogram by merging cherry.">AdaptiveHistogram::changeStateForMerge</a>(<a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* target,
<a name="l00882"></a>00882                         <a class="code" href="namespacesubpavings.shtml#ae7645253328c3b5fc137829039d971e3" title="Define type SPSnodeList as a list of pointers to SPSnodes.">SPSnodeList</a>&amp; nodes, <span class="keywordtype">size_t</span>&amp; numLeaves,
<a name="l00883"></a>00883                         <span class="keywordtype">size_t</span>&amp; numCherries, <span class="keywordtype">size_t</span> minPoints)
<a name="l00884"></a>00884 {
<a name="l00885"></a>00885     <span class="keywordtype">bool</span> success = <span class="keyword">true</span>;
<a name="l00886"></a>00886 
<a name="l00887"></a>00887     <span class="keywordtype">size_t</span> points = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>(); <span class="comment">// need to recalculate COPERR EMP</span>
<a name="l00888"></a>00888 
<a name="l00889"></a>00889     <span class="comment">// accumulate the changes in scaled EMP sums that will result</span>
<a name="l00890"></a>00890     <span class="comment">// from this expansion</span>
<a name="l00891"></a>00891     <span class="comment">//updateScaledEMPSumCOPERR(target-&gt;getMergeChangeEMPCOPERR(points));</span>
<a name="l00892"></a>00892     <span class="comment">//updateScaledEMPSumAIC(target-&gt;getMergeChangeEMPAIC());</span>
<a name="l00893"></a>00893 
<a name="l00894"></a>00894     <span class="comment">// subtract the child names from the creation string</span>
<a name="l00895"></a>00895     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a> += (<span class="stringliteral">&quot; -(&quot;</span> + target-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>() + <span class="stringliteral">&quot;)&quot;</span>);
<a name="l00896"></a>00896 
<a name="l00897"></a>00897     <span class="comment">// take the children out of the list of leaves if they are there</span>
<a name="l00898"></a>00898     <span class="comment">// each child will only be in the list of leaves if splitting that child</span>
<a name="l00899"></a>00899     <span class="comment">// would give children with at least the minimum number of data points</span>
<a name="l00900"></a>00900     <span class="comment">// associated with them, or if the child itself has enough points but</span>
<a name="l00901"></a>00901     <span class="comment">// and splitting would give one child with 0 points were minPoints &gt; 0</span>
<a name="l00902"></a>00902     std::string lcName = target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l00903"></a>00903     std::string rcName = target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l00904"></a>00904     <span class="keywordtype">int</span> lcPos = 0;
<a name="l00905"></a>00905     <span class="keywordtype">bool</span> foundLeft = <span class="keyword">false</span>;
<a name="l00906"></a>00906     <span class="keywordtype">bool</span> foundRight = <span class="keyword">false</span>;
<a name="l00907"></a>00907 
<a name="l00908"></a>00908     <a class="code" href="namespacesubpavings.shtml#a984883a654b8d040041f722f8ead7dc2" title="Define type SPSnodeListItr as an iterator over SPSnodeList.">SPSnodeListItr</a> it;
<a name="l00909"></a>00909 
<a name="l00910"></a>00910     <span class="keywordflow">if</span> ((target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1b3356a466432a282290af76df3adb08" title="Smallest number of points in either child if this was split.">getMinChildCountIfSplit</a>() &gt;= minPoints)
<a name="l00911"></a>00911         || (minPoints &gt; 0 &amp;&amp; target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() &gt;= minPoints
<a name="l00912"></a>00912             &amp;&amp; target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1b3356a466432a282290af76df3adb08" title="Smallest number of points in either child if this was split.">getMinChildCountIfSplit</a>() == 0)) {
<a name="l00913"></a>00913         std::string lcName = target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l00914"></a>00914         <a class="code" href="namespacesubpavings.shtml#a984883a654b8d040041f722f8ead7dc2" title="Define type SPSnodeListItr as an iterator over SPSnodeList.">SPSnodeListItr</a> it;
<a name="l00915"></a>00915         <span class="comment">// break out of loop if we find left child or get to cherries</span>
<a name="l00916"></a>00916         <span class="keywordflow">for</span> (it=nodes.begin() ; it != nodes.end(); it++ ) {
<a name="l00917"></a>00917 
<a name="l00918"></a>00918             <span class="keywordflow">if</span> ((*it)-&gt;isSubLeaf()) <span class="keywordflow">break</span>;
<a name="l00919"></a>00919             <span class="keywordflow">if</span> ((*it)-&gt;getNodeName() == lcName) {
<a name="l00920"></a>00920                 nodes.erase(it); <span class="comment">// can&#39;t keep using iterator now</span>
<a name="l00921"></a>00921                 numLeaves--;
<a name="l00922"></a>00922                 foundLeft = <span class="keyword">true</span>;
<a name="l00923"></a>00923                 <span class="keywordflow">break</span>;
<a name="l00924"></a>00924             }
<a name="l00925"></a>00925             lcPos++;  <span class="comment">// gives position at which lc was found</span>
<a name="l00926"></a>00926         }
<a name="l00927"></a>00927     }
<a name="l00928"></a>00928     <span class="keywordflow">else</span> foundLeft = <span class="keyword">true</span>;
<a name="l00929"></a>00929 
<a name="l00930"></a>00930     <span class="comment">// now try to find right child - could be immediately after left</span>
<a name="l00931"></a>00931     <span class="keywordflow">if</span> ((target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1b3356a466432a282290af76df3adb08" title="Smallest number of points in either child if this was split.">getMinChildCountIfSplit</a>() &gt;= minPoints)
<a name="l00932"></a>00932         || (minPoints &gt; 0 &amp;&amp; target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() &gt;= minPoints
<a name="l00933"></a>00933             &amp;&amp; target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1b3356a466432a282290af76df3adb08" title="Smallest number of points in either child if this was split.">getMinChildCountIfSplit</a>() == 0)) {
<a name="l00934"></a>00934 
<a name="l00935"></a>00935         <span class="keywordflow">if</span> (foundLeft) {
<a name="l00936"></a>00936             <a class="code" href="namespacesubpavings.shtml#a984883a654b8d040041f722f8ead7dc2" title="Define type SPSnodeListItr as an iterator over SPSnodeList.">SPSnodeListItr</a> git = nodes.begin();
<a name="l00937"></a>00937             advance(git, lcPos);
<a name="l00938"></a>00938             <span class="comment">// break out of loop if we find right child or get to cherries</span>
<a name="l00939"></a>00939             <span class="keywordflow">for</span> (it=git ; it != nodes.end(); it++ ) {
<a name="l00940"></a>00940 
<a name="l00941"></a>00941                 <span class="keywordflow">if</span> ((*it)-&gt;isSubLeaf()) <span class="keywordflow">break</span>;
<a name="l00942"></a>00942                 <span class="keywordflow">if</span> ((*it)-&gt;getNodeName() == rcName) {
<a name="l00943"></a>00943                     nodes.erase(it);
<a name="l00944"></a>00944                     numLeaves--;
<a name="l00945"></a>00945                     foundRight = <span class="keyword">true</span>;
<a name="l00946"></a>00946                     <span class="keywordflow">break</span>;
<a name="l00947"></a>00947                 }
<a name="l00948"></a>00948             } <span class="comment">// just in case right child was before left</span>
<a name="l00949"></a>00949             <span class="keywordflow">if</span> (!foundRight) {
<a name="l00950"></a>00950                 <span class="comment">// break out of loop if we find right child</span>
<a name="l00951"></a>00951                 <span class="comment">// or get to cherries</span>
<a name="l00952"></a>00952                 <span class="keywordflow">for</span> (it=nodes.begin() ; it != nodes.end(); it++ ) {
<a name="l00953"></a>00953                     <span class="keywordflow">if</span> ((*it)-&gt;isSubLeaf()) <span class="keywordflow">break</span>;
<a name="l00954"></a>00954                     <span class="keywordflow">if</span> ((*it)-&gt;getNodeName() == rcName) {
<a name="l00955"></a>00955                         nodes.erase(it);
<a name="l00956"></a>00956                         numLeaves--;
<a name="l00957"></a>00957                         foundRight = <span class="keyword">true</span>;
<a name="l00958"></a>00958                         <span class="keywordflow">break</span>;
<a name="l00959"></a>00959                     }
<a name="l00960"></a>00960                 }
<a name="l00961"></a>00961             }
<a name="l00962"></a>00962         }
<a name="l00963"></a>00963     }
<a name="l00964"></a>00964     <span class="keywordflow">else</span> foundRight = <span class="keyword">true</span>;
<a name="l00965"></a>00965 
<a name="l00966"></a>00966     success = foundRight;
<a name="l00967"></a>00967 
<a name="l00968"></a>00968     <span class="comment">// merge the target</span>
<a name="l00969"></a>00969     target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a68cc1a1722c627a99dcefc3491847fb2" title="Reabsorbs both children of the node.">nodeReabsorbChildren</a>();
<a name="l00970"></a>00970     numCherries--;
<a name="l00971"></a>00971 
<a name="l00972"></a>00972     <span class="comment">// insert the new leaf ptr into the list at the beginning</span>
<a name="l00973"></a>00973     nodes.push_front(target);
<a name="l00974"></a>00974     numLeaves++;
<a name="l00975"></a>00975 
<a name="l00976"></a>00976     <span class="comment">// if sibling was a leaf, add parent to cherries, at end</span>
<a name="l00977"></a>00977     <span class="keywordflow">if</span>(target-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0b8af2e1f907279d8a153129aa37aa8e" title="Check if this has a leaf sibling.">hasLeafSibling</a>()) { <span class="comment">// returns false if no parent</span>
<a name="l00978"></a>00978      
<a name="l00979"></a>00979         nodes.push_back(target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a88c1d25d8e0b9738f5199cc4435c08b4" title="Accessor for the parent of a node.">getParent</a>());
<a name="l00980"></a>00980         numCherries++;
<a name="l00981"></a>00981     }
<a name="l00982"></a>00982 
<a name="l00983"></a>00983     <span class="keywordflow">return</span> success;
<a name="l00984"></a>00984 }
<a name="l00985"></a>00985 
<a name="l00986"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a">00986</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">AdaptiveHistogram::checkNodeCountForSplit</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a> * <span class="keyword">const</span> spn,
<a name="l00987"></a>00987                 <span class="keywordtype">bool</span> volChecking, <span class="keywordtype">double</span> minVol, <span class="keywordtype">size_t</span> minChildPoints)
<a name="l00988"></a>00988 {
<a name="l00989"></a>00989     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l00990"></a>00990   
<a name="l00991"></a>00991   <span class="keywordtype">size_t</span> minChildCount = 0;
<a name="l00992"></a>00992   <span class="keywordtype">size_t</span> counter = spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l00993"></a>00993   <span class="keywordflow">if</span> (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) minChildCount = spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a1b3356a466432a282290af76df3adb08" title="Smallest number of points in either child if this was split.">getMinChildCountIfSplit</a>();
<a name="l00994"></a>00994   <span class="keywordflow">else</span> {
<a name="l00995"></a>00995     <span class="keywordtype">size_t</span> lcCount = spn-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l00996"></a>00996     <span class="keywordtype">size_t</span> rcCount = counter - lcCount;
<a name="l00997"></a>00997     minChildCount = (lcCount &lt; rcCount ? lcCount : rcCount);
<a name="l00998"></a>00998   }
<a name="l00999"></a>00999   
<a name="l01000"></a>01000   <span class="keywordflow">if</span> ((!volChecking || (volChecking &amp;&amp; (spn-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#ab8a45c1ea71b3c1e90f0fd9bd23562eb" title="Return the volume of the box as a double.">nodeVolume</a>() &gt;= minVol)))
<a name="l01001"></a>01001         &amp;&amp; ((minChildPoints == 0)
<a name="l01002"></a>01002             || (minChildPoints &gt; 0
<a name="l01003"></a>01003                 &amp;&amp;
<a name="l01004"></a>01004                 ((counter &gt;= minChildPoints) &amp;&amp;
<a name="l01005"></a>01005                     ((minChildCount == 0)
<a name="l01006"></a>01006                     ||
<a name="l01007"></a>01007                     (minChildCount &gt;= minChildPoints))
<a name="l01008"></a>01008                 ))
<a name="l01009"></a>01009             )
<a name="l01010"></a>01010         ) { retValue = <span class="keyword">true</span>; }
<a name="l01011"></a>01011 
<a name="l01012"></a>01012     <span class="keywordflow">return</span> retValue;
<a name="l01013"></a>01013 }
<a name="l01014"></a>01014 
<a name="l01015"></a>01015 <span class="comment">// ----------- histogram public methods</span>
<a name="l01016"></a>01016 
<a name="l01017"></a>01017 <span class="comment">// default constructor</span>
<a name="l01018"></a>01018 <span class="comment">// holdAllStats defaults to false.</span>
<a name="l01019"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa863ff24ef4af6b084f515f702bbe09e">01019</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa863ff24ef4af6b084f515f702bbe09e" title="Default constructor.">AdaptiveHistogram::AdaptiveHistogram</a>()
<a name="l01020"></a>01020         : holdAllStats(false), creationString(<span class="stringliteral">&quot;&quot;</span>),
<a name="l01021"></a>01021           scaledEMPSumCOPERR(0.0), scaledEMPSumAIC(0.0)
<a name="l01022"></a>01022 {
<a name="l01023"></a>01023     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a> = NULL;
<a name="l01024"></a>01024     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a5afac4246153fef0b383f6eb2e9d23a6" title="The root box used to form the subpaving tree.">rootBox</a> = ivector();    <span class="comment">// ivector with length 1 and undefined elements</span>
<a name="l01025"></a>01025 
<a name="l01026"></a>01026 
<a name="l01027"></a>01027     <span class="comment">// nothing happens to dataCollection when object is constructed</span>
<a name="l01028"></a>01028 }
<a name="l01029"></a>01029 
<a name="l01030"></a>01030 <span class="comment">// initialised constructor with bool to control whether all stats maintained</span>
<a name="l01031"></a>01031 <span class="comment">// in root paving</span>
<a name="l01032"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8155be0403adb23fe8c4232f95eb47f6">01032</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa863ff24ef4af6b084f515f702bbe09e" title="Default constructor.">AdaptiveHistogram::AdaptiveHistogram</a>(<span class="keywordtype">bool</span> as)
<a name="l01033"></a>01033         : holdAllStats(as), creationString(<span class="stringliteral">&quot;&quot;</span>),
<a name="l01034"></a>01034           scaledEMPSumCOPERR(0.0), scaledEMPSumAIC(0.0)
<a name="l01035"></a>01035 {
<a name="l01036"></a>01036     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a> = NULL;
<a name="l01037"></a>01037     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a5afac4246153fef0b383f6eb2e9d23a6" title="The root box used to form the subpaving tree.">rootBox</a> = ivector();    <span class="comment">// ivector with length 1 and undefined elements</span>
<a name="l01038"></a>01038 
<a name="l01039"></a>01039 
<a name="l01040"></a>01040     <span class="comment">// nothing happens to dataCollection when object is constructed</span>
<a name="l01041"></a>01041 }
<a name="l01042"></a>01042 
<a name="l01043"></a>01043 <span class="comment">// initialised constructor, initialised with ivector for box</span>
<a name="l01044"></a>01044 <span class="comment">// and with bool to control whether all stats are maintained in root paving.</span>
<a name="l01045"></a>01045 <span class="comment">// (defaults to false which means that only counts are maintained in rootpaving)</span>
<a name="l01046"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a54d9dd37b5a2d71ee4e94f2154140b44">01046</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa863ff24ef4af6b084f515f702bbe09e" title="Default constructor.">AdaptiveHistogram::AdaptiveHistogram</a>(ivector&amp; v, <span class="keywordtype">bool</span> as)
<a name="l01047"></a>01047         : holdAllStats(as),
<a name="l01048"></a>01048           scaledEMPSumCOPERR(0.0), scaledEMPSumAIC(0.0)
<a name="l01049"></a>01049 {
<a name="l01050"></a>01050     <span class="keywordflow">try</span> {
<a name="l01051"></a>01051         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a> = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(v, !as);
<a name="l01052"></a>01052         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a> = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l01053"></a>01053 
<a name="l01054"></a>01054         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a5afac4246153fef0b383f6eb2e9d23a6" title="The root box used to form the subpaving tree.">rootBox</a> = v;
<a name="l01055"></a>01055     }
<a name="l01056"></a>01056     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01057"></a>01057         <span class="keywordtype">string</span> msg(ba.what());
<a name="l01058"></a>01058         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in constructor&quot;</span> &lt;&lt; std::endl;
<a name="l01059"></a>01059         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Memory allocation error in constructor: &quot;</span> + msg);
<a name="l01060"></a>01060     }
<a name="l01061"></a>01061     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l01062"></a>01062         <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l01063"></a>01063         std:: cerr &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in constructor: original error &quot;</span>
<a name="l01064"></a>01064                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01065"></a>01065         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Memory allocation error in constructor:&quot;</span> + msg);
<a name="l01066"></a>01066     }
<a name="l01067"></a>01067     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01068"></a>01068         <span class="keywordtype">string</span> msg(e.what());
<a name="l01069"></a>01069         std:: cerr &lt;&lt; <span class="stringliteral">&quot;Error in constructor: original error &quot;</span>
<a name="l01070"></a>01070                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01071"></a>01071         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Memory allocation error in constructor:&quot;</span> + msg);
<a name="l01072"></a>01072     }
<a name="l01073"></a>01073 
<a name="l01074"></a>01074     <span class="comment">// nothing happens to dataCollection when object is constructed</span>
<a name="l01075"></a>01075 }
<a name="l01076"></a>01076 
<a name="l01077"></a>01077 
<a name="l01078"></a>01078 <span class="comment">// copy constructor</span>
<a name="l01079"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a512fa91574e1dbb992a6edcb77bf56c1">01079</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa863ff24ef4af6b084f515f702bbe09e" title="Default constructor.">AdaptiveHistogram::AdaptiveHistogram</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; other)
<a name="l01080"></a>01080         : holdAllStats(other.holdAllStats), rootBox(other.rootBox)
<a name="l01081"></a>01081 {
<a name="l01082"></a>01082     <span class="keywordflow">try</span> {
<a name="l01083"></a>01083         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a> = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(*(other.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>));
<a name="l01084"></a>01084         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a> = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l01085"></a>01085         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a> += <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l01086"></a>01086 
<a name="l01087"></a>01087         <span class="comment">//copy dataCollection from other to this</span>
<a name="l01088"></a>01088         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb02d0a6fe2258620130b97b7901e214" title="A container for all sample data passed to this.">dataCollection</a> = other.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb02d0a6fe2258620130b97b7901e214" title="A container for all sample data passed to this.">dataCollection</a>;
<a name="l01089"></a>01089 
<a name="l01090"></a>01090         other.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab8a546d8d85be0ffac955f7886d5c7aa" title="Recalculate the unscaled EMP part of AIC score.">recalcScaledEMPSumAIC</a>();
<a name="l01091"></a>01091         other.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6456652ee831cee0ec4184440cd84ec9" title="Recalculate the scaled EMP part of COPERR score.">recalcScaledEMPSumCOPERR</a>();
<a name="l01092"></a>01092         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acd3c0bacd5148b82188cc129b3a59e96" title="A value for the unscaled EMP part of COPERR score.">scaledEMPSumCOPERR</a> = other.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acd3c0bacd5148b82188cc129b3a59e96" title="A value for the unscaled EMP part of COPERR score.">scaledEMPSumCOPERR</a>;
<a name="l01093"></a>01093         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad5748390a25f398475bb60575f0e9a89" title="A value for the unscaled EMP part of AIC score.">scaledEMPSumAIC</a> = other.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad5748390a25f398475bb60575f0e9a89" title="A value for the unscaled EMP part of AIC score.">scaledEMPSumAIC</a>;
<a name="l01094"></a>01094     }
<a name="l01095"></a>01095     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01096"></a>01096         <span class="keywordtype">string</span> msg(ba.what());
<a name="l01097"></a>01097         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in constructor: original error &quot;</span>
<a name="l01098"></a>01098                                             &lt;&lt; msg &lt;&lt; std:: endl;
<a name="l01099"></a>01099         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Memory allocation error in constructor: &quot;</span> + msg);
<a name="l01100"></a>01100     }
<a name="l01101"></a>01101     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l01102"></a>01102         <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l01103"></a>01103         std:: cerr &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in constructor: original error &quot;</span>
<a name="l01104"></a>01104                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01105"></a>01105         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;SPnodeException in constructor: &quot;</span> + msg);
<a name="l01106"></a>01106     }
<a name="l01107"></a>01107     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01108"></a>01108         <span class="keywordtype">string</span> msg(e.what());
<a name="l01109"></a>01109         std:: cerr &lt;&lt; <span class="stringliteral">&quot;Error in constructor: original error &quot;</span>
<a name="l01110"></a>01110                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01111"></a>01111         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error in constructor: &quot;</span> + msg);
<a name="l01112"></a>01112     }
<a name="l01113"></a>01113 }
<a name="l01114"></a>01114 
<a name="l01115"></a>01115 
<a name="l01116"></a>01116 <span class="comment">//copy assignment operator</span>
<a name="l01117"></a>01117 <span class="comment">//deep copy of the whole histogram</span>
<a name="l01118"></a>01118 <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp;
<a name="l01119"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3adb7a4fce51ec497ef30dea633249fd">01119</a>             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3adb7a4fce51ec497ef30dea633249fd" title="Copy assignment operator.">AdaptiveHistogram::operator=</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; rhs)
<a name="l01120"></a>01120 {
<a name="l01121"></a>01121     <span class="keywordflow">try</span> {
<a name="l01122"></a>01122 
<a name="l01123"></a>01123         <span class="comment">// we have to make sure we delete the current paving</span>
<a name="l01124"></a>01124         <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>) {
<a name="l01125"></a>01125             <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>;
<a name="l01126"></a>01126             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a> = NULL;
<a name="l01127"></a>01127         }
<a name="l01128"></a>01128 
<a name="l01129"></a>01129         <span class="keywordflow">if</span> (NULL != rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>) {
<a name="l01130"></a>01130             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a> = <span class="keyword">new</span> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>(*(rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>));
<a name="l01131"></a>01131             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a> = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>();
<a name="l01132"></a>01132             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a> += <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l01133"></a>01133 
<a name="l01134"></a>01134             <span class="comment">//copy dataCollection from other to this</span>
<a name="l01135"></a>01135             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb02d0a6fe2258620130b97b7901e214" title="A container for all sample data passed to this.">dataCollection</a> = rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb02d0a6fe2258620130b97b7901e214" title="A container for all sample data passed to this.">dataCollection</a>;
<a name="l01136"></a>01136 
<a name="l01137"></a>01137             rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab8a546d8d85be0ffac955f7886d5c7aa" title="Recalculate the unscaled EMP part of AIC score.">recalcScaledEMPSumAIC</a>();
<a name="l01138"></a>01138             rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6456652ee831cee0ec4184440cd84ec9" title="Recalculate the scaled EMP part of COPERR score.">recalcScaledEMPSumCOPERR</a>();
<a name="l01139"></a>01139             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acd3c0bacd5148b82188cc129b3a59e96" title="A value for the unscaled EMP part of COPERR score.">scaledEMPSumCOPERR</a> = rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acd3c0bacd5148b82188cc129b3a59e96" title="A value for the unscaled EMP part of COPERR score.">scaledEMPSumCOPERR</a>;
<a name="l01140"></a>01140             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad5748390a25f398475bb60575f0e9a89" title="A value for the unscaled EMP part of AIC score.">scaledEMPSumAIC</a> = rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad5748390a25f398475bb60575f0e9a89" title="A value for the unscaled EMP part of AIC score.">scaledEMPSumAIC</a>;
<a name="l01141"></a>01141             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3f9319019a75ea477804d02762602d17" title="Controls whether all available statistics are maintained in the rootPaving. If set to false (default)...">holdAllStats</a> = rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3f9319019a75ea477804d02762602d17" title="Controls whether all available statistics are maintained in the rootPaving. If set to false (default)...">holdAllStats</a>;
<a name="l01142"></a>01142         }
<a name="l01143"></a>01143         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a5afac4246153fef0b383f6eb2e9d23a6" title="The root box used to form the subpaving tree.">rootBox</a> = rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a5afac4246153fef0b383f6eb2e9d23a6" title="The root box used to form the subpaving tree.">rootBox</a>;
<a name="l01144"></a>01144         <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l01145"></a>01145     }
<a name="l01146"></a>01146     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01147"></a>01147         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in constructor&quot;</span> &lt;&lt; std::endl;
<a name="l01148"></a>01148         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error in constructor&quot;</span>);
<a name="l01149"></a>01149     }
<a name="l01150"></a>01150     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l01151"></a>01151         <span class="keywordtype">string</span> msg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l01152"></a>01152         std:: cerr &lt;&lt; <span class="stringliteral">&quot;SPnodeExcepton in constructor: original error &quot;</span>
<a name="l01153"></a>01153                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01154"></a>01154         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error in constructor&quot;</span>);
<a name="l01155"></a>01155     }
<a name="l01156"></a>01156     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01157"></a>01157         <span class="keywordtype">string</span> msg(e.what());
<a name="l01158"></a>01158         std:: cerr &lt;&lt; <span class="stringliteral">&quot;Error in constructor: original error &quot;</span>
<a name="l01159"></a>01159                                             &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01160"></a>01160         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error in constructor&quot;</span>);
<a name="l01161"></a>01161     }
<a name="l01162"></a>01162 }
<a name="l01163"></a>01163 
<a name="l01164"></a>01164 <span class="comment">// overloading of + operator</span>
<a name="l01165"></a>01165 <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>
<a name="l01166"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a962f179df0a65d5f179930d00e65b70e">01166</a>             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a962f179df0a65d5f179930d00e65b70e" title="Overloaded addition operator.">AdaptiveHistogram::operator+</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; rhs)
<a name="l01167"></a>01167 {
<a name="l01168"></a>01168     <span class="keywordflow">if</span> (((NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>) &amp;&amp; (NULL != rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>)) &amp;&amp;
<a name="l01169"></a>01169     ((<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()) != <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()))
<a name="l01170"></a>01170     || (<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()) != <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>()))))
<a name="l01171"></a>01171         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Added histograms have unequal dimensions&quot;</span>);
<a name="l01172"></a>01172 
<a name="l01173"></a>01173     <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* newRoot = NULL;
<a name="l01174"></a>01174 
<a name="l01175"></a>01175     <span class="keywordflow">try</span> {
<a name="l01176"></a>01176 
<a name="l01177"></a>01177 
<a name="l01178"></a>01178         newRoot = <a class="code" href="classsubpavings_1_1SPSnode.shtml#a2dfb3087cff36fdf558bf75d5ee039c9">SPSnode::unionTreeStructure</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>,
<a name="l01179"></a>01179                                             rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>);
<a name="l01180"></a>01180     }
<a name="l01181"></a>01181     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01182"></a>01182         <span class="keywordtype">string</span> msg(ba.what());
<a name="l01183"></a>01183         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error allocating memory in constructor: original error &quot;</span>
<a name="l01184"></a>01184                                     &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01185"></a>01185         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Memory allocation rrror in constructor: &quot;</span> + msg);
<a name="l01186"></a>01186     }
<a name="l01187"></a>01187 
<a name="l01188"></a>01188     <span class="keywordtype">bool</span> hold = (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae90ad88f52691280d18f4b6f2e3b7ad1" title="get the value of holdAllStats field.">getHoldAllStats</a>() &amp;&amp; rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae90ad88f52691280d18f4b6f2e3b7ad1" title="get the value of holdAllStats field.">getHoldAllStats</a>());
<a name="l01189"></a>01189 
<a name="l01190"></a>01190     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> newHist(newRoot, hold);
<a name="l01191"></a>01191 
<a name="l01192"></a>01192     <span class="comment">// put all the data from the two histograms into this one.</span>
<a name="l01193"></a>01193     <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> allData;
<a name="l01194"></a>01194 
<a name="l01195"></a>01195     allData.reserve( <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb02d0a6fe2258620130b97b7901e214" title="A container for all sample data passed to this.">dataCollection</a>.size() + rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb02d0a6fe2258620130b97b7901e214" title="A container for all sample data passed to this.">dataCollection</a>.size() );
<a name="l01196"></a>01196     <span class="comment">// copy from this dataCollection into allData;</span>
<a name="l01197"></a>01197     allData.assign(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb02d0a6fe2258620130b97b7901e214" title="A container for all sample data passed to this.">dataCollection</a>.begin(), <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb02d0a6fe2258620130b97b7901e214" title="A container for all sample data passed to this.">dataCollection</a>.end());
<a name="l01198"></a>01198     allData.insert(allData.end(), rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb02d0a6fe2258620130b97b7901e214" title="A container for all sample data passed to this.">dataCollection</a>.begin(),
<a name="l01199"></a>01199             rhs.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb02d0a6fe2258620130b97b7901e214" title="A container for all sample data passed to this.">dataCollection</a>.end());
<a name="l01200"></a>01200 
<a name="l01201"></a>01201     <span class="comment">// and put the data into the histogram</span>
<a name="l01202"></a>01202     newHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">insertFromRVec</a>(allData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>);
<a name="l01203"></a>01203 
<a name="l01204"></a>01204     <span class="keywordflow">return</span> newHist;
<a name="l01205"></a>01205 }
<a name="l01206"></a>01206 
<a name="l01207"></a>01207 
<a name="l01208"></a>01208 <span class="comment">//Destructor</span>
<a name="l01209"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa11b3ed173c858fec6234c7e0b9d9829">01209</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa11b3ed173c858fec6234c7e0b9d9829" title="Destructor.">AdaptiveHistogram::~AdaptiveHistogram</a>()
<a name="l01210"></a>01210 {
<a name="l01211"></a>01211     <span class="keyword">delete</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>;
<a name="l01212"></a>01212 }
<a name="l01213"></a>01213 
<a name="l01214"></a>01214 
<a name="l01215"></a>01215 <span class="comment">// Return a pointer to the SPSnode this manages.</span>
<a name="l01216"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb">01216</a> <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">AdaptiveHistogram::getSubPaving</a>()<span class="keyword"> const</span>
<a name="l01217"></a>01217 <span class="keyword"></span>{<span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>;}
<a name="l01218"></a>01218 
<a name="l01219"></a>01219 <span class="comment">//src_trunk_0701</span>
<a name="l01220"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adc2a97bb7f8fc3c543f90ba876515ca1">01220</a> <span class="keywordtype">int</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adc2a97bb7f8fc3c543f90ba876515ca1" title="Return the label for this.">AdaptiveHistogram::getLabel</a>()<span class="keyword"> const</span>
<a name="l01221"></a>01221 <span class="keyword"></span>{
<a name="l01222"></a>01222   <span class="keywordflow">return</span> 0; <span class="comment">//this is temporarily for gat41 src</span>
<a name="l01223"></a>01223   <span class="comment">//return label;</span>
<a name="l01224"></a>01224   }
<a name="l01225"></a>01225 
<a name="l01226"></a>01226 <span class="comment">// Gets the mean from the root box of the paving this manages.</span>
<a name="l01227"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a95d9506c9ceea0359b99b0e36f1eff91">01227</a> rvector <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a95d9506c9ceea0359b99b0e36f1eff91" title="Gets the mean from the root box of the paving this manages.">AdaptiveHistogram::getRootPavingMean</a>()<span class="keyword"> const</span>
<a name="l01228"></a>01228 <span class="keyword"></span>{
<a name="l01229"></a>01229     <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3f9319019a75ea477804d02762602d17" title="Controls whether all available statistics are maintained in the rootPaving. If set to false (default)...">holdAllStats</a>) std::cout &lt;&lt; <span class="stringliteral">&quot;Note, holdAllStats is false.&quot;</span>
<a name="l01230"></a>01230                 &lt;&lt; std::endl;
<a name="l01231"></a>01231     <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#aa5ae31017fb2fdee8b9168009d8d08a6" title="Get the sample mean.">getMean</a>();
<a name="l01232"></a>01232 }
<a name="l01233"></a>01233 
<a name="l01234"></a>01234 <span class="comment">// Gets variance covariance vector from root box of rootpaving.</span>
<a name="l01235"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2bbfcf884ee91c2457eb2e9d2b81e31f">01235</a> <a class="code" href="namespacesubpavings.shtml#af2d57bb6e12f4a73169f2e496d6a641f" title="Define type RealVec as a container for reals.">RealVec</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2bbfcf884ee91c2457eb2e9d2b81e31f" title="Gets variance covariance vector from root box of rootpaving.">AdaptiveHistogram::getRootPavingVarCovar</a>()<span class="keyword"> const</span>
<a name="l01236"></a>01236 <span class="keyword"></span>{
<a name="l01237"></a>01237     <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3f9319019a75ea477804d02762602d17" title="Controls whether all available statistics are maintained in the rootPaving. If set to false (default)...">holdAllStats</a>) std::cout &lt;&lt; <span class="stringliteral">&quot;Note, holdAllStats is false.&quot;</span>
<a name="l01238"></a>01238             &lt;&lt; std::endl;
<a name="l01239"></a>01239     <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a7637c85b772a280a9769b97f7bace3c3">getVarCovar</a>();
<a name="l01240"></a>01240 }
<a name="l01241"></a>01241 
<a name="l01242"></a>01242 <span class="comment">// Gets count in the rootpaving in the root paving.</span>
<a name="l01243"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a7386f85d1182ae6e3f32766c4a208c11">01243</a> <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a7386f85d1182ae6e3f32766c4a208c11" title="Gets count in the root paving.">AdaptiveHistogram::getRootCounter</a>()<span class="keyword"> const</span>
<a name="l01244"></a>01244 <span class="keyword"></span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>(); }
<a name="l01245"></a>01245 
<a name="l01246"></a>01246 <span class="comment">// Gets number of leaf nodes in the root paving.</span>
<a name="l01247"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35">01247</a> <span class="keywordtype">size_t</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">AdaptiveHistogram::getRootLeaves</a>()<span class="keyword"> const</span>
<a name="l01248"></a>01248 <span class="keyword"></span>{ <span class="keywordflow">return</span> <a class="code" href="namespacesubpavings.shtml#acd777346441d8790899ec09af3b11d61" title="Get the number of leaves of a tree (boxes in the subpaving)">spLeaves</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>); }
<a name="l01249"></a>01249 
<a name="l01250"></a>01250 <span class="comment">// Gets the sum of leaf count over volume in root paving.</span>
<a name="l01251"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ac7f7cb4d5aea17c967afec84e1159f9b">01251</a> real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ac7f7cb4d5aea17c967afec84e1159f9b" title="Gets the sum of leaf count over volume in root paving.">AdaptiveHistogram::getRootSumLeafCountOverVol</a>()<span class="keyword"> const</span>
<a name="l01252"></a>01252 <span class="keyword"></span>{ <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#adf589d16a3e20b4285f428c8dc42d75d" title="Get the sum of the count over volume in the leaf nodes.">getSumLeafCountOverVol</a>(); }
<a name="l01253"></a>01253 
<a name="l01254"></a>01254 
<a name="l01255"></a>01255 <span class="comment">// get the penalty value</span>
<a name="l01256"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acb7aa3bb3a7b4d4691e9b5b9c9d4a765">01256</a> real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acb7aa3bb3a7b4d4691e9b5b9c9d4a765" title="get the PEN value.">AdaptiveHistogram::getPENValue</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; pen,
<a name="l01257"></a>01257                                             <span class="keywordtype">int</span> deltaLeaf)<span class="keyword"> const</span>
<a name="l01258"></a>01258 <span class="keyword"></span>{
<a name="l01259"></a>01259     <span class="keywordflow">return</span> pen(<span class="keyword">this</span>, deltaLeaf);
<a name="l01260"></a>01260 }
<a name="l01261"></a>01261 
<a name="l01262"></a>01262 
<a name="l01263"></a>01263 <span class="comment">// get the EMP part of COPERR score</span>
<a name="l01264"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb0bda49b3a39ab8aa53737de810afec">01264</a> real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb0bda49b3a39ab8aa53737de810afec" title="get the EMP part of the COPERR score.">AdaptiveHistogram::getEMPScoreCOPERR</a>()<span class="keyword"> const</span>
<a name="l01265"></a>01265 <span class="keyword"></span>{
<a name="l01266"></a>01266     <span class="comment">//recalcScaledEMPSumCOPERR();</span>
<a name="l01267"></a>01267     <span class="comment">// default cxsc rounding dotprecision rnd_next</span>
<a name="l01268"></a>01268     <span class="keywordflow">return</span> rnd(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acd3c0bacd5148b82188cc129b3a59e96" title="A value for the unscaled EMP part of COPERR score.">scaledEMPSumCOPERR</a>);
<a name="l01269"></a>01269 }
<a name="l01270"></a>01270 
<a name="l01271"></a>01271 <span class="comment">// Get the EMP part of AIC score.</span>
<a name="l01272"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a71b9bb96936f8e5f6a298c6d1a382e0b">01272</a> real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a71b9bb96936f8e5f6a298c6d1a382e0b" title="get the EMP part of the AIC score.">AdaptiveHistogram::getEMPScoreAIC</a>()<span class="keyword"> const</span>
<a name="l01273"></a>01273 <span class="keyword"></span>{
<a name="l01274"></a>01274     <span class="comment">//recalcScaledEMPSumAIC();</span>
<a name="l01275"></a>01275     <span class="comment">// default cxsc rounding dotprecision rnd_next</span>
<a name="l01276"></a>01276     <span class="keywordflow">return</span> rnd(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad5748390a25f398475bb60575f0e9a89" title="A value for the unscaled EMP part of AIC score.">scaledEMPSumAIC</a>);
<a name="l01277"></a>01277 }
<a name="l01278"></a>01278 
<a name="l01279"></a>01279 
<a name="l01280"></a>01280 <span class="comment">// get the COPERR score</span>
<a name="l01281"></a>01281 <span class="comment">// verbose = true gives additional output.</span>
<a name="l01282"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a94e90e67d767c5e0ad7b4378e0a72cad">01282</a> real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a94e90e67d767c5e0ad7b4378e0a72cad" title="get the COPERR score.">AdaptiveHistogram::getScoreCOPERR</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; pen,
<a name="l01283"></a>01283                                         <span class="keywordtype">bool</span> verbose)<span class="keyword"> const</span>
<a name="l01284"></a>01284 <span class="keyword"></span>{
<a name="l01285"></a>01285     dotprecision temptotal = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acd3c0bacd5148b82188cc129b3a59e96" title="A value for the unscaled EMP part of COPERR score.">scaledEMPSumCOPERR</a>;
<a name="l01286"></a>01286 
<a name="l01287"></a>01287     <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>) {
<a name="l01288"></a>01288 
<a name="l01289"></a>01289         <span class="keywordtype">size_t</span> counter = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l01290"></a>01290 
<a name="l01291"></a>01291         <span class="keywordflow">if</span> (verbose) {
<a name="l01292"></a>01292             std::cout &lt;&lt; <span class="stringliteral">&quot;COPERR EMP is &quot;</span> &lt;&lt;
<a name="l01293"></a>01293                         rnd(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acd3c0bacd5148b82188cc129b3a59e96" title="A value for the unscaled EMP part of COPERR score.">scaledEMPSumCOPERR</a>) &lt;&lt; std::endl;
<a name="l01294"></a>01294             std::cout &lt;&lt; <span class="stringliteral">&quot;COPERR penalty is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acb7aa3bb3a7b4d4691e9b5b9c9d4a765" title="get the PEN value.">getPENValue</a>(pen, 0) &lt;&lt; std::endl;
<a name="l01295"></a>01295             std::cout &lt;&lt; <span class="stringliteral">&quot;Total COPERR score is &quot;</span> &lt;&lt;
<a name="l01296"></a>01296                         rnd(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acd3c0bacd5148b82188cc129b3a59e96" title="A value for the unscaled EMP part of COPERR score.">scaledEMPSumCOPERR</a>) + <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acb7aa3bb3a7b4d4691e9b5b9c9d4a765" title="get the PEN value.">getPENValue</a>(pen, 0) &lt;&lt; std::endl;
<a name="l01297"></a>01297 
<a name="l01298"></a>01298         }
<a name="l01299"></a>01299 
<a name="l01300"></a>01300        <span class="comment">// getPENValue(pen, 0) gives value of PEN under pen</span>
<a name="l01301"></a>01301         accumulate(temptotal, <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acb7aa3bb3a7b4d4691e9b5b9c9d4a765" title="get the PEN value.">getPENValue</a>(pen), 1.0);
<a name="l01302"></a>01302         <span class="comment">// temptotal now holds scaledEMPSumCOPERR + PEN)</span>
<a name="l01303"></a>01303     }
<a name="l01304"></a>01304 
<a name="l01305"></a>01305     <span class="comment">// default cxsc rounding dotprecision rnd_next</span>
<a name="l01306"></a>01306     <span class="keywordflow">return</span> rnd(temptotal);
<a name="l01307"></a>01307 }
<a name="l01308"></a>01308 
<a name="l01309"></a>01309 <span class="comment">// Get the AIC score.</span>
<a name="l01310"></a>01310 <span class="comment">// verbose = true gives additional output.</span>
<a name="l01311"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8333360139bee06eb9c661b8a47cb4a3">01311</a> real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8333360139bee06eb9c661b8a47cb4a3" title="get AIC score.">AdaptiveHistogram::getScoreAIC</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PenObj.shtml" title="Abstract class for objects with penalty function for histogram fit.">PenObj</a>&amp; pen,
<a name="l01312"></a>01312                                         <span class="keywordtype">bool</span> verbose)<span class="keyword"> const</span>
<a name="l01313"></a>01313 <span class="keyword"></span>{
<a name="l01314"></a>01314     dotprecision temptotal = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad5748390a25f398475bb60575f0e9a89" title="A value for the unscaled EMP part of AIC score.">scaledEMPSumAIC</a>;
<a name="l01315"></a>01315 
<a name="l01316"></a>01316     <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>) {
<a name="l01317"></a>01317 
<a name="l01318"></a>01318         <span class="keywordtype">size_t</span> counter = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l01319"></a>01319 
<a name="l01320"></a>01320         <span class="keywordflow">if</span> (verbose) {
<a name="l01321"></a>01321             std::cout &lt;&lt; <span class="stringliteral">&quot;AIC EMP is &quot;</span> &lt;&lt;
<a name="l01322"></a>01322                         rnd(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad5748390a25f398475bb60575f0e9a89" title="A value for the unscaled EMP part of AIC score.">scaledEMPSumAIC</a>) &lt;&lt; std::endl;
<a name="l01323"></a>01323             std::cout &lt;&lt; <span class="stringliteral">&quot;AIC penalty is &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acb7aa3bb3a7b4d4691e9b5b9c9d4a765" title="get the PEN value.">getPENValue</a>(pen, 0) &lt;&lt; std::endl;
<a name="l01324"></a>01324             std::cout &lt;&lt; <span class="stringliteral">&quot;Total AIC score is &quot;</span> &lt;&lt;
<a name="l01325"></a>01325                         rnd(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad5748390a25f398475bb60575f0e9a89" title="A value for the unscaled EMP part of AIC score.">scaledEMPSumAIC</a>) + <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acb7aa3bb3a7b4d4691e9b5b9c9d4a765" title="get the PEN value.">getPENValue</a>(pen, 0) &lt;&lt; std::endl;
<a name="l01326"></a>01326 
<a name="l01327"></a>01327         }
<a name="l01328"></a>01328 
<a name="l01329"></a>01329         <span class="comment">// getPENValue(pen, 0) gives value of PEN under pen</span>
<a name="l01330"></a>01330         accumulate(temptotal, <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acb7aa3bb3a7b4d4691e9b5b9c9d4a765" title="get the PEN value.">getPENValue</a>(pen, 0), 1.0);
<a name="l01331"></a>01331         <span class="comment">// temptotal now holds scaledEMPSumAIC + PEN)</span>
<a name="l01332"></a>01332     }
<a name="l01333"></a>01333 
<a name="l01334"></a>01334     <span class="comment">// default cxsc rounding dotprecision rnd_next</span>
<a name="l01335"></a>01335     <span class="keywordflow">return</span> rnd(temptotal);
<a name="l01336"></a>01336 }
<a name="l01337"></a>01337 
<a name="l01338"></a>01338 <span class="comment">// get the value of the minimum volume for a splittable node.</span>
<a name="l01339"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a0ef2d251d61753086a358bdd9bda057f">01339</a> <span class="keywordtype">double</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a0ef2d251d61753086a358bdd9bda057f" title="get the value of the minimum volume for a splittable node.">AdaptiveHistogram::getMinVol</a>(<span class="keywordtype">double</span> minVolB)<span class="keyword"> const</span>
<a name="l01340"></a>01340 <span class="keyword"></span>{
<a name="l01341"></a>01341     <span class="keywordtype">double</span> retValue = 0.0;
<a name="l01342"></a>01342 
<a name="l01343"></a>01343     <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>) {
<a name="l01344"></a>01344 
<a name="l01345"></a>01345         <span class="keywordtype">size_t</span> counter = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l01346"></a>01346         retValue = minVolB;
<a name="l01347"></a>01347        <span class="comment">// retValue =  minVolB * log(1.0*counter)*log(1.0*counter)/counter;</span>
<a name="l01348"></a>01348     }
<a name="l01349"></a>01349     <span class="keywordflow">return</span> retValue;
<a name="l01350"></a>01350 }
<a name="l01351"></a>01351 
<a name="l01352"></a>01352 <span class="comment">// get the value of holdAllStats field.</span>
<a name="l01353"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae90ad88f52691280d18f4b6f2e3b7ad1">01353</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae90ad88f52691280d18f4b6f2e3b7ad1" title="get the value of holdAllStats field.">AdaptiveHistogram::getHoldAllStats</a>()<span class="keyword"> const</span>
<a name="l01354"></a>01354 <span class="keyword"></span>{
<a name="l01355"></a>01355     <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3f9319019a75ea477804d02762602d17" title="Controls whether all available statistics are maintained in the rootPaving. If set to false (default)...">holdAllStats</a>;
<a name="l01356"></a>01356 }
<a name="l01357"></a>01357 
<a name="l01358"></a>01358 <span class="comment">//src_trunk_0701</span>
<a name="l01359"></a>01359 <span class="comment">// get whether this has a subpaving.</span>
<a name="l01360"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aaf5eac63bd232e3e76f20a27587c8784">01360</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aaf5eac63bd232e3e76f20a27587c8784" title="Get whether this has a subpaving to manage.">AdaptiveHistogram::hasSubPaving</a>()<span class="keyword"> const</span>
<a name="l01361"></a>01361 <span class="keyword"></span>{
<a name="l01362"></a>01362     <span class="keywordflow">return</span> ( <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>() != NULL );
<a name="l01363"></a>01363 }
<a name="l01364"></a>01364 
<a name="l01365"></a>01365 <span class="comment">//src_trunk_0701</span>
<a name="l01366"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a936a3426494278163afada104df26ecc">01366</a> cxsc::ivector <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a936a3426494278163afada104df26ecc" title="Get the box of the subpaving managed by this.">AdaptiveHistogram::getRootBox</a>()<span class="keyword"> const</span>
<a name="l01367"></a>01367 <span class="keyword"></span>{
<a name="l01368"></a>01368   <span class="keywordflow">if</span> (!<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aaf5eac63bd232e3e76f20a27587c8784" title="Get whether this has a subpaving to manage.">hasSubPaving</a>()) {
<a name="l01369"></a>01369     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a>(
<a name="l01370"></a>01370               <span class="stringliteral">&quot;AdaptiveHistogram::getRootBox()&quot;</span>);
<a name="l01371"></a>01371   }
<a name="l01372"></a>01372   <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a8ff024c82f00ff7420ba62005a5558ac" title="Accessor for theBox of a node.">getBox</a>();
<a name="l01373"></a>01373 }
<a name="l01374"></a>01374 
<a name="l01375"></a>01375 <span class="comment">// Get a string of the leaf node levels.</span>
<a name="l01376"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aca69edc461799f9d867d7eea6cb76f8e">01376</a> std::string <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aca69edc461799f9d867d7eea6cb76f8e">AdaptiveHistogram::getLeafLevelsString</a>()<span class="keyword"> const</span>
<a name="l01377"></a>01377 <span class="keyword"></span>{
<a name="l01378"></a>01378     <span class="keywordtype">string</span> retValue = <span class="stringliteral">&quot;&quot;</span>;
<a name="l01379"></a>01379     <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>)
<a name="l01380"></a>01380         retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a7ea8cd3649cbf13d5743d3cb23315d72" title="Get a string of leaf node levels.">getLeafNodeLevelsString</a>();
<a name="l01381"></a>01381 
<a name="l01382"></a>01382     <span class="keywordflow">return</span> retValue;
<a name="l01383"></a>01383 }
<a name="l01384"></a>01384 
<a name="l01385"></a>01385 
<a name="l01386"></a>01386 <span class="comment">//insert a single data point into the AdaptiveHistogram object</span>
<a name="l01387"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aafef86d6e4482aef11de75b83cfb4345">01387</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aafef86d6e4482aef11de75b83cfb4345" title="Insert a single data point into AdaptiveHistogram object.">AdaptiveHistogram::insertOne</a>(rvector newData,
<a name="l01388"></a>01388                                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l01389"></a>01389                                 <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging)
<a name="l01390"></a>01390 {
<a name="l01391"></a>01391     <span class="comment">// make sure we have a paving and then try inserting</span>
<a name="l01392"></a>01392     <span class="keywordflow">if</span> (<a class="code" href="namespacesubpavings.shtml#a72386487753f5334a70250b068f97f15" title="Check if a SubPaving is empty.">isEmpty</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>)) {
<a name="l01393"></a>01393         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Trying to insert to empty or NULL node&quot;</span>);
<a name="l01394"></a>01394     }
<a name="l01395"></a>01395 
<a name="l01396"></a>01396     <span class="comment">// check the dimensions</span>
<a name="l01397"></a>01397     <span class="keywordflow">if</span>((<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(newData)-<a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(newData)) != (<a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a5afac4246153fef0b383f6eb2e9d23a6" title="The root box used to form the subpaving tree.">rootBox</a>) - <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a5afac4246153fef0b383f6eb2e9d23a6" title="The root box used to form the subpaving tree.">rootBox</a>))) {
<a name="l01398"></a>01398         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Dimensions of data do not match paving&quot;</span>);
<a name="l01399"></a>01399 
<a name="l01400"></a>01400     }
<a name="l01401"></a>01401 
<a name="l01402"></a>01402     <span class="comment">// for logging output to keep track of splits</span>
<a name="l01403"></a>01403     <span class="keywordtype">int</span> i = 0;
<a name="l01404"></a>01404     std::string baseFileName = <span class="stringliteral">&quot;&quot;</span>;
<a name="l01405"></a>01405     std::string s = <span class="stringliteral">&quot;&quot;</span>;
<a name="l01406"></a>01406 
<a name="l01407"></a>01407     <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l01408"></a>01408         baseFileName = <span class="stringliteral">&quot;splitOutput&quot;</span>;
<a name="l01409"></a>01409         s = <a class="code" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609" title="Construct a unique filename from base and timestamp number.">getUniqueFilename</a>(baseFileName);
<a name="l01410"></a>01410         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad847a4add7e72eac564daa44835dba5b" title="Opening line of a txt log file.">outputLogStart</a>(s);
<a name="l01411"></a>01411         <span class="comment">// log the current state of the histogram</span>
<a name="l01412"></a>01412         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">outputLog</a>(s, i);
<a name="l01413"></a>01413         i++;
<a name="l01414"></a>01414     }
<a name="l01415"></a>01415 
<a name="l01416"></a>01416 
<a name="l01417"></a>01417     <a class="code" href="namespacesubpavings.shtml#a8792314c11b28ac2b8c4c85c47526f3a" title="Define type BigDataItr as an iterator BigData.">BigDataItr</a> it = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb02d0a6fe2258620130b97b7901e214" title="A container for all sample data passed to this.">dataCollection</a>.end();
<a name="l01418"></a>01418     it = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb02d0a6fe2258620130b97b7901e214" title="A container for all sample data passed to this.">dataCollection</a>.insert(it, newData);
<a name="l01419"></a>01419 
<a name="l01420"></a>01420     <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* insertedInto = NULL;
<a name="l01421"></a>01421 
<a name="l01422"></a>01422     <span class="comment">// try inserting</span>
<a name="l01423"></a>01423     insertedInto = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af0d351af2a515188522e13e0c6502a18" title="Inserts data into this node.">insertOneFind</a>(it, <a class="code" href="namespacesubpavings.shtml#ae1ea349cda4812634df03761ebfc1c98a4863db89a4712e90bb113f9acf898781">ON_PARENT</a>,
<a name="l01424"></a>01424                                             boolTest);
<a name="l01425"></a>01425 
<a name="l01426"></a>01426     <span class="keywordflow">if</span> (insertedInto==NULL) { <span class="comment">// failed to insert</span>
<a name="l01427"></a>01427         std::cout &lt;&lt; <span class="stringliteral">&quot;Failed to insert point &quot;</span> &lt;&lt; newData &lt;&lt; std::endl;
<a name="l01428"></a>01428         std::cout &lt;&lt; <span class="stringliteral">&quot;Root node of subpaving has box &quot;</span> &lt;&lt; <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>
<a name="l01429"></a>01429             &lt;&lt; std::endl;
<a name="l01430"></a>01430     }
<a name="l01431"></a>01431     <span class="keywordflow">else</span> { <span class="comment">// insertion succeeded</span>
<a name="l01432"></a>01432 
<a name="l01433"></a>01433         std::string newNames = insertedInto-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l01434"></a>01434 
<a name="l01435"></a>01435         <span class="keywordflow">if</span>(newNames.length() &gt; 0) { <span class="comment">// there are new nodes</span>
<a name="l01436"></a>01436             <span class="comment">//add the new child names if any</span>
<a name="l01437"></a>01437             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a> += newNames;
<a name="l01438"></a>01438             <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l01439"></a>01439                 <span class="comment">// log the current state of the histogram</span>
<a name="l01440"></a>01440                 <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">outputLog</a>(s, i);
<a name="l01441"></a>01441                 i++;
<a name="l01442"></a>01442             }
<a name="l01443"></a>01443         }
<a name="l01444"></a>01444 
<a name="l01445"></a>01445         <span class="comment">//recalculate the scaled EMP sum values;</span>
<a name="l01446"></a>01446         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6456652ee831cee0ec4184440cd84ec9" title="Recalculate the scaled EMP part of COPERR score.">recalcScaledEMPSumCOPERR</a>();
<a name="l01447"></a>01447         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab8a546d8d85be0ffac955f7886d5c7aa" title="Recalculate the unscaled EMP part of AIC score.">recalcScaledEMPSumAIC</a>();
<a name="l01448"></a>01448     }
<a name="l01449"></a>01449     <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l01450"></a>01450         <span class="comment">// add leaf node levels string to log</span>
<a name="l01451"></a>01451         <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aca69edc461799f9d867d7eea6cb76f8e">getLeafLevelsString</a>());
<a name="l01452"></a>01452     }
<a name="l01453"></a>01453 }
<a name="l01454"></a>01454 
<a name="l01455"></a>01455 
<a name="l01456"></a>01456 <span class="comment">// method to insert one dimensional data from a txt file</span>
<a name="l01457"></a>01457 <span class="comment">// should be able to deal with integers or doubles</span>
<a name="l01458"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aef10187eeb8d449b8692c355960aefe0">01458</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a11051ee818f2d6fb2631573e47ed73b8">AdaptiveHistogram::insertOneDimDataFromTxt</a>(<span class="keyword">const</span> std::string&amp; s,
<a name="l01459"></a>01459                                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l01460"></a>01460                 <span class="keyword">const</span> std::size_t headerlines,
<a name="l01461"></a>01461                                 <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging)
<a name="l01462"></a>01462 {
<a name="l01463"></a>01463     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l01464"></a>01464 
<a name="l01465"></a>01465     <span class="keywordflow">try</span> {
<a name="l01466"></a>01466         <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> myDataRvectors; <span class="comment">// container for the rvectors we take in</span>
<a name="l01467"></a>01467 
<a name="l01468"></a>01468         <span class="comment">// try to read in the file</span>
<a name="l01469"></a>01469         retValue = <a class="code" href="namespacesubpavings.shtml#a535c4c5b9e6a042ec418db09ed956cda" title="Read in one-dimensional data from a txt file.">readOneDimDataFromTxt</a>(myDataRvectors, s, headerlines);
<a name="l01470"></a>01470 
<a name="l01471"></a>01471         <span class="keywordflow">if</span> (retValue) {
<a name="l01472"></a>01472             <span class="comment">// complete the data insertion</span>
<a name="l01473"></a>01473             retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a929e006a5a2a0f40c68d77bc7dff70e7" title="Complete insertion of data from a vector container.">completeDataInsertionFromVec</a>(myDataRvectors,
<a name="l01474"></a>01474                                                     boolTest, logging);
<a name="l01475"></a>01475         }
<a name="l01476"></a>01476     }
<a name="l01477"></a>01477     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01478"></a>01478         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l01479"></a>01479         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory inserting data.  Orginal error: &quot;</span>
<a name="l01480"></a>01480                                             + oldmsg;
<a name="l01481"></a>01481         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01482"></a>01482     }
<a name="l01483"></a>01483     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l01484"></a>01484         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l01485"></a>01485         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l01486"></a>01486         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01487"></a>01487     }
<a name="l01488"></a>01488     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l01489"></a>01489         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l01490"></a>01490         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l01491"></a>01491         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01492"></a>01492     }
<a name="l01493"></a>01493     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01494"></a>01494         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l01495"></a>01495         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l01496"></a>01496         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01497"></a>01497     }
<a name="l01498"></a>01498     <span class="comment">// recalc of EMP sums takes place further down</span>
<a name="l01499"></a>01499 
<a name="l01500"></a>01500     <span class="keywordflow">return</span> retValue;
<a name="l01501"></a>01501 
<a name="l01502"></a>01502 }
<a name="l01503"></a>01503 
<a name="l01504"></a>01504 
<a name="l01505"></a>01505 <span class="comment">/*</span>
<a name="l01506"></a>01506 <span class="comment">// method to insert doubles from a txt file</span>
<a name="l01507"></a>01507 <span class="comment">// use the insert One Dim data method</span>
<a name="l01508"></a>01508 <span class="comment">bool AdaptiveHistogram::insertDoublesFromTxt(const std::string&amp; s,</span>
<a name="l01509"></a>01509 <span class="comment">                                const SplitDecisionObj&amp; boolTest,</span>
<a name="l01510"></a>01510 <span class="comment">                                LOGGING_LEVEL logging)</span>
<a name="l01511"></a>01511 <span class="comment">{</span>
<a name="l01512"></a>01512 <span class="comment">    return insertOneDimDataFromTxt(s, boolTest, logging)</span>
<a name="l01513"></a>01513 <span class="comment">}</span>
<a name="l01514"></a>01514 <span class="comment">*/</span>
<a name="l01515"></a>01515 
<a name="l01516"></a>01516 <span class="comment">// method to insert rvectors from a txt file</span>
<a name="l01517"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a5decf91161cbddd77c21e3b25dd12689">01517</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aff1b74eb52546adb9d7d64a84d739efe">AdaptiveHistogram::insertRvectorsFromTxt</a>(<span class="keyword">const</span> std::string&amp; s,
<a name="l01518"></a>01518                                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l01519"></a>01519                 <span class="keyword">const</span> std::size_t headerlines,
<a name="l01520"></a>01520                                 <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging)
<a name="l01521"></a>01521 {
<a name="l01522"></a>01522     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l01523"></a>01523 
<a name="l01524"></a>01524     <span class="keywordflow">try</span> {
<a name="l01525"></a>01525         <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> myDataRvectors; <span class="comment">// container for the rvectors we take in</span>
<a name="l01526"></a>01526 
<a name="l01527"></a>01527         <span class="comment">// try to read in the file</span>
<a name="l01528"></a>01528         retValue = <a class="code" href="namespacesubpavings.shtml#a7918dddb1a8e32f72835e1e7b4442ca6" title="Read in rvectors from a txt file.">readRvectorsFromTxt</a>(myDataRvectors, s, headerlines);
<a name="l01529"></a>01529 
<a name="l01530"></a>01530         <span class="keywordflow">if</span> (retValue) {
<a name="l01531"></a>01531             retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a929e006a5a2a0f40c68d77bc7dff70e7" title="Complete insertion of data from a vector container.">completeDataInsertionFromVec</a>(myDataRvectors,
<a name="l01532"></a>01532                                                     boolTest, logging);
<a name="l01533"></a>01533         }
<a name="l01534"></a>01534     }
<a name="l01535"></a>01535     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01536"></a>01536         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l01537"></a>01537         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory inserting data.  Orginal error: &quot;</span>
<a name="l01538"></a>01538                                             + oldmsg;
<a name="l01539"></a>01539         cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01540"></a>01540         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01541"></a>01541     }
<a name="l01542"></a>01542     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l01543"></a>01543         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l01544"></a>01544         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error inserting data.  Orginal error: &quot;</span>
<a name="l01545"></a>01545                                     + oldmsg;
<a name="l01546"></a>01546         cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01547"></a>01547         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01548"></a>01548     }
<a name="l01549"></a>01549     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l01550"></a>01550         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l01551"></a>01551         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l01552"></a>01552         cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01553"></a>01553         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01554"></a>01554     }
<a name="l01555"></a>01555     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01556"></a>01556         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l01557"></a>01557         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l01558"></a>01558         cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01559"></a>01559         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01560"></a>01560     }
<a name="l01561"></a>01561 
<a name="l01562"></a>01562     <span class="keywordflow">return</span> retValue;
<a name="l01563"></a>01563 
<a name="l01564"></a>01564 }
<a name="l01565"></a>01565 
<a name="l01566"></a>01566 
<a name="l01567"></a>01567 <span class="comment">// method to insert all rvectors from an RVecData object</span>
<a name="l01568"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b8604eb7b87dd03d09736a2f9e4b96a">01568</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae19b382cf2c8f7f9b1d20883a7faf5c8">AdaptiveHistogram::insertFromRVec</a>(<span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec,
<a name="l01569"></a>01569                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l01570"></a>01570                             <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging)
<a name="l01571"></a>01571 {
<a name="l01572"></a>01572     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l01573"></a>01573 
<a name="l01574"></a>01574     <span class="keywordflow">try</span> {
<a name="l01575"></a>01575 
<a name="l01576"></a>01576         <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> myDataRvectors; <span class="comment">// container for the rvectors we take in</span>
<a name="l01577"></a>01577 
<a name="l01578"></a>01578         <span class="keywordtype">size_t</span> numberFound = 0;
<a name="l01579"></a>01579 
<a name="l01580"></a>01580         <span class="keywordflow">if</span> (rvec.empty()) { <span class="comment">// no data points to get</span>
<a name="l01581"></a>01581             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No data to insert&quot;</span>);
<a name="l01582"></a>01582         }
<a name="l01583"></a>01583 
<a name="l01584"></a>01584         <span class="keywordflow">else</span> { <span class="comment">// there is data to get</span>
<a name="l01585"></a>01585 
<a name="l01586"></a>01586             <span class="comment">// get data from the container and check how many data points found</span>
<a name="l01587"></a>01587             <span class="keywordtype">size_t</span> numberFound = <a class="code" href="namespacesubpavings.shtml#a211cb10f439ff2bdb92ce92906159792" title="Get all rvectors from a container of rvectors.">getRvectorsFromRVec</a>(myDataRvectors, rvec);
<a name="l01588"></a>01588 
<a name="l01589"></a>01589 
<a name="l01590"></a>01590             <span class="keywordflow">if</span> (numberFound &gt; 0) {
<a name="l01591"></a>01591                 <span class="comment">/*</span>
<a name="l01592"></a>01592 <span class="comment">                // confirm the amount of data taken from the container</span>
<a name="l01593"></a>01593 <span class="comment">                std::cout &lt;&lt; &quot;End of taking data from container of rvectors: &quot;</span>
<a name="l01594"></a>01594 <span class="comment">                    &lt;&lt; numberFound &lt;&lt; &quot; data points found&quot; &lt;&lt; std::endl;</span>
<a name="l01595"></a>01595 <span class="comment">                */</span>
<a name="l01596"></a>01596                 <span class="comment">// complete the data insertion</span>
<a name="l01597"></a>01597                 retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a929e006a5a2a0f40c68d77bc7dff70e7" title="Complete insertion of data from a vector container.">completeDataInsertionFromVec</a>(myDataRvectors,
<a name="l01598"></a>01598                                                         boolTest, logging);
<a name="l01599"></a>01599             }
<a name="l01600"></a>01600         }
<a name="l01601"></a>01601     }
<a name="l01602"></a>01602     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01603"></a>01603          <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l01604"></a>01604         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory inserting data.  Orginal error: &quot;</span>
<a name="l01605"></a>01605                                             + oldmsg;
<a name="l01606"></a>01606         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01607"></a>01607         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01608"></a>01608     }
<a name="l01609"></a>01609     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l01610"></a>01610         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l01611"></a>01611         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error inserting data.  Orginal error: &quot;</span>
<a name="l01612"></a>01612                                     + oldmsg;
<a name="l01613"></a>01613         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01614"></a>01614         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01615"></a>01615     }
<a name="l01616"></a>01616     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l01617"></a>01617         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l01618"></a>01618         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l01619"></a>01619         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01620"></a>01620         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01621"></a>01621     }
<a name="l01622"></a>01622     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01623"></a>01623         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l01624"></a>01624         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l01625"></a>01625         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01626"></a>01626         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01627"></a>01627     }
<a name="l01628"></a>01628 
<a name="l01629"></a>01629     <span class="keywordflow">return</span> retValue;
<a name="l01630"></a>01630 
<a name="l01631"></a>01631 }
<a name="l01632"></a>01632 
<a name="l01633"></a>01633 <span class="comment">// method to insert a sample of rvectors from a container of rvectors</span>
<a name="l01634"></a>01634 <span class="comment">// this version takes a random number generator</span>
<a name="l01635"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2f6d7ee0d83ea148f57543f64905170d">01635</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adbfde654e0737aa2145d054a2c4a9a95">AdaptiveHistogram::insertSampleFromRVec</a>(<span class="keywordtype">size_t</span> samplesize,
<a name="l01636"></a>01636             gsl_rng * rgsl, <span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l01637"></a>01637             <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging)
<a name="l01638"></a>01638 {
<a name="l01639"></a>01639     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l01640"></a>01640 
<a name="l01641"></a>01641     <span class="keywordflow">try</span> {
<a name="l01642"></a>01642 
<a name="l01643"></a>01643         <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> myDataRvectors; <span class="comment">// container for the rvectors we take in</span>
<a name="l01644"></a>01644 
<a name="l01645"></a>01645         <span class="comment">// try to sample data from the container, check how many data points found</span>
<a name="l01646"></a>01646         <span class="keywordtype">size_t</span> numberTaken = <a class="code" href="namespacesubpavings.shtml#ad2d24521f44422db117d54d6287bc314" title="Get a sample of rvectors from an a container.">getSampleRvectorsFromRVec</a>(myDataRvectors,
<a name="l01647"></a>01647                                 rgsl, samplesize, rvec);
<a name="l01648"></a>01648 
<a name="l01649"></a>01649         <span class="comment">// complete the data insertion</span>
<a name="l01650"></a>01650         <span class="keywordflow">if</span> (numberTaken &gt; 0) {
<a name="l01651"></a>01651             <span class="comment">/*  Switch on for more output</span>
<a name="l01652"></a>01652 <span class="comment">            // confirm the amount of data taken from the RSSample</span>
<a name="l01653"></a>01653 <span class="comment">            std::cout &lt;&lt; &quot;End of taking sample from data from the container: &quot;</span>
<a name="l01654"></a>01654 <span class="comment">            &lt;&lt; numberTaken &lt;&lt; &quot; data points used for sample&quot; &lt;&lt; std::endl;</span>
<a name="l01655"></a>01655 <span class="comment">            */</span>
<a name="l01656"></a>01656             retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a929e006a5a2a0f40c68d77bc7dff70e7" title="Complete insertion of data from a vector container.">completeDataInsertionFromVec</a>(myDataRvectors,
<a name="l01657"></a>01657                                                     boolTest, logging);
<a name="l01658"></a>01658         }
<a name="l01659"></a>01659     }
<a name="l01660"></a>01660     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01661"></a>01661         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l01662"></a>01662         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory inserting data.  Orginal error: &quot;</span>
<a name="l01663"></a>01663                                             + oldmsg;
<a name="l01664"></a>01664         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01665"></a>01665         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01666"></a>01666     }
<a name="l01667"></a>01667     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l01668"></a>01668         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l01669"></a>01669         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error inserting data.  Orginal error: &quot;</span>
<a name="l01670"></a>01670                                     + oldmsg;
<a name="l01671"></a>01671         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01672"></a>01672         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01673"></a>01673     }
<a name="l01674"></a>01674     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l01675"></a>01675         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l01676"></a>01676         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l01677"></a>01677         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01678"></a>01678         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01679"></a>01679     }
<a name="l01680"></a>01680     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01681"></a>01681         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l01682"></a>01682         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l01683"></a>01683         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01684"></a>01684         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01685"></a>01685     }
<a name="l01686"></a>01686 
<a name="l01687"></a>01687 
<a name="l01688"></a>01688     <span class="keywordflow">return</span> retValue;
<a name="l01689"></a>01689 
<a name="l01690"></a>01690 }
<a name="l01691"></a>01691 
<a name="l01692"></a>01692 <span class="comment">// method to insert a sample of rvectors from a container of rvectors</span>
<a name="l01693"></a>01693 <span class="comment">// this version takes seed for a random number generator</span>
<a name="l01694"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8db299e8725f5170475a4c77524140dc">01694</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adbfde654e0737aa2145d054a2c4a9a95">AdaptiveHistogram::insertSampleFromRVec</a>(<span class="keywordtype">size_t</span> samplesize,
<a name="l01695"></a>01695             <span class="keywordtype">int</span> seed, <span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l01696"></a>01696             <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging)
<a name="l01697"></a>01697 {
<a name="l01698"></a>01698     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l01699"></a>01699 
<a name="l01700"></a>01700     gsl_rng * rgsl = NULL;
<a name="l01701"></a>01701 
<a name="l01702"></a>01702     <span class="keywordflow">try</span> {
<a name="l01703"></a>01703 
<a name="l01704"></a>01704         <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l01705"></a>01705 
<a name="l01706"></a>01706         <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l01707"></a>01707         <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l01708"></a>01708         gsl_rng_env_setup();
<a name="l01709"></a>01709 
<a name="l01710"></a>01710         tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l01711"></a>01711         rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l01712"></a>01712         gsl_rng_set (rgsl, seed); <span class="comment">// change the seed</span>
<a name="l01713"></a>01713 
<a name="l01714"></a>01714         retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adbfde654e0737aa2145d054a2c4a9a95">insertSampleFromRVec</a>(samplesize, rgsl, rvec, boolTest,
<a name="l01715"></a>01715             logging);
<a name="l01716"></a>01716 
<a name="l01717"></a>01717         gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01718"></a>01718 
<a name="l01719"></a>01719     }
<a name="l01720"></a>01720 
<a name="l01721"></a>01721     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01722"></a>01722         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01723"></a>01723         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l01724"></a>01724         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory inserting data.  Orginal error: &quot;</span>
<a name="l01725"></a>01725                                             + oldmsg;
<a name="l01726"></a>01726         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01727"></a>01727         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01728"></a>01728     }
<a name="l01729"></a>01729     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l01730"></a>01730         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01731"></a>01731         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l01732"></a>01732         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error inserting data.  Orginal error: &quot;</span>
<a name="l01733"></a>01733                                     + oldmsg;
<a name="l01734"></a>01734         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01735"></a>01735         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01736"></a>01736     }
<a name="l01737"></a>01737     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l01738"></a>01738         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01739"></a>01739         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l01740"></a>01740         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l01741"></a>01741         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01742"></a>01742         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01743"></a>01743     }
<a name="l01744"></a>01744     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01745"></a>01745         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01746"></a>01746         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l01747"></a>01747         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l01748"></a>01748         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01749"></a>01749         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01750"></a>01750     }
<a name="l01751"></a>01751 
<a name="l01752"></a>01752 
<a name="l01753"></a>01753     <span class="keywordflow">return</span> retValue;
<a name="l01754"></a>01754 }
<a name="l01755"></a>01755 
<a name="l01756"></a>01756 <span class="comment">// method to insert a sample of rvectors from a container of rvectors</span>
<a name="l01757"></a>01757 <span class="comment">// this version will set up a random number generator with default seed</span>
<a name="l01758"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab889a33f8caa8fb44836f756c0be342d">01758</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adbfde654e0737aa2145d054a2c4a9a95">AdaptiveHistogram::insertSampleFromRVec</a>(<span class="keywordtype">size_t</span> samplesize,
<a name="l01759"></a>01759             <span class="keyword">const</span> <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a>&amp; rvec, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l01760"></a>01760             <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging)
<a name="l01761"></a>01761 {
<a name="l01762"></a>01762     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l01763"></a>01763 
<a name="l01764"></a>01764     gsl_rng * rgsl = NULL;
<a name="l01765"></a>01765 
<a name="l01766"></a>01766     <span class="keywordflow">try</span> {
<a name="l01767"></a>01767 
<a name="l01768"></a>01768         <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l01769"></a>01769 
<a name="l01770"></a>01770         <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l01771"></a>01771         <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l01772"></a>01772         gsl_rng_env_setup();
<a name="l01773"></a>01773 
<a name="l01774"></a>01774         tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l01775"></a>01775         rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l01776"></a>01776 
<a name="l01777"></a>01777         retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adbfde654e0737aa2145d054a2c4a9a95">insertSampleFromRVec</a>(samplesize, rgsl, rvec, boolTest,
<a name="l01778"></a>01778                 logging);
<a name="l01779"></a>01779 
<a name="l01780"></a>01780         gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01781"></a>01781     }
<a name="l01782"></a>01782     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01783"></a>01783         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01784"></a>01784         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l01785"></a>01785         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory inserting data.  Orginal error: &quot;</span>
<a name="l01786"></a>01786                                             + oldmsg;
<a name="l01787"></a>01787         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01788"></a>01788         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01789"></a>01789     }
<a name="l01790"></a>01790     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l01791"></a>01791         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01792"></a>01792         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l01793"></a>01793         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error inserting data.  Orginal error: &quot;</span>
<a name="l01794"></a>01794                                     + oldmsg;
<a name="l01795"></a>01795         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01796"></a>01796         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01797"></a>01797     }
<a name="l01798"></a>01798     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l01799"></a>01799         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01800"></a>01800         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l01801"></a>01801         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l01802"></a>01802         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01803"></a>01803         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01804"></a>01804     }
<a name="l01805"></a>01805     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01806"></a>01806         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01807"></a>01807         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l01808"></a>01808         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l01809"></a>01809         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01810"></a>01810         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01811"></a>01811     }
<a name="l01812"></a>01812 
<a name="l01813"></a>01813     <span class="keywordflow">return</span> retValue;
<a name="l01814"></a>01814 }
<a name="l01815"></a>01815 
<a name="l01816"></a>01816 <span class="comment">// method to insert all rvectors from an RSSample object</span>
<a name="l01817"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a20ee07940112174415c391b4ed385ba1">01817</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6f049bec17097067ae9e2a7c9f42bd60">AdaptiveHistogram::insertFromRSSample</a>(<span class="keyword">const</span> <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>&amp; rss,
<a name="l01818"></a>01818                                         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l01819"></a>01819                                         <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">int</span> label)
<a name="l01820"></a>01820 {
<a name="l01821"></a>01821     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l01822"></a>01822 
<a name="l01823"></a>01823     <span class="keywordflow">try</span> {
<a name="l01824"></a>01824         <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> myDataRvectors; <span class="comment">// container for the rvectors we take in</span>
<a name="l01825"></a>01825 
<a name="l01826"></a>01826         <span class="comment">// try to get data from rss.Samples and check how many data points found</span>
<a name="l01827"></a>01827         <span class="keywordtype">size_t</span> numberFound = <a class="code" href="namespacesubpavings.shtml#ad435f1951db3078702d178b718018651" title="Get all rvectors from an RSSample object.">getRvectorsFromRSSample</a>(myDataRvectors, rss, label);
<a name="l01828"></a>01828 
<a name="l01829"></a>01829         <span class="keywordflow">if</span> (numberFound &gt; 0) {
<a name="l01830"></a>01830             <span class="comment">/*</span>
<a name="l01831"></a>01831 <span class="comment">            // confirm the amount of data taken from the RSSample</span>
<a name="l01832"></a>01832 <span class="comment">            std::cout &lt;&lt; &quot;End of taking data from RSSample: &quot;</span>
<a name="l01833"></a>01833 <span class="comment">                &lt;&lt; numberFound &lt;&lt; &quot; data points with label &quot;</span>
<a name="l01834"></a>01834 <span class="comment">                &lt;&lt; label &lt;&lt; &quot; found&quot; &lt;&lt; std::endl;</span>
<a name="l01835"></a>01835 <span class="comment">            */</span>
<a name="l01836"></a>01836             <span class="comment">// complete the data insertion</span>
<a name="l01837"></a>01837             retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a929e006a5a2a0f40c68d77bc7dff70e7" title="Complete insertion of data from a vector container.">completeDataInsertionFromVec</a>(myDataRvectors,
<a name="l01838"></a>01838                                                     boolTest, logging);
<a name="l01839"></a>01839 
<a name="l01840"></a>01840         }
<a name="l01841"></a>01841     }
<a name="l01842"></a>01842     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01843"></a>01843         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l01844"></a>01844         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory inserting data.  Orginal error: &quot;</span>
<a name="l01845"></a>01845                                             + oldmsg;
<a name="l01846"></a>01846         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01847"></a>01847         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01848"></a>01848     }
<a name="l01849"></a>01849     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l01850"></a>01850         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l01851"></a>01851         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error inserting data.  Orginal error: &quot;</span>
<a name="l01852"></a>01852                                     + oldmsg;
<a name="l01853"></a>01853         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01854"></a>01854         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01855"></a>01855     }
<a name="l01856"></a>01856     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l01857"></a>01857         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l01858"></a>01858         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l01859"></a>01859         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01860"></a>01860         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01861"></a>01861     }
<a name="l01862"></a>01862     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01863"></a>01863         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l01864"></a>01864         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l01865"></a>01865         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01866"></a>01866         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01867"></a>01867     }
<a name="l01868"></a>01868 
<a name="l01869"></a>01869     <span class="keywordflow">return</span> retValue;
<a name="l01870"></a>01870 
<a name="l01871"></a>01871 }
<a name="l01872"></a>01872 
<a name="l01873"></a>01873 <span class="comment">// method to insert a sample of rvectors from an RSSample object</span>
<a name="l01874"></a>01874 <span class="comment">// this version takes a random number generator</span>
<a name="l01875"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad002844c2b0ef25eeb5fbc845fd8a000">01875</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2549a287bc001212ea1c6f7bbe42be62">AdaptiveHistogram::insertSampleFromRSSample</a>(<span class="keywordtype">size_t</span> samplesize,
<a name="l01876"></a>01876             gsl_rng * rgsl, <span class="keyword">const</span> <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>&amp; rss,
<a name="l01877"></a>01877             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l01878"></a>01878             <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">int</span> label)
<a name="l01879"></a>01879 {
<a name="l01880"></a>01880     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l01881"></a>01881 
<a name="l01882"></a>01882     <span class="keywordflow">try</span> {
<a name="l01883"></a>01883 
<a name="l01884"></a>01884         <a class="code" href="namespacesubpavings.shtml#a30e15e24c8d81a2160d7422ef3c39d68" title="Define type RVecData as a container for rvectors.">RVecData</a> myDataRvectors; <span class="comment">// container for the rvectors we take in</span>
<a name="l01885"></a>01885 
<a name="l01886"></a>01886         <span class="comment">// try to sample data from rss.Samples and check how many data points found</span>
<a name="l01887"></a>01887         <span class="keywordtype">size_t</span> numberTaken = <a class="code" href="namespacesubpavings.shtml#ae988c56fd983d75dd9f60a5ef8f87660" title="Get a sample of rvectors from an RSSample object.">getSampleRvectorsFromRSSample</a>(myDataRvectors,
<a name="l01888"></a>01888                                 rgsl, samplesize, rss, label);
<a name="l01889"></a>01889 
<a name="l01890"></a>01890         <span class="keywordflow">if</span> (numberTaken &gt; 0) {
<a name="l01891"></a>01891             <span class="comment">/* switch on for more output during histogram creation</span>
<a name="l01892"></a>01892 <span class="comment">            // confirm the amount of data taken from the RSSample</span>
<a name="l01893"></a>01893 <span class="comment">            std::cout &lt;&lt; &quot;End of taking sample from data from RSSample: &quot;</span>
<a name="l01894"></a>01894 <span class="comment">                &lt;&lt; numberTaken &lt;&lt; &quot; data points used for sample&quot; &lt;&lt; std::endl;</span>
<a name="l01895"></a>01895 <span class="comment">            */</span>
<a name="l01896"></a>01896 
<a name="l01897"></a>01897             retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a929e006a5a2a0f40c68d77bc7dff70e7" title="Complete insertion of data from a vector container.">completeDataInsertionFromVec</a>(myDataRvectors,
<a name="l01898"></a>01898                                                     boolTest, logging);
<a name="l01899"></a>01899         }
<a name="l01900"></a>01900     }
<a name="l01901"></a>01901 
<a name="l01902"></a>01902     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01903"></a>01903         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l01904"></a>01904         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory inserting data.  Orginal error: &quot;</span>
<a name="l01905"></a>01905                                             + oldmsg;
<a name="l01906"></a>01906         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01907"></a>01907         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01908"></a>01908     }
<a name="l01909"></a>01909     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l01910"></a>01910         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l01911"></a>01911         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error inserting data.  Orginal error: &quot;</span>
<a name="l01912"></a>01912                                     + oldmsg;
<a name="l01913"></a>01913         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01914"></a>01914         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01915"></a>01915     }
<a name="l01916"></a>01916     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l01917"></a>01917         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l01918"></a>01918         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l01919"></a>01919         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01920"></a>01920         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01921"></a>01921     }
<a name="l01922"></a>01922     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01923"></a>01923         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l01924"></a>01924         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l01925"></a>01925         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01926"></a>01926         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01927"></a>01927     }
<a name="l01928"></a>01928 
<a name="l01929"></a>01929     <span class="keywordflow">return</span> retValue;
<a name="l01930"></a>01930 }
<a name="l01931"></a>01931 
<a name="l01932"></a>01932 <span class="comment">// method to insert a sample of rvectors from an RSSample object</span>
<a name="l01933"></a>01933 <span class="comment">// this version takes seed for a random number generator</span>
<a name="l01934"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8437c7aa645e4edc21a5bc4ec02db5ef">01934</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2549a287bc001212ea1c6f7bbe42be62">AdaptiveHistogram::insertSampleFromRSSample</a>(<span class="keywordtype">size_t</span> samplesize,
<a name="l01935"></a>01935             <span class="keywordtype">int</span> seed, <span class="keyword">const</span> <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>&amp; rss, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l01936"></a>01936             <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">int</span> label)
<a name="l01937"></a>01937 {
<a name="l01938"></a>01938     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l01939"></a>01939 
<a name="l01940"></a>01940     gsl_rng * rgsl = NULL;
<a name="l01941"></a>01941 
<a name="l01942"></a>01942     <span class="keywordflow">try</span> {
<a name="l01943"></a>01943 
<a name="l01944"></a>01944         <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l01945"></a>01945 
<a name="l01946"></a>01946         <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l01947"></a>01947         <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l01948"></a>01948         gsl_rng_env_setup();
<a name="l01949"></a>01949 
<a name="l01950"></a>01950         tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l01951"></a>01951         rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l01952"></a>01952         gsl_rng_set (rgsl, seed); <span class="comment">// change the seed</span>
<a name="l01953"></a>01953 
<a name="l01954"></a>01954         retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2549a287bc001212ea1c6f7bbe42be62">insertSampleFromRSSample</a>(samplesize, rgsl, rss, boolTest,
<a name="l01955"></a>01955                 logging, label);
<a name="l01956"></a>01956 
<a name="l01957"></a>01957         gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01958"></a>01958     }
<a name="l01959"></a>01959     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l01960"></a>01960         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01961"></a>01961         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l01962"></a>01962         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory inserting data.  Orginal error: &quot;</span>
<a name="l01963"></a>01963                                             + oldmsg;
<a name="l01964"></a>01964         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01965"></a>01965         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01966"></a>01966     }
<a name="l01967"></a>01967     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l01968"></a>01968         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01969"></a>01969         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l01970"></a>01970         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error inserting data.  Orginal error: &quot;</span>
<a name="l01971"></a>01971                                     + oldmsg;
<a name="l01972"></a>01972         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01973"></a>01973         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01974"></a>01974     }
<a name="l01975"></a>01975     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l01976"></a>01976         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01977"></a>01977         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l01978"></a>01978         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l01979"></a>01979         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01980"></a>01980         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01981"></a>01981     }
<a name="l01982"></a>01982     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l01983"></a>01983         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l01984"></a>01984         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l01985"></a>01985         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l01986"></a>01986         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l01987"></a>01987         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l01988"></a>01988     }
<a name="l01989"></a>01989 
<a name="l01990"></a>01990     <span class="keywordflow">return</span> retValue;
<a name="l01991"></a>01991 }
<a name="l01992"></a>01992 
<a name="l01993"></a>01993 <span class="comment">// method to insert a sample of rvectors from an RSSample object</span>
<a name="l01994"></a>01994 <span class="comment">// this version will set up a random number generator with default seed</span>
<a name="l01995"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a78dd377090622826dd80734395fba635">01995</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2549a287bc001212ea1c6f7bbe42be62">AdaptiveHistogram::insertSampleFromRSSample</a>(<span class="keywordtype">size_t</span> samplesize,
<a name="l01996"></a>01996             <span class="keyword">const</span> <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>&amp; rss, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1SplitDecisionObj.shtml" title="A Virtual class providing decisions on whether to split spsnodes.">SplitDecisionObj</a>&amp; boolTest,
<a name="l01997"></a>01997             <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging, <span class="keywordtype">int</span> label)
<a name="l01998"></a>01998 {
<a name="l01999"></a>01999     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l02000"></a>02000 
<a name="l02001"></a>02001     gsl_rng * rgsl = NULL;
<a name="l02002"></a>02002 
<a name="l02003"></a>02003     <span class="keywordflow">try</span> {
<a name="l02004"></a>02004 
<a name="l02005"></a>02005         <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l02006"></a>02006 
<a name="l02007"></a>02007         <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l02008"></a>02008         <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l02009"></a>02009         gsl_rng_env_setup();
<a name="l02010"></a>02010 
<a name="l02011"></a>02011         tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l02012"></a>02012         rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l02013"></a>02013 
<a name="l02014"></a>02014         retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2549a287bc001212ea1c6f7bbe42be62">insertSampleFromRSSample</a>(samplesize, rgsl, rss, boolTest,
<a name="l02015"></a>02015                 logging, label);
<a name="l02016"></a>02016 
<a name="l02017"></a>02017         gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02018"></a>02018     }
<a name="l02019"></a>02019 
<a name="l02020"></a>02020     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l02021"></a>02021         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02022"></a>02022         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l02023"></a>02023         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory inserting data.  Orginal error: &quot;</span>
<a name="l02024"></a>02024                                             + oldmsg;
<a name="l02025"></a>02025         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02026"></a>02026         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02027"></a>02027     }
<a name="l02028"></a>02028     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l02029"></a>02029         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02030"></a>02030         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l02031"></a>02031         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error inserting data.  Orginal error: &quot;</span>
<a name="l02032"></a>02032                                     + oldmsg;
<a name="l02033"></a>02033         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02034"></a>02034         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02035"></a>02035     }
<a name="l02036"></a>02036     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l02037"></a>02037         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02038"></a>02038         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l02039"></a>02039         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l02040"></a>02040         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02041"></a>02041         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02042"></a>02042     }
<a name="l02043"></a>02043     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l02044"></a>02044         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02045"></a>02045         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l02046"></a>02046         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error inserting data.  Orginal error: &quot;</span> + oldmsg;
<a name="l02047"></a>02047         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02048"></a>02048         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02049"></a>02049     }
<a name="l02050"></a>02050 
<a name="l02051"></a>02051     <span class="keywordflow">return</span> retValue;
<a name="l02052"></a>02052 }
<a name="l02053"></a>02053 
<a name="l02054"></a>02054 
<a name="l02055"></a>02055 
<a name="l02056"></a>02056 <span class="comment">// method to make a leaf node histogram into a multi-node histogram</span>
<a name="l02057"></a>02057 <span class="comment">// by prioritising which node to split first</span>
<a name="l02058"></a>02058 <span class="comment">// keeps splitting until the function object he returns true</span>
<a name="l02059"></a>02059 <span class="comment">// or until there are no more splittable nodes</span>
<a name="l02060"></a>02060 <span class="comment">// outputs to a log file if logging is true</span>
<a name="l02061"></a>02061 <span class="comment">// makes its own random number generator</span>
<a name="l02062"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab28cddbe199adccec104b223f8848712">02062</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">AdaptiveHistogram::prioritySplit</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest,
<a name="l02063"></a>02063                                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l02064"></a>02064                                 <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l02065"></a>02065                                 <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, 
<a name="l02066"></a>02066                       <span class="keywordtype">size_t</span> maxLeafNodes)
<a name="l02067"></a>02067 {
<a name="l02068"></a>02068     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l02069"></a>02069 
<a name="l02070"></a>02070     gsl_rng * rgsl = NULL;
<a name="l02071"></a>02071 
<a name="l02072"></a>02072     <span class="keywordflow">try</span> {
<a name="l02073"></a>02073         <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l02074"></a>02074         <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l02075"></a>02075         <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l02076"></a>02076         <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l02077"></a>02077         gsl_rng_env_setup();
<a name="l02078"></a>02078         tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l02079"></a>02079         rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l02080"></a>02080 
<a name="l02081"></a>02081         retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">prioritySplit</a>(compTest, he, logging,
<a name="l02082"></a>02082                                     minChildPoints, minVolB, rgsl, maxLeafNodes);
<a name="l02083"></a>02083         gsl_rng_free (rgsl);
<a name="l02084"></a>02084     }
<a name="l02085"></a>02085 
<a name="l02086"></a>02086     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l02087"></a>02087         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02088"></a>02088         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l02089"></a>02089         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory in priority split.  Orginal error: &quot;</span>
<a name="l02090"></a>02090                                      + oldmsg;
<a name="l02091"></a>02091         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02092"></a>02092         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02093"></a>02093     }
<a name="l02094"></a>02094     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l02095"></a>02095         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02096"></a>02096         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l02097"></a>02097         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error in priority split.  Orginal error: &quot;</span>
<a name="l02098"></a>02098                                     + oldmsg;
<a name="l02099"></a>02099         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02100"></a>02100         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02101"></a>02101     }
<a name="l02102"></a>02102     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l02103"></a>02103         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02104"></a>02104         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l02105"></a>02105         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in priority split.  Orginal error: &quot;</span>
<a name="l02106"></a>02106                                     + oldmsg;
<a name="l02107"></a>02107         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02108"></a>02108         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02109"></a>02109     }
<a name="l02110"></a>02110     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l02111"></a>02111         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02112"></a>02112         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l02113"></a>02113         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in priority split.  Orginal error: &quot;</span> + oldmsg;
<a name="l02114"></a>02114         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02115"></a>02115         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02116"></a>02116     }
<a name="l02117"></a>02117 
<a name="l02118"></a>02118     <span class="keywordflow">return</span> retValue;
<a name="l02119"></a>02119 }
<a name="l02120"></a>02120 
<a name="l02121"></a>02121 
<a name="l02122"></a>02122 <span class="comment">// method to make a leaf node histogram into a multi-node histogram</span>
<a name="l02123"></a>02123 <span class="comment">// by prioritising which node to split first</span>
<a name="l02124"></a>02124 <span class="comment">// keeps splitting until the function object he returns true</span>
<a name="l02125"></a>02125 <span class="comment">// or until there are no more splittable nodes</span>
<a name="l02126"></a>02126 <span class="comment">// outputs to a log file if logging required</span>
<a name="l02127"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2154185722cd1d4f61f65c7d84d77f2b">02127</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b60528af3d0f583b08284e11d4ff764">AdaptiveHistogram::prioritySplit</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest,
<a name="l02128"></a>02128                                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l02129"></a>02129                                 <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l02130"></a>02130                                 <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB,
<a name="l02131"></a>02131                                 gsl_rng * rgsl, <span class="keywordtype">size_t</span> maxLeafNodes)
<a name="l02132"></a>02132 {    
<a name="l02133"></a>02133     <span class="comment">//cout &lt;&lt; minChildPoints &lt;&lt; endl;</span>
<a name="l02134"></a>02134     <span class="comment">//cout &lt;&lt; minVolB &lt;&lt; endl;</span>
<a name="l02135"></a>02135     <span class="comment">//cout &lt;&lt; maxLeafNodes &lt;&lt; endl;</span>
<a name="l02136"></a>02136     
<a name="l02137"></a>02137     <span class="keywordtype">bool</span> cancontinue = <span class="keyword">false</span>;
<a name="l02138"></a>02138     <span class="keywordtype">bool</span> TooManyLeaves = <span class="keyword">false</span>;
<a name="l02139"></a>02139     
<a name="l02140"></a>02140     <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>) {
<a name="l02141"></a>02141             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No root paving for prioritySplit&quot;</span>);
<a name="l02142"></a>02142     }
<a name="l02143"></a>02143 
<a name="l02144"></a>02144     <span class="keywordflow">try</span> {
<a name="l02145"></a>02145 
<a name="l02146"></a>02146         <span class="keywordtype">bool</span> volChecking = <span class="keyword">false</span>; <span class="comment">// record if we need to check volume before split</span>
<a name="l02147"></a>02147         <span class="keywordtype">double</span> minVol = -1.0; <span class="comment">// minimum volume (used only if checking)</span>
<a name="l02148"></a>02148         <span class="keywordtype">size_t</span> n; <span class="comment">// for number of points in histogram</span>
<a name="l02149"></a>02149 
<a name="l02150"></a>02150         <span class="keywordtype">int</span> i = 0;
<a name="l02151"></a>02151         std::string baseFileName = <span class="stringliteral">&quot;&quot;</span>;
<a name="l02152"></a>02152         std::string s = <span class="stringliteral">&quot;&quot;</span>;
<a name="l02153"></a>02153         <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l02154"></a>02154             <span class="comment">// pass to log output to keep track of splits</span>
<a name="l02155"></a>02155             baseFileName = <span class="stringliteral">&quot;pqOutput&quot;</span>;
<a name="l02156"></a>02156             s = <a class="code" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609" title="Construct a unique filename from base and timestamp number.">getUniqueFilename</a>(baseFileName);
<a name="l02157"></a>02157         }
<a name="l02158"></a>02158 
<a name="l02159"></a>02159         <span class="comment">// make volChecking true if minVolB is &gt; 0.0</span>
<a name="l02160"></a>02160         <span class="keywordflow">if</span> (minVolB &gt; 0.0) {
<a name="l02161"></a>02161             <span class="comment">// minimum volume of a splittable node is minVolB(log n)^2/n</span>
<a name="l02162"></a>02162             minVol = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a0ef2d251d61753086a358bdd9bda057f" title="get the value of the minimum volume for a splittable node.">getMinVol</a>(minVolB);
<a name="l02163"></a>02163            volChecking = <span class="keyword">true</span>;
<a name="l02164"></a>02164         }
<a name="l02165"></a>02165 
<a name="l02166"></a>02166         <span class="comment">// a multiset for the queue (key values are not necessarily unique)</span>
<a name="l02167"></a>02167         multiset&lt;SPSnode*, MyCompare&gt; pq((<a class="code" href="classMyCompare.shtml">MyCompare</a>(compTest)));
<a name="l02168"></a>02168 
<a name="l02169"></a>02169         n = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>(); <span class="comment">// number of points in histogram</span>
<a name="l02170"></a>02170 
<a name="l02171"></a>02171         <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l02172"></a>02172              <span class="comment">// Start log file with filename and timestamp</span>
<a name="l02173"></a>02173             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad847a4add7e72eac564daa44835dba5b" title="Opening line of a txt log file.">outputLogStart</a>(s);
<a name="l02174"></a>02174             <span class="comment">// log the current state of the histogram</span>
<a name="l02175"></a>02175             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">outputLog</a>(s, i);
<a name="l02176"></a>02176             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a602b8b4081d3cae20308aa6644a83fa9" title="Add AIC EMP score to log file.">outputLogEMPAIC</a>(s); <span class="comment">// add AIC scores</span>
<a name="l02177"></a>02177             i++;
<a name="l02178"></a>02178         }
<a name="l02179"></a>02179 
<a name="l02180"></a>02180         <span class="comment">// put nodes into the starting set IF they meet minVol test AND IF either</span>
<a name="l02181"></a>02181         <span class="comment">// there are enough points in the whole node</span>
<a name="l02182"></a>02182                 <span class="comment">// and minChildCountIfSplit is 0 (ie all points go to one child)</span>
<a name="l02183"></a>02183         <span class="comment">// or the minChildCountIfSplit test passed</span>
<a name="l02184"></a>02184 
<a name="l02185"></a>02185         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l02186"></a>02186             <span class="comment">// check to insert a copy of the rootPaving pointer into the set</span>
<a name="l02187"></a>02187             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>, volChecking, minVol,
<a name="l02188"></a>02188                 minChildPoints)) {
<a name="l02189"></a>02189                     pq.insert(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>);
<a name="l02190"></a>02190             }
<a name="l02191"></a>02191         }
<a name="l02192"></a>02192         <span class="keywordflow">else</span> { <span class="comment">// root is not a leaf</span>
<a name="l02193"></a>02193             <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
<a name="l02194"></a>02194             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l02195"></a>02195             <span class="comment">// check to insert each of the leaves into the set</span>
<a name="l02196"></a>02196             <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> sit;
<a name="l02197"></a>02197             <span class="keywordflow">for</span> (sit = leaves.begin(); sit &lt; leaves.end(); sit++) {
<a name="l02198"></a>02198                 <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>((*sit), volChecking, minVol,
<a name="l02199"></a>02199                 minChildPoints)) {
<a name="l02200"></a>02200                     pq.insert(*sit);
<a name="l02201"></a>02201                 }
<a name="l02202"></a>02202             }
<a name="l02203"></a>02203         }
<a name="l02204"></a>02204 
<a name="l02205"></a>02205         cancontinue = (!pq.empty());
<a name="l02206"></a>02206       
<a name="l02207"></a>02207         <span class="keywordtype">bool</span> bigEnough = cancontinue;
<a name="l02208"></a>02208        TooManyLeaves = (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &gt; maxLeafNodes);
<a name="l02209"></a>02209 
<a name="l02210"></a>02210         <span class="keywordflow">if</span>(!cancontinue) {
<a name="l02211"></a>02211             std::cout &lt;&lt; <span class="stringliteral">&quot;No splittable leaves to split - aborting&quot;</span> &lt;&lt; std::endl;
<a name="l02212"></a>02212         }
<a name="l02213"></a>02213 
<a name="l02214"></a>02214       
<a name="l02215"></a>02215         <span class="comment">// split until the HistEvalObj he () operator returns true</span>
<a name="l02216"></a>02216         <span class="comment">// we only put splittable nodes into the set, so we don&#39;t have to check</span>
<a name="l02217"></a>02217         <span class="comment">// that they are splittable when we take them out</span>
<a name="l02218"></a>02218         <span class="keywordflow">while</span> (bigEnough &amp;&amp; !he(<span class="keyword">this</span>) &amp;&amp; !TooManyLeaves) {
<a name="l02219"></a>02219             
<a name="l02220"></a>02220             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* largest = *(pq.rbegin ()); <span class="comment">// the last largest in the set</span>
<a name="l02221"></a>02221             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* chosenLargest;
<a name="l02222"></a>02222             
<a name="l02223"></a>02223             <span class="comment">// find if there are any more equal to largest around</span>
<a name="l02224"></a>02224             multiset&lt;SPSnode*, MyCompare&gt;::iterator mit;
<a name="l02225"></a>02225             pair&lt;multiset&lt;SPSnode*, MyCompare&gt;::iterator,
<a name="l02226"></a>02226                 multiset&lt;SPSnode*, MyCompare&gt;::iterator&gt; equalLargest;
<a name="l02227"></a>02227 
<a name="l02228"></a>02228             equalLargest = pq.equal_range(largest); <span class="comment">// everything that = largest</span>
<a name="l02229"></a>02229             <span class="keywordtype">size_t</span> numberLargest = pq.count(largest); <span class="comment">// number of =largest</span>
<a name="l02230"></a>02230 
<a name="l02231"></a>02231             <span class="keywordflow">if</span> (numberLargest &gt; 1) {
<a name="l02232"></a>02232 
<a name="l02233"></a>02233                 <span class="comment">// draw a random number in [0,1)</span>
<a name="l02234"></a>02234                 <span class="keywordtype">double</span> rand = gsl_rng_uniform(rgsl);
<a name="l02235"></a>02235 
<a name="l02236"></a>02236                 real sum = 0.0;
<a name="l02237"></a>02237 
<a name="l02238"></a>02238                 <span class="comment">// random selection of the =largest node to chose</span>
<a name="l02239"></a>02239                 <span class="keywordflow">for</span> (mit=equalLargest.first; mit!=equalLargest.second; ++mit) {
<a name="l02240"></a>02240 
<a name="l02241"></a>02241                     sum += 1.0/(1.0*numberLargest);
<a name="l02242"></a>02242                     <span class="keywordflow">if</span> (rand &lt; sum) {
<a name="l02243"></a>02243 
<a name="l02244"></a>02244                         <span class="keywordflow">break</span>;
<a name="l02245"></a>02245                     }
<a name="l02246"></a>02246                 }
<a name="l02247"></a>02247                 chosenLargest = *(mit); <span class="comment">// the chosen largest in the set</span>
<a name="l02248"></a>02248                 pq.erase(mit);<span class="comment">// take the iterator to chosen largest out of the set</span>
<a name="l02249"></a>02249             }
<a name="l02250"></a>02250 
<a name="l02251"></a>02251             <span class="keywordflow">else</span> {
<a name="l02252"></a>02252 
<a name="l02253"></a>02253                 chosenLargest = *(pq.rbegin ()); <span class="comment">// the only largest</span>
<a name="l02254"></a>02254                 multiset&lt;SPSnode*, MyCompare&gt;::iterator it = pq.end();
<a name="l02255"></a>02255                 it--;
<a name="l02256"></a>02256                 pq.erase(it);<span class="comment">// take this largest out of the set</span>
<a name="l02257"></a>02257             }
<a name="l02258"></a>02258 
<a name="l02259"></a>02259             <span class="comment">// accumulate the changes in scaled EMP sums that will result</span>
<a name="l02260"></a>02260             <span class="comment">// from this expansion</span>
<a name="l02261"></a>02261             <span class="comment">//updateScaledEMPSumCOPERR(chosenLargest-&gt;getSplitChangeEMPCOPERR(n));</span>
<a name="l02262"></a>02262             <span class="comment">//updateScaledEMPSumAIC(chosenLargest-&gt;getSplitChangeEMPAIC());</span>
<a name="l02263"></a>02263 
<a name="l02264"></a>02264             <span class="comment">// split the biggest one and divvie up its data</span>
<a name="l02265"></a>02265 
<a name="l02266"></a>02266           <span class="comment">// cout &lt;&lt; &quot;chosenLargest: &quot; &lt;&lt; chosenLargest-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; chosenLargest-&gt;getCounter() &lt;&lt; endl;</span>
<a name="l02267"></a>02267            
<a name="l02268"></a>02268            <a class="code" href="namespacesubpavings.shtml#a6bce1a57598248196dd6b3e6010e724a" title="Expand a leaf node to have two child nodes.">Expand</a>(chosenLargest);
<a name="l02269"></a>02269 
<a name="l02270"></a>02270            
<a name="l02271"></a>02271            <span class="comment">//cout &lt;&lt; getLeafLevelsString() &lt;&lt; endl;</span>
<a name="l02272"></a>02272 
<a name="l02273"></a>02273             <span class="comment">// add the new child names to the creation string</span>
<a name="l02274"></a>02274             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a> += chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l02275"></a>02275 
<a name="l02276"></a>02276             <span class="comment">// but only put the children into the container if they can be</span>
<a name="l02277"></a>02277             <span class="comment">// split, which means IF the child meets the min vol test AND IF</span>
<a name="l02278"></a>02278             <span class="comment">// either there are enough points in the whole child and</span>
<a name="l02279"></a>02279                 <span class="comment">// the child&#39;s minChildCountIfSplit is 0 (ie all points go to</span>
<a name="l02280"></a>02280                 <span class="comment">// one child of the child)</span>
<a name="l02281"></a>02281             <span class="comment">// or the child&#39;s minChildCountIfSplit test is passed</span>
<a name="l02282"></a>02282 
<a name="l02283"></a>02283             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>(),
<a name="l02284"></a>02284                     volChecking, minVol, minChildPoints)) {
<a name="l02285"></a>02285                 <span class="comment">// insert the new left child into the multiset</span>
<a name="l02286"></a>02286                 
<a name="l02287"></a>02287                 pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l02288"></a>02288             }
<a name="l02289"></a>02289 
<a name="l02290"></a>02290             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>(),
<a name="l02291"></a>02291                     volChecking, minVol, minChildPoints)) {
<a name="l02292"></a>02292                 <span class="comment">// insert the new right child into the multiset</span>
<a name="l02293"></a>02293                
<a name="l02294"></a>02294                 pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l02295"></a>02295             }
<a name="l02296"></a>02296 
<a name="l02297"></a>02297             <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l02298"></a>02298                 <span class="comment">// To add current state of histogram to log file</span>
<a name="l02299"></a>02299                 <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">outputLog</a>(s, i);
<a name="l02300"></a>02300                 <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a602b8b4081d3cae20308aa6644a83fa9" title="Add AIC EMP score to log file.">outputLogEMPAIC</a>(s); <span class="comment">// add AIC scores</span>
<a name="l02301"></a>02301                 i++;
<a name="l02302"></a>02302             }
<a name="l02303"></a>02303 
<a name="l02304"></a>02304             bigEnough = (!pq.empty());
<a name="l02305"></a>02305             <span class="keywordflow">if</span> (!bigEnough)
<a name="l02306"></a>02306                 std::cout &lt;&lt; <span class="stringliteral">&quot;Terminated splitting: no splittable nodes left&quot;</span>
<a name="l02307"></a>02307                     &lt;&lt; std::endl;
<a name="l02308"></a>02308         
<a name="l02309"></a>02309         
<a name="l02310"></a>02310         <span class="comment">// check if number of leaf nodes in subpaving &gt; maxLeafNodes</span>
<a name="l02311"></a>02311         <span class="comment">// maximum number of leaf nodes allowed</span>
<a name="l02312"></a>02312         <span class="comment">//n^B, A+B &gt; 1, 0  &lt; A &lt; 1, 0 &lt; B &lt; 1 - refer Prop. 1 in PQ paper</span>
<a name="l02313"></a>02313         TooManyLeaves = (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &gt; maxLeafNodes);
<a name="l02314"></a>02314         <span class="keywordflow">if</span> ( TooManyLeaves) {
<a name="l02315"></a>02315           std::cout &lt;&lt; <span class="stringliteral">&quot;Terminated splitting: maximum number of leaf nodes = &quot;</span>&lt;&lt; maxLeafNodes &lt;&lt; <span class="stringliteral">&quot; reached&quot;</span>
<a name="l02316"></a>02316                           &lt;&lt; std::endl;
<a name="l02317"></a>02317         }
<a name="l02318"></a>02318       
<a name="l02319"></a>02319   }
<a name="l02320"></a>02320          
<a name="l02321"></a>02321          
<a name="l02322"></a>02322         <span class="keywordflow">if</span> (cancontinue &amp;&amp; (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>)) {
<a name="l02323"></a>02323             <span class="comment">// log the leaf levels line</span>
<a name="l02324"></a>02324             <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aca69edc461799f9d867d7eea6cb76f8e">getLeafLevelsString</a>());
<a name="l02325"></a>02325 
<a name="l02326"></a>02326         }
<a name="l02327"></a>02327 
<a name="l02328"></a>02328         <span class="comment">// EMPSums will have been adjusted during the splitting process</span>
<a name="l02329"></a>02329    }
<a name="l02330"></a>02330 
<a name="l02331"></a>02331     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l02332"></a>02332         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l02333"></a>02333         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory iin priority split.  Orginal error: &quot;</span>
<a name="l02334"></a>02334                                     + oldmsg;
<a name="l02335"></a>02335         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02336"></a>02336         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02337"></a>02337     }
<a name="l02338"></a>02338     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l02339"></a>02339         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l02340"></a>02340         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error in priority split.  Orginal error: &quot;</span>
<a name="l02341"></a>02341                                     + oldmsg;
<a name="l02342"></a>02342         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02343"></a>02343         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02344"></a>02344     }
<a name="l02345"></a>02345     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l02346"></a>02346         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l02347"></a>02347         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in priority split.  Orginal error: &quot;</span>
<a name="l02348"></a>02348                                     + oldmsg;
<a name="l02349"></a>02349         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02350"></a>02350         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02351"></a>02351     }
<a name="l02352"></a>02352     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l02353"></a>02353         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l02354"></a>02354         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in priority split.  Orginal error: &quot;</span> + oldmsg;
<a name="l02355"></a>02355         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02356"></a>02356         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02357"></a>02357     }
<a name="l02358"></a>02358 
<a name="l02359"></a>02359     <span class="keywordflow">return</span> (cancontinue);
<a name="l02360"></a>02360 }
<a name="l02361"></a>02361 
<a name="l02362"></a>02362 <span class="comment">//gat41</span>
<a name="l02363"></a>02363 <span class="comment">// method to make a leaf node histogram into a multi-node histogram</span>
<a name="l02364"></a>02364 <span class="comment">// by prioritising which node to split first</span>
<a name="l02365"></a>02365 <span class="comment">// keeps splitting until the function object he returns true</span>
<a name="l02366"></a>02366 <span class="comment">// or until there are no more splittable nodes</span>
<a name="l02367"></a>02367 <span class="comment">// outputs to a log file if logging is true</span>
<a name="l02368"></a>02368 <span class="comment">// makes its own random number generator</span>
<a name="l02369"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa1b1ab0c522e46bc4bd0ab45547dea6b">02369</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">AdaptiveHistogram::prioritySplitWithSwitches</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest,
<a name="l02370"></a>02370                                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l02371"></a>02371                                 <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l02372"></a>02372                                 <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, 
<a name="l02373"></a>02373                       <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> removeBox)
<a name="l02374"></a>02374 {
<a name="l02375"></a>02375     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l02376"></a>02376 
<a name="l02377"></a>02377     gsl_rng * rgsl = NULL;
<a name="l02378"></a>02378 
<a name="l02379"></a>02379     <span class="keywordflow">try</span> {
<a name="l02380"></a>02380         <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l02381"></a>02381         <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l02382"></a>02382         <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l02383"></a>02383         <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l02384"></a>02384         gsl_rng_env_setup();
<a name="l02385"></a>02385         tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l02386"></a>02386         rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l02387"></a>02387 
<a name="l02388"></a>02388         retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">prioritySplitWithSwitches</a>(compTest, he, logging,
<a name="l02389"></a>02389                                     minChildPoints, minVolB, rgsl, maxLeafNodes,
<a name="l02390"></a>02390                         removeBox);
<a name="l02391"></a>02391         gsl_rng_free (rgsl);
<a name="l02392"></a>02392     }
<a name="l02393"></a>02393 
<a name="l02394"></a>02394     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l02395"></a>02395         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02396"></a>02396         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l02397"></a>02397         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory in priority split.  Orginal error: &quot;</span>
<a name="l02398"></a>02398                                      + oldmsg;
<a name="l02399"></a>02399         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02400"></a>02400         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02401"></a>02401     }
<a name="l02402"></a>02402     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l02403"></a>02403         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02404"></a>02404         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l02405"></a>02405         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error in priority split.  Orginal error: &quot;</span>
<a name="l02406"></a>02406                                     + oldmsg;
<a name="l02407"></a>02407         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02408"></a>02408         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02409"></a>02409     }
<a name="l02410"></a>02410     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l02411"></a>02411         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02412"></a>02412         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l02413"></a>02413         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in priority split.  Orginal error: &quot;</span>
<a name="l02414"></a>02414                                     + oldmsg;
<a name="l02415"></a>02415         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02416"></a>02416         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02417"></a>02417     }
<a name="l02418"></a>02418     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l02419"></a>02419         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02420"></a>02420         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l02421"></a>02421         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in priority split.  Orginal error: &quot;</span> + oldmsg;
<a name="l02422"></a>02422         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02423"></a>02423         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02424"></a>02424     }
<a name="l02425"></a>02425 
<a name="l02426"></a>02426     <span class="keywordflow">return</span> retValue;
<a name="l02427"></a>02427 }
<a name="l02428"></a>02428 
<a name="l02429"></a>02429 <span class="comment">//gat41</span>
<a name="l02430"></a>02430 <span class="comment">// method to make a leaf node histogram into a multi-node histogram</span>
<a name="l02431"></a>02431 <span class="comment">// by prioritising which node to split first</span>
<a name="l02432"></a>02432 <span class="comment">// keeps splitting until the function object he returns true</span>
<a name="l02433"></a>02433 <span class="comment">// or until there are no more splittable nodes</span>
<a name="l02434"></a>02434 <span class="comment">// outputs to a log file if logging required</span>
<a name="l02435"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6eb39e1e4524e415b8eff1ba4a4fc4b0">02435</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a75ca6c8d7a95525b76b098c8c6e20cf8">AdaptiveHistogram::prioritySplitWithSwitches</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest,
<a name="l02436"></a>02436                                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l02437"></a>02437                                 <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l02438"></a>02438                                 <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB,
<a name="l02439"></a>02439                                 gsl_rng * rgsl, <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> removeBox)
<a name="l02440"></a>02440 {    
<a name="l02441"></a>02441     <span class="comment">//cout &lt;&lt; minChildPoints &lt;&lt; endl;</span>
<a name="l02442"></a>02442     <span class="comment">//cout &lt;&lt; minVolB &lt;&lt; endl;</span>
<a name="l02443"></a>02443     <span class="comment">//cout &lt;&lt; maxLeafNodes &lt;&lt; endl;</span>
<a name="l02444"></a>02444 
<a name="l02445"></a>02445     
<a name="l02446"></a>02446     <span class="keywordtype">bool</span> cancontinue = <span class="keyword">false</span>;
<a name="l02447"></a>02447     <span class="keywordtype">bool</span> TooManyLeaves = <span class="keyword">false</span>;
<a name="l02448"></a>02448     
<a name="l02449"></a>02449     <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>) {
<a name="l02450"></a>02450             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No root paving for prioritySplit&quot;</span>);
<a name="l02451"></a>02451     }
<a name="l02452"></a>02452 
<a name="l02453"></a>02453     <span class="keywordflow">try</span> {
<a name="l02454"></a>02454 
<a name="l02455"></a>02455         <span class="keywordtype">bool</span> volChecking = <span class="keyword">false</span>; <span class="comment">// record if we need to check volume before split</span>
<a name="l02456"></a>02456         <span class="keywordtype">double</span> minVol = -1.0; <span class="comment">// minimum volume (used only if checking)</span>
<a name="l02457"></a>02457         <span class="keywordtype">size_t</span> n; <span class="comment">// for number of points in histogram</span>
<a name="l02458"></a>02458 
<a name="l02459"></a>02459         <span class="keywordtype">int</span> i = 0;
<a name="l02460"></a>02460         std::string baseFileName = <span class="stringliteral">&quot;&quot;</span>;
<a name="l02461"></a>02461         std::string s = <span class="stringliteral">&quot;&quot;</span>;
<a name="l02462"></a>02462         <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l02463"></a>02463             <span class="comment">// pass to log output to keep track of splits</span>
<a name="l02464"></a>02464             baseFileName = <span class="stringliteral">&quot;pqOutput&quot;</span>;
<a name="l02465"></a>02465             s = <a class="code" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609" title="Construct a unique filename from base and timestamp number.">getUniqueFilename</a>(baseFileName);
<a name="l02466"></a>02466         }
<a name="l02467"></a>02467 
<a name="l02468"></a>02468         <span class="comment">// make volChecking true if minVolB is &gt; 0.0</span>
<a name="l02469"></a>02469         <span class="keywordflow">if</span> (minVolB &gt; 0.0) {
<a name="l02470"></a>02470             <span class="comment">// minimum volume of a splittable node is minVolB(log n)^2/n</span>
<a name="l02471"></a>02471             minVol = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a0ef2d251d61753086a358bdd9bda057f" title="get the value of the minimum volume for a splittable node.">getMinVol</a>(minVolB);
<a name="l02472"></a>02472            volChecking = <span class="keyword">true</span>;
<a name="l02473"></a>02473         }
<a name="l02474"></a>02474 
<a name="l02475"></a>02475         <span class="comment">// a multiset for the queue (key values are not necessarily unique)</span>
<a name="l02476"></a>02476         multiset&lt;SPSnode*, MyCompare&gt; pq((<a class="code" href="classMyCompare.shtml">MyCompare</a>(compTest)));
<a name="l02477"></a>02477 
<a name="l02478"></a>02478         n = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>(); <span class="comment">// number of points in histogram</span>
<a name="l02479"></a>02479 
<a name="l02480"></a>02480         <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l02481"></a>02481              <span class="comment">// Start log file with filename and timestamp</span>
<a name="l02482"></a>02482             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad847a4add7e72eac564daa44835dba5b" title="Opening line of a txt log file.">outputLogStart</a>(s);
<a name="l02483"></a>02483             <span class="comment">// log the current state of the histogram</span>
<a name="l02484"></a>02484             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">outputLog</a>(s, i);
<a name="l02485"></a>02485             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a602b8b4081d3cae20308aa6644a83fa9" title="Add AIC EMP score to log file.">outputLogEMPAIC</a>(s); <span class="comment">// add AIC scores</span>
<a name="l02486"></a>02486             i++;
<a name="l02487"></a>02487         }
<a name="l02488"></a>02488 
<a name="l02489"></a>02489         <span class="comment">// put nodes into the starting set IF they meet minVol test AND IF either</span>
<a name="l02490"></a>02490         <span class="comment">// there are enough points in the whole node</span>
<a name="l02491"></a>02491                 <span class="comment">// and minChildCountIfSplit is 0 (ie all points go to one child)</span>
<a name="l02492"></a>02492         <span class="comment">// or the minChildCountIfSplit test passed</span>
<a name="l02493"></a>02493 
<a name="l02494"></a>02494         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l02495"></a>02495             <span class="comment">// check to insert a copy of the rootPaving pointer into the set</span>
<a name="l02496"></a>02496             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>, volChecking, minVol,
<a name="l02497"></a>02497                 minChildPoints)) {
<a name="l02498"></a>02498                     pq.insert(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>);
<a name="l02499"></a>02499             }
<a name="l02500"></a>02500         }
<a name="l02501"></a>02501         <span class="keywordflow">else</span> { <span class="comment">// root is not a leaf</span>
<a name="l02502"></a>02502             <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
<a name="l02503"></a>02503             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l02504"></a>02504             <span class="comment">// check to insert each of the leaves into the set</span>
<a name="l02505"></a>02505             <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> sit;
<a name="l02506"></a>02506             <span class="keywordflow">for</span> (sit = leaves.begin(); sit &lt; leaves.end(); sit++) {
<a name="l02507"></a>02507                 <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>((*sit), volChecking, minVol,
<a name="l02508"></a>02508                 minChildPoints)) {
<a name="l02509"></a>02509                     pq.insert(*sit);
<a name="l02510"></a>02510                 }
<a name="l02511"></a>02511             }
<a name="l02512"></a>02512         }
<a name="l02513"></a>02513 
<a name="l02514"></a>02514         cancontinue = (!pq.empty());
<a name="l02515"></a>02515       
<a name="l02516"></a>02516         <span class="keywordtype">bool</span> bigEnough = cancontinue;
<a name="l02517"></a>02517        TooManyLeaves = (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &gt; maxLeafNodes);
<a name="l02518"></a>02518 
<a name="l02519"></a>02519         <span class="keywordflow">if</span>(!cancontinue) {
<a name="l02520"></a>02520             std::cout &lt;&lt; <span class="stringliteral">&quot;No splittable leaves to split - aborting&quot;</span> &lt;&lt; std::endl;
<a name="l02521"></a>02521         }
<a name="l02522"></a>02522 
<a name="l02523"></a>02523       
<a name="l02524"></a>02524         <span class="comment">// split until the HistEvalObj he () operator returns true</span>
<a name="l02525"></a>02525         <span class="comment">// we only put splittable nodes into the set, so we don&#39;t have to check</span>
<a name="l02526"></a>02526         <span class="comment">// that they are splittable when we take them out</span>
<a name="l02527"></a>02527         
<a name="l02528"></a>02528         <span class="keywordtype">size_t</span> temp = 0;
<a name="l02529"></a>02529         
<a name="l02530"></a>02530         <span class="keywordflow">while</span> (bigEnough &amp;&amp; !he(<span class="keyword">this</span>) &amp;&amp; !TooManyLeaves) {
<a name="l02531"></a>02531             
<a name="l02532"></a>02532             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* largest = *(pq.rbegin ()); <span class="comment">// the last largest in the set</span>
<a name="l02533"></a>02533             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* chosenLargest;
<a name="l02534"></a>02534             
<a name="l02535"></a>02535             <span class="comment">// find if there are any more equal to largest around</span>
<a name="l02536"></a>02536             multiset&lt;SPSnode*, MyCompare&gt;::iterator mit;
<a name="l02537"></a>02537             pair&lt;multiset&lt;SPSnode*, MyCompare&gt;::iterator,
<a name="l02538"></a>02538                 multiset&lt;SPSnode*, MyCompare&gt;::iterator&gt; equalLargest;
<a name="l02539"></a>02539 
<a name="l02540"></a>02540             equalLargest = pq.equal_range(largest); <span class="comment">// everything that = largest</span>
<a name="l02541"></a>02541             <span class="keywordtype">size_t</span> numberLargest = pq.count(largest); <span class="comment">// number of =largest</span>
<a name="l02542"></a>02542 
<a name="l02543"></a>02543             <span class="keywordflow">if</span> (numberLargest &gt; 1) {
<a name="l02544"></a>02544 
<a name="l02545"></a>02545                 <span class="comment">// draw a random number in [0,1)</span>
<a name="l02546"></a>02546                 <span class="keywordtype">double</span> rand = gsl_rng_uniform(rgsl);
<a name="l02547"></a>02547 
<a name="l02548"></a>02548                 real sum = 0.0;
<a name="l02549"></a>02549 
<a name="l02550"></a>02550                 <span class="comment">// random selection of the =largest node to chose</span>
<a name="l02551"></a>02551                 <span class="keywordflow">for</span> (mit=equalLargest.first; mit!=equalLargest.second; ++mit) {
<a name="l02552"></a>02552 
<a name="l02553"></a>02553                     sum += 1.0/(1.0*numberLargest);
<a name="l02554"></a>02554                     <span class="keywordflow">if</span> (rand &lt; sum) {
<a name="l02555"></a>02555 
<a name="l02556"></a>02556                         <span class="keywordflow">break</span>;
<a name="l02557"></a>02557                     }
<a name="l02558"></a>02558                 }
<a name="l02559"></a>02559                 chosenLargest = *(mit); <span class="comment">// the chosen largest in the set</span>
<a name="l02560"></a>02560                 pq.erase(mit);<span class="comment">// take the iterator to chosen largest out of the set</span>
<a name="l02561"></a>02561             }
<a name="l02562"></a>02562 
<a name="l02563"></a>02563             <span class="keywordflow">else</span> {
<a name="l02564"></a>02564 
<a name="l02565"></a>02565                 chosenLargest = *(pq.rbegin ()); <span class="comment">// the only largest</span>
<a name="l02566"></a>02566                 multiset&lt;SPSnode*, MyCompare&gt;::iterator it = pq.end();
<a name="l02567"></a>02567                 it--;
<a name="l02568"></a>02568                 pq.erase(it);<span class="comment">// take this largest out of the set</span>
<a name="l02569"></a>02569             }
<a name="l02570"></a>02570 
<a name="l02571"></a>02571             <span class="comment">// accumulate the changes in scaled EMP sums that will result</span>
<a name="l02572"></a>02572             <span class="comment">// from this expansion</span>
<a name="l02573"></a>02573             <span class="comment">//updateScaledEMPSumCOPERR(chosenLargest-&gt;getSplitChangeEMPCOPERR(n));</span>
<a name="l02574"></a>02574             <span class="comment">//updateScaledEMPSumAIC(chosenLargest-&gt;getSplitChangeEMPAIC());</span>
<a name="l02575"></a>02575 
<a name="l02576"></a>02576             <span class="comment">// split the biggest one and divvie up its data</span>
<a name="l02577"></a>02577         <span class="comment">//cout &lt;&lt; &quot;===============&quot; &lt;&lt; endl;</span>
<a name="l02578"></a>02578         
<a name="l02579"></a>02579         <span class="comment">//cout &lt;&lt; &quot;chosenLargest: &quot; &lt;&lt; chosenLargest-&gt;getNodeName() &lt;&lt; </span>
<a name="l02580"></a>02580         <span class="comment">//&quot;\t&quot; &lt;&lt; chosenLargest-&gt;getBox() &lt;&lt; &quot;\t&quot;</span>
<a name="l02581"></a>02581         <span class="comment">//&lt;&lt; chosenLargest-&gt;getHellingerDist1D() &lt;&lt; endl;</span>
<a name="l02582"></a>02582           
<a name="l02583"></a>02583         <span class="comment">//rvector diffMean = chosenLargest-&gt;getMean() - chosenLargest-&gt;getUniformMean();</span>
<a name="l02584"></a>02584         <span class="comment">//cout &lt;&lt; &quot;mean differences: &quot; &lt;&lt; diffMean[1] &lt;&lt; endl;</span>
<a name="l02585"></a>02585 
<a name="l02586"></a>02586         <span class="comment">//RealVec unifCovar = chosenLargest-&gt;getUniformVarCovar();</span>
<a name="l02587"></a>02587         <span class="comment">//RealVec Covar = chosenLargest-&gt;getVarCovar();</span>
<a name="l02588"></a>02588         <span class="comment">//cout &lt;&lt; &quot;variance difference: &quot; &lt;&lt; Covar[0] - unifCovar[0] &lt;&lt; endl;</span>
<a name="l02589"></a>02589         
<a name="l02590"></a>02590         <a class="code" href="namespacesubpavings.shtml#a6bce1a57598248196dd6b3e6010e724a" title="Expand a leaf node to have two child nodes.">Expand</a>(chosenLargest);
<a name="l02591"></a>02591 
<a name="l02592"></a>02592         <span class="comment">/*</span>
<a name="l02593"></a>02593 <span class="comment">        string fileName = &quot;QueueHist&quot;;</span>
<a name="l02594"></a>02594 <span class="comment">        ostringstream stm;</span>
<a name="l02595"></a>02595 <span class="comment">        stm &lt;&lt; temp;</span>
<a name="l02596"></a>02596 <span class="comment">        fileName += stm.str();</span>
<a name="l02597"></a>02597 <span class="comment">        fileName += &quot;.txt&quot;;</span>
<a name="l02598"></a>02598 <span class="comment">        outputToTxtTabs(fileName);</span>
<a name="l02599"></a>02599 <span class="comment">        cout &lt;&lt; &quot;===============&quot; &lt;&lt; endl;</span>
<a name="l02600"></a>02600 <span class="comment">        */</span>
<a name="l02601"></a>02601         temp++;
<a name="l02602"></a>02602          
<a name="l02603"></a>02603             <span class="comment">// add the new child names to the creation string</span>
<a name="l02604"></a>02604             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a> += chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l02605"></a>02605             
<a name="l02606"></a>02606             <span class="comment">// only insert the children into the queue if they have more than or</span>
<a name="l02607"></a>02607             <span class="comment">// equal to removeBox number of points. If true, then</span>
<a name="l02608"></a>02608                <span class="comment">// but only put the children into the container if they can be</span>
<a name="l02609"></a>02609             <span class="comment">// split, which means IF the child meets the min vol test AND IF</span>
<a name="l02610"></a>02610             <span class="comment">// either there are enough points in the whole child and</span>
<a name="l02611"></a>02611                 <span class="comment">// the child&#39;s minChildCountIfSplit is 0 (ie all points go to</span>
<a name="l02612"></a>02612                 <span class="comment">// one child of the child)</span>
<a name="l02613"></a>02613             <span class="comment">// or the child&#39;s minChildCountIfSplit test is passed</span>
<a name="l02614"></a>02614             
<a name="l02615"></a>02615             <span class="keywordflow">if</span> ( ((chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>())-&gt;getCounter() &gt; removeBox) 
<a name="l02616"></a>02616             &amp;&amp; (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>(),
<a name="l02617"></a>02617                     volChecking, minVol, minChildPoints)) ) {
<a name="l02618"></a>02618                 <span class="comment">// insert the new left child into the multiset</span>
<a name="l02619"></a>02619                 pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l02620"></a>02620             }
<a name="l02621"></a>02621 
<a name="l02622"></a>02622             <span class="keywordflow">if</span> ( ((chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>())-&gt;getCounter() &gt; removeBox) 
<a name="l02623"></a>02623             &amp;&amp; (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>(),
<a name="l02624"></a>02624                     volChecking, minVol, minChildPoints)) ) {
<a name="l02625"></a>02625                 <span class="comment">// insert the new right child into the multiset</span>
<a name="l02626"></a>02626                 pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l02627"></a>02627             }
<a name="l02628"></a>02628 
<a name="l02629"></a>02629             <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l02630"></a>02630                 <span class="comment">// To add current state of histogram to log file</span>
<a name="l02631"></a>02631                 <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">outputLog</a>(s, i);
<a name="l02632"></a>02632                 <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a602b8b4081d3cae20308aa6644a83fa9" title="Add AIC EMP score to log file.">outputLogEMPAIC</a>(s); <span class="comment">// add AIC scores</span>
<a name="l02633"></a>02633                 i++;
<a name="l02634"></a>02634             }
<a name="l02635"></a>02635 
<a name="l02636"></a>02636             bigEnough = (!pq.empty());
<a name="l02637"></a>02637             <span class="keywordflow">if</span> (!bigEnough)
<a name="l02638"></a>02638                 std::cout &lt;&lt; <span class="stringliteral">&quot;Terminated splitting: no splittable nodes left&quot;</span>
<a name="l02639"></a>02639                     &lt;&lt; std::endl;
<a name="l02640"></a>02640         
<a name="l02641"></a>02641         
<a name="l02642"></a>02642         <span class="comment">// check if number of leaf nodes in subpaving &gt; maxLeafNodes</span>
<a name="l02643"></a>02643         <span class="comment">// maximum number of leaf nodes allowed</span>
<a name="l02644"></a>02644         <span class="comment">//n^B, A+B &gt; 1, 0  &lt; A &lt; 1, 0 &lt; B &lt; 1 - refer Prop. 1 in PQ paper</span>
<a name="l02645"></a>02645         TooManyLeaves = (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &gt; maxLeafNodes);
<a name="l02646"></a>02646         <span class="keywordflow">if</span> ( TooManyLeaves) {
<a name="l02647"></a>02647           std::cout &lt;&lt; <span class="stringliteral">&quot;Terminated splitting: maximum number of leaf nodes = &quot;</span>&lt;&lt; maxLeafNodes &lt;&lt; <span class="stringliteral">&quot; reached&quot;</span>
<a name="l02648"></a>02648                           &lt;&lt; std::endl;
<a name="l02649"></a>02649         }
<a name="l02650"></a>02650       
<a name="l02651"></a>02651   }
<a name="l02652"></a>02652          
<a name="l02653"></a>02653          
<a name="l02654"></a>02654         <span class="keywordflow">if</span> (cancontinue &amp;&amp; (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>)) {
<a name="l02655"></a>02655             <span class="comment">// log the leaf levels line</span>
<a name="l02656"></a>02656             <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aca69edc461799f9d867d7eea6cb76f8e">getLeafLevelsString</a>());
<a name="l02657"></a>02657 
<a name="l02658"></a>02658         }
<a name="l02659"></a>02659 
<a name="l02660"></a>02660         <span class="comment">// EMPSums will have been adjusted during the splitting process</span>
<a name="l02661"></a>02661    }
<a name="l02662"></a>02662 
<a name="l02663"></a>02663     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l02664"></a>02664         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l02665"></a>02665         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory iin priority split.  Orginal error: &quot;</span>
<a name="l02666"></a>02666                                     + oldmsg;
<a name="l02667"></a>02667         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02668"></a>02668         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02669"></a>02669     }
<a name="l02670"></a>02670     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l02671"></a>02671         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l02672"></a>02672         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error in priority split.  Orginal error: &quot;</span>
<a name="l02673"></a>02673                                     + oldmsg;
<a name="l02674"></a>02674         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02675"></a>02675         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02676"></a>02676     }
<a name="l02677"></a>02677     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l02678"></a>02678         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l02679"></a>02679         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in priority split.  Orginal error: &quot;</span>
<a name="l02680"></a>02680                                     + oldmsg;
<a name="l02681"></a>02681         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02682"></a>02682         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02683"></a>02683     }
<a name="l02684"></a>02684     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l02685"></a>02685         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l02686"></a>02686         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in priority split.  Orginal error: &quot;</span> + oldmsg;
<a name="l02687"></a>02687         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02688"></a>02688         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02689"></a>02689     }
<a name="l02690"></a>02690 
<a name="l02691"></a>02691     <span class="keywordflow">return</span> (cancontinue);
<a name="l02692"></a>02692 }
<a name="l02693"></a>02693 
<a name="l02694"></a>02694 <span class="comment">// method to make a multi-node histogram into one with possibly fewer nodes</span>
<a name="l02695"></a>02695 <span class="comment">// by prioritising which subleaf node to merge first</span>
<a name="l02696"></a>02696 <span class="comment">// keeps merging until the stopTest is satisfied or runs out of subleaves</span>
<a name="l02697"></a>02697 <span class="comment">// outputs to a log file if logging is true</span>
<a name="l02698"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4c8d2603da121585e049548baca3c712">02698</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4c8d2603da121585e049548baca3c712" title="Priority merge to reduce number of leaves in histogram.">AdaptiveHistogram::priorityMerge</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest,
<a name="l02699"></a>02699                         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging)
<a name="l02700"></a>02700 {
<a name="l02701"></a>02701     <span class="keywordtype">bool</span> cancontinue = <span class="keyword">false</span>;
<a name="l02702"></a>02702 
<a name="l02703"></a>02703     <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>) {
<a name="l02704"></a>02704             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No root paving for priorityMerge&quot;</span>);
<a name="l02705"></a>02705     }
<a name="l02706"></a>02706 
<a name="l02707"></a>02707     gsl_rng * rgsl = NULL;
<a name="l02708"></a>02708 
<a name="l02709"></a>02709     <span class="keywordflow">try</span> {
<a name="l02710"></a>02710         <span class="keywordtype">size_t</span> n = 0; <span class="comment">// number of points in histogram</span>
<a name="l02711"></a>02711 
<a name="l02712"></a>02712         <span class="keywordtype">int</span> i = 0;
<a name="l02713"></a>02713         std::string baseFileName = <span class="stringliteral">&quot;&quot;</span>;
<a name="l02714"></a>02714         std::string s = <span class="stringliteral">&quot;&quot;</span>;
<a name="l02715"></a>02715         <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l02716"></a>02716             <span class="comment">// pass to log output to keep track of splits</span>
<a name="l02717"></a>02717             baseFileName = <span class="stringliteral">&quot;pqMergeOutput&quot;</span>;
<a name="l02718"></a>02718             s = <a class="code" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609" title="Construct a unique filename from base and timestamp number.">getUniqueFilename</a>(baseFileName);
<a name="l02719"></a>02719         }
<a name="l02720"></a>02720 
<a name="l02721"></a>02721         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l02722"></a>02722             cancontinue = <span class="keyword">false</span>;
<a name="l02723"></a>02723             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error in priorityMerge: trying to do &quot;</span>
<a name="l02724"></a>02724                 &lt;&lt; <span class="stringliteral">&quot;priority merge where the rootPaving &quot;</span>
<a name="l02725"></a>02725                 &lt;&lt; <span class="stringliteral">&quot;has no children&quot;</span> &lt;&lt; std::endl;
<a name="l02726"></a>02726         }
<a name="l02727"></a>02727         <span class="keywordflow">else</span> cancontinue = <span class="keyword">true</span>;
<a name="l02728"></a>02728 
<a name="l02729"></a>02729         <span class="comment">// a multiset for the queue (key values are not necessarily unique)</span>
<a name="l02730"></a>02730         multiset&lt;SPSnode*, MyCompare&gt; pq((<a class="code" href="classMyCompare.shtml">MyCompare</a>(compTest)));
<a name="l02731"></a>02731 
<a name="l02732"></a>02732         <span class="keywordflow">if</span> (cancontinue) {
<a name="l02733"></a>02733             n = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>(); <span class="comment">// number of points in histogram</span>
<a name="l02734"></a>02734 
<a name="l02735"></a>02735             <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l02736"></a>02736                  <span class="comment">// Start log file with filename and timestamp</span>
<a name="l02737"></a>02737                 <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad847a4add7e72eac564daa44835dba5b" title="Opening line of a txt log file.">outputLogStart</a>(s);
<a name="l02738"></a>02738                 <span class="comment">// log the current state of the histogram</span>
<a name="l02739"></a>02739                 <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">outputLog</a>(s, i);
<a name="l02740"></a>02740                 <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a602b8b4081d3cae20308aa6644a83fa9" title="Add AIC EMP score to log file.">outputLogEMPAIC</a>(s); <span class="comment">// add AIC scores</span>
<a name="l02741"></a>02741                 i++;
<a name="l02742"></a>02742             }
<a name="l02743"></a>02743 
<a name="l02744"></a>02744             <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> subleaves;
<a name="l02745"></a>02745             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af5ff16174902743a78b2d3db3e0a1c70" title="Return a reference to all sub-leaf descendent nodes.">getSubLeaves</a>(subleaves);
<a name="l02746"></a>02746 
<a name="l02747"></a>02747             <span class="comment">// insert a copy of the current set of subleaves into the multiset</span>
<a name="l02748"></a>02748             pq.insert(subleaves.begin(), subleaves.end());
<a name="l02749"></a>02749 
<a name="l02750"></a>02750             cancontinue = (pq.size()&gt;0);
<a name="l02751"></a>02751         }
<a name="l02752"></a>02752 
<a name="l02753"></a>02753         <span class="keywordflow">if</span>(!cancontinue) {
<a name="l02754"></a>02754             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error in priority merging, aborting merge&quot;</span>);
<a name="l02755"></a>02755         }
<a name="l02756"></a>02756 
<a name="l02757"></a>02757         <span class="keywordtype">bool</span> canmerge = cancontinue;
<a name="l02758"></a>02758 
<a name="l02759"></a>02759         <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l02760"></a>02760         <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l02761"></a>02761         <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l02762"></a>02762         <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l02763"></a>02763         gsl_rng_env_setup();
<a name="l02764"></a>02764         tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l02765"></a>02765         rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l02766"></a>02766 
<a name="l02767"></a>02767         <span class="comment">// merge until the HistEvalObj he () operator returns true</span>
<a name="l02768"></a>02768         <span class="keywordflow">while</span> (canmerge &amp;&amp; !he(<span class="keyword">this</span>)) {
<a name="l02769"></a>02769 
<a name="l02770"></a>02770             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* smallest = *(pq.begin ()); <span class="comment">// the first smallest in the set</span>
<a name="l02771"></a>02771 
<a name="l02772"></a>02772             <span class="comment">// find if there are any more equal to smallest around</span>
<a name="l02773"></a>02773             multiset&lt;SPSnode*, MyCompare&gt;::iterator mit;
<a name="l02774"></a>02774             pair&lt;multiset&lt;SPSnode*, MyCompare&gt;::iterator,
<a name="l02775"></a>02775                 multiset&lt;SPSnode*, MyCompare&gt;::iterator&gt; equalSmallest;
<a name="l02776"></a>02776 
<a name="l02777"></a>02777             equalSmallest = pq.equal_range(smallest); <span class="comment">// everything that = smallest</span>
<a name="l02778"></a>02778             <span class="keywordtype">size_t</span> numberSmallest = pq.count(smallest); <span class="comment">// number of =smallest</span>
<a name="l02779"></a>02779 
<a name="l02780"></a>02780             <span class="keywordflow">if</span> (numberSmallest &gt; 1) {
<a name="l02781"></a>02781                 <span class="comment">// draw a random number in [0,1)</span>
<a name="l02782"></a>02782                 <span class="keywordtype">double</span> rand = gsl_rng_uniform(rgsl);
<a name="l02783"></a>02783 
<a name="l02784"></a>02784                 real sum = 0.0;
<a name="l02785"></a>02785 
<a name="l02786"></a>02786                 <span class="comment">// random selection of the =largest node to chose</span>
<a name="l02787"></a>02787                 <span class="keywordflow">for</span> (mit=equalSmallest.first; mit!=equalSmallest.second; ++mit) {
<a name="l02788"></a>02788                     sum += 1.0/(1.0*numberSmallest);
<a name="l02789"></a>02789                     <span class="keywordflow">if</span> (rand &lt; sum) {
<a name="l02790"></a>02790                         <span class="keywordflow">break</span>;
<a name="l02791"></a>02791                     }
<a name="l02792"></a>02792                 }
<a name="l02793"></a>02793             }
<a name="l02794"></a>02794             <span class="keywordflow">else</span> mit = pq.begin ();
<a name="l02795"></a>02795 
<a name="l02796"></a>02796             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* chosenSmallest = *(mit); <span class="comment">// the chosen smallest in the set</span>
<a name="l02797"></a>02797 
<a name="l02798"></a>02798             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a71122bfe1d3dfad1f2b55585326334ac" title="Update the scaled EMP part COPERR score given change.">updateScaledEMPSumCOPERR</a>(chosenSmallest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2c8cc31ffdb9c74b82cce176c8d14585" title="Get scaled change in sum term in EMP under COPERR on merge.">getMergeChangeEMPCOPERR</a>(n));
<a name="l02799"></a>02799             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a79fe01c35fba2bbdb1df5e8eb1d3a78b" title="Update the the scaled EMP part AIC score given change.">updateScaledEMPSumAIC</a>(chosenSmallest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a42114089fcad779bec855496154ded19" title="Get change in sum term in EMP under AIC on merge.">getMergeChangeEMPAIC</a>());
<a name="l02800"></a>02800 
<a name="l02801"></a>02801             <span class="comment">// subtract the child names from the creation string</span>
<a name="l02802"></a>02802             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a> += (<span class="stringliteral">&quot; -(&quot;</span> + chosenSmallest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>() + <span class="stringliteral">&quot;)&quot;</span>);
<a name="l02803"></a>02803 
<a name="l02804"></a>02804             <span class="comment">// merge the biggest one</span>
<a name="l02805"></a>02805             chosenSmallest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a68cc1a1722c627a99dcefc3491847fb2" title="Reabsorbs both children of the node.">nodeReabsorbChildren</a>();
<a name="l02806"></a>02806             pq.erase(mit);<span class="comment">// take the iterator to chosen smallest out of the set</span>
<a name="l02807"></a>02807 
<a name="l02808"></a>02808             <span class="comment">// if smallest had a leaf sibling, smallest&#39;s parent is now a cherry</span>
<a name="l02809"></a>02809             <span class="comment">// and should be inserted into the multiset</span>
<a name="l02810"></a>02810             <span class="keywordflow">if</span> (chosenSmallest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0b8af2e1f907279d8a153129aa37aa8e" title="Check if this has a leaf sibling.">hasLeafSibling</a>()) {
<a name="l02811"></a>02811 
<a name="l02812"></a>02812                 pq.insert(chosenSmallest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a88c1d25d8e0b9738f5199cc4435c08b4" title="Accessor for the parent of a node.">getParent</a>());
<a name="l02813"></a>02813            }
<a name="l02814"></a>02814 
<a name="l02815"></a>02815             canmerge = (pq.size()&gt;0);
<a name="l02816"></a>02816 
<a name="l02817"></a>02817             <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l02818"></a>02818                 <span class="comment">// To add current state of histogram to log file</span>
<a name="l02819"></a>02819                 <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">outputLog</a>(s, i);
<a name="l02820"></a>02820                 <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a602b8b4081d3cae20308aa6644a83fa9" title="Add AIC EMP score to log file.">outputLogEMPAIC</a>(s); <span class="comment">// add AIC scores</span>
<a name="l02821"></a>02821                 i++;
<a name="l02822"></a>02822             }
<a name="l02823"></a>02823         }
<a name="l02824"></a>02824 
<a name="l02825"></a>02825         <span class="keywordflow">if</span>(!canmerge) {
<a name="l02826"></a>02826             std::cout &lt;&lt; <span class="stringliteral">&quot;No more subleaves left to merge&quot;</span> &lt;&lt; std::endl;
<a name="l02827"></a>02827         }
<a name="l02828"></a>02828 
<a name="l02829"></a>02829         <span class="keywordflow">if</span> (cancontinue &amp;&amp; (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>)) {
<a name="l02830"></a>02830             <span class="comment">// log the leaf levels line</span>
<a name="l02831"></a>02831             <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aca69edc461799f9d867d7eea6cb76f8e">getLeafLevelsString</a>());
<a name="l02832"></a>02832         }
<a name="l02833"></a>02833 
<a name="l02834"></a>02834         <span class="comment">// EMPSums will have been adjusted during the merging process</span>
<a name="l02835"></a>02835         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl);
<a name="l02836"></a>02836     }
<a name="l02837"></a>02837     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l02838"></a>02838         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02839"></a>02839         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l02840"></a>02840         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory in priority merge.  Orginal error: &quot;</span>
<a name="l02841"></a>02841                                      + oldmsg;
<a name="l02842"></a>02842         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02843"></a>02843         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02844"></a>02844     }
<a name="l02845"></a>02845     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l02846"></a>02846         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02847"></a>02847         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l02848"></a>02848         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error  in priority merge.  Orginal error: &quot;</span>
<a name="l02849"></a>02849                                     + oldmsg;
<a name="l02850"></a>02850         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02851"></a>02851         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02852"></a>02852     }
<a name="l02853"></a>02853     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l02854"></a>02854         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02855"></a>02855         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l02856"></a>02856         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException  in priority merge.  Orginal error: &quot;</span>
<a name="l02857"></a>02857                                     + oldmsg;
<a name="l02858"></a>02858         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02859"></a>02859         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02860"></a>02860     }
<a name="l02861"></a>02861     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l02862"></a>02862         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l02863"></a>02863         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l02864"></a>02864         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error  in priority merge.  Orginal error: &quot;</span> + oldmsg;
<a name="l02865"></a>02865         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02866"></a>02866         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02867"></a>02867     }
<a name="l02868"></a>02868 
<a name="l02869"></a>02869 
<a name="l02870"></a>02870     <span class="keywordflow">return</span> (cancontinue);
<a name="l02871"></a>02871 }
<a name="l02872"></a>02872 
<a name="l02873"></a>02873 <span class="comment">// method to make a multi-node histogram into a single node histogram</span>
<a name="l02874"></a>02874 <span class="comment">// by merging up to the root box</span>
<a name="l02875"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a745b6edb93463e227edb9c9aa1dcb505">02875</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a745b6edb93463e227edb9c9aa1dcb505" title="Merge a multileaf histogram up to just root box.">AdaptiveHistogram::mergeUp</a>()
<a name="l02876"></a>02876 {
<a name="l02877"></a>02877     <span class="keywordtype">bool</span> cancontinue = <span class="keyword">false</span>;
<a name="l02878"></a>02878 
<a name="l02879"></a>02879     <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>) {
<a name="l02880"></a>02880         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No root paving for mergeUp&quot;</span>);
<a name="l02881"></a>02881 
<a name="l02882"></a>02882     }
<a name="l02883"></a>02883 
<a name="l02884"></a>02884     <span class="keywordflow">try</span> {
<a name="l02885"></a>02885 
<a name="l02886"></a>02886         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l02887"></a>02887             cancontinue = <span class="keyword">false</span>;
<a name="l02888"></a>02888             std::cerr &lt;&lt; <span class="stringliteral">&quot;Nothing to be done - root paving is already a leaf &quot;</span>
<a name="l02889"></a>02889                     &lt;&lt; std::endl;
<a name="l02890"></a>02890         }
<a name="l02891"></a>02891         <span class="keywordflow">else</span> cancontinue = <span class="keyword">true</span>;
<a name="l02892"></a>02892 
<a name="l02893"></a>02893         <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> subleaves;
<a name="l02894"></a>02894 
<a name="l02895"></a>02895         <span class="keywordflow">if</span> (cancontinue) {
<a name="l02896"></a>02896             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af5ff16174902743a78b2d3db3e0a1c70" title="Return a reference to all sub-leaf descendent nodes.">getSubLeaves</a>(subleaves); <span class="comment">// subleaves contains the subleaves</span>
<a name="l02897"></a>02897             cancontinue = (subleaves.size()&gt;0);
<a name="l02898"></a>02898         }
<a name="l02899"></a>02899 
<a name="l02900"></a>02900         <span class="keywordflow">if</span>(!cancontinue) {
<a name="l02901"></a>02901             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error in mergeUp getting subleaves, aborting merge&quot;</span>);
<a name="l02902"></a>02902         }
<a name="l02903"></a>02903 
<a name="l02904"></a>02904         <span class="keywordtype">bool</span> canmerge = cancontinue;
<a name="l02905"></a>02905 
<a name="l02906"></a>02906         <span class="comment">// merge until there is only one leaf</span>
<a name="l02907"></a>02907         <span class="keywordflow">while</span> (canmerge) {
<a name="l02908"></a>02908 
<a name="l02909"></a>02909             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* target = *(subleaves.rbegin ()); <span class="comment">// the last in the vector</span>
<a name="l02910"></a>02910 
<a name="l02911"></a>02911             <span class="comment">// subtract the child names from the creation string</span>
<a name="l02912"></a>02912                 <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a> += (<span class="stringliteral">&quot; -(&quot;</span> + target-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>() + <span class="stringliteral">&quot;)&quot;</span>);
<a name="l02913"></a>02913 
<a name="l02914"></a>02914             <span class="comment">// merge the biggest one</span>
<a name="l02915"></a>02915             target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a68cc1a1722c627a99dcefc3491847fb2" title="Reabsorbs both children of the node.">nodeReabsorbChildren</a>();
<a name="l02916"></a>02916             <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it = subleaves.end();
<a name="l02917"></a>02917             it--;
<a name="l02918"></a>02918             subleaves.erase(it, subleaves.end());<span class="comment">// take the last out of the vector</span>
<a name="l02919"></a>02919 
<a name="l02920"></a>02920             <span class="comment">// if target had a leaf sibling, target&#39;s parent is now a cherry</span>
<a name="l02921"></a>02921             <span class="comment">// and should be inserted into the multiset</span>
<a name="l02922"></a>02922             <span class="keywordflow">if</span> (target-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0b8af2e1f907279d8a153129aa37aa8e" title="Check if this has a leaf sibling.">hasLeafSibling</a>()) {
<a name="l02923"></a>02923 
<a name="l02924"></a>02924                 subleaves.push_back(target-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a88c1d25d8e0b9738f5199cc4435c08b4" title="Accessor for the parent of a node.">getParent</a>());
<a name="l02925"></a>02925            }
<a name="l02926"></a>02926 
<a name="l02927"></a>02927             canmerge = (subleaves.size()&gt;0);
<a name="l02928"></a>02928         }
<a name="l02929"></a>02929 
<a name="l02930"></a>02930         <span class="keywordflow">if</span>(!canmerge) {
<a name="l02931"></a>02931             std::cerr &lt;&lt; <span class="stringliteral">&quot;Merged to root&quot;</span> &lt;&lt; std::endl;
<a name="l02932"></a>02932         }
<a name="l02933"></a>02933 
<a name="l02934"></a>02934         <span class="comment">// EMPSums are not adjusted during the merging process</span>
<a name="l02935"></a>02935         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab8a546d8d85be0ffac955f7886d5c7aa" title="Recalculate the unscaled EMP part of AIC score.">recalcScaledEMPSumAIC</a>();
<a name="l02936"></a>02936         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6456652ee831cee0ec4184440cd84ec9" title="Recalculate the scaled EMP part of COPERR score.">recalcScaledEMPSumCOPERR</a>();
<a name="l02937"></a>02937     }
<a name="l02938"></a>02938 
<a name="l02939"></a>02939     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l02940"></a>02940         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l02941"></a>02941         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory in mergeUp.  Orginal error: &quot;</span>
<a name="l02942"></a>02942                                             + oldmsg;
<a name="l02943"></a>02943         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02944"></a>02944         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02945"></a>02945     }
<a name="l02946"></a>02946     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l02947"></a>02947         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l02948"></a>02948         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error in mergeUp.  Orginal error: &quot;</span>
<a name="l02949"></a>02949                                     + oldmsg;
<a name="l02950"></a>02950         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02951"></a>02951         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02952"></a>02952     }
<a name="l02953"></a>02953     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l02954"></a>02954         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l02955"></a>02955         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in mergeUp.  Orginal error: &quot;</span> + oldmsg;
<a name="l02956"></a>02956         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02957"></a>02957         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02958"></a>02958     }
<a name="l02959"></a>02959     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l02960"></a>02960         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l02961"></a>02961         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in mergeUp.  Orginal error: &quot;</span> + oldmsg;
<a name="l02962"></a>02962         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l02963"></a>02963         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l02964"></a>02964     }
<a name="l02965"></a>02965 
<a name="l02966"></a>02966     <span class="keywordflow">return</span> (cancontinue);
<a name="l02967"></a>02967 }
<a name="l02968"></a>02968 
<a name="l02969"></a>02969 <span class="comment">//splits histogram according to string instruction</span>
<a name="l02970"></a>02970 <span class="comment">//returns true if some splitting was achieved</span>
<a name="l02971"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afac8c0cb4ed44f27e7a3adf1855af676">02971</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afac8c0cb4ed44f27e7a3adf1855af676" title="Split a histogram to a specified shape.">AdaptiveHistogram::splitToShape</a>(std::string instruction)
<a name="l02972"></a>02972 {
<a name="l02973"></a>02973     <span class="keywordtype">bool</span> success = <span class="keyword">false</span>;
<a name="l02974"></a>02974 
<a name="l02975"></a>02975     <span class="comment">// checks:  is there a root paving, is the string properly formed?</span>
<a name="l02976"></a>02976     <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>) {
<a name="l02977"></a>02977         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No root paving for splitToShape&quot;</span>);
<a name="l02978"></a>02978     }
<a name="l02979"></a>02979 
<a name="l02980"></a>02980    <span class="keywordflow">if</span> (instruction.length() == 0) {
<a name="l02981"></a>02981       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No instruction&quot;</span>);
<a name="l02982"></a>02982     }
<a name="l02983"></a>02983 
<a name="l02984"></a>02984     std::string legal(<span class="stringliteral">&quot;, 0123456789&quot;</span>);
<a name="l02985"></a>02985     <span class="keywordflow">if</span> (instruction.find_first_not_of(legal) != std::string::npos) {
<a name="l02986"></a>02986         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Illegal character in instruction&quot;</span>);
<a name="l02987"></a>02987     }
<a name="l02988"></a>02988 
<a name="l02989"></a>02989     <span class="keywordflow">try</span> { <span class="comment">// all seems to be okay, we can start spliting the root paving</span>
<a name="l02990"></a>02990         <span class="comment">// specify what to look for as numbers or decimal point or + or -</span>
<a name="l02991"></a>02991 
<a name="l02992"></a>02992        success = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a62e9df1a7c96af8f0796a6ea211b38ea" title="Split a root paving to a specified shape.">splitRootToShape</a>(instruction);
<a name="l02993"></a>02993 
<a name="l02994"></a>02994         <span class="keywordflow">if</span> (success) {
<a name="l02995"></a>02995             <span class="comment">// update the creation string</span>
<a name="l02996"></a>02996             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a> = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>()
<a name="l02997"></a>02997                 + <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l02998"></a>02998         }
<a name="l02999"></a>02999         <span class="keywordflow">else</span> {
<a name="l03000"></a>03000             std::cerr &lt;&lt; std::endl;
<a name="l03001"></a>03001             std::cerr &lt;&lt; <span class="stringliteral">&quot;Your instruction does not describe a proper tree.&quot;</span>;
<a name="l03002"></a>03002             std::cerr &lt;&lt; <span class="stringliteral">&quot;  Please check your instruction and try again.&quot;</span>
<a name="l03003"></a>03003             &lt;&lt; std::endl;
<a name="l03004"></a>03004        }
<a name="l03005"></a>03005     }
<a name="l03006"></a>03006 
<a name="l03007"></a>03007     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l03008"></a>03008         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l03009"></a>03009         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory in splitToShape.  Orginal error: &quot;</span>
<a name="l03010"></a>03010                                             + oldmsg;
<a name="l03011"></a>03011         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l03012"></a>03012         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l03013"></a>03013     }
<a name="l03014"></a>03014     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l03015"></a>03015         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l03016"></a>03016         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error in splitToShape.  Orginal error: &quot;</span>
<a name="l03017"></a>03017                                     + oldmsg;
<a name="l03018"></a>03018         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l03019"></a>03019         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l03020"></a>03020     }
<a name="l03021"></a>03021     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l03022"></a>03022         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l03023"></a>03023         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in splitToShape.  Orginal error: &quot;</span> + oldmsg;
<a name="l03024"></a>03024         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l03025"></a>03025         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l03026"></a>03026     }
<a name="l03027"></a>03027     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l03028"></a>03028         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l03029"></a>03029         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in splitToShape.  Orginal error: &quot;</span> + oldmsg;
<a name="l03030"></a>03030         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l03031"></a>03031         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l03032"></a>03032     }
<a name="l03033"></a>03033 
<a name="l03034"></a>03034     <span class="keywordflow">return</span> success;
<a name="l03035"></a>03035 }
<a name="l03036"></a>03036 
<a name="l03037"></a>03037 <span class="comment">// Generating MCMC samples from histogram state space.</span>
<a name="l03038"></a>03038 
<a name="l03039"></a>03039 <span class="comment">/* Note that when minPoints &gt; 0, proposals are effectively drawn from set of</span>
<a name="l03040"></a>03040 <span class="comment">leaf and cherry nodes which does not include any leaf which, if split, would</span>
<a name="l03041"></a>03041 <span class="comment">have a child whose number of points is &lt; minPoints.  Thus the implementation</span>
<a name="l03042"></a>03042 <span class="comment">needs to distinguish between the overall state of the tree and the</span>
<a name="l03043"></a>03043 <span class="comment">set of splittable leaf nodes.  */</span>
<a name="l03044"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a733cc04938b2236087cbbe0384985c3d">03044</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a733cc04938b2236087cbbe0384985c3d" title="Outputting MCMC samples from histogram state space.">AdaptiveHistogram::MCMC</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> loops, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> burnin,
<a name="l03045"></a>03045                     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> thinout,
<a name="l03046"></a>03046                     <a class="code" href="classsubpavings_1_1MCMCProposal.shtml" title="Abstract class for MCMC proposal distributions.">MCMCProposal</a>&amp; proposal, <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>&amp; logPrior,
<a name="l03047"></a>03047                     <span class="keywordtype">size_t</span> minPoints, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging)
<a name="l03048"></a>03048 {
<a name="l03049"></a>03049   <span class="keywordflow">try</span> {
<a name="l03050"></a>03050 
<a name="l03051"></a>03051     <span class="keywordtype">bool</span> thinning = (thinout &gt; 0);
<a name="l03052"></a>03052 
<a name="l03053"></a>03053     std::vector &lt; AdaptiveHistogram &gt; samples;
<a name="l03054"></a>03054     
<a name="l03055"></a>03055     samples = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aac9ce6681faa011b3c314ff400056dd9" title="Generating MCMC samples from histogram state space.">MCMCsamples</a>(samples, 
<a name="l03056"></a>03056             loops, burnin,
<a name="l03057"></a>03057             thinout,
<a name="l03058"></a>03058             proposal, logPrior,
<a name="l03059"></a>03059             minPoints, logging);
<a name="l03060"></a>03060     
<a name="l03061"></a>03061     <span class="keywordtype">bool</span> good = <span class="keyword">true</span>;
<a name="l03062"></a>03062     
<a name="l03063"></a>03063     <span class="keywordflow">if</span> (thinning &amp;&amp; ( loops &gt; 0)
<a name="l03064"></a>03064         &amp;&amp; ( samples.size() &lt; (loops - burnin)/thinout + 1) ) {
<a name="l03065"></a>03065       good = <span class="keyword">false</span>;
<a name="l03066"></a>03066     }
<a name="l03067"></a>03067     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (thinning) {
<a name="l03068"></a>03068       
<a name="l03069"></a>03069       <span class="comment">// make a collation object, empty at present</span>
<a name="l03070"></a>03070       <a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml" title="A wrapper or manager for a CollatorSPSnode.">AdaptiveHistogramCollator</a> coll;
<a name="l03071"></a>03071 
<a name="l03072"></a>03072       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; samples.size(); ++i) {
<a name="l03073"></a>03073         <span class="comment">// output and collate the sample state;</span>
<a name="l03074"></a>03074         (samples[i]).<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4e7d34aea502906cb2230c0732d752b3" title="Output the state of this histogram as an MCMC sample.">outputMCMCStateSample</a>(i);
<a name="l03075"></a>03075         coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#ade34068ac64cc1bd36781350b28a4486" title="Add an AdaptiveHistogram object to the data collation.">addToCollation</a>(samples[i]);
<a name="l03076"></a>03076       }
<a name="l03077"></a>03077     
<a name="l03078"></a>03078         std::string collFileName = <span class="stringliteral">&quot;CollatorMCMC.txt&quot;</span>;
<a name="l03079"></a>03079             coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#aab47793e8362245a28a7ec3090da5352" title="Output the collated information to a txt file.">outputToTxtTabs</a>(collFileName); <span class="comment">// output the collation to file</span>
<a name="l03080"></a>03080 
<a name="l03081"></a>03081             <span class="comment">//  Average the sampled histograms</span>
<a name="l03082"></a>03082             std::string avFileName = <span class="stringliteral">&quot;AverageMCMC.txt&quot;</span>;     <span class="comment">// provide a filename</span>
<a name="l03083"></a>03083 
<a name="l03084"></a>03084             coll.<a class="code" href="classsubpavings_1_1AdaptiveHistogramCollator.shtml#a514f2ebc1857e531b629f0ff3508b04b" title="Output average normalised histogram over collation to a txt file.">outputAverageToTxtTabs</a>(avFileName);  <span class="comment">// output the average to file</span>
<a name="l03085"></a>03085         }
<a name="l03086"></a>03086 
<a name="l03087"></a>03087     <span class="keywordflow">return</span> good;
<a name="l03088"></a>03088         
<a name="l03089"></a>03089     }
<a name="l03090"></a>03090     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l03091"></a>03091         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l03092"></a>03092         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error  in MCMC:\n &quot;</span> + oldmsg;
<a name="l03093"></a>03093         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l03094"></a>03094     }
<a name="l03095"></a>03095 }
<a name="l03096"></a>03096 
<a name="l03097"></a>03097 <span class="comment">/* Note that when minPoints &gt; 0, proposals are effectively drawn from set of</span>
<a name="l03098"></a>03098 <span class="comment">leaf and cherry nodes which does not include any leaf which, if split, would</span>
<a name="l03099"></a>03099 <span class="comment">have a child whose number of points is &lt; minPoints.  Thus the implementation</span>
<a name="l03100"></a>03100 <span class="comment">needs to distinguish between the overall state of the tree and the</span>
<a name="l03101"></a>03101 <span class="comment">set of splittable leaf nodes.  */</span>
<a name="l03102"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aac9ce6681faa011b3c314ff400056dd9">03102</a> std::vector &lt; AdaptiveHistogram &gt;&amp; <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aac9ce6681faa011b3c314ff400056dd9" title="Generating MCMC samples from histogram state space.">AdaptiveHistogram::MCMCsamples</a>(
<a name="l03103"></a>03103             std::vector &lt; AdaptiveHistogram &gt;&amp; samples, 
<a name="l03104"></a>03104             <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> loops, 
<a name="l03105"></a>03105             <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> burnin,
<a name="l03106"></a>03106             <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> thinout,
<a name="l03107"></a>03107             <a class="code" href="classsubpavings_1_1MCMCProposal.shtml" title="Abstract class for MCMC proposal distributions.">MCMCProposal</a>&amp; proposal, <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>&amp; logPrior,
<a name="l03108"></a>03108             <span class="keywordtype">size_t</span> minPoints, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging)
<a name="l03109"></a>03109 {
<a name="l03110"></a>03110   
<a name="l03111"></a>03111     gsl_rng * rgsl = NULL;
<a name="l03112"></a>03112 
<a name="l03113"></a>03113     <span class="keywordflow">try</span> {
<a name="l03114"></a>03114     
<a name="l03115"></a>03115     <span class="keywordtype">bool</span> cancontinue = <span class="keyword">false</span>;
<a name="l03116"></a>03116 
<a name="l03117"></a>03117     <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()) {
<a name="l03118"></a>03118       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No root paving for MCMC histogram&quot;</span>);
<a name="l03119"></a>03119     }
<a name="l03120"></a>03120     
<a name="l03121"></a>03121     <span class="keywordflow">if</span> (burnin &gt; loops) {
<a name="l03122"></a>03122       <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;burnin &gt; loops&quot;</span>);
<a name="l03123"></a>03123     }
<a name="l03124"></a>03124     
<a name="l03125"></a>03125     <span class="keywordtype">bool</span> thinning = (thinout &gt; 0);
<a name="l03126"></a>03126   
<a name="l03127"></a>03127     <span class="keywordflow">if</span> (thinning) {
<a name="l03128"></a>03128       samples.reserve(samples.size() + (loops - burnin)/thinout + 1);
<a name="l03129"></a>03129     }
<a name="l03130"></a>03130 
<a name="l03131"></a>03131         <span class="comment">// for logging</span>
<a name="l03132"></a>03132         <span class="keywordtype">int</span> i = 0;
<a name="l03133"></a>03133         std::string s = <span class="stringliteral">&quot;&quot;</span>;
<a name="l03134"></a>03134         std::string dot = <span class="stringliteral">&quot;&quot;</span>;
<a name="l03135"></a>03135         <span class="keywordflow">if</span> ((logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089ab2890a6eb7493029f41cf871d43877c3">TXT</a>) || (logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a37f328b2c4c91409b43fc74e7f299118">TXTANDGRAPH</a>)
<a name="l03136"></a>03136                 || (logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a>) || (logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089afec51793a7c8838aa61a4e1b21d1245d">LOGANDGRAPHSAMPLES</a>)
<a name="l03137"></a>03137         || thinning) {
<a name="l03138"></a>03138 
<a name="l03139"></a>03139             <span class="comment">// pass to log output to keep track of splits</span>
<a name="l03140"></a>03140             std::string baseFileName = <span class="stringliteral">&quot;MCMCOutput&quot;</span>;
<a name="l03141"></a>03141             s = <a class="code" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609" title="Construct a unique filename from base and timestamp number.">getUniqueFilename</a>(baseFileName);
<a name="l03142"></a>03142 
<a name="l03143"></a>03143             <span class="keywordflow">if</span> (logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a37f328b2c4c91409b43fc74e7f299118">TXTANDGRAPH</a>) {
<a name="l03144"></a>03144 
<a name="l03145"></a>03145                 <span class="comment">// for dot graph</span>
<a name="l03146"></a>03146                 baseFileName = <span class="stringliteral">&quot;graph&quot;</span>;
<a name="l03147"></a>03147                 std::string suffix = <span class="stringliteral">&quot;.dot&quot;</span>;
<a name="l03148"></a>03148                 dot = <a class="code" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609" title="Construct a unique filename from base and timestamp number.">getUniqueFilename</a>(baseFileName, suffix);
<a name="l03149"></a>03149                 <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(dot, <span class="stringliteral">&quot;digraph G {&quot;</span>); <span class="comment">// opening line</span>
<a name="l03150"></a>03150             }
<a name="l03151"></a>03151         }
<a name="l03152"></a>03152 
<a name="l03153"></a>03153         <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l03154"></a>03154         <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l03155"></a>03155         <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l03156"></a>03156         <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l03157"></a>03157         gsl_rng_env_setup();
<a name="l03158"></a>03158         tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l03159"></a>03159         rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l03160"></a>03160 
<a name="l03161"></a>03161         <span class="comment">// check input parameters</span>
<a name="l03162"></a>03162         <span class="keywordflow">if</span> (loops - burnin &lt; 0) {
<a name="l03163"></a>03163             std::cerr &lt;&lt; <span class="stringliteral">&quot;Try again: number of loops is less than burnin&quot;</span>
<a name="l03164"></a>03164                     &lt;&lt;std::endl;
<a name="l03165"></a>03165         }
<a name="l03166"></a>03166         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (thinout &gt; 0 &amp;&amp; ((loops-burnin)/thinout &lt; 1)) {
<a name="l03167"></a>03167             std::cerr &lt;&lt; <span class="stringliteral">&quot;Try again: thinout value means no samples will be taken&quot;</span>
<a name="l03168"></a>03168                     &lt;&lt;std::endl;
<a name="l03169"></a>03169         }
<a name="l03170"></a>03170         <span class="keywordflow">else</span> cancontinue = <span class="keyword">true</span>;
<a name="l03171"></a>03171 
<a name="l03172"></a>03172         <span class="comment">// set up a container for the leaf children</span>
<a name="l03173"></a>03173         <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leafVec;
<a name="l03174"></a>03174         <span class="comment">// set up a container for the subleaf children</span>
<a name="l03175"></a>03175         <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> cherryVec;
<a name="l03176"></a>03176         <a class="code" href="namespacesubpavings.shtml#ae7645253328c3b5fc137829039d971e3" title="Define type SPSnodeList as a list of pointers to SPSnodes.">SPSnodeList</a> nodes;
<a name="l03177"></a>03177          <span class="comment">//lists better than vectors for random access removal</span>
<a name="l03178"></a>03178         <span class="keywordtype">size_t</span> numLeaves = 0;
<a name="l03179"></a>03179         <span class="keywordtype">size_t</span> numCherries = 0;
<a name="l03180"></a>03180 
<a name="l03181"></a>03181         <span class="keywordflow">if</span> (cancontinue) {
<a name="l03182"></a>03182 
<a name="l03183"></a>03183             <span class="comment">// fill the container with the leaf children</span>
<a name="l03184"></a>03184             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leafVec);
<a name="l03185"></a>03185 
<a name="l03186"></a>03186             <span class="comment">// fill the container with the subleaf children</span>
<a name="l03187"></a>03187             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af5ff16174902743a78b2d3db3e0a1c70" title="Return a reference to all sub-leaf descendent nodes.">getSubLeaves</a>(cherryVec);
<a name="l03188"></a>03188 
<a name="l03189"></a>03189             numCherries = cherryVec.size();
<a name="l03190"></a>03190 
<a name="l03191"></a>03191             <span class="keywordflow">if</span> (!leafVec.empty()) {
<a name="l03192"></a>03192                 <span class="comment">// but only put into the container the leaves which, if split,</span>
<a name="l03193"></a>03193                 <span class="comment">// would have at least minPoints data points associated with them</span>
<a name="l03194"></a>03194 
<a name="l03195"></a>03195                 <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> lit;
<a name="l03196"></a>03196                 <span class="keywordflow">for</span> (lit = leafVec.begin(); lit &lt; leafVec.end(); lit++) {
<a name="l03197"></a>03197                     <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>((*lit), <span class="keyword">false</span>, 0.0, minPoints))
<a name="l03198"></a>03198                     {
<a name="l03199"></a>03199                         <span class="comment">// leaf can go into container</span>
<a name="l03200"></a>03200                         nodes.push_back(*lit);
<a name="l03201"></a>03201                         numLeaves++;
<a name="l03202"></a>03202                     }
<a name="l03203"></a>03203                 }
<a name="l03204"></a>03204             }
<a name="l03205"></a>03205 
<a name="l03206"></a>03206             <span class="comment">// no need to check on cherries - they can all go in</span>
<a name="l03207"></a>03207             <span class="keywordflow">if</span> (numCherries &gt; 0)
<a name="l03208"></a>03208                 nodes.insert(nodes.end(), cherryVec.begin(),cherryVec.end());
<a name="l03209"></a>03209 
<a name="l03210"></a>03210             <span class="keywordflow">if</span> (nodes.size() == 0) {
<a name="l03211"></a>03211                 cancontinue = <span class="keyword">false</span>;
<a name="l03212"></a>03212                 std::cerr &lt;&lt; <span class="stringliteral">&quot;No changeable nodes given minPoints = &quot;</span>
<a name="l03213"></a>03213                             &lt;&lt; minPoints &lt;&lt; <span class="stringliteral">&quot;. Sorry, aborting MCMC.&quot;</span> &lt;&lt; std::endl;
<a name="l03214"></a>03214             }
<a name="l03215"></a>03215         }
<a name="l03216"></a>03216 
<a name="l03217"></a>03217         <span class="keywordtype">bool</span> goodLoop = cancontinue;
<a name="l03218"></a>03218 
<a name="l03219"></a>03219         <span class="keywordflow">if</span> (cancontinue &amp;&amp; ((logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089ab2890a6eb7493029f41cf871d43877c3">TXT</a>) || (logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a37f328b2c4c91409b43fc74e7f299118">TXTANDGRAPH</a>)
<a name="l03220"></a>03220                                             || thinning)) {
<a name="l03221"></a>03221 
<a name="l03222"></a>03222             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#adf589f52a0cd3e2371c288aa6bca7d37" title="Put header in a log file for MCMC.">MCMCStartLogFile</a>(s, i, proposal, logPrior);
<a name="l03223"></a>03223         }
<a name="l03224"></a>03224 
<a name="l03225"></a>03225         i++;
<a name="l03226"></a>03226 
<a name="l03227"></a>03227         std::string stateNow = <span class="stringliteral">&quot;&quot;</span>;
<a name="l03228"></a>03228         std::string stateAfter = <span class="stringliteral">&quot;&quot;</span>;
<a name="l03229"></a>03229 
<a name="l03230"></a>03230         <span class="comment">// make a collation object, empty at present</span>
<a name="l03231"></a>03231         <span class="comment">//AdaptiveHistogramCollator coll;</span>
<a name="l03232"></a>03232 
<a name="l03233"></a>03233         <span class="comment">// loop from here conditional on good loop and cancontinue</span>
<a name="l03234"></a>03234         <span class="keywordflow">while</span> (goodLoop &amp;&amp; (loops &gt; 0) ) {
<a name="l03235"></a>03235 
<a name="l03236"></a>03236             <span class="comment">// capture state now</span>
<a name="l03237"></a>03237             stateNow = <span class="stringliteral">&quot;\&quot;&quot;</span> + <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aca69edc461799f9d867d7eea6cb76f8e">getLeafLevelsString</a>() + <span class="stringliteral">&quot;\&quot;&quot;</span>;
<a name="l03238"></a>03238             loops--;
<a name="l03239"></a>03239 
<a name="l03240"></a>03240             <span class="comment">// changeMCMCState updates nodes, numLeaves, numCherries, i</span>
<a name="l03241"></a>03241             goodLoop = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2e95f7f1a9dab963a28a7d3a655e0e8f" title="Changes the state of this Adaptive Histogram using MCMC process.">changeMCMCState</a>(nodes, numLeaves, numCherries, proposal,
<a name="l03242"></a>03242                         logPrior, minPoints, rgsl, logging, s, i);
<a name="l03243"></a>03243 
<a name="l03244"></a>03244             <span class="keywordflow">if</span> (goodLoop) {
<a name="l03245"></a>03245                 <span class="keywordflow">if</span> ((logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089ab2890a6eb7493029f41cf871d43877c3">TXT</a>) || (logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a37f328b2c4c91409b43fc74e7f299118">TXTANDGRAPH</a>)) {
<a name="l03246"></a>03246                     <span class="comment">// log the current state of the histogram</span>
<a name="l03247"></a>03247                     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">outputLog</a>(s, i);
<a name="l03248"></a>03248                     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a602b8b4081d3cae20308aa6644a83fa9" title="Add AIC EMP score to log file.">outputLogEMPAIC</a>(s);
<a name="l03249"></a>03249                 }
<a name="l03250"></a>03250 
<a name="l03251"></a>03251                 <span class="keywordflow">if</span> (i &gt;= burnin &amp;&amp; (logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a37f328b2c4c91409b43fc74e7f299118">TXTANDGRAPH</a>)) {
<a name="l03252"></a>03252                     <span class="comment">// capture state after split or merge to graph file</span>
<a name="l03253"></a>03253 
<a name="l03254"></a>03254                     stateAfter = <span class="stringliteral">&quot;\&quot;&quot;</span> + <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aca69edc461799f9d867d7eea6cb76f8e">getLeafLevelsString</a>() + <span class="stringliteral">&quot;\&quot;&quot;</span>;
<a name="l03255"></a>03255                     std::string line = <span class="stringliteral">&quot;\t &quot;</span> + stateNow + <span class="stringliteral">&quot; -&gt; &quot;</span> + stateAfter + <span class="stringliteral">&quot;;&quot;</span>;
<a name="l03256"></a>03256                     <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(dot, line);
<a name="l03257"></a>03257 
<a name="l03258"></a>03258                     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a845c591145a1abc86d7d0e1d33c26e22" title="Make a .dot graph file from histogram structure.">outputGraphDot</a>(); <span class="comment">// and make a graph of current state</span>
<a name="l03259"></a>03259                 }
<a name="l03260"></a>03260 
<a name="l03261"></a>03261                 <span class="keywordflow">if</span> ((numLeaves == 0 &amp;&amp; numCherries == 0)) {
<a name="l03262"></a>03262                     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No more leaves or cherries in MCMC&quot;</span>);
<a name="l03263"></a>03263 
<a name="l03264"></a>03264                 }
<a name="l03265"></a>03265 
<a name="l03266"></a>03266                 <span class="comment">// if we are taking samples take the sample here</span>
<a name="l03267"></a>03267                 <span class="keywordflow">if</span> (goodLoop &amp;&amp; thinning &amp;&amp; (i &gt;= burnin) &amp;&amp;
<a name="l03268"></a>03268                         ((i-burnin)%thinout == 0)) {
<a name="l03269"></a>03269 
<a name="l03270"></a>03270                     <span class="comment">// output and collate the sample state;</span>
<a name="l03271"></a>03271                     <span class="comment">//outputMCMCStateSample(i);</span>
<a name="l03272"></a>03272                     
<a name="l03273"></a>03273                     <span class="comment">//coll.addToCollation(*this);</span>
<a name="l03274"></a>03274           samples.push_back(*<span class="keyword">this</span>);
<a name="l03275"></a>03275           
<a name="l03276"></a>03276                     <span class="keywordflow">if</span> (logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a09aa6a27c1d242b63005aa5d78b45aba">LOGSAMPLES</a> || logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089afec51793a7c8838aa61a4e1b21d1245d">LOGANDGRAPHSAMPLES</a>) {
<a name="l03277"></a>03277                         <span class="comment">// log this sample to log file</span>
<a name="l03278"></a>03278                         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">outputLog</a>(s, i);
<a name="l03279"></a>03279                         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a602b8b4081d3cae20308aa6644a83fa9" title="Add AIC EMP score to log file.">outputLogEMPAIC</a>(s); <span class="comment">// add AIC scores</span>
<a name="l03280"></a>03280                     }
<a name="l03281"></a>03281                     <span class="keywordflow">if</span> (logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089afec51793a7c8838aa61a4e1b21d1245d">LOGANDGRAPHSAMPLES</a>) <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a845c591145a1abc86d7d0e1d33c26e22" title="Make a .dot graph file from histogram structure.">outputGraphDot</a>();
<a name="l03282"></a>03282 
<a name="l03283"></a>03283                 }
<a name="l03284"></a>03284             }
<a name="l03285"></a>03285 
<a name="l03286"></a>03286             i++;
<a name="l03287"></a>03287             <span class="comment">// back into loop</span>
<a name="l03288"></a>03288         }
<a name="l03289"></a>03289         <span class="comment">// finished loop</span>
<a name="l03290"></a>03290         cancontinue = goodLoop;
<a name="l03291"></a>03291 
<a name="l03292"></a>03292         <span class="keywordflow">if</span> (cancontinue &amp;&amp; ((logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089ab2890a6eb7493029f41cf871d43877c3">TXT</a>) || (logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a37f328b2c4c91409b43fc74e7f299118">TXTANDGRAPH</a>))) {
<a name="l03293"></a>03293             i--; <span class="comment">// this histogram is full state from last pass</span>
<a name="l03294"></a>03294             <span class="comment">// To add final state of histogram to log file</span>
<a name="l03295"></a>03295             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a10fc830a1dd32fe83aa3846a6fb2af35" title="Capture the final state of this histogram after MCMC.">MCMCLogFinalState</a>(s, i);
<a name="l03296"></a>03296             <span class="keywordflow">if</span> (logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a37f328b2c4c91409b43fc74e7f299118">TXTANDGRAPH</a>) {
<a name="l03297"></a>03297                 <span class="comment">// close the dot graph of the changes process</span>
<a name="l03298"></a>03298                 <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(dot, <span class="stringliteral">&quot;}&quot;</span>); <span class="comment">// closing line</span>
<a name="l03299"></a>03299 
<a name="l03300"></a>03300                 <span class="comment">// make the graph image</span>
<a name="l03301"></a>03301                 <a class="code" href="namespacesubpavings.shtml#abb4671c14005974aeea8f0dd39600ec6" title="make a Dot graph png image given a dot file.">makeDotImage</a>(dot);
<a name="l03302"></a>03302             }
<a name="l03303"></a>03303         }
<a name="l03304"></a>03304 
<a name="l03305"></a>03305     <span class="comment">/*</span>
<a name="l03306"></a>03306 <span class="comment">        if (cancontinue &amp;&amp; thinning) {</span>
<a name="l03307"></a>03307 <span class="comment">            std::string collFileName = &quot;CollatorMCMC.txt&quot;;</span>
<a name="l03308"></a>03308 <span class="comment">            coll.outputToTxtTabs(collFileName); // output the collation to file</span>
<a name="l03309"></a>03309 <span class="comment"></span>
<a name="l03310"></a>03310 <span class="comment">            //  Average the sampled histograms</span>
<a name="l03311"></a>03311 <span class="comment">            std::string avFileName = &quot;AverageMCMC.txt&quot;;     // provide a filename</span>
<a name="l03312"></a>03312 <span class="comment"></span>
<a name="l03313"></a>03313 <span class="comment">            coll.outputAverageToTxtTabs(avFileName);  // output the average to file</span>
<a name="l03314"></a>03314 <span class="comment">        }</span>
<a name="l03315"></a>03315 <span class="comment">    */</span>
<a name="l03316"></a>03316         <span class="comment">// free the random number generator</span>
<a name="l03317"></a>03317         
<a name="l03318"></a>03318         gsl_rng_free (rgsl);
<a name="l03319"></a>03319         
<a name="l03320"></a>03320         <span class="keywordflow">if</span> (!cancontinue) { <span class="comment">//empty out the samples if loop failed</span>
<a name="l03321"></a>03321       std::vector&lt; AdaptiveHistogram &gt; tmp;
<a name="l03322"></a>03322       tmp.swap(samples);
<a name="l03323"></a>03323     }
<a name="l03324"></a>03324         
<a name="l03325"></a>03325         <span class="keywordflow">return</span> samples;
<a name="l03326"></a>03326     }
<a name="l03327"></a>03327     
<a name="l03328"></a>03328     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l03329"></a>03329     <span class="keywordflow">try</span> {
<a name="l03330"></a>03330       <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); 
<a name="l03331"></a>03331       <span class="comment">// free the random number generator</span>
<a name="l03332"></a>03332     }
<a name="l03333"></a>03333     <span class="keywordflow">catch</span> (exception&amp; ee) {} <span class="comment">// catch and swallow</span>
<a name="l03334"></a>03334     
<a name="l03335"></a>03335         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Error  in MCMCsamples:\n&quot;</span> 
<a name="l03336"></a>03336               + <span class="keywordtype">string</span>(e.what()));
<a name="l03337"></a>03337     }
<a name="l03338"></a>03338 
<a name="l03339"></a>03339 }
<a name="l03340"></a>03340 
<a name="l03341"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a0163eb023d0db24e0d91864a38acd562">03341</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a0163eb023d0db24e0d91864a38acd562">AdaptiveHistogram::publicOutputMCMCStateSample</a>(<span class="keywordtype">int</span> ci, <span class="keywordtype">int</span> i,
<a name="l03342"></a>03342                                 <span class="keywordtype">bool</span> confirm)
<a name="l03343"></a>03343 {
<a name="l03344"></a>03344     <span class="comment">// create a name for the file to output</span>
<a name="l03345"></a>03345     std::ostringstream stm;
<a name="l03346"></a>03346     stm &lt;&lt; <span class="stringliteral">&quot;MCMC_&quot;</span> &lt;&lt; ci &lt;&lt; <span class="stringliteral">&quot;_Sample&quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l03347"></a>03347 
<a name="l03348"></a>03348     <span class="keywordtype">string</span> sampleFileName = stm.str();
<a name="l03349"></a>03349 
<a name="l03350"></a>03350     <span class="comment">// To realize a file output</span>
<a name="l03351"></a>03351     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">outputToTxtTabs</a>(sampleFileName, confirm);
<a name="l03352"></a>03352 }
<a name="l03353"></a>03353 
<a name="l03354"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#af41faeb2742df1aaa5108f17dee54d71">03354</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#af41faeb2742df1aaa5108f17dee54d71">AdaptiveHistogram::publicLogMCMCSample</a>(std::string s, <span class="keywordtype">int</span> i)
<a name="l03355"></a>03355 {
<a name="l03356"></a>03356     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">outputLog</a>(s, i);
<a name="l03357"></a>03357     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a602b8b4081d3cae20308aa6644a83fa9" title="Add AIC EMP score to log file.">outputLogEMPAIC</a>(s); <span class="comment">// add AIC scores</span>
<a name="l03358"></a>03358 }
<a name="l03359"></a>03359 
<a name="l03360"></a>03360 <span class="comment">// Changes the state of this Adapative Histogram using MCMC</span>
<a name="l03361"></a>03361 <span class="comment">// nodes, numLeaves, numCherries are passed by reference</span>
<a name="l03362"></a>03362 
<a name="l03363"></a>03363 <span class="comment">/* Note that the container of splittable leaf nodes and cherries is</span>
<a name="l03364"></a>03364 <span class="comment">maintained separately from the overall state of the tree to save having to</span>
<a name="l03365"></a>03365 <span class="comment">repeatedly assess whether a leaf can be split (given minPoints).  The</span>
<a name="l03366"></a>03366 <span class="comment">number of splittable leaves and cherries is maintained for convenience to</span>
<a name="l03367"></a>03367 <span class="comment">avoid repeatedly counting nodes of different types in the container. */</span>
<a name="l03368"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2e95f7f1a9dab963a28a7d3a655e0e8f">03368</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2e95f7f1a9dab963a28a7d3a655e0e8f" title="Changes the state of this Adaptive Histogram using MCMC process.">AdaptiveHistogram::changeMCMCState</a> (<a class="code" href="namespacesubpavings.shtml#ae7645253328c3b5fc137829039d971e3" title="Define type SPSnodeList as a list of pointers to SPSnodes.">SPSnodeList</a>&amp; nodes,
<a name="l03369"></a>03369                         <span class="keywordtype">size_t</span>&amp; numLeaves, <span class="keywordtype">size_t</span>&amp; numCherries,
<a name="l03370"></a>03370                         <a class="code" href="classsubpavings_1_1MCMCProposal.shtml" title="Abstract class for MCMC proposal distributions.">MCMCProposal</a>&amp; proposal, <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>&amp; logPrior,
<a name="l03371"></a>03371                         <span class="keywordtype">size_t</span> minPoints,
<a name="l03372"></a>03372                         gsl_rng* rgsl, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l03373"></a>03373                         std::string s, <span class="keywordtype">int</span> i)
<a name="l03374"></a>03374 {
<a name="l03375"></a>03375     <span class="keywordtype">bool</span> success = <span class="keyword">true</span>; <span class="comment">// start by assuming that all will be well...</span>
<a name="l03376"></a>03376     <span class="comment">//bool success = false;</span>
<a name="l03377"></a>03377   
<a name="l03378"></a>03378   <span class="comment">//cout &lt;&lt; &quot;change mcmc state called for &quot; &lt;&lt; endl;</span>
<a name="l03379"></a>03379   <span class="comment">//cout &lt;&lt; &quot;node list size: &quot; &lt;&lt; nodes.size() &lt;&lt; endl;</span>
<a name="l03380"></a>03380   <span class="comment">//cout &lt;&lt; &quot;#leaves: &quot; &lt;&lt; numLeaves &lt;&lt; &quot;\t&quot; &lt;&lt; &quot;#cherries: &quot; &lt;&lt; numCherries &lt;&lt; endl;</span>
<a name="l03381"></a>03381 
<a name="l03382"></a>03382     <span class="keywordflow">try</span> {
<a name="l03383"></a>03383 
<a name="l03384"></a>03384       <span class="keywordtype">double</span> rand = gsl_rng_uniform(rgsl);
<a name="l03385"></a>03385         
<a name="l03386"></a>03386         <span class="keywordtype">bool</span> haveNode = <span class="keyword">false</span>;
<a name="l03387"></a>03387 
<a name="l03388"></a>03388         <span class="comment">// use proposal to fill the proposal probabilities</span>
<a name="l03389"></a>03389 
<a name="l03390"></a>03390         <span class="comment">// this changes haveNode as well</span>
<a name="l03391"></a>03391         <span class="comment">//cout &lt;&lt; &quot;proposing&quot; &lt;&lt; endl;</span>
<a name="l03392"></a>03392         <a class="code" href="namespacesubpavings.shtml#a984883a654b8d040041f722f8ead7dc2" title="Define type SPSnodeListItr as an iterator over SPSnodeList.">SPSnodeListItr</a> it = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae7f23176e9afea24c51c6a37cbcc4b0a" title="Finds the node to target for change in MCMC on SPSnode trees.">proposeChangeMCMCState</a> (proposal, nodes,
<a name="l03393"></a>03393                                 numLeaves, numCherries,
<a name="l03394"></a>03394                                 rgsl, haveNode);
<a name="l03395"></a>03395       
<a name="l03396"></a>03396       <span class="comment">/*if (haveNode) </span>
<a name="l03397"></a>03397 <span class="comment">      { </span>
<a name="l03398"></a>03398 <span class="comment">        cout &lt;&lt; &quot;a node is proposed&quot;  &lt;&lt; (*it)-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l03399"></a>03399 <span class="comment">      }</span>
<a name="l03400"></a>03400 <span class="comment">      else {cout &lt;&lt; &quot;nothing proposed. stay.&quot; &lt;&lt; endl;}</span>
<a name="l03401"></a>03401 <span class="comment">      */</span>
<a name="l03402"></a>03402       
<a name="l03403"></a>03403         <span class="comment">// only do more if haveNode is true, which means that it points to something</span>
<a name="l03404"></a>03404         <span class="keywordflow">if</span> (haveNode &amp;&amp; (*it)-&gt;isLeaf()) {
<a name="l03405"></a>03405 
<a name="l03406"></a>03406             <span class="comment">//grab the leaf</span>
<a name="l03407"></a>03407             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* target = *it; <span class="comment">// don&#39;t change where it points until erased</span>
<a name="l03408"></a>03408 
<a name="l03409"></a>03409 
<a name="l03410"></a>03410             <span class="comment">// leaf so we are splitting</span>
<a name="l03411"></a>03411             <span class="keywordtype">bool</span> willSplit = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a89aa9c37916fcac47cf273f512bca019" title="Determines whether to split a node to get a new MCMC state.">decisionMCMCSplit</a>(target, proposal, logPrior, rgsl,
<a name="l03412"></a>03412                             numLeaves, numCherries, minPoints,
<a name="l03413"></a>03413                             logging, s, i);            
<a name="l03414"></a>03414 
<a name="l03415"></a>03415             <span class="keywordflow">if</span> (willSplit) {
<a name="l03416"></a>03416                 <span class="comment">// take the target out of the list</span>
<a name="l03417"></a>03417           <span class="comment">//cout &lt;&lt; &quot;split and remove from list &quot; &lt;&lt; (*it)-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l03418"></a>03418                nodes.erase(it);
<a name="l03419"></a>03419 
<a name="l03420"></a>03420                 <span class="comment">// try to change the state according to the proposed split</span>
<a name="l03421"></a>03421                 <span class="comment">// nodes, numLeaves and numCherries are passed by reference</span>
<a name="l03422"></a>03422                 success = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1544712de53718450f5f13fee5738a92" title="Changes the state of this Adaptive Histogram by splitting a node.">changeStateForSplit</a>(target, nodes,
<a name="l03423"></a>03423                             numLeaves, numCherries, minPoints);
<a name="l03424"></a>03424             } <span class="comment">// end of willSplit</span>
<a name="l03425"></a>03425 
<a name="l03426"></a>03426         } <span class="comment">// end of isLeaf</span>
<a name="l03427"></a>03427 
<a name="l03428"></a>03428         <span class="keywordflow">else</span> <span class="keywordflow">if</span> (haveNode &amp;&amp; (*it)-&gt;isSubLeaf()) {
<a name="l03429"></a>03429 
<a name="l03430"></a>03430             <span class="comment">// grab the cherry</span>
<a name="l03431"></a>03431             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* target = *it; <span class="comment">// don&#39;t change where it points until deleted</span>
<a name="l03432"></a>03432 
<a name="l03433"></a>03433             <span class="keywordtype">bool</span> willMerge = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae2df56ec733843dffcc6af094637758d" title="Determines whether to merge a node to get a new MCMC state.">decisionMCMCMerge</a>(target, proposal, logPrior, rgsl,
<a name="l03434"></a>03434                             numLeaves, numCherries, minPoints, logging, s, i);
<a name="l03435"></a>03435 
<a name="l03436"></a>03436             <span class="keywordflow">if</span> (willMerge) {
<a name="l03437"></a>03437                 <span class="comment">// take the target out of the list of cherries</span>
<a name="l03438"></a>03438           <span class="comment">//cout &lt;&lt; &quot;merge and remove from list &quot; &lt;&lt; (*it)-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l03439"></a>03439                nodes.erase(it);
<a name="l03440"></a>03440 
<a name="l03441"></a>03441                success = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a4ff31f6b6d944c0c1e71ae4e7586cc2a" title="Changes the state of this Adaptive Histogram by merging cherry.">changeStateForMerge</a>(target,
<a name="l03442"></a>03442                             nodes, numLeaves, numCherries, minPoints);
<a name="l03443"></a>03443 
<a name="l03444"></a>03444             } <span class="comment">// end willMerge</span>
<a name="l03445"></a>03445         } <span class="comment">// end if cherry</span>
<a name="l03446"></a>03446 
<a name="l03447"></a>03447 
<a name="l03448"></a>03448         <span class="keywordflow">if</span> (((logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089ab2890a6eb7493029f41cf871d43877c3">TXT</a>) || (logging == <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a37f328b2c4c91409b43fc74e7f299118">TXTANDGRAPH</a>)) &amp;&amp; !haveNode) {
<a name="l03449"></a>03449 
<a name="l03450"></a>03450             std::string line = <span class="stringliteral">&quot;No node grabbed (possible if proposal has fixed &quot;</span>;
<a name="l03451"></a>03451             line += <span class="stringliteral">&quot;probability of split): state stays the same&quot;</span>;
<a name="l03452"></a>03452 
<a name="l03453"></a>03453             <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, line, <span class="keyword">true</span>); <span class="comment">// append to log file</span>
<a name="l03454"></a>03454         }
<a name="l03455"></a>03455 
<a name="l03456"></a>03456         <span class="keywordflow">if</span> (success) {
<a name="l03457"></a>03457             <span class="comment">// is it worth doing this?  on balance I think yes</span>
<a name="l03458"></a>03458             success = (nodes.size() == (numLeaves+numCherries));
<a name="l03459"></a>03459             <span class="comment">//cout &lt;&lt; &quot;successful state change/stay.&quot; &lt;&lt; endl;</span>
<a name="l03460"></a>03460         <span class="comment">//cout &lt;&lt; &quot;---------------------------------&quot; &lt;&lt; endl;</span>
<a name="l03461"></a>03461         }
<a name="l03462"></a>03462         
<a name="l03463"></a>03463         <span class="keywordflow">else</span> {
<a name="l03464"></a>03464             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;Nodes muddled in changeMCMCstate&quot;</span>);
<a name="l03465"></a>03465 
<a name="l03466"></a>03466         }
<a name="l03467"></a>03467     }
<a name="l03468"></a>03468     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l03469"></a>03469         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l03470"></a>03470         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory in MCMC.  Orginal error: &quot;</span>
<a name="l03471"></a>03471                                      + oldmsg;
<a name="l03472"></a>03472         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l03473"></a>03473         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l03474"></a>03474     }
<a name="l03475"></a>03475     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l03476"></a>03476         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l03477"></a>03477         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error  in MCMC.  Orginal error: &quot;</span>
<a name="l03478"></a>03478                                     + oldmsg;
<a name="l03479"></a>03479         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l03480"></a>03480         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l03481"></a>03481     }
<a name="l03482"></a>03482     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l03483"></a>03483         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l03484"></a>03484         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException  in MCMC.  Orginal error: &quot;</span>
<a name="l03485"></a>03485                                     + oldmsg;
<a name="l03486"></a>03486         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l03487"></a>03487         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l03488"></a>03488     }
<a name="l03489"></a>03489     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l03490"></a>03490         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l03491"></a>03491         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error  in MCMC.  Orginal error: &quot;</span> + oldmsg;
<a name="l03492"></a>03492         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l03493"></a>03493         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l03494"></a>03494     }
<a name="l03495"></a>03495 
<a name="l03496"></a>03496     <span class="keywordflow">return</span> success;
<a name="l03497"></a>03497 }
<a name="l03498"></a>03498 
<a name="l03499"></a>03499 
<a name="l03500"></a>03500 <span class="comment">// returns a vector of leaf levels as ints</span>
<a name="l03501"></a>03501 <span class="comment">// left to right, 0 is root</span>
<a name="l03502"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a70f9af80f0ee875d6dcbfd4cafb53813">03502</a> <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a70f9af80f0ee875d6dcbfd4cafb53813">AdaptiveHistogram::getLeafLevels</a>()<span class="keyword"> const</span>
<a name="l03503"></a>03503 <span class="keyword"></span>{
<a name="l03504"></a>03504     <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> levels; <span class="comment">// empty container</span>
<a name="l03505"></a>03505 
<a name="l03506"></a>03506     <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>) {
<a name="l03507"></a>03507         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#aa1df5c8572870d22d59c852b458c892b" title="Fill in a vector of leaf node levels.">getLeafNodeLevels</a>(0, levels);
<a name="l03508"></a>03508         <span class="comment">//levels has now been filled in</span>
<a name="l03509"></a>03509     }
<a name="l03510"></a>03510     <span class="keywordflow">return</span> levels;
<a name="l03511"></a>03511 }
<a name="l03512"></a>03512 
<a name="l03513"></a>03513 
<a name="l03514"></a>03514 <span class="comment">// returns a vector of leaf counts</span>
<a name="l03515"></a>03515 <span class="comment">// left to right</span>
<a name="l03516"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aaffb116a24a6de03482a8bfd9625b07f">03516</a> <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aaffb116a24a6de03482a8bfd9625b07f">AdaptiveHistogram::getLeafCounts</a>()<span class="keyword"> const</span>
<a name="l03517"></a>03517 <span class="keyword"></span>{
<a name="l03518"></a>03518     <a class="code" href="namespacesubpavings.shtml#a612fc5639b45583b9fd33bd304354f81" title="Define type Size_tVec as a container for size_t.">Size_tVec</a> counts; <span class="comment">// empty container</span>
<a name="l03519"></a>03519     <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>) {
<a name="l03520"></a>03520         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a2f8ce829fd9ba3ef3838d640ae201e9e">getLeafNodeCounts</a>(counts);
<a name="l03521"></a>03521         <span class="comment">//levels has now been filled in</span>
<a name="l03522"></a>03522     }
<a name="l03523"></a>03523     <span class="keywordflow">return</span> counts;
<a name="l03524"></a>03524 }
<a name="l03525"></a>03525 
<a name="l03526"></a>03526 
<a name="l03527"></a>03527 <span class="comment">// make a .dot file for the histogram</span>
<a name="l03528"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a845c591145a1abc86d7d0e1d33c26e22">03528</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a845c591145a1abc86d7d0e1d33c26e22" title="Make a .dot graph file from histogram structure.">AdaptiveHistogram::outputGraphDot</a>()<span class="keyword"> const</span>
<a name="l03529"></a>03529 <span class="keyword"></span>{
<a name="l03530"></a>03530     <span class="keywordtype">bool</span> success = <span class="keyword">false</span>;
<a name="l03531"></a>03531 
<a name="l03532"></a>03532     <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>) {
<a name="l03533"></a>03533         success = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#aaaf0891a67e056e19f8e086c0139fd96" title="Make a .dot graph file from an SPnode tree structure.">outputGraphDot</a>();
<a name="l03534"></a>03534 
<a name="l03535"></a>03535     }
<a name="l03536"></a>03536     <span class="keywordflow">else</span> {
<a name="l03537"></a>03537         std::cerr &lt;&lt; <span class="stringliteral">&quot;Sorry, you can&#39;t make a graph without a root paving&quot;</span>
<a name="l03538"></a>03538                 &lt;&lt; std::endl;
<a name="l03539"></a>03539     }
<a name="l03540"></a>03540     <span class="keywordflow">return</span> success;
<a name="l03541"></a>03541 }
<a name="l03542"></a>03542 
<a name="l03543"></a>03543 
<a name="l03544"></a>03544 <span class="comment">// Method to output the subpaving to a txt file</span>
<a name="l03545"></a>03545 <span class="comment">// Output goes to file named according to argument s</span>
<a name="l03546"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106">03546</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a49a8ff01e1398420cd45642d5b1d3106" title="Output the subpaving managed by this to a txt file.">AdaptiveHistogram::outputToTxtTabs</a>(<span class="keyword">const</span> std::string&amp; s,
<a name="l03547"></a>03547                             <span class="keywordtype">bool</span> confirm)<span class="keyword"> const</span>
<a name="l03548"></a>03548 <span class="keyword"></span>{
<a name="l03549"></a>03549     <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>) {
<a name="l03550"></a>03550 
<a name="l03551"></a>03551         <span class="comment">// To generate a file output of the AdaptiveHistogram object</span>
<a name="l03552"></a>03552         ofstream os(s.c_str());         <span class="comment">// Filename, c-string version</span>
<a name="l03553"></a>03553         <span class="keywordflow">if</span> (os.is_open()) {
<a name="l03554"></a>03554 
<a name="l03555"></a>03555             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#abe732a753f432c2239c9f82a47d089b1" title="Output for for all leaves of a binary tree.">leavesOutputTabs</a>(os); <span class="comment">// the output</span>
<a name="l03556"></a>03556             <span class="keywordflow">if</span> (confirm)
<a name="l03557"></a>03557                 std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the AdaptiveHistogram &quot;</span>
<a name="l03558"></a>03558                     &lt;&lt; <span class="stringliteral">&quot;has been written to &quot;</span> &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l03559"></a>03559         }
<a name="l03560"></a>03560         <span class="keywordflow">else</span> {
<a name="l03561"></a>03561             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error: could not open file named &quot;</span>
<a name="l03562"></a>03562                 &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l03563"></a>03563         }
<a name="l03564"></a>03564     }
<a name="l03565"></a>03565 }
<a name="l03566"></a>03566 
<a name="l03567"></a>03567 <span class="comment">// Method to output the subpaving to a txt file</span>
<a name="l03568"></a>03568 <span class="comment">// Output goes to file named according to argument s</span>
<a name="l03569"></a>03569 <span class="comment">// Output includes scaled EMP contributions under COPERR and AIC</span>
<a name="l03570"></a>03570 <span class="comment">// and changes if split</span>
<a name="l03571"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2fb89e060574b8c935191cd3afd91290">03571</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2fb89e060574b8c935191cd3afd91290" title="Output the subpaving managed by this to a txt file.">AdaptiveHistogram::outputToTxtTabsWithEMPs</a>(<span class="keyword">const</span> std::string&amp; s,
<a name="l03572"></a>03572                                                     <span class="keywordtype">bool</span> confirm)<span class="keyword"> const</span>
<a name="l03573"></a>03573 <span class="keyword"></span>{
<a name="l03574"></a>03574     <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>) {
<a name="l03575"></a>03575 
<a name="l03576"></a>03576         <span class="comment">// To generate a file output of the AdaptiveHistogram object</span>
<a name="l03577"></a>03577         ofstream os(s.c_str());         <span class="comment">// Filename, c-string version</span>
<a name="l03578"></a>03578         <span class="keywordflow">if</span> (os.is_open()) {
<a name="l03579"></a>03579             <span class="keywordtype">size_t</span> n = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l03580"></a>03580             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a817a8a29925937c189cc009366fe6bfb" title="Output for for all leaves of a binary tree.">leavesOutputTabsWithEMPs</a>(n, os); <span class="comment">// the output</span>
<a name="l03581"></a>03581             <span class="keywordflow">if</span> (confirm)
<a name="l03582"></a>03582                 std::cout &lt;&lt; <span class="stringliteral">&quot;The output of the AdaptiveHistogram with scaled EMPs &quot;</span>
<a name="l03583"></a>03583                     &lt;&lt; <span class="stringliteral">&quot;has been written to &quot;</span> &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l03584"></a>03584         }
<a name="l03585"></a>03585         <span class="keywordflow">else</span> {
<a name="l03586"></a>03586             std::cerr &lt;&lt; <span class="stringliteral">&quot;Error: could not open file named &quot;</span>
<a name="l03587"></a>03587                 &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l03588"></a>03588         }
<a name="l03589"></a>03589     }
<a name="l03590"></a>03590 }
<a name="l03591"></a>03591 
<a name="l03592"></a>03592 
<a name="l03593"></a>03593 <span class="comment">// Method to output details and stats on the root paving to a txt file</span>
<a name="l03594"></a>03594 <span class="comment">// Output goes to file named according to arguement s</span>
<a name="l03595"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a35416eefb965755a846e1bb64c882439">03595</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a35416eefb965755a846e1bb64c882439" title="Output details of full sample (from root) to txt tile.">AdaptiveHistogram::outputRootToTxt</a>(<span class="keyword">const</span> std::string&amp; s,
<a name="l03596"></a>03596                                             <span class="keywordtype">bool</span> confirm)<span class="keyword"> const</span>
<a name="l03597"></a>03597 <span class="keyword"></span>{
<a name="l03598"></a>03598     <span class="keywordflow">if</span> (NULL != <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>) {
<a name="l03599"></a>03599 
<a name="l03600"></a>03600         <span class="comment">// To generate a file output of root node of the AdaptiveHistogram</span>
<a name="l03601"></a>03601         ofstream os(s.c_str());         <span class="comment">// Filename, c-string version</span>
<a name="l03602"></a>03602         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#aba02715cb75f803df7c3ffd1eaf027e8" title="Output details of a specific node.">nodePrint</a>(os); <span class="comment">// the output</span>
<a name="l03603"></a>03603         <span class="keywordflow">if</span> (confirm)
<a name="l03604"></a>03604             std::cout &lt;&lt; <span class="stringliteral">&quot;Details of the root paving of the AdaptiveHistogram &quot;</span>
<a name="l03605"></a>03605                 &lt;&lt; <span class="stringliteral">&quot;has been written to &quot;</span> &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l03606"></a>03606     }
<a name="l03607"></a>03607 
<a name="l03608"></a>03608 }
<a name="l03609"></a>03609 
<a name="l03610"></a>03610 <span class="comment">//src_trunk_0701</span>
<a name="l03611"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1cb13fa570de75efab3b9c4b862d200e">03611</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1cb13fa570de75efab3b9c4b862d200e" title="Change this so that the subpaving it manages is the union of this&#39;s subpaving and the subpaving of th...">AdaptiveHistogram::reshapeToUnion</a>(
<a name="l03612"></a>03612           <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; other)
<a name="l03613"></a>03613 {
<a name="l03614"></a>03614   <span class="keywordflow">if</span> ( !<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aaf5eac63bd232e3e76f20a27587c8784" title="Get whether this has a subpaving to manage.">hasSubPaving</a>() || !other.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#afecdfb659b961eab7f8d18160bea7296" title="Get whether this has a subpaving to manage.">hasSubPaving</a>() ) {
<a name="l03615"></a>03615     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a>(
<a name="l03616"></a>03616         <span class="stringliteral">&quot;AdaptiveHistogram::reshapeToUnion(const PiecewiseConstantFunction&amp;)&quot;</span>);
<a name="l03617"></a>03617   }
<a name="l03618"></a>03618   
<a name="l03619"></a>03619   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ad128b1715d294a65c905579ab43890d2" title="Reshape so that the tree rooted at this has shape that is the union of this shape and the shape of an...">reshapeToUnion</a>(other.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad0419b40b47ffa5bb70af1f9cfe86062" title="Get a copy of the subpaving managed by this.">getCopySubPaving</a>());
<a name="l03620"></a>03620 }
<a name="l03621"></a>03621 
<a name="l03622"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a9e30e2969e3ad675b8659470200219d4">03622</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1cb13fa570de75efab3b9c4b862d200e" title="Change this so that the subpaving it manages is the union of this&#39;s subpaving and the subpaving of th...">AdaptiveHistogram::reshapeToUnion</a>(
<a name="l03623"></a>03623           <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml" title="A wrapper or manager for an RealMappedSPnode tree representing a piecewise constant function...">PiecewiseConstantFunction</a>&amp; other,
<a name="l03624"></a>03624           <span class="keywordtype">size_t</span> minChildPoints)
<a name="l03625"></a>03625 {
<a name="l03626"></a>03626   <span class="keywordflow">if</span> ( !<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aaf5eac63bd232e3e76f20a27587c8784" title="Get whether this has a subpaving to manage.">hasSubPaving</a>() || !other.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#afecdfb659b961eab7f8d18160bea7296" title="Get whether this has a subpaving to manage.">hasSubPaving</a>() ) {
<a name="l03627"></a>03627     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1NullSubpavingPointer__Error.shtml">NullSubpavingPointer_Error</a>(
<a name="l03628"></a>03628     <span class="stringliteral">&quot;AdaptiveHistogram::reshapeToUnion(const PiecewiseConstantFunction&amp;, size_t)&quot;</span>);
<a name="l03629"></a>03629   }
<a name="l03630"></a>03630   
<a name="l03631"></a>03631   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ad128b1715d294a65c905579ab43890d2" title="Reshape so that the tree rooted at this has shape that is the union of this shape and the shape of an...">reshapeToUnion</a>(other.<a class="code" href="classsubpavings_1_1PiecewiseConstantFunction.shtml#ad0419b40b47ffa5bb70af1f9cfe86062" title="Get a copy of the subpaving managed by this.">getCopySubPaving</a>(), minChildPoints);
<a name="l03632"></a>03632 }
<a name="l03633"></a>03633 <span class="comment">//--src_trunk_0701</span>
<a name="l03634"></a>03634 
<a name="l03635"></a>03635 
<a name="l03638"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8f3844b0b56fb1aaa96c44558dd8e4a4">03638</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8f3844b0b56fb1aaa96c44558dd8e4a4" title="Clear the histogram&#39;s data and counters.">AdaptiveHistogram::makeEmpty</a>()
<a name="l03639"></a>03639 {
<a name="l03640"></a>03640   <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l03641"></a>03641   <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
<a name="l03642"></a>03642    <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves); <span class="comment">// fill the container</span>
<a name="l03643"></a>03643    <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l03644"></a>03644     (*it)-&gt;makeEmptyNode();
<a name="l03645"></a>03645   }
<a name="l03646"></a>03646 } 
<a name="l03647"></a>03647 
<a name="l03650"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aca5143d5da261357d7f8d7eec45d1a5c">03650</a> real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a513472c79b4a9337dcb5445be825a8f3">AdaptiveHistogram::getEstLogLikelihoodFromRSSample</a>(
<a name="l03651"></a>03651                 <a class="code" href="classRSSample.shtml" title="A class for the status of a Rejection Sampler.">RSSample</a>&amp; labSampledData, <span class="keywordtype">double</span> dx, <span class="keywordtype">double</span> wt,
<a name="l03652"></a>03652                 <span class="keywordtype">double</span> WeightHist,
<a name="l03653"></a>03653             std::map&lt;rvector, <span class="keywordtype">double</span>, std::less&lt;rvector&gt; &gt;&amp; WeightsPM)
<a name="l03654"></a>03654 {
<a name="l03655"></a>03655     dotprecision dpEstLogLik;
<a name="l03656"></a>03656     dpEstLogLik = 0.0;
<a name="l03657"></a>03657       
<a name="l03658"></a>03658     <span class="comment">//Get log-likelihoods for points in model 1, </span>
<a name="l03659"></a>03659     <span class="comment">//and points both in model 0 and 1</span>
<a name="l03660"></a>03660     
<a name="l03661"></a>03661     <span class="comment">//first multiply the box heights with the weight corresponding to the</span>
<a name="l03662"></a>03662     <span class="comment">// histogram model</span>
<a name="l03663"></a>03663     vector&lt;double&gt; fhat; <span class="comment">//container to store heights</span>
<a name="l03664"></a>03664     <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l03665"></a>03665       <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
<a name="l03666"></a>03666       <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves); <span class="comment">// fill the container</span>
<a name="l03667"></a>03667       <span class="keywordtype">size_t</span> <a class="code" href="errorfunc_8cpp.shtml#abcd464084d71d1ca5caf89793fa1d050">N</a> = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a7386f85d1182ae6e3f32766c4a208c11" title="Gets count in the root paving.">getRootCounter</a>();
<a name="l03668"></a>03668     <span class="comment">// add wt to the heights at each box</span>
<a name="l03669"></a>03669     <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l03670"></a>03670       fhat.push_back(WeightHist*
<a name="l03671"></a>03671       (((1-wt)*(*it)-&gt;getCounter()/(N*1.0)/(*it)-&gt;nodeVolume()) + wt));
<a name="l03672"></a>03672     }
<a name="l03673"></a>03673     
<a name="l03674"></a>03674     
<a name="l03675"></a>03675     <span class="comment">// clear the current histogram&#39;s data and counters and </span>
<a name="l03676"></a>03676     <span class="comment">// insert new data into the histogram </span>
<a name="l03677"></a>03677     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> tempHist = (*this);
<a name="l03678"></a>03678     tempHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8f3844b0b56fb1aaa96c44558dd8e4a4" title="Clear the histogram&#39;s data and counters.">makeEmpty</a>(); 
<a name="l03679"></a>03679     
<a name="l03680"></a>03680     <span class="comment">//cout &lt;&lt; &quot;insert from model 1&quot; &lt;&lt; endl;    </span>
<a name="l03681"></a>03681     <span class="comment">// insert data from model 1 into the empty hist </span>
<a name="l03682"></a>03682      <span class="keywordtype">bool</span> hasData = <span class="keyword">false</span>;
<a name="l03683"></a>03683     hasData = tempHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6f049bec17097067ae9e2a7c9f42bd60">insertFromRSSample</a>(labSampledData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 1);
<a name="l03684"></a>03684     <span class="keywordflow">if</span> (hasData) {
<a name="l03685"></a>03685       <span class="comment">//now get the estimated likelihood</span>
<a name="l03686"></a>03686       <span class="keywordtype">size_t</span> pos = 0;
<a name="l03687"></a>03687       <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leavesTemp; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l03688"></a>03688       tempHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leavesTemp); <span class="comment">// fill the container</span>
<a name="l03689"></a>03689       <span class="keywordflow">for</span>(it = leavesTemp.begin(); it &lt; leavesTemp.end(); it++) {
<a name="l03690"></a>03690         <span class="keywordflow">if</span> ((*it)-&gt;getCounter() != 0) {       
<a name="l03691"></a>03691           <span class="comment">//cout &lt;&lt; fhat[pos] &lt;&lt; &quot;\t&quot; &lt;&lt; (*it)-&gt;getCounter() &lt;&lt;&quot;\t&quot; &lt;&lt; dx*fhat[pos] &lt;&lt; &quot;\t&quot; &lt;&lt; ((*it)-&gt;getCounter())*log(dx*fhat[pos]) &lt;&lt; endl;</span>
<a name="l03692"></a>03692           accumulate(dpEstLogLik, ((*it)-&gt;getCounter())*log(dx*fhat[pos]), 1);
<a name="l03693"></a>03693           <span class="comment">//cout &lt;&lt; dpEstLogLik &lt;&lt; endl;</span>
<a name="l03694"></a>03694         }
<a name="l03695"></a>03695         pos++; 
<a name="l03696"></a>03696       }   
<a name="l03697"></a>03697     } <span class="comment">// end of if hasData for label 1</span>
<a name="l03698"></a>03698     
<a name="l03699"></a>03699     <span class="comment">//make tempHist empty again</span>
<a name="l03700"></a>03700     tempHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8f3844b0b56fb1aaa96c44558dd8e4a4" title="Clear the histogram&#39;s data and counters.">makeEmpty</a>();
<a name="l03701"></a>03701     <span class="comment">//insert data from model 0</span>
<a name="l03702"></a>03702     <span class="comment">//cout &lt;&lt; &quot;inserting from model 0&quot; &lt;&lt; endl;</span>
<a name="l03703"></a>03703     hasData = <span class="keyword">false</span>;
<a name="l03704"></a>03704     hasData =tempHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6f049bec17097067ae9e2a7c9f42bd60">insertFromRSSample</a>(labSampledData, <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>, 0);
<a name="l03705"></a>03705      <span class="keywordflow">if</span> (hasData) {
<a name="l03706"></a>03706        <span class="keywordtype">size_t</span> pos = 0;
<a name="l03707"></a>03707       <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leavesTemp; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l03708"></a>03708       tempHist.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leavesTemp); <span class="comment">// fill the container</span>
<a name="l03709"></a>03709       <span class="keywordflow">for</span>(it = leavesTemp.begin(); it &lt; leavesTemp.end(); it++) {
<a name="l03710"></a>03710         <span class="keywordflow">if</span> ((*it)-&gt;getCounter() != 0) {       
<a name="l03711"></a>03711           <span class="comment">//get the node&#39;s data</span>
<a name="l03712"></a>03712           <a class="code" href="namespacesubpavings.shtml#af005697b49cff9ea37fc3bc9ed19da30" title="Define type NodeData as a container for iterators a BigData.">NodeData</a> nodeData = (*it)-&gt;getData();
<a name="l03713"></a>03713           <span class="comment">//go through each data in node</span>
<a name="l03714"></a>03714           <a class="code" href="namespacesubpavings.shtml#af79bf496cfc0df4bddcbe13a62f12bff" title="Define type NodeDataItr as a NodeData iterator.">NodeDataItr</a> dit;
<a name="l03715"></a>03715           <span class="keywordflow">for</span> (dit = nodeData.begin(); dit != nodeData.end(); dit++){
<a name="l03716"></a>03716             <a class="code" href="namespacesubpavings.shtml#a8792314c11b28ac2b8c4c85c47526f3a" title="Define type BigDataItr as an iterator BigData.">BigDataItr</a> bigIt = *dit; 
<a name="l03717"></a>03717                   rvector theData = *bigIt;  <span class="comment">// convert NodeData to rvector</span>
<a name="l03718"></a>03718             
<a name="l03719"></a>03719             <span class="comment">//get the EMF</span>
<a name="l03720"></a>03720              <span class="keywordflow">if</span> ( WeightsPM[theData] != 0 ) {
<a name="l03721"></a>03721             <span class="comment">//the check for WeightsPM[theData] is needed because there </span>
<a name="l03722"></a>03722             <span class="comment">//may be point mass in the sampled data but not in the </span>
<a name="l03723"></a>03723             <span class="comment">//histogram that you are observing the data with</span>
<a name="l03724"></a>03724               <span class="comment">//cout &lt;&lt; (*it)-&gt;getCounter() &lt;&lt; &quot;\t&quot; &lt;&lt; (*bigIt) &lt;&lt; endl;</span>
<a name="l03725"></a>03725               <span class="comment">//cout &lt;&lt; dx*fhat[pos] &lt;&lt; &quot;\t&quot; &lt;&lt; WeightsPM[theData] &lt;&lt; endl; </span>
<a name="l03726"></a>03726               accumulate(dpEstLogLik, log(dx*fhat[pos] + WeightsPM[theData]), 1);
<a name="l03727"></a>03727               <span class="comment">//cout &lt;&lt; dpEstLogLik &lt;&lt; endl;</span>
<a name="l03728"></a>03728             } <span class="comment">// end of weight check</span>
<a name="l03729"></a>03729             <span class="keywordflow">else</span> {
<a name="l03730"></a>03730               <span class="comment">//cout &lt;&lt; (*it)-&gt;getCounter() &lt;&lt; &quot;\t&quot; &lt;&lt; (*bigIt) &lt;&lt; endl;</span>
<a name="l03731"></a>03731               <span class="comment">//cout &lt;&lt; dx*fhat[pos] &lt;&lt; endl; </span>
<a name="l03732"></a>03732               accumulate(dpEstLogLik, log(dx*fhat[pos]), 1);
<a name="l03733"></a>03733               <span class="comment">//cout &lt;&lt; dpEstLogLik &lt;&lt; endl;</span>
<a name="l03734"></a>03734             }
<a name="l03735"></a>03735           } <span class="comment">// end of going through node&#39;s data     </span>
<a name="l03736"></a>03736         } <span class="comment">// if counter &lt; 0</span>
<a name="l03737"></a>03737         pos++; 
<a name="l03738"></a>03738       } <span class="comment">// end of iterating over leaves     </span>
<a name="l03739"></a>03739     } <span class="comment">// end of if hasData for label 0   </span>
<a name="l03740"></a>03740         
<a name="l03741"></a>03741     real estLogLik = rnd(dpEstLogLik);
<a name="l03742"></a>03742     <span class="keywordflow">return</span> estLogLik;
<a name="l03743"></a>03743 }
<a name="l03744"></a>03744 
<a name="l03745"></a>03745 
<a name="l03748"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a28b0435b5ee65b27b2459d3dc3fc224d">03748</a> real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a28b0435b5ee65b27b2459d3dc3fc224d">AdaptiveHistogram::getIAE</a>(<span class="keywordtype">int</span> distr)
<a name="l03749"></a>03749 {
<a name="l03750"></a>03750       real IAE = 0;
<a name="l03751"></a>03751     <a class="code" href="classtaylor_1_1dim2taylor.shtml">taylor::dim2taylor</a> (*testpnt)(<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">taylor::dim2taylor_vector</a>, interval);
<a name="l03752"></a>03752     <span class="keywordflow">switch</span>(distr)
<a name="l03753"></a>03753     { 
<a name="l03754"></a>03754          <span class="keywordflow">case</span> 1: <span class="comment">//bivariate gaussian mixtures</span>
<a name="l03755"></a>03755          testpnt = <a class="code" href="errorfunc_8cpp.shtml#abd72fe76528917561a4e1a7fdf7890d9" title="IAE for the bivariate gaussian.">BiGOP</a>;
<a name="l03756"></a>03756       IAE = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b0b0c19870f67a07704458237cf19d0">get2DIAE</a>(testpnt);
<a name="l03757"></a>03757       <span class="keywordflow">break</span>;
<a name="l03758"></a>03758       
<a name="l03759"></a>03759       <span class="keywordflow">case</span> 2: <span class="comment">// Levy 2D</span>
<a name="l03760"></a>03760       testpnt = <a class="code" href="errorfunc_8cpp.shtml#a72f3aaf218533dc785d09b0dffacbad7" title="IAE for the Levy 2D.">LevyOP</a>;
<a name="l03761"></a>03761       IAE = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b0b0c19870f67a07704458237cf19d0">get2DIAE</a>(testpnt);
<a name="l03762"></a>03762       <span class="keywordflow">break</span>;
<a name="l03763"></a>03763       
<a name="l03764"></a>03764       <span class="keywordflow">case</span> 3: <span class="comment">//Rosenbrock 2D</span>
<a name="l03765"></a>03765       testpnt = <a class="code" href="errorfunc_8cpp.shtml#a77af86554abcee2e013b9d8631ed4c5f" title="IAE for a Rosenbrock 2D.">RosenOP</a>;
<a name="l03766"></a>03766       IAE = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b0b0c19870f67a07704458237cf19d0">get2DIAE</a>(testpnt);
<a name="l03767"></a>03767       <span class="keywordflow">break</span>;
<a name="l03768"></a>03768     }   
<a name="l03769"></a>03769     <span class="keywordflow">return</span> IAE;
<a name="l03770"></a>03770 }
<a name="l03771"></a>03771 
<a name="l03774"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#af7cf1131373c3e547a23d2db624ce8cf">03774</a> real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3d403e99c1c471552303b2a7fd7e7d3e">AdaptiveHistogram::getUnifIAE</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> &amp; myPart, <span class="keywordtype">double</span> weight, vector&lt;int&gt; holesLoc)
<a name="l03775"></a>03775 {
<a name="l03776"></a>03776    <span class="comment">// get the true height, f of the corresponding box in myPart</span>
<a name="l03777"></a>03777   <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> trueLeaves;
<a name="l03778"></a>03778   <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> trueIt;
<a name="l03779"></a>03779   <span class="comment">//AdaptiveHistogram * adhPtr;</span>
<a name="l03780"></a>03780   <span class="comment">//adhPtr = &amp;myPart;</span>
<a name="l03781"></a>03781   (myPart).<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(trueLeaves);
<a name="l03782"></a>03782 
<a name="l03783"></a>03783   <span class="comment">// setting up containers for the leaves</span>
<a name="l03784"></a>03784   <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
<a name="l03785"></a>03785   <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it;
<a name="l03786"></a>03786   (*this).getSubPaving()-&gt;getLeaves(leaves); <span class="comment">// fill the container</span>
<a name="l03787"></a>03787 
<a name="l03788"></a>03788   <span class="keywordtype">double</span> trueF; <span class="comment">//true density</span>
<a name="l03789"></a>03789   ivector temp;
<a name="l03790"></a>03790   
<a name="l03791"></a>03791   dotprecision <a class="code" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a>;    <span class="comment">// use type dotprecision for summation  </span>
<a name="l03792"></a>03792   dpIAE=0.0;
<a name="l03793"></a>03793 
<a name="l03794"></a>03794   <span class="keywordtype">int</span> n = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#aeac2247b4626b1adfa609d3ff109ceb2" title="The count in the node&#39;s ultimate ancestor root.">getRootCounter</a>();
<a name="l03795"></a>03795   <span class="comment">//go through all the leaves in this</span>
<a name="l03796"></a>03796   <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l03797"></a>03797     ivector thisBox = (*it)-&gt;getBox();
<a name="l03798"></a>03798     <span class="comment">//cout &lt;&lt; &quot;====checking &quot; &lt;&lt; (*it)-&gt;getBox() &lt;&lt; endl;</span>
<a name="l03799"></a>03799       
<a name="l03800"></a>03800     <span class="comment">// get the height of this leaf</span>
<a name="l03801"></a>03801     <span class="keywordtype">double</span> fhat = (*it)-&gt;getCounter()/(n*1.0)/(*it)-&gt;nodeVolume(); 
<a name="l03802"></a>03802     
<a name="l03803"></a>03803     <span class="comment">//cout &lt;&lt; &quot;fhat for box &quot; &lt;&lt; &quot;:&quot; &lt;&lt; fhat &lt;&lt; endl;</span>
<a name="l03804"></a>03804 
<a name="l03805"></a>03805     <span class="keywordtype">size_t</span> L = 0;
<a name="l03806"></a>03806     <span class="keywordflow">for</span> (trueIt = trueLeaves.begin(); trueIt &lt; trueLeaves.end(); trueIt++) {
<a name="l03807"></a>03807       <span class="comment">//cout &lt;&lt; &quot;----True leaf: &quot; &lt;&lt; (*trueIt)-&gt;getBox() &lt;&lt; &quot;\t&quot; &lt;&lt; endl;</span>
<a name="l03808"></a>03808       ivector trueBox = (*trueIt)-&gt;getBox();
<a name="l03809"></a>03809 
<a name="l03810"></a>03810       <span class="keywordflow">if</span> (  holesLoc[L] == 0 ) { trueF = 0; }
<a name="l03811"></a>03811       <span class="keywordflow">else</span> { trueF = weight/((*trueIt)-&gt;nodeVolume()); }
<a name="l03812"></a>03812       <span class="comment">//cout &lt;&lt; &quot;pdf: &quot; &lt;&lt; trueF &lt;&lt; &quot;------&quot; &lt;&lt; endl;</span>
<a name="l03813"></a>03813       
<a name="l03814"></a>03814       <span class="comment">// if this is contained in trueBox</span>
<a name="l03815"></a>03815       <span class="keywordflow">if</span> ( (*it)-&gt;getBox() &lt;= (*trueIt)-&gt;getBox() || (*it)-&gt;getBox() == (*trueIt)-&gt;getBox() ) {
<a name="l03816"></a>03816         <span class="comment">//use the volume of this</span>
<a name="l03817"></a>03817         real r = ((*it)-&gt;nodeVolume())*(fhat - trueF);
<a name="l03818"></a>03818         <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; &quot;\t&quot; &lt;&lt; abs(r) &lt;&lt; endl;</span>
<a name="l03819"></a>03819         accumulate(dpIAE, abs(r), 1.0);
<a name="l03820"></a>03820         <span class="comment">//can move on to next leaf rather than iterating thru all trueBoxes</span>
<a name="l03821"></a>03821         <span class="comment">//think about this later</span>
<a name="l03822"></a>03822       } <span class="comment">//end of if this box is in trueBox</span>
<a name="l03823"></a>03823       
<a name="l03824"></a>03824       <span class="comment">// if this contains trueBox</span>
<a name="l03825"></a>03825       <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((*trueIt)-&gt;getBox() &lt;= (*it)-&gt;getBox()) {
<a name="l03826"></a>03826         <span class="comment">//use the volume of trueBox</span>
<a name="l03827"></a>03827         real r = ((*trueIt)-&gt;nodeVolume())*(fhat - trueF);
<a name="l03828"></a>03828         <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; &quot;\t&quot; &lt;&lt; abs(r) &lt;&lt; endl;</span>
<a name="l03829"></a>03829         accumulate(dpIAE, abs(r), 1.0);
<a name="l03830"></a>03830       } <span class="comment">//end of if trueBox is in this box</span>
<a name="l03831"></a>03831       
<a name="l03832"></a>03832       <span class="comment">// if this is partially contained in trueBox </span>
<a name="l03833"></a>03833       <span class="keywordflow">else</span> <span class="keywordflow">if</span>   (<a class="code" href="toolz_8cpp.shtml#a4b95fc9f126441c04e5b773e5fe56533" title="Compute the intersection interval r of interval a and interval b.">Intersection</a>(temp, thisBox, trueBox)) {
<a name="l03834"></a>03834         <span class="keywordflow">if</span> (Inf(temp) != Sup(temp)){
<a name="l03835"></a>03835           <span class="keywordtype">double</span> volume = <a class="code" href="AIAsubpaving_8cpp.shtml#a7f6354ab5e7b1310b03f0e190169eabe">Volume</a>(temp);
<a name="l03836"></a>03836           real r = volume*(fhat - trueF);
<a name="l03837"></a>03837           <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; &quot;\t&quot; &lt;&lt; abs(r) &lt;&lt; endl;</span>
<a name="l03838"></a>03838           accumulate(dpIAE, abs(r), 1.0);
<a name="l03839"></a>03839         }
<a name="l03840"></a>03840       }
<a name="l03841"></a>03841       L++;
<a name="l03842"></a>03842     } <span class="comment">// end of going through trueBoxes</span>
<a name="l03843"></a>03843   } <span class="comment">// end of going through thisBoxes</span>
<a name="l03844"></a>03844   
<a name="l03845"></a>03845    <span class="comment">//cast dotprecision to real</span>
<a name="l03846"></a>03846    real unifIAE = rnd(dpIAE);
<a name="l03847"></a>03847    <span class="comment">//cout &lt;&lt; &quot;IAE: &quot; &lt;&lt; unifIAE &lt;&lt; endl;</span>
<a name="l03848"></a>03848   <span class="keywordflow">return</span> unifIAE;                             
<a name="l03849"></a>03849 
<a name="l03850"></a>03850 }
<a name="l03851"></a>03851 
<a name="l03854"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3d403e99c1c471552303b2a7fd7e7d3e">03854</a> real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3d403e99c1c471552303b2a7fd7e7d3e">AdaptiveHistogram::getUnifIAE</a>()
<a name="l03855"></a>03855 {
<a name="l03856"></a>03856     <span class="comment">//-------setting up containers-------------------------------</span>
<a name="l03857"></a>03857   <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l03858"></a>03858    <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
<a name="l03859"></a>03859    (*this).getSubPaving()-&gt;getLeaves(leaves); <span class="comment">// fill the container   </span>
<a name="l03860"></a>03860   <span class="keywordtype">int</span> nSample = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>(); <span class="comment">// get total number of training </span>
<a name="l03861"></a>03861                                            <span class="comment">// data</span>
<a name="l03862"></a>03862    dotprecision <a class="code" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a>;    <span class="comment">// use type dotprecision for summation  </span>
<a name="l03863"></a>03863    dpIAE=0.0;
<a name="l03864"></a>03864   <span class="keywordtype">double</span> <a class="code" href="errorfunc_8cpp.shtml#aacb77b1211a6ca2e2beff1811cf9ecf4">f</a> = 1;
<a name="l03865"></a>03865    <span class="comment">//go through all the leaves in this</span>
<a name="l03866"></a>03866    <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l03867"></a>03867       <span class="comment">// get the height of this leaf</span>
<a name="l03868"></a>03868       <span class="comment">//cout &lt;&lt; (*it)-&gt;getCounter() &lt;&lt; &quot;\t&quot; &lt;&lt; (*it)-&gt;nodeVolume() &lt;&lt; endl;</span>
<a name="l03869"></a>03869       <span class="keywordtype">double</span> fhat = (((*it)-&gt;getCounter())*1.0)/((*it)-&gt;nodeVolume())/
<a name="l03870"></a>03870                    (nSample*1.0);
<a name="l03871"></a>03871 
<a name="l03872"></a>03872       <span class="comment">//now calculate the IAE</span>
<a name="l03873"></a>03873     <span class="keywordflow">if</span> ((f - fhat) &lt; 0.0){
<a name="l03874"></a>03874       real r = ((*it)-&gt;nodeVolume())*(fhat - f);
<a name="l03875"></a>03875       <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; endl;</span>
<a name="l03876"></a>03876       accumulate(dpIAE, r, 1.0);
<a name="l03877"></a>03877     }
<a name="l03878"></a>03878 
<a name="l03879"></a>03879     <span class="keywordflow">else</span> <span class="keywordflow">if</span> ((f - fhat) &gt; 0.0){
<a name="l03880"></a>03880       real r = ((*it)-&gt;nodeVolume())*(f - fhat);
<a name="l03881"></a>03881       <span class="comment">//cout &lt;&lt; &quot;r: &quot; &lt;&lt; r &lt;&lt; endl;</span>
<a name="l03882"></a>03882       accumulate(dpIAE, r, 1.0);
<a name="l03883"></a>03883     }
<a name="l03884"></a>03884 
<a name="l03885"></a>03885   } <span class="comment">// end of going through all the leaves in this</span>
<a name="l03886"></a>03886 
<a name="l03887"></a>03887    <span class="comment">//cast dotprecision to real</span>
<a name="l03888"></a>03888    real unifIAE = rnd(dpIAE);
<a name="l03889"></a>03889   <span class="keywordflow">return</span> unifIAE;
<a name="l03890"></a>03890 }
<a name="l03891"></a>03891 
<a name="l03892"></a>03892 
<a name="l03895"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a368e5e9ed8cf0a3e82b30291c4a54d24">03895</a> real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a368e5e9ed8cf0a3e82b30291c4a54d24">AdaptiveHistogram::getFinMixIAE</a>(<a class="code" href="structFinMix.shtml">FinMix</a>&amp; mixt)
<a name="l03896"></a>03896 {
<a name="l03897"></a>03897   cout &lt;&lt; <span class="stringliteral">&quot;GEtting IAE for Finite Mixture: &quot;</span> &lt;&lt; endl; 
<a name="l03898"></a>03898 
<a name="l03899"></a>03899   <span class="comment">//---------fill in containers for names, volumes and heights of leaves</span>
<a name="l03900"></a>03900   <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l03901"></a>03901   <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
<a name="l03902"></a>03902   (*this).getSubPaving()-&gt;getLeaves(leaves); <span class="comment">// fill the container</span>
<a name="l03903"></a>03903   <span class="comment">//a container for the counts</span>
<a name="l03904"></a>03904   <a class="code" href="namespacesubpavings.shtml#aed8e75b2af342b9c1460431c223dca8e" title="Define type IntVec as a container for ints.">IntVec</a> counts;  <span class="comment">// IntVec is a typedef for vector&lt;int&gt;</span>
<a name="l03905"></a>03905   <span class="comment">//a container for the boxes</span>
<a name="l03906"></a>03906   vector&lt;ivector&gt; boxes; vector&lt;ivector&gt;::iterator itBoxes;
<a name="l03907"></a>03907   <span class="comment">//a container for the volumes</span>
<a name="l03908"></a>03908   vector&lt;double&gt; volumes;
<a name="l03909"></a>03909   <span class="comment">// a container for fhat</span>
<a name="l03910"></a>03910   vector&lt;double&gt; fhat; vector&lt;double&gt;::iterator itFhat;
<a name="l03911"></a>03911   <span class="comment">//number of points</span>
<a name="l03912"></a>03912   <span class="keywordtype">int</span> n = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l03913"></a>03913             
<a name="l03914"></a>03914   <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l03915"></a>03915     <span class="comment">// remember that it points to a pointer, so *it is still a ptr</span>
<a name="l03916"></a>03916     <span class="comment">// get the counts in all the leaves</span>
<a name="l03917"></a>03917      counts.push_back((*it)-&gt;getCounter());
<a name="l03918"></a>03918      <span class="comment">// get the boxes from all the leaves</span>
<a name="l03919"></a>03919      boxes.push_back((*it)-&gt;getBox());
<a name="l03920"></a>03920      <span class="comment">// get the volumes of all the leaves</span>
<a name="l03921"></a>03921      volumes.push_back((*it)-&gt;nodeVolume());
<a name="l03922"></a>03922      <span class="comment">// get fhat for all leaves</span>
<a name="l03923"></a>03923      fhat.push_back(((*it)-&gt;getCounter())/((*it)-&gt;nodeVolume())/n);
<a name="l03924"></a>03924   } <span class="comment">// end of iterating through leaves </span>
<a name="l03925"></a>03925   
<a name="l03926"></a>03926   <span class="comment">//----------------get the IAE-----------------------------------------------</span>
<a name="l03927"></a>03927   dotprecision <a class="code" href="HoldOutFinMix_8cpp.shtml#a894b8d12887c7363e41db774d05a13b4">dpIAE</a>, <a class="code" href="HoldOutFinMix_8cpp.shtml#a97e24d3d1886f2162f0daa315bc812a7">dpIAEBoun</a>;
<a name="l03928"></a>03928   dpIAE = 0.0;
<a name="l03929"></a>03929   <span class="keywordtype">int</span> <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>=counts.size();
<a name="l03930"></a>03930   
<a name="l03931"></a>03931   gsl_integration_workspace * w = gsl_integration_workspace_alloc(1000);
<a name="l03932"></a>03932   <span class="keywordtype">double</span> result = 0.0;
<a name="l03933"></a>03933   <span class="keywordtype">double</span> error;
<a name="l03934"></a>03934   gsl_function <a class="code" href="errorfunc_8cpp.shtml#a9b001c0caead3a0c05ed60872773d535">F</a>;
<a name="l03935"></a>03935   
<a name="l03936"></a>03936   F.function = &amp;<a class="code" href="errorfunc_8cpp.shtml#a0350bc07337b5abac1dca82fb195940d" title="Get the absolute error of a finite mixture at x.">FinMixAbs</a>;
<a name="l03937"></a>03937   F.params =  &amp;mixt;
<a name="l03938"></a>03938   
<a name="l03939"></a>03939   <span class="keywordflow">for</span> (<span class="keywordtype">int</span> j=0; j&lt; <a class="code" href="HoldOutFinMix_8cpp.shtml#a5048e3a13ffcb20124b62a989f4c5524">Nbin</a>; j++){
<a name="l03940"></a>03940     mixt.<a class="code" href="structFinMix.shtml#a7d058312162e6b9ccb408ddc688a274f">fhat</a> = fhat[j];
<a name="l03941"></a>03941     rvector xuppVec = Sup(boxes[j]);
<a name="l03942"></a>03942     <span class="keywordtype">double</span> xupp = _double(xuppVec[1]);
<a name="l03943"></a>03943     rvector xlowVec = Inf(boxes[j]);
<a name="l03944"></a>03944     <span class="keywordtype">double</span> xlow = _double(xlowVec[1]);
<a name="l03945"></a>03945     gsl_integration_qags(&amp;F, xlow, xupp, 0, 1e-7, 1000, w, &amp;result, &amp;error);
<a name="l03946"></a>03946     accumulate(dpIAE, result, 1.0);
<a name="l03947"></a>03947   }
<a name="l03948"></a>03948   
<a name="l03949"></a>03949   <span class="comment">/*</span>
<a name="l03950"></a>03950 <span class="comment">  // Accounting for the boundaries</span>
<a name="l03951"></a>03951 <span class="comment">  rvector xuppVec1 = Sup(boxes[Nbin-1]);</span>
<a name="l03952"></a>03952 <span class="comment">  double xupp1 = _double(xuppVec1[1]);</span>
<a name="l03953"></a>03953 <span class="comment">  rvector xlowVec1 = Inf(boxes[0]);</span>
<a name="l03954"></a>03954 <span class="comment">  double xlow1 = _double(xlowVec1[1]);</span>
<a name="l03955"></a>03955 <span class="comment">  dpIAEBoun = dpFinMixIAEBoun(xlow1, xupp1, mixt);</span>
<a name="l03956"></a>03956 <span class="comment">  dpIAE += dpIAEBoun;</span>
<a name="l03957"></a>03957 <span class="comment">  */</span>
<a name="l03958"></a>03958   
<a name="l03959"></a>03959   <span class="comment">// cast dot precision to real</span>
<a name="l03960"></a>03960   real FinMixIAE = rnd(dpIAE);
<a name="l03961"></a>03961   
<a name="l03962"></a>03962   <span class="comment">// free the workspace</span>
<a name="l03963"></a>03963   gsl_integration_workspace_free (w);
<a name="l03964"></a>03964   
<a name="l03965"></a>03965   <span class="keywordflow">return</span> FinMixIAE;
<a name="l03966"></a>03966 }
<a name="l03967"></a>03967 
<a name="l03968"></a>03968 <span class="comment">// Get the IAE for a finite gaussian mixture distribution using interval </span>
<a name="l03969"></a>03969 <span class="comment">// techniques.</span>
<a name="l03970"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#abf4e34e57ff3c76828457efaecbf4510">03970</a> cxsc::interval <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#abf4e34e57ff3c76828457efaecbf4510">AdaptiveHistogram::getFinMixIntervalIAE</a>(<a class="code" href="structFinMix.shtml">FinMix</a>&amp; mixt, <span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg)
<a name="l03971"></a>03971 {
<a name="l03972"></a>03972   interval totalArea(0.0); <span class="comment">//initialize</span>
<a name="l03973"></a>03973   <span class="keywordtype">int</span> n = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a7386f85d1182ae6e3f32766c4a208c11" title="Gets count in the root paving.">getRootCounter</a>();
<a name="l03974"></a>03974 
<a name="l03975"></a>03975   <span class="comment">// need to iterate through the leaves</span>
<a name="l03976"></a>03976   <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l03977"></a>03977   <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
<a name="l03978"></a>03978   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves); <span class="comment">// fill the container</span>
<a name="l03979"></a>03979   
<a name="l03980"></a>03980   <span class="comment">// container is filled by reading leaves off tree from left to right</span>
<a name="l03981"></a>03981   <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l03982"></a>03982     <span class="comment">//cout &lt;&lt; &quot;-----------------&quot; &lt;&lt; endl;</span>
<a name="l03983"></a>03983     <span class="comment">//a container for the roots at this leaf node</span>
<a name="l03984"></a>03984     vector&lt;intervalw&gt; rootVec;
<a name="l03985"></a>03985     
<a name="l03986"></a>03986     <span class="comment">//get the height in this leaf node</span>
<a name="l03987"></a>03987     <span class="keywordtype">double</span> fhat = (*it)-&gt;getCounter()/(*it)-&gt;nodeVolume()/n;
<a name="l03988"></a>03988     <span class="comment">//get the box of this leaf node</span>
<a name="l03989"></a>03989     ivector thisBox = (*it)-&gt;getBox();
<a name="l03990"></a>03990     <span class="comment">//cout &lt;&lt; (*it)-&gt;getBox() &lt;&lt; endl;</span>
<a name="l03991"></a>03991     
<a name="l03992"></a>03992     <span class="comment">//---------find the root at this domain</span>
<a name="l03993"></a>03993     <span class="comment">// make an intervalw object using thisBox</span>
<a name="l03994"></a>03994     rvector lb = Inf(thisBox);
<a name="l03995"></a>03995     rvector ub = Sup(thisBox);
<a name="l03996"></a>03996     <a class="code" href="classintervalw.shtml">intervalw</a> thisIntW(_double(lb[1]), _double(ub[1]));
<a name="l03997"></a>03997     interval thisInt(_double(lb[1]), _double(ub[1]));
<a name="l03998"></a>03998     
<a name="l03999"></a>03999     <span class="comment">// find the root</span>
<a name="l04000"></a>04000     <span class="comment">//cout &lt;&lt; &quot;finding roots at this node &quot; &lt;&lt; thisInt &lt;&lt; endl;</span>
<a name="l04001"></a>04001     <a class="code" href="errorfunc_8cpp.shtml#a4a991d5ab1bd0a117e02af6f83369bab">bisect</a>(thisIntW, tol, fhat, rootVec, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>); 
<a name="l04002"></a>04002 
<a name="l04003"></a>04003     <span class="comment">//---------find the area at this domain and take the absolute value</span>
<a name="l04004"></a>04004     <span class="comment">//if rootVec is empty, there are no roots - so we can integrate over</span>
<a name="l04005"></a>04005     <span class="comment">//this domain</span>
<a name="l04006"></a>04006     <span class="keywordflow">if</span> ((rootVec.size() == 0)) { 
<a name="l04007"></a>04007       <span class="comment">//cout &lt;&lt; &quot;no roots at &quot; &lt;&lt; thisInt &lt;&lt; endl;</span>
<a name="l04008"></a>04008       <span class="comment">//get the L1 error</span>
<a name="l04009"></a>04009       interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04010"></a>04010       <span class="comment">//add to totalArea</span>
<a name="l04011"></a>04011       totalArea += diffArea;
<a name="l04012"></a>04012     } <span class="comment">//end of rootVec is empty</span>
<a name="l04013"></a>04013 
<a name="l04014"></a>04014     <span class="keywordflow">else</span> { <span class="comment">//if rootVec is not empty</span>
<a name="l04015"></a>04015       vector&lt;intervalw&gt; uniqueRootVec;
<a name="l04016"></a>04016       <span class="comment">// make the elements in vector unique</span>
<a name="l04017"></a>04017       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; (rootVec.size()); i++) {
<a name="l04018"></a>04018         <span class="comment">//cout &lt;&lt; &quot;root &quot; &lt;&lt; i &lt;&lt; &quot;: &quot; &lt;&lt; rootVec[i] &lt;&lt; endl;</span>
<a name="l04019"></a>04019         <span class="comment">//first insert into uniqueRootVec</span>
<a name="l04020"></a>04020         uniqueRootVec.push_back(rootVec[i]);
<a name="l04021"></a>04021         <span class="comment">//cout &lt;&lt; i-1 &lt;&lt; &quot;\t&quot; &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; i+1 &lt;&lt; endl;</span>
<a name="l04022"></a>04022         <span class="comment">//now check for uniqueness</span>
<a name="l04023"></a>04023         <span class="keywordflow">if</span> (((i-1) &gt;= 0) &amp;&amp; (i &lt; rootVec.size())) {
<a name="l04024"></a>04024           <span class="comment">//cout &lt;&lt; rootVec[i] &lt;&lt; &quot;\t&quot; &lt;&lt; rootVec[i-1] &lt;&lt; endl;</span>
<a name="l04025"></a>04025           <span class="keywordtype">bool</span> uniq = (subset(abs(rootVec[i] - rootVec[i-1]), <a class="code" href="classintervalw.shtml">intervalw</a>(0, 1e-10)));
<a name="l04026"></a>04026           <span class="keywordflow">if</span> ( uniq ) { 
<a name="l04027"></a>04027             <span class="comment">//cout &lt;&lt; &quot;this root has a duplicate&quot; &lt;&lt; endl;</span>
<a name="l04028"></a>04028             uniqueRootVec.pop_back(); }
<a name="l04029"></a>04029         }
<a name="l04030"></a>04030       }
<a name="l04031"></a>04031       <span class="comment">//cout &lt;&lt; &quot;==There are &quot; &lt;&lt; uniqueRootVec.size() &lt;&lt; &quot; unique root(s)==&quot; &lt;&lt; endl;</span>
<a name="l04032"></a>04032 
<a name="l04033"></a>04033       <span class="comment">// if there&#39;s only 1 root</span>
<a name="l04034"></a>04034       <span class="keywordflow">if</span> (uniqueRootVec.size() == 1) {
<a name="l04035"></a>04035         <span class="comment">//cout &lt;&lt; &quot;there is only one root..&quot; &lt;&lt; endl;</span>
<a name="l04036"></a>04036         <span class="comment">// is the root at the left or right boundary?</span>
<a name="l04037"></a>04037         <span class="keywordflow">if</span> ( (abs(Inf(thisInt) - inf(rootVec[0])) &lt; 1e-10) || 
<a name="l04038"></a>04038             (abs(Sup(thisInt) - inf(rootVec[0])) &lt; 1e-10) ) {
<a name="l04039"></a>04039           <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the left/right boundary:&quot; &lt;&lt; rootVec[0] &lt;&lt; endl;</span>
<a name="l04040"></a>04040           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04041"></a>04041           totalArea += diffArea;
<a name="l04042"></a>04042         }
<a name="l04043"></a>04043         <span class="keywordflow">else</span> { <span class="comment">// the root is not at the boundaries</span>
<a name="l04044"></a>04044           <span class="comment">//cout &lt;&lt; &quot;no root at the boundaries&quot; &lt;&lt; endl;</span>
<a name="l04045"></a>04045           <span class="comment">//get the left sub-interval</span>
<a name="l04046"></a>04046           interval thisSubIntLeft = interval(Inf(thisInt), sup(uniqueRootVec[0]));
<a name="l04047"></a>04047           <span class="comment">//cout &lt;&lt; &quot;left interval: &quot; &lt;&lt; thisSubIntLeft &lt;&lt; endl; </span>
<a name="l04048"></a>04048           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLeft, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04049"></a>04049           totalArea += diffArea;
<a name="l04050"></a>04050           
<a name="l04051"></a>04051           <span class="comment">//get the right sub-interval</span>
<a name="l04052"></a>04052           <span class="comment">//get the left sub-interval</span>
<a name="l04053"></a>04053           interval thisSubIntRight = interval(inf(uniqueRootVec[0]), Sup(thisInt));
<a name="l04054"></a>04054           <span class="comment">//cout &lt;&lt; &quot;right interval: &quot; &lt;&lt; thisSubIntRight &lt;&lt; endl; </span>
<a name="l04055"></a>04055           diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntRight, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04056"></a>04056           totalArea += diffArea;
<a name="l04057"></a>04057         }
<a name="l04058"></a>04058       } <span class="comment">// end of rootVec.size() == 1</span>
<a name="l04059"></a>04059 
<a name="l04060"></a>04060         <span class="comment">// if there is more than 1 root</span>
<a name="l04061"></a>04061       <span class="keywordflow">else</span> {
<a name="l04062"></a>04062         <span class="comment">//cout &lt;&lt; &quot;let&#39;s have a look at all the roots:&quot; &lt;&lt; endl;</span>
<a name="l04063"></a>04063         <span class="comment">//for (size_t i = 0; i &lt; uniqueRootVec.size(); i++) {</span>
<a name="l04064"></a>04064           <span class="comment">//cout &lt;&lt; uniqueRootVec[i] &lt;&lt; endl;</span>
<a name="l04065"></a>04065         <span class="comment">//}</span>
<a name="l04066"></a>04066 
<a name="l04067"></a>04067         <span class="comment">//first check if the first root is at the boundary</span>
<a name="l04068"></a>04068         <span class="comment">//cout &lt;&lt; &quot;check boundaries: &quot; &lt;&lt; Inf(thisInt) &lt;&lt; &quot;\t&quot; &lt;&lt; inf(rootVec[0]) &lt;&lt; endl;</span>
<a name="l04069"></a>04069         <span class="keywordflow">if</span> ( abs(Inf(thisInt) - inf(uniqueRootVec[0])) &lt; 1e-10 ) {
<a name="l04070"></a>04070           <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the leftmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l04071"></a>04071           interval thisSubIntFirst = interval(Inf(thisInt), sup(uniqueRootVec[1]));
<a name="l04072"></a>04072           <span class="comment">//cout &lt;&lt; &quot;0-th interval:&quot; &lt;&lt; thisSubIntFirst &lt;&lt; endl; </span>
<a name="l04073"></a>04073           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntFirst, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04074"></a>04074           totalArea += diffArea;
<a name="l04075"></a>04075           
<a name="l04076"></a>04076           <span class="comment">// now iterate through each root (except the first and last) and </span>
<a name="l04077"></a>04077           <span class="comment">// get the sub-itnervals</span>
<a name="l04078"></a>04078           <span class="comment">//cout &lt;&lt; &quot;iterating through each root&quot; &lt;&lt; endl;</span>
<a name="l04079"></a>04079           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (uniqueRootVec.size() - 1); i++) {
<a name="l04080"></a>04080             <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i+1 &lt;&lt; &quot;-th root is: &quot; &lt;&lt; rootVec[i+1] &lt;&lt; endl;</span>
<a name="l04081"></a>04081             <span class="keywordflow">if</span> ( (i+1) &gt; uniqueRootVec.size() ) { <span class="comment">// already no more roots</span>
<a name="l04082"></a>04082               interval thisSubInt = interval(inf(uniqueRootVec[i]), Sup(thisInt));
<a name="l04083"></a>04083               <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l04084"></a>04084               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04085"></a>04085               totalArea += diffArea;
<a name="l04086"></a>04086             }
<a name="l04087"></a>04087             <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
<a name="l04088"></a>04088               interval thisSubInt = interval(inf(uniqueRootVec[i]), sup(uniqueRootVec[i+1]));
<a name="l04089"></a>04089               <span class="comment">//cout &lt;&lt; i+1 &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l04090"></a>04090               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04091"></a>04091               totalArea += diffArea;
<a name="l04092"></a>04092             }
<a name="l04093"></a>04093           } <span class="comment">// end of iterate through each root (excep the first and last)</span>
<a name="l04094"></a>04094           
<a name="l04095"></a>04095           <span class="comment">// now check if the last root is at the boundary</span>
<a name="l04096"></a>04096           <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(uniqueRootVec[uniqueRootVec.size()-1])) &lt; 1e-10 ) {
<a name="l04097"></a>04097             <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the rightmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l04098"></a>04098             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-2]), Sup(thisInt));
<a name="l04099"></a>04099             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l04100"></a>04100             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast,deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04101"></a>04101             totalArea += diffArea;
<a name="l04102"></a>04102           }
<a name="l04103"></a>04103           <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
<a name="l04104"></a>04104             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-1]), Sup(thisInt));
<a name="l04105"></a>04105             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l04106"></a>04106             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04107"></a>04107             totalArea += diffArea;
<a name="l04108"></a>04108           } 
<a name="l04109"></a>04109         } <span class="comment">// end of if first root is the boundary</span>
<a name="l04110"></a>04110         
<a name="l04111"></a>04111         <span class="keywordflow">else</span> {
<a name="l04112"></a>04112           <span class="comment">//cout &lt;&lt; &quot;root not at boundary&quot; &lt;&lt; endl;</span>
<a name="l04113"></a>04113           <span class="comment">//if it is not the boundary, make the first sub-interval</span>
<a name="l04114"></a>04114           interval thisSubIntFirst = interval(Inf(thisInt), sup(rootVec[0]));
<a name="l04115"></a>04115           <span class="comment">//cout &lt;&lt; &quot;0-th interval: &quot; &lt;&lt; thisSubIntFirst &lt;&lt; endl; </span>
<a name="l04116"></a>04116           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntFirst, deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04117"></a>04117           totalArea += diffArea;
<a name="l04118"></a>04118           
<a name="l04119"></a>04119           <span class="comment">// now iterate through each root (except the first and last) and </span>
<a name="l04120"></a>04120           <span class="comment">// get the sub-itnervals</span>
<a name="l04121"></a>04121           <span class="comment">//cout &lt;&lt; &quot;iterating through each root&quot; &lt;&lt; endl;</span>
<a name="l04122"></a>04122           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (uniqueRootVec.size() - 1); i++) {
<a name="l04123"></a>04123             <span class="keywordflow">if</span> ( (i+1) &gt; uniqueRootVec.size() ) { <span class="comment">// already no more roots</span>
<a name="l04124"></a>04124               <span class="comment">//cout &lt;&lt; inf(rootVec[i]) &lt;&lt; &quot;\t&quot; &lt;&lt; Sup(thisInt) &lt;&lt; endl;</span>
<a name="l04125"></a>04125               interval thisSubInt = interval(inf(uniqueRootVec[i]), Sup(thisInt));
<a name="l04126"></a>04126               <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l04127"></a>04127               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04128"></a>04128               totalArea += diffArea;
<a name="l04129"></a>04129             }
<a name="l04130"></a>04130             <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
<a name="l04131"></a>04131               <span class="comment">//cout &lt;&lt; inf(rootVec[i]) &lt;&lt; &quot;\t&quot; &lt;&lt; sup(rootVec[i+1]) &lt;&lt; endl;</span>
<a name="l04132"></a>04132               interval thisSubInt = interval(inf(uniqueRootVec[i]), sup(uniqueRootVec[i+1]));
<a name="l04133"></a>04133               <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i+1 &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l04134"></a>04134               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubInt,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04135"></a>04135               totalArea += diffArea;
<a name="l04136"></a>04136             }
<a name="l04137"></a>04137           } <span class="comment">// end of iterate through each root (except the first and last)</span>
<a name="l04138"></a>04138           
<a name="l04139"></a>04139           <span class="comment">// now check if the last root is at the boundary</span>
<a name="l04140"></a>04140           <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(uniqueRootVec[uniqueRootVec.size()-1])) &lt; 1e-10 ) {
<a name="l04141"></a>04141             <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the rightmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l04142"></a>04142             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-2]), Sup(thisInt));
<a name="l04143"></a>04143             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l04144"></a>04144             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04145"></a>04145           }
<a name="l04146"></a>04146           <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
<a name="l04147"></a>04147             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-1]), Sup(thisInt));
<a name="l04148"></a>04148             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l04149"></a>04149             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a2fbcb5575d9958b3d4168369e3425258">getL1error</a>(fhat, thisSubIntLast,  deg, tol, mixt.<a class="code" href="structFinMix.shtml#a5e3e0c0a40f75ec6df8e4513828342be">W</a>, mixt.<a class="code" href="structFinMix.shtml#af6b13f65037448ae8a22965ccffd9330">M</a>, mixt.<a class="code" href="structFinMix.shtml#ac96c7d4bec4e00d981a609a4ffd0c3d3">S</a>);
<a name="l04150"></a>04150             totalArea += diffArea;
<a name="l04151"></a>04151           } 
<a name="l04152"></a>04152         } <span class="comment">// end of first root is not the boundary</span>
<a name="l04153"></a>04153       } <span class="comment">// end of rootVec.size() &gt; 1</span>
<a name="l04154"></a>04154     } <span class="comment">// end of rootVec is not empty</span>
<a name="l04155"></a>04155 
<a name="l04156"></a>04156   } <span class="comment">// end of iterating through the leaf nodes</span>
<a name="l04157"></a>04157   
<a name="l04158"></a>04158   <span class="comment">//cout &lt;&lt; &quot;IAE: &quot; &lt;&lt; totalArea &lt;&lt; endl;</span>
<a name="l04159"></a>04159   <span class="keywordflow">return</span> totalArea;
<a name="l04160"></a>04160 }
<a name="l04161"></a>04161 
<a name="l04162"></a>04162 <span class="comment">/*</span>
<a name="l04163"></a>04163 <span class="comment">// get the IAE for mapped functions</span>
<a name="l04164"></a>04164 <span class="comment">real AdaptiveHistogram::getMappedFunctionIAE(RealMappedSPnode nodeEst)</span>
<a name="l04165"></a>04165 <span class="comment">{</span>
<a name="l04166"></a>04166 <span class="comment">  ivector thisBox = getSubPaving()-&gt;getBox();</span>
<a name="l04167"></a>04167 <span class="comment">  RealMappedSPnode histMap(thisBox);</span>
<a name="l04168"></a>04168 <span class="comment">  int n = getRootCounter();</span>
<a name="l04169"></a>04169 <span class="comment"></span>
<a name="l04170"></a>04170 <span class="comment">  // split the root box into the shape of myHist</span>
<a name="l04171"></a>04171 <span class="comment">  string leafLevelString = getLeafLevelsString();</span>
<a name="l04172"></a>04172 <span class="comment">  int depth = atoi(leafLevelString.c_str());</span>
<a name="l04173"></a>04173 <span class="comment">  if (depth != 0) {</span>
<a name="l04174"></a>04174 <span class="comment">    histMap.splitToShape(leafLevelString); </span>
<a name="l04175"></a>04175 <span class="comment">  }</span>
<a name="l04176"></a>04176 <span class="comment"></span>
<a name="l04177"></a>04177 <span class="comment">  //container to store heights for histNodes </span>
<a name="l04178"></a>04178 <span class="comment">  vector&lt; RangeCollectionClass&lt;real&gt; &gt; heightHist;</span>
<a name="l04179"></a>04179 <span class="comment">  //get all the nodes in the histogram </span>
<a name="l04180"></a>04180 <span class="comment">  SPSnodePtrs histNodes;</span>
<a name="l04181"></a>04181 <span class="comment">  SPSnodePtrsItr histNodeIt;</span>
<a name="l04182"></a>04182 <span class="comment">  getSubPaving()-&gt;getAllNodes(histNodes); </span>
<a name="l04183"></a>04183 <span class="comment"></span>
<a name="l04184"></a>04184 <span class="comment">  //traverse the tree and get the heights </span>
<a name="l04185"></a>04185 <span class="comment">  //cout &lt;&lt; &quot;get the height at each node&quot; &lt;&lt; endl;</span>
<a name="l04186"></a>04186 <span class="comment">  for (histNodeIt = histNodes.begin(); histNodeIt &lt; histNodes.end(); </span>
<a name="l04187"></a>04187 <span class="comment">      histNodeIt++) {</span>
<a name="l04188"></a>04188 <span class="comment">    //cout &lt;&lt; &quot;IAE at node &quot; &lt;&lt; (*histNodeIt)-&gt;getNodeName() &lt;&lt; endl;</span>
<a name="l04189"></a>04189 <span class="comment">    RangeCollectionClass&lt;real&gt; height((*histNodeIt)-&gt;getCounter()/</span>
<a name="l04190"></a>04190 <span class="comment">              ((*histNodeIt)-&gt;nodeVolume()*n));</span>
<a name="l04191"></a>04191 <span class="comment">    </span>
<a name="l04192"></a>04192 <span class="comment">    //cout &lt;&lt; (*histNodeIt)-&gt;getCounter()/</span>
<a name="l04193"></a>04193 <span class="comment">    //          ((*histNodeIt)-&gt;nodeVolume()*n) &lt;&lt; endl;</span>
<a name="l04194"></a>04194 <span class="comment">    </span>
<a name="l04195"></a>04195 <span class="comment">    heightHist.push_back(height);</span>
<a name="l04196"></a>04196 <span class="comment">  } // end of traversing all nodes in histogram</span>
<a name="l04197"></a>04197 <span class="comment">  </span>
<a name="l04198"></a>04198 <span class="comment">  //allocate ranges for histNode</span>
<a name="l04199"></a>04199 <span class="comment">  histMap.allocateRanges(heightHist, 0);</span>
<a name="l04200"></a>04200 <span class="comment">  return nodeEst.getMappedSPIAE(histMap);</span>
<a name="l04201"></a>04201 <span class="comment">}</span>
<a name="l04202"></a>04202 <span class="comment">*/</span>
<a name="l04203"></a>04203 
<a name="l04204"></a>04204 <span class="comment">// Get the IAE for a laplace distribution using interval </span>
<a name="l04205"></a>04205 <span class="comment">// techniques.</span>
<a name="l04206"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2427c16c05dc17a5d7ecb1e58f0d35ca">04206</a> cxsc::interval <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2427c16c05dc17a5d7ecb1e58f0d35ca">AdaptiveHistogram::getLaplaceIntervalIAE</a>(<span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg)
<a name="l04207"></a>04207 {
<a name="l04208"></a>04208   interval totalArea(0.0); <span class="comment">//initialize</span>
<a name="l04209"></a>04209   <span class="keywordtype">int</span> n = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a7386f85d1182ae6e3f32766c4a208c11" title="Gets count in the root paving.">getRootCounter</a>();
<a name="l04210"></a>04210 
<a name="l04211"></a>04211   <span class="comment">// need to iterate through the leaves</span>
<a name="l04212"></a>04212   <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l04213"></a>04213   <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
<a name="l04214"></a>04214   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves); <span class="comment">// fill the container</span>
<a name="l04215"></a>04215   
<a name="l04216"></a>04216   <span class="comment">// container is filled by reading leaves off tree from left to right</span>
<a name="l04217"></a>04217   <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l04218"></a>04218     cout &lt;&lt; <span class="stringliteral">&quot;-----------------&quot;</span> &lt;&lt; endl;
<a name="l04219"></a>04219     <span class="comment">//a container for the roots at this leaf node</span>
<a name="l04220"></a>04220     vector&lt;intervalw&gt; rootVec;
<a name="l04221"></a>04221     
<a name="l04222"></a>04222     <span class="comment">//get the height in this leaf node</span>
<a name="l04223"></a>04223     <span class="keywordtype">double</span> fhat = (*it)-&gt;getCounter()/(*it)-&gt;nodeVolume()/n;
<a name="l04224"></a>04224     <span class="comment">//get the box of this leaf node</span>
<a name="l04225"></a>04225     ivector thisBox = (*it)-&gt;getBox();
<a name="l04226"></a>04226     <span class="comment">//cout &lt;&lt; (*it)-&gt;getBox() &lt;&lt; endl;</span>
<a name="l04227"></a>04227     
<a name="l04228"></a>04228     <span class="comment">//---------find the root at this domain</span>
<a name="l04229"></a>04229     <span class="comment">// make an intervalw object using thisBox</span>
<a name="l04230"></a>04230     rvector lb = Inf(thisBox);
<a name="l04231"></a>04231     rvector ub = Sup(thisBox);
<a name="l04232"></a>04232     <a class="code" href="classintervalw.shtml">intervalw</a> thisIntW(_double(lb[1]), _double(ub[1]));
<a name="l04233"></a>04233     interval thisInt(_double(lb[1]), _double(ub[1]));
<a name="l04234"></a>04234     
<a name="l04235"></a>04235     <span class="comment">// find the root</span>
<a name="l04236"></a>04236     cout &lt;&lt; <span class="stringliteral">&quot;finding roots at this node &quot;</span> &lt;&lt; thisInt &lt;&lt; endl;
<a name="l04237"></a>04237     cout &lt;&lt; <span class="stringliteral">&quot;bisection&quot;</span> &lt;&lt; endl;
<a name="l04238"></a>04238     <a class="code" href="errorfunc_8cpp.shtml#a4de668d5d847a753a9a4baf05c7d8d52">LaplaceBisect</a>(thisIntW, tol, fhat, rootVec); 
<a name="l04239"></a>04239 
<a name="l04240"></a>04240     cout &lt;&lt; <span class="stringliteral">&quot;get L1 error&quot;</span> &lt;&lt; endl;
<a name="l04241"></a>04241     <span class="comment">//---------find the area at this domain and take the absolute value</span>
<a name="l04242"></a>04242     <span class="comment">//if rootVec is empty, there are no roots - so we can integrate over</span>
<a name="l04243"></a>04243     <span class="comment">//this domain</span>
<a name="l04244"></a>04244     <span class="keywordflow">if</span> ((rootVec.size() == 0)) { 
<a name="l04245"></a>04245       cout &lt;&lt; <span class="stringliteral">&quot;no roots at &quot;</span> &lt;&lt; thisInt &lt;&lt; endl;
<a name="l04246"></a>04246       <span class="comment">//get the L1 error</span>
<a name="l04247"></a>04247       interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisInt, deg, tol);
<a name="l04248"></a>04248       <span class="comment">//add to totalArea</span>
<a name="l04249"></a>04249       totalArea += diffArea;
<a name="l04250"></a>04250     } <span class="comment">//end of rootVec is empty</span>
<a name="l04251"></a>04251 
<a name="l04252"></a>04252     <span class="keywordflow">else</span> { <span class="comment">//if rootVec is not empty</span>
<a name="l04253"></a>04253       vector&lt;intervalw&gt; uniqueRootVec;
<a name="l04254"></a>04254       <span class="comment">// make the elements in vector unique</span>
<a name="l04255"></a>04255       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; (rootVec.size()); i++) {
<a name="l04256"></a>04256         cout &lt;&lt; <span class="stringliteral">&quot;root &quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;: &quot;</span> &lt;&lt; rootVec[i] &lt;&lt; endl;
<a name="l04257"></a>04257         <span class="comment">//first insert into uniqueRootVec</span>
<a name="l04258"></a>04258         uniqueRootVec.push_back(rootVec[i]);
<a name="l04259"></a>04259         <span class="comment">//cout &lt;&lt; i-1 &lt;&lt; &quot;\t&quot; &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; i+1 &lt;&lt; endl;</span>
<a name="l04260"></a>04260         <span class="comment">//now check for uniqueness</span>
<a name="l04261"></a>04261         <span class="keywordflow">if</span> (((i-1) &gt;= 0) &amp;&amp; (i &lt; rootVec.size())) {
<a name="l04262"></a>04262           <span class="comment">//cout &lt;&lt; rootVec[i] &lt;&lt; &quot;\t&quot; &lt;&lt; rootVec[i-1] &lt;&lt; endl;</span>
<a name="l04263"></a>04263           <span class="keywordtype">bool</span> uniq = (subset(abs(rootVec[i] - rootVec[i-1]), <a class="code" href="classintervalw.shtml">intervalw</a>(0, 1e-10)));
<a name="l04264"></a>04264           <span class="keywordflow">if</span> ( uniq ) { 
<a name="l04265"></a>04265             <span class="comment">//cout &lt;&lt; &quot;this root has a duplicate&quot; &lt;&lt; endl;</span>
<a name="l04266"></a>04266             uniqueRootVec.pop_back(); }
<a name="l04267"></a>04267         }
<a name="l04268"></a>04268       }
<a name="l04269"></a>04269       cout &lt;&lt; <span class="stringliteral">&quot;==There are &quot;</span> &lt;&lt; uniqueRootVec.size() &lt;&lt; <span class="stringliteral">&quot; unique root(s)==&quot;</span> &lt;&lt; endl;
<a name="l04270"></a>04270 
<a name="l04271"></a>04271       <span class="comment">// if there&#39;s only 1 root</span>
<a name="l04272"></a>04272       <span class="keywordflow">if</span> (uniqueRootVec.size() == 1) {
<a name="l04273"></a>04273         cout &lt;&lt; <span class="stringliteral">&quot;there is only one root..&quot;</span> &lt;&lt; endl;
<a name="l04274"></a>04274         <span class="comment">// is the root at the left or right boundary?</span>
<a name="l04275"></a>04275         <span class="keywordflow">if</span> ( (abs(Inf(thisInt) - inf(rootVec[0])) &lt; 1e-10) || 
<a name="l04276"></a>04276             (abs(Sup(thisInt) - inf(rootVec[0])) &lt; 1e-10) ) {
<a name="l04277"></a>04277         cout &lt;&lt; <span class="stringliteral">&quot;there&#39;s a root at the left/right boundary:&quot;</span> &lt;&lt; rootVec[0] &lt;&lt; endl;
<a name="l04278"></a>04278           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisInt, deg, tol);
<a name="l04279"></a>04279           totalArea += diffArea;
<a name="l04280"></a>04280         }
<a name="l04281"></a>04281         <span class="keywordflow">else</span> { <span class="comment">// the root is not at the boundaries</span>
<a name="l04282"></a>04282           cout &lt;&lt; <span class="stringliteral">&quot;no root at the boundaries&quot;</span> &lt;&lt; endl;
<a name="l04283"></a>04283           <span class="comment">//get the left sub-interval</span>
<a name="l04284"></a>04284           interval thisSubIntLeft = interval(Inf(thisInt), sup(uniqueRootVec[0]));
<a name="l04285"></a>04285           cout &lt;&lt; <span class="stringliteral">&quot;left interval: &quot;</span> &lt;&lt; thisSubIntLeft &lt;&lt; endl; 
<a name="l04286"></a>04286           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubIntLeft, deg, tol);
<a name="l04287"></a>04287           totalArea += diffArea;
<a name="l04288"></a>04288           
<a name="l04289"></a>04289           <span class="comment">//get the right sub-interval</span>
<a name="l04290"></a>04290           <span class="comment">//get the left sub-interval</span>
<a name="l04291"></a>04291           interval thisSubIntRight = interval(inf(uniqueRootVec[0]), Sup(thisInt));
<a name="l04292"></a>04292           cout &lt;&lt; <span class="stringliteral">&quot;right interval: &quot;</span> &lt;&lt; thisSubIntRight &lt;&lt; endl; 
<a name="l04293"></a>04293           diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubIntRight, deg, tol);
<a name="l04294"></a>04294           totalArea += diffArea;
<a name="l04295"></a>04295         }
<a name="l04296"></a>04296       } <span class="comment">// end of rootVec.size() == 1</span>
<a name="l04297"></a>04297 
<a name="l04298"></a>04298         <span class="comment">// if there is more than 1 root</span>
<a name="l04299"></a>04299       <span class="keywordflow">else</span> {
<a name="l04300"></a>04300         cout &lt;&lt; <span class="stringliteral">&quot;let&#39;s have a look at all the roots:&quot;</span> &lt;&lt; endl;
<a name="l04301"></a>04301         <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; uniqueRootVec.size(); i++) {
<a name="l04302"></a>04302           cout &lt;&lt; uniqueRootVec[i] &lt;&lt; endl;
<a name="l04303"></a>04303         }
<a name="l04304"></a>04304 
<a name="l04305"></a>04305         <span class="comment">//first check if the first root is at the boundary</span>
<a name="l04306"></a>04306         <span class="comment">//cout &lt;&lt; &quot;check boundaries: &quot; &lt;&lt; Inf(thisInt) &lt;&lt; &quot;\t&quot; &lt;&lt; inf(rootVec[0]) &lt;&lt; endl;</span>
<a name="l04307"></a>04307         <span class="keywordflow">if</span> ( abs(Inf(thisInt) - inf(uniqueRootVec[0])) &lt; 1e-10 ) {
<a name="l04308"></a>04308           <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the leftmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l04309"></a>04309           interval thisSubIntFirst = interval(Inf(thisInt), sup(uniqueRootVec[1]));
<a name="l04310"></a>04310           <span class="comment">//cout &lt;&lt; &quot;0-th interval:&quot; &lt;&lt; thisSubIntFirst &lt;&lt; endl; </span>
<a name="l04311"></a>04311           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubIntFirst, deg, tol);
<a name="l04312"></a>04312           totalArea += diffArea;
<a name="l04313"></a>04313           
<a name="l04314"></a>04314           <span class="comment">// now iterate through each root (except the first and last) and </span>
<a name="l04315"></a>04315           <span class="comment">// get the sub-itnervals</span>
<a name="l04316"></a>04316           <span class="comment">//cout &lt;&lt; &quot;iterating through each root&quot; &lt;&lt; endl;</span>
<a name="l04317"></a>04317           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (uniqueRootVec.size() - 1); i++) {
<a name="l04318"></a>04318             <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i+1 &lt;&lt; &quot;-th root is: &quot; &lt;&lt; rootVec[i+1] &lt;&lt; endl;</span>
<a name="l04319"></a>04319             <span class="keywordflow">if</span> ( (i+1) &gt; uniqueRootVec.size() ) { <span class="comment">// already no more roots</span>
<a name="l04320"></a>04320               interval thisSubInt = interval(inf(uniqueRootVec[i]), Sup(thisInt));
<a name="l04321"></a>04321               <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l04322"></a>04322               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubInt, deg, tol);
<a name="l04323"></a>04323               totalArea += diffArea;
<a name="l04324"></a>04324             }
<a name="l04325"></a>04325             <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
<a name="l04326"></a>04326               interval thisSubInt = interval(inf(uniqueRootVec[i]), sup(uniqueRootVec[i+1]));
<a name="l04327"></a>04327               <span class="comment">//cout &lt;&lt; i+1 &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l04328"></a>04328               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubInt, deg, tol);
<a name="l04329"></a>04329               totalArea += diffArea;
<a name="l04330"></a>04330             }
<a name="l04331"></a>04331           } <span class="comment">// end of iterate through each root (excep the first and last)</span>
<a name="l04332"></a>04332           
<a name="l04333"></a>04333           <span class="comment">// now check if the last root is at the boundary</span>
<a name="l04334"></a>04334           <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(uniqueRootVec[uniqueRootVec.size()-1])) &lt; 1e-10 ) {
<a name="l04335"></a>04335             <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the rightmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l04336"></a>04336             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-2]), Sup(thisInt));
<a name="l04337"></a>04337             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l04338"></a>04338             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubIntLast, deg, tol);
<a name="l04339"></a>04339             totalArea += diffArea;
<a name="l04340"></a>04340           }
<a name="l04341"></a>04341           <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
<a name="l04342"></a>04342             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-1]), Sup(thisInt));
<a name="l04343"></a>04343             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l04344"></a>04344             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubIntLast, deg, tol);
<a name="l04345"></a>04345             totalArea += diffArea;
<a name="l04346"></a>04346           } 
<a name="l04347"></a>04347         } <span class="comment">// end of if first root is the boundary</span>
<a name="l04348"></a>04348         
<a name="l04349"></a>04349         <span class="keywordflow">else</span> {
<a name="l04350"></a>04350           <span class="comment">//cout &lt;&lt; &quot;root not at boundary&quot; &lt;&lt; endl;</span>
<a name="l04351"></a>04351           <span class="comment">//if it is not the boundary, make the first sub-interval</span>
<a name="l04352"></a>04352           interval thisSubIntFirst = interval(Inf(thisInt), sup(rootVec[0]));
<a name="l04353"></a>04353           <span class="comment">//cout &lt;&lt; &quot;0-th interval: &quot; &lt;&lt; thisSubIntFirst &lt;&lt; endl; </span>
<a name="l04354"></a>04354           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubIntFirst, deg, tol);
<a name="l04355"></a>04355           totalArea += diffArea;
<a name="l04356"></a>04356           
<a name="l04357"></a>04357           <span class="comment">// now iterate through each root (except the first and last) and </span>
<a name="l04358"></a>04358           <span class="comment">// get the sub-itnervals</span>
<a name="l04359"></a>04359           <span class="comment">//cout &lt;&lt; &quot;iterating through each root&quot; &lt;&lt; endl;</span>
<a name="l04360"></a>04360           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (uniqueRootVec.size() - 1); i++) {
<a name="l04361"></a>04361             <span class="keywordflow">if</span> ( (i+1) &gt; uniqueRootVec.size() ) { <span class="comment">// already no more roots</span>
<a name="l04362"></a>04362               <span class="comment">//cout &lt;&lt; inf(rootVec[i]) &lt;&lt; &quot;\t&quot; &lt;&lt; Sup(thisInt) &lt;&lt; endl;</span>
<a name="l04363"></a>04363               interval thisSubInt = interval(inf(uniqueRootVec[i]), Sup(thisInt));
<a name="l04364"></a>04364               <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l04365"></a>04365               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubInt, deg, tol);
<a name="l04366"></a>04366               totalArea += diffArea;
<a name="l04367"></a>04367             }
<a name="l04368"></a>04368             <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
<a name="l04369"></a>04369               <span class="comment">//cout &lt;&lt; inf(rootVec[i]) &lt;&lt; &quot;\t&quot; &lt;&lt; sup(rootVec[i+1]) &lt;&lt; endl;</span>
<a name="l04370"></a>04370               interval thisSubInt = interval(inf(uniqueRootVec[i]), sup(uniqueRootVec[i+1]));
<a name="l04371"></a>04371               <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i+1 &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l04372"></a>04372               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubInt, deg, tol);
<a name="l04373"></a>04373               totalArea += diffArea;
<a name="l04374"></a>04374             }
<a name="l04375"></a>04375           } <span class="comment">// end of iterate through each root (except the first and last)</span>
<a name="l04376"></a>04376           
<a name="l04377"></a>04377           <span class="comment">// now check if the last root is at the boundary</span>
<a name="l04378"></a>04378           <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(uniqueRootVec[uniqueRootVec.size()-1])) &lt; 1e-10 ) {
<a name="l04379"></a>04379             <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the rightmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l04380"></a>04380             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-2]), Sup(thisInt));
<a name="l04381"></a>04381             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l04382"></a>04382             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubIntLast, deg, tol);
<a name="l04383"></a>04383           }
<a name="l04384"></a>04384           <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
<a name="l04385"></a>04385             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-1]), Sup(thisInt));
<a name="l04386"></a>04386             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l04387"></a>04387             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#a76a4c9e6350419472c3285481c1690e2">LaplaceGetL1error</a>(fhat, thisSubIntLast, deg, tol);
<a name="l04388"></a>04388             totalArea += diffArea;
<a name="l04389"></a>04389           } 
<a name="l04390"></a>04390         } <span class="comment">// end of first root is not the boundary</span>
<a name="l04391"></a>04391       } <span class="comment">// end of rootVec.size() &gt; 1</span>
<a name="l04392"></a>04392     } <span class="comment">// end of rootVec is not empty</span>
<a name="l04393"></a>04393 
<a name="l04394"></a>04394   } <span class="comment">// end of iterating through the leaf nodes</span>
<a name="l04395"></a>04395   
<a name="l04396"></a>04396   cout &lt;&lt; <span class="stringliteral">&quot;IAE: &quot;</span> &lt;&lt; totalArea &lt;&lt; endl;
<a name="l04397"></a>04397   <span class="keywordflow">return</span> totalArea;
<a name="l04398"></a>04398 }
<a name="l04399"></a>04399 
<a name="l04400"></a>04400 <span class="comment">// Get the IAE for a lognormal distribution using interval </span>
<a name="l04401"></a>04401 <span class="comment">// techniques.</span>
<a name="l04402"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa595732ddb587933a166aee6cc0877f6">04402</a> cxsc::interval <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa595732ddb587933a166aee6cc0877f6">AdaptiveHistogram::getLognormalIntervalIAE</a>(<span class="keywordtype">double</span> tol, <span class="keywordtype">int</span> deg)
<a name="l04403"></a>04403 {
<a name="l04404"></a>04404   interval totalArea(0.0); <span class="comment">//initialize</span>
<a name="l04405"></a>04405   <span class="keywordtype">int</span> n = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a7386f85d1182ae6e3f32766c4a208c11" title="Gets count in the root paving.">getRootCounter</a>();
<a name="l04406"></a>04406 
<a name="l04407"></a>04407   <span class="comment">// need to iterate through the leaves</span>
<a name="l04408"></a>04408   <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l04409"></a>04409   <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
<a name="l04410"></a>04410   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves); <span class="comment">// fill the container</span>
<a name="l04411"></a>04411   
<a name="l04412"></a>04412   <span class="comment">// container is filled by reading leaves off tree from left to right</span>
<a name="l04413"></a>04413   <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l04414"></a>04414     <span class="comment">//cout &lt;&lt; &quot;-----------------&quot; &lt;&lt; endl;</span>
<a name="l04415"></a>04415     <span class="comment">//a container for the roots at this leaf node</span>
<a name="l04416"></a>04416     vector&lt;intervalw&gt; rootVec;
<a name="l04417"></a>04417     
<a name="l04418"></a>04418     <span class="comment">//get the height in this leaf node</span>
<a name="l04419"></a>04419     <span class="keywordtype">double</span> fhat = (*it)-&gt;getCounter()/(*it)-&gt;nodeVolume()/n;
<a name="l04420"></a>04420     <span class="comment">//get the box of this leaf node</span>
<a name="l04421"></a>04421     ivector thisBox = (*it)-&gt;getBox();
<a name="l04422"></a>04422     <span class="comment">//cout &lt;&lt; (*it)-&gt;getBox() &lt;&lt; endl;</span>
<a name="l04423"></a>04423     
<a name="l04424"></a>04424     <span class="comment">//---------find the root at this domain</span>
<a name="l04425"></a>04425     <span class="comment">// make an intervalw object using thisBox</span>
<a name="l04426"></a>04426     rvector lb = Inf(thisBox);
<a name="l04427"></a>04427     rvector ub = Sup(thisBox);
<a name="l04428"></a>04428     <a class="code" href="classintervalw.shtml">intervalw</a> thisIntW(_double(lb[1]), _double(ub[1]));
<a name="l04429"></a>04429     interval thisInt(_double(lb[1]), _double(ub[1]));
<a name="l04430"></a>04430     
<a name="l04431"></a>04431     <span class="comment">// find the root</span>
<a name="l04432"></a>04432     <span class="comment">//cout &lt;&lt; &quot;finding roots at this node &quot; &lt;&lt; thisInt &lt;&lt; endl;</span>
<a name="l04433"></a>04433     <a class="code" href="errorfunc_8cpp.shtml#a9722cc78b34593d877ec8cbbb22ac9f2">LognormalBisect</a>(thisIntW, tol, fhat, rootVec); 
<a name="l04434"></a>04434 
<a name="l04435"></a>04435     <span class="comment">//---------find the area at this domain and take the absolute value</span>
<a name="l04436"></a>04436     <span class="comment">//if rootVec is empty, there are no roots - so we can integrate over</span>
<a name="l04437"></a>04437     <span class="comment">//this domain</span>
<a name="l04438"></a>04438     <span class="keywordflow">if</span> ((rootVec.size() == 0)) { 
<a name="l04439"></a>04439       <span class="comment">//cout &lt;&lt; &quot;no roots at &quot; &lt;&lt; thisInt &lt;&lt; endl;</span>
<a name="l04440"></a>04440       <span class="comment">//get the L1 error</span>
<a name="l04441"></a>04441       interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisInt, deg, tol);
<a name="l04442"></a>04442       <span class="comment">//add to totalArea</span>
<a name="l04443"></a>04443       totalArea += diffArea;
<a name="l04444"></a>04444     } <span class="comment">//end of rootVec is empty</span>
<a name="l04445"></a>04445 
<a name="l04446"></a>04446     <span class="keywordflow">else</span> { <span class="comment">//if rootVec is not empty</span>
<a name="l04447"></a>04447       vector&lt;intervalw&gt; uniqueRootVec;
<a name="l04448"></a>04448       <span class="comment">// make the elements in vector unique</span>
<a name="l04449"></a>04449       <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i = 0; i &lt; (rootVec.size()); i++) {
<a name="l04450"></a>04450         <span class="comment">//cout &lt;&lt; &quot;root &quot; &lt;&lt; i &lt;&lt; &quot;: &quot; &lt;&lt; rootVec[i] &lt;&lt; endl;</span>
<a name="l04451"></a>04451         <span class="comment">//first insert into uniqueRootVec</span>
<a name="l04452"></a>04452         uniqueRootVec.push_back(rootVec[i]);
<a name="l04453"></a>04453         <span class="comment">//cout &lt;&lt; i-1 &lt;&lt; &quot;\t&quot; &lt;&lt; i &lt;&lt; &quot;\t&quot; &lt;&lt; i+1 &lt;&lt; endl;</span>
<a name="l04454"></a>04454         <span class="comment">//now check for uniqueness</span>
<a name="l04455"></a>04455         <span class="keywordflow">if</span> (((i-1) &gt;= 0) &amp;&amp; (i &lt; rootVec.size())) {
<a name="l04456"></a>04456           <span class="comment">//cout &lt;&lt; rootVec[i] &lt;&lt; &quot;\t&quot; &lt;&lt; rootVec[i-1] &lt;&lt; endl;</span>
<a name="l04457"></a>04457           <span class="keywordtype">bool</span> uniq = (subset(abs(rootVec[i] - rootVec[i-1]), <a class="code" href="classintervalw.shtml">intervalw</a>(0, 1e-10)));
<a name="l04458"></a>04458           <span class="keywordflow">if</span> ( uniq ) { 
<a name="l04459"></a>04459             <span class="comment">//cout &lt;&lt; &quot;this root has a duplicate&quot; &lt;&lt; endl;</span>
<a name="l04460"></a>04460             uniqueRootVec.pop_back(); }
<a name="l04461"></a>04461         }
<a name="l04462"></a>04462       }
<a name="l04463"></a>04463       <span class="comment">//cout &lt;&lt; &quot;==There are &quot; &lt;&lt; uniqueRootVec.size() &lt;&lt; &quot; unique root(s)==&quot; &lt;&lt; endl;</span>
<a name="l04464"></a>04464 
<a name="l04465"></a>04465       <span class="comment">// if there&#39;s only 1 root</span>
<a name="l04466"></a>04466       <span class="keywordflow">if</span> (uniqueRootVec.size() == 1) {
<a name="l04467"></a>04467         <span class="comment">//cout &lt;&lt; &quot;there is only one root..&quot; &lt;&lt; endl;</span>
<a name="l04468"></a>04468         <span class="comment">// is the root at the left or right boundary?</span>
<a name="l04469"></a>04469         <span class="keywordflow">if</span> ( (abs(Inf(thisInt) - inf(rootVec[0])) &lt; 1e-10) || 
<a name="l04470"></a>04470             (abs(Sup(thisInt) - inf(rootVec[0])) &lt; 1e-10) ) {
<a name="l04471"></a>04471           <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the left/right boundary:&quot; &lt;&lt; rootVec[0] &lt;&lt; endl;</span>
<a name="l04472"></a>04472           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisInt, deg, tol);
<a name="l04473"></a>04473           totalArea += diffArea;
<a name="l04474"></a>04474         }
<a name="l04475"></a>04475         <span class="keywordflow">else</span> { <span class="comment">// the root is not at the boundaries</span>
<a name="l04476"></a>04476           <span class="comment">//cout &lt;&lt; &quot;no root at the boundaries&quot; &lt;&lt; endl;</span>
<a name="l04477"></a>04477           <span class="comment">//get the left sub-interval</span>
<a name="l04478"></a>04478           interval thisSubIntLeft = interval(Inf(thisInt), sup(uniqueRootVec[0]));
<a name="l04479"></a>04479           <span class="comment">//cout &lt;&lt; &quot;left interval: &quot; &lt;&lt; thisSubIntLeft &lt;&lt; endl; </span>
<a name="l04480"></a>04480           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubIntLeft, deg, tol);
<a name="l04481"></a>04481           totalArea += diffArea;
<a name="l04482"></a>04482           
<a name="l04483"></a>04483           <span class="comment">//get the right sub-interval</span>
<a name="l04484"></a>04484           <span class="comment">//get the left sub-interval</span>
<a name="l04485"></a>04485           interval thisSubIntRight = interval(inf(uniqueRootVec[0]), Sup(thisInt));
<a name="l04486"></a>04486           <span class="comment">//cout &lt;&lt; &quot;right interval: &quot; &lt;&lt; thisSubIntRight &lt;&lt; endl; </span>
<a name="l04487"></a>04487           diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubIntRight, deg, tol);
<a name="l04488"></a>04488           totalArea += diffArea;
<a name="l04489"></a>04489         }
<a name="l04490"></a>04490       } <span class="comment">// end of rootVec.size() == 1</span>
<a name="l04491"></a>04491 
<a name="l04492"></a>04492         <span class="comment">// if there is more than 1 root</span>
<a name="l04493"></a>04493       <span class="keywordflow">else</span> {
<a name="l04494"></a>04494         <span class="comment">//cout &lt;&lt; &quot;let&#39;s have a look at all the roots:&quot; &lt;&lt; endl;</span>
<a name="l04495"></a>04495         <span class="comment">//for (size_t i = 0; i &lt; uniqueRootVec.size(); i++) {</span>
<a name="l04496"></a>04496           <span class="comment">//cout &lt;&lt; uniqueRootVec[i] &lt;&lt; endl;</span>
<a name="l04497"></a>04497         <span class="comment">//}</span>
<a name="l04498"></a>04498 
<a name="l04499"></a>04499         <span class="comment">//first check if the first root is at the boundary</span>
<a name="l04500"></a>04500         <span class="comment">//cout &lt;&lt; &quot;check boundaries: &quot; &lt;&lt; Inf(thisInt) &lt;&lt; &quot;\t&quot; &lt;&lt; inf(rootVec[0]) &lt;&lt; endl;</span>
<a name="l04501"></a>04501         <span class="keywordflow">if</span> ( abs(Inf(thisInt) - inf(uniqueRootVec[0])) &lt; 1e-10 ) {
<a name="l04502"></a>04502           <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the leftmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l04503"></a>04503           interval thisSubIntFirst = interval(Inf(thisInt), sup(uniqueRootVec[1]));
<a name="l04504"></a>04504           <span class="comment">//cout &lt;&lt; &quot;0-th interval:&quot; &lt;&lt; thisSubIntFirst &lt;&lt; endl; </span>
<a name="l04505"></a>04505           interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubIntFirst, deg, tol);
<a name="l04506"></a>04506           totalArea += diffArea;
<a name="l04507"></a>04507           
<a name="l04508"></a>04508           <span class="comment">// now iterate through each root (except the first and last) and </span>
<a name="l04509"></a>04509           <span class="comment">// get the sub-itnervals</span>
<a name="l04510"></a>04510           <span class="comment">//cout &lt;&lt; &quot;iterating through each root&quot; &lt;&lt; endl;</span>
<a name="l04511"></a>04511           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (uniqueRootVec.size() - 1); i++) {
<a name="l04512"></a>04512             <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i+1 &lt;&lt; &quot;-th root is: &quot; &lt;&lt; rootVec[i+1] &lt;&lt; endl;</span>
<a name="l04513"></a>04513             <span class="keywordflow">if</span> ( (i+1) &gt; uniqueRootVec.size() ) { <span class="comment">// already no more roots</span>
<a name="l04514"></a>04514               interval thisSubInt = interval(inf(uniqueRootVec[i]), Sup(thisInt));
<a name="l04515"></a>04515               <span class="comment">//cout &lt;&lt; i &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l04516"></a>04516               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubInt, deg, tol);
<a name="l04517"></a>04517               totalArea += diffArea;
<a name="l04518"></a>04518             }
<a name="l04519"></a>04519             <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
<a name="l04520"></a>04520               interval thisSubInt = interval(inf(uniqueRootVec[i]), sup(uniqueRootVec[i+1]));
<a name="l04521"></a>04521               <span class="comment">//cout &lt;&lt; i+1 &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l04522"></a>04522               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubInt, deg, tol);
<a name="l04523"></a>04523               totalArea += diffArea;
<a name="l04524"></a>04524             }
<a name="l04525"></a>04525           } <span class="comment">// end of iterate through each root (excep the first and last)</span>
<a name="l04526"></a>04526           
<a name="l04527"></a>04527           <span class="comment">// now check if the last root is at the boundary</span>
<a name="l04528"></a>04528           <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(uniqueRootVec[uniqueRootVec.size()-1])) &lt; 1e-10 ) {
<a name="l04529"></a>04529             <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the rightmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l04530"></a>04530             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-2]), Sup(thisInt));
<a name="l04531"></a>04531             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l04532"></a>04532             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubIntLast, deg, tol);
<a name="l04533"></a>04533             totalArea += diffArea;
<a name="l04534"></a>04534           }
<a name="l04535"></a>04535           <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
<a name="l04536"></a>04536             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-1]), Sup(thisInt));
<a name="l04537"></a>04537             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l04538"></a>04538             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubIntLast, deg, tol);
<a name="l04539"></a>04539             totalArea += diffArea;
<a name="l04540"></a>04540           } 
<a name="l04541"></a>04541         } <span class="comment">// end of if first root is the boundary</span>
<a name="l04542"></a>04542         
<a name="l04543"></a>04543         <span class="keywordflow">else</span> {
<a name="l04544"></a>04544           <span class="comment">//cout &lt;&lt; &quot;root not at boundary&quot; &lt;&lt; endl;</span>
<a name="l04545"></a>04545           <span class="comment">//if it is not the boundary, make the first sub-interval</span>
<a name="l04546"></a>04546           interval thisSubIntFirst = interval(Inf(thisInt), sup(rootVec[0]));
<a name="l04547"></a>04547           <span class="comment">//cout &lt;&lt; &quot;0-th interval: &quot; &lt;&lt; thisSubIntFirst &lt;&lt; endl; </span>
<a name="l04548"></a>04548           interval diffArea =<a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubIntFirst, deg, tol);
<a name="l04549"></a>04549           totalArea += diffArea;
<a name="l04550"></a>04550           
<a name="l04551"></a>04551           <span class="comment">// now iterate through each root (except the first and last) and </span>
<a name="l04552"></a>04552           <span class="comment">// get the sub-itnervals</span>
<a name="l04553"></a>04553           <span class="comment">//cout &lt;&lt; &quot;iterating through each root&quot; &lt;&lt; endl;</span>
<a name="l04554"></a>04554           <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> i = 0; i &lt; (uniqueRootVec.size() - 1); i++) {
<a name="l04555"></a>04555             <span class="keywordflow">if</span> ( (i+1) &gt; uniqueRootVec.size() ) { <span class="comment">// already no more roots</span>
<a name="l04556"></a>04556               <span class="comment">//cout &lt;&lt; inf(rootVec[i]) &lt;&lt; &quot;\t&quot; &lt;&lt; Sup(thisInt) &lt;&lt; endl;</span>
<a name="l04557"></a>04557               interval thisSubInt = interval(inf(uniqueRootVec[i]), Sup(thisInt));
<a name="l04558"></a>04558               <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l04559"></a>04559               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubInt, deg, tol);
<a name="l04560"></a>04560               totalArea += diffArea;
<a name="l04561"></a>04561             }
<a name="l04562"></a>04562             <span class="keywordflow">else</span> { <span class="comment">//there are still more roots</span>
<a name="l04563"></a>04563               <span class="comment">//cout &lt;&lt; inf(rootVec[i]) &lt;&lt; &quot;\t&quot; &lt;&lt; sup(rootVec[i+1]) &lt;&lt; endl;</span>
<a name="l04564"></a>04564               interval thisSubInt = interval(inf(uniqueRootVec[i]), sup(uniqueRootVec[i+1]));
<a name="l04565"></a>04565               <span class="comment">//cout &lt;&lt; &quot;the &quot; &lt;&lt; i+1 &lt;&lt; &quot;-th interval: &quot; &lt;&lt; thisSubInt &lt;&lt; endl;</span>
<a name="l04566"></a>04566               interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubInt, deg, tol);
<a name="l04567"></a>04567               totalArea += diffArea;
<a name="l04568"></a>04568             }
<a name="l04569"></a>04569           } <span class="comment">// end of iterate through each root (except the first and last)</span>
<a name="l04570"></a>04570           
<a name="l04571"></a>04571           <span class="comment">// now check if the last root is at the boundary</span>
<a name="l04572"></a>04572           <span class="keywordflow">if</span> ( abs(Sup(thisInt) - sup(uniqueRootVec[uniqueRootVec.size()-1])) &lt; 1e-10 ) {
<a name="l04573"></a>04573             <span class="comment">//cout &lt;&lt; &quot;there&#39;s a root at the rightmost boundary:&quot; &lt;&lt; endl;</span>
<a name="l04574"></a>04574             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-2]), Sup(thisInt));
<a name="l04575"></a>04575             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l04576"></a>04576             interval diffArea =<a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubIntLast, deg, tol);
<a name="l04577"></a>04577           }
<a name="l04578"></a>04578           <span class="keywordflow">else</span> { <span class="comment">//the last root is not at the boundary</span>
<a name="l04579"></a>04579             interval thisSubIntLast = interval(inf(uniqueRootVec[uniqueRootVec.size()-1]), Sup(thisInt));
<a name="l04580"></a>04580             <span class="comment">//cout &lt;&lt; &quot;last interval: &quot; &lt;&lt; thisSubIntLast &lt;&lt; endl; </span>
<a name="l04581"></a>04581             interval diffArea = <a class="code" href="errorfunc_8cpp.shtml#ac99ece8c6ec9b7be0d2eec8911aff71a">LognormalGetL1error</a>(fhat, thisSubIntLast, deg, tol);
<a name="l04582"></a>04582             totalArea += diffArea;
<a name="l04583"></a>04583           } 
<a name="l04584"></a>04584         } <span class="comment">// end of first root is not the boundary</span>
<a name="l04585"></a>04585       } <span class="comment">// end of rootVec.size() &gt; 1</span>
<a name="l04586"></a>04586     } <span class="comment">// end of rootVec is not empty</span>
<a name="l04587"></a>04587 
<a name="l04588"></a>04588   } <span class="comment">// end of iterating through the leaf nodes</span>
<a name="l04589"></a>04589   
<a name="l04590"></a>04590   <span class="comment">//cout &lt;&lt; &quot;IAE: &quot; &lt;&lt; totalArea &lt;&lt; endl;</span>
<a name="l04591"></a>04591   <span class="keywordflow">return</span> totalArea;
<a name="l04592"></a>04592 }
<a name="l04593"></a>04593 
<a name="l04594"></a>04594 
<a name="l04597"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b0b0c19870f67a07704458237cf19d0">04597</a> real <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a2b0b0c19870f67a07704458237cf19d0">AdaptiveHistogram::get2DIAE</a>(<a class="code" href="classtaylor_1_1dim2taylor.shtml">taylor::dim2taylor</a> (*testpnt)(<a class="code" href="classtaylor_1_1dim2taylor__vector.shtml">taylor::dim2taylor_vector</a>, interval))
<a name="l04598"></a>04598 {
<a name="l04599"></a>04599   <span class="comment">//number of points</span>
<a name="l04600"></a>04600   <span class="keywordtype">int</span> n = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>();
<a name="l04601"></a>04601    
<a name="l04602"></a>04602   <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l04603"></a>04603   <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
<a name="l04604"></a>04604   (*this).getSubPaving()-&gt;getLeaves(leaves); <span class="comment">// fill the container</span>
<a name="l04605"></a>04605   real tol=1e-6;
<a name="l04606"></a>04606   <span class="keywordtype">int</span> o=16;
<a name="l04607"></a>04607   real result = 0; 
<a name="l04608"></a>04608   <span class="keywordflow">for</span> (it=leaves.begin(); it &lt; leaves.end(); it++)
<a name="l04609"></a>04609   { 
<a name="l04610"></a>04610       <span class="comment">//get domain</span>
<a name="l04611"></a>04611     ivector domain = (*it)-&gt;getBox();
<a name="l04612"></a>04612     cout &lt;&lt; <span class="stringliteral">&quot;Get IAE for node &quot;</span> &lt;&lt; domain &lt;&lt; endl;
<a name="l04613"></a>04613     <span class="comment">//get fhat  </span>
<a name="l04614"></a>04614     cout &lt;&lt; <span class="stringliteral">&quot;fhat:&quot;</span> &lt;&lt; endl;
<a name="l04615"></a>04615      interval fhat = interval(real((*it)-&gt;getCounter()/
<a name="l04616"></a>04616                              (((*it)-&gt;nodeVolume())*1.0*n))); 
<a name="l04617"></a>04617      
<a name="l04618"></a>04618      <span class="comment">// get the integrated absolute error at this box</span>
<a name="l04619"></a>04619     interval resultInt = <a class="code" href="Int_8h.shtml#a0de7ac342c4093f00c8fd6b899e54d87">integrateWithSplitting</a>(testpnt, fhat, domain, o, tol);    
<a name="l04620"></a>04620      <span class="comment">//add the errors    </span>
<a name="l04621"></a>04621      result += Sup(resultInt);
<a name="l04622"></a>04622    }
<a name="l04623"></a>04623   <span class="comment">//accounting for boundaries - will have to think about this later perhaps</span>
<a name="l04624"></a>04624   <span class="comment">//accumulate(dpIAE,gsl_cdf_ugaussian_P(xlow[0]),1.0);</span>
<a name="l04625"></a>04625   <span class="comment">//accumulate(dpIAE,gsl_cdf_ugaussian_Q(xupp[nLeaves-1]),1.0);</span>
<a name="l04626"></a>04626   <span class="keywordflow">return</span> result;  
<a name="l04627"></a>04627 }
<a name="l04628"></a>04628 
<a name="l04629"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa0b81dd06668d2ce34e3fe983a2a2913">04629</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa0b81dd06668d2ce34e3fe983a2a2913" title="Find the coverage of the boxes in an AdaptiveHistogram.">AdaptiveHistogram::findDensityRegion</a>(<span class="keywordtype">double</span> cov, <span class="keywordtype">double</span> weightPM,
<a name="l04630"></a>04630                             vector&lt;SPSnode*&gt; &amp; covNodes,
<a name="l04631"></a>04631                             <span class="keywordtype">string</span> covFileName)
<a name="l04632"></a>04632 {
<a name="l04633"></a>04633   <span class="keywordflow">try</span> {
<a name="l04634"></a>04634       <span class="keywordflow">if</span> ( (cov - weightPM) &lt;= 0) {
<a name="l04635"></a>04635         cout &lt;&lt; cov &lt;&lt; <span class="stringliteral">&quot; percent of the mass are already covered by the point masses&quot;</span> &lt;&lt; endl;
<a name="l04636"></a>04636       }
<a name="l04637"></a>04637       <span class="keywordflow">else</span> {
<a name="l04638"></a>04638         <span class="comment">// put the leaves into a vector and sort it, smallest to largest</span>
<a name="l04639"></a>04639         <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
<a name="l04640"></a>04640         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l04641"></a>04641         <a class="code" href="classsubpavings_1_1CompHeight.shtml" title="Class comparing on count/volume (ie histogram height) of box of node.">CompHeight</a> compheight;
<a name="l04642"></a>04642         <span class="comment">//sort according to average height</span>
<a name="l04643"></a>04643         sort(leaves.begin(), leaves.end(), <a class="code" href="classMyCompare.shtml">MyCompare</a>(compheight));
<a name="l04644"></a>04644         
<a name="l04645"></a>04645         <span class="comment">//start iterating from the largest</span>
<a name="l04646"></a>04646         SPSnodePtrs::reverse_iterator rit = leaves.rbegin();
<a name="l04647"></a>04647         <span class="keywordtype">bool</span> found = FALSE; <span class="comment">//found the boxes that gives cov density region</span>
<a name="l04648"></a>04648         
<a name="l04649"></a>04649         dotprecision totalCov;
<a name="l04650"></a>04650         totalCov = 0.0;
<a name="l04651"></a>04651         
<a name="l04652"></a>04652         <span class="keywordtype">size_t</span> totalN = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a7386f85d1182ae6e3f32766c4a208c11" title="Gets count in the root paving.">getRootCounter</a>();
<a name="l04653"></a>04653         
<a name="l04654"></a>04654         <span class="keywordflow">while</span> (!found &amp;&amp; rit &lt; leaves.rend()) {
<a name="l04655"></a>04655           <span class="comment">//accumulate the height * box vo\l </span>
<a name="l04656"></a>04656           accumulate(totalCov, (1.0*(*rit)-&gt;getCounter())/(1.0*totalN), 1); 
<a name="l04657"></a>04657 
<a name="l04658"></a>04658           <span class="comment">//push back the node that fulfill the condition totalCov &lt;= cov </span>
<a name="l04659"></a>04659           <span class="comment">//into the container covNodes</span>
<a name="l04660"></a>04660           <span class="keywordflow">if</span> (totalCov &lt;= (cov - weightPM) ) { 
<a name="l04661"></a>04661             covNodes.push_back((*rit)); 
<a name="l04662"></a>04662           } 
<a name="l04663"></a>04663           
<a name="l04664"></a>04664           <span class="comment">// check that totalCov is at most cov</span>
<a name="l04665"></a>04665           <span class="keywordflow">if</span> (totalCov &gt;= (cov - weightPM) ) { found = TRUE; } <span class="comment">// break out of loop</span>
<a name="l04666"></a>04666           ++rit;        
<a name="l04667"></a>04667         } <span class="comment">// end while </span>
<a name="l04668"></a>04668       
<a name="l04669"></a>04669       <span class="comment">//output covNodes to .txt </span>
<a name="l04670"></a>04670         ofstream os;
<a name="l04671"></a>04671         os.open(covFileName.c_str());   
<a name="l04672"></a>04672         <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> vit;
<a name="l04673"></a>04673         <span class="keywordflow">for</span> (vit = covNodes.begin(); vit &lt; covNodes.end(); vit++) {
<a name="l04674"></a>04674           ivector thisBox = (*vit)-&gt;getBox(); <span class="comment">// copy theBox         </span>
<a name="l04675"></a>04675           <span class="keywordtype">double</span> vol = (*vit)-&gt;nodeVolume();
<a name="l04676"></a>04676           <span class="comment">// output the nodeName, nodeVolume</span>
<a name="l04677"></a>04677           os &lt;&lt; (*vit)-&gt;getNodeName();
<a name="l04678"></a>04678           os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; vol;
<a name="l04679"></a>04679           <span class="comment">// followed by the height</span>
<a name="l04680"></a>04680           os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; (1.0*(*vit)-&gt;getCounter())/(1.0*totalN)/vol;
<a name="l04681"></a>04681           <span class="comment">// followed by intervals making up box using Inf &amp; Sup</span>
<a name="l04682"></a>04682           <span class="comment">// ie unlike cxsc output, there is no [  ] around them</span>
<a name="l04683"></a>04683           <span class="keywordflow">for</span> (<span class="keywordtype">int</span> i= <a class="code" href="namespacetaylor.shtml#a2bb1593763f084acddd2e1a1e1efaa11">Lb</a>(thisBox); i &lt;= <a class="code" href="namespacetaylor.shtml#a38b201904beee95d9528b9d656430c07">Ub</a>(thisBox) ; i++) {
<a name="l04684"></a>04684              os &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Inf(thisBox[i]) &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; Sup(thisBox[i]);
<a name="l04685"></a>04685           }
<a name="l04686"></a>04686           os &lt;&lt; endl;
<a name="l04687"></a>04687         }
<a name="l04688"></a>04688         os &lt;&lt; flush;
<a name="l04689"></a>04689         os.close();
<a name="l04690"></a>04690       } <span class="comment">//end of going through the continuous part</span>
<a name="l04691"></a>04691     } <span class="comment">// end of try     </span>
<a name="l04692"></a>04692   <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l04693"></a>04693     <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(
<a name="l04694"></a>04694     <span class="stringliteral">&quot;Error in AdaptiveHistogram::findDensityRegion :\n&quot;</span>
<a name="l04695"></a>04695     + <span class="keywordtype">string</span>( e.what() ) );
<a name="l04696"></a>04696   }
<a name="l04697"></a>04697 }
<a name="l04698"></a>04698 
<a name="l04699"></a>04699 <span class="comment">// Jenny addition for Gloria&#39;s convergence work</span>
<a name="l04700"></a>04700 <span class="comment">// Method to add current state of the histogram during splitting to a log file</span>
<a name="l04701"></a>04701 <span class="comment">// Output goes to file named according to argument s</span>
<a name="l04702"></a>04702 <span class="comment">// Output is plain, just textToTabs</span>
<a name="l04703"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa73a46279c3f591d298a0180d99723a5">04703</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aa73a46279c3f591d298a0180d99723a5" title="Append current state of histogram to a txt log file.">AdaptiveHistogram::outputLogPlain</a>(<span class="keyword">const</span> std::string&amp; s, <span class="keyword">const</span> <span class="keywordtype">int</span> i)<span class="keyword"> const</span>
<a name="l04704"></a>04704 <span class="keyword"></span>{
<a name="l04705"></a>04705     <span class="comment">// To add output of the AdaptiveHistogram object to file</span>
<a name="l04706"></a>04706     ofstream os(s.c_str(), ios::app);         <span class="comment">// append</span>
<a name="l04707"></a>04707     <span class="keywordflow">if</span> (os.is_open()) {
<a name="l04708"></a>04708         os &lt;&lt; std::endl;
<a name="l04709"></a>04709         os &lt;&lt; <span class="stringliteral">&quot;Pass &quot;</span> &lt;&lt; i &lt;&lt; std::endl; <span class="comment">// numbering</span>
<a name="l04710"></a>04710         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#abe732a753f432c2239c9f82a47d089b1" title="Output for for all leaves of a binary tree.">leavesOutputTabs</a>(os); <span class="comment">// the output</span>
<a name="l04711"></a>04711         os.close();
<a name="l04712"></a>04712     }
<a name="l04713"></a>04713     <span class="keywordflow">else</span> {
<a name="l04714"></a>04714         std::cerr &lt;&lt; <span class="stringliteral">&quot;Error: could not open file named &quot;</span>
<a name="l04715"></a>04715             &lt;&lt; s &lt;&lt; std::endl &lt;&lt; std::endl;
<a name="l04716"></a>04716     }
<a name="l04717"></a>04717 }
<a name="l04718"></a>04718  
<a name="l04719"></a>04719 <span class="comment">// gloria addition </span>
<a name="l04722"></a>04722 <span class="comment"></span><span class="comment">/*</span>
<a name="l04723"></a>04723 <span class="comment">cxsc::real AdaptiveHistogram::getMappedIAE(RealMappedSPnode&amp; nodeEst, ivector pavingBox) const</span>
<a name="l04724"></a>04724 <span class="comment">{</span>
<a name="l04725"></a>04725 <span class="comment">  RealMappedSPnode histMap(pavingBox);</span>
<a name="l04726"></a>04726 <span class="comment">  </span>
<a name="l04727"></a>04727 <span class="comment">  // split the root box into the shape of this </span>
<a name="l04728"></a>04728 <span class="comment">  string leafLevelString = getLeafLevelsString();</span>
<a name="l04729"></a>04729 <span class="comment">  int depth = atoi(leafLevelString.c_str());</span>
<a name="l04730"></a>04730 <span class="comment">      if (depth != 0) {</span>
<a name="l04731"></a>04731 <span class="comment">        histMap.splitToShape(leafLevelString); </span>
<a name="l04732"></a>04732 <span class="comment">  }</span>
<a name="l04733"></a>04733 <span class="comment"></span>
<a name="l04734"></a>04734 <span class="comment">  //container to store heights for histNodes </span>
<a name="l04735"></a>04735 <span class="comment">  vector&lt; RangeCollectionClass&lt;real&gt; &gt; heightHist;</span>
<a name="l04736"></a>04736 <span class="comment"></span>
<a name="l04737"></a>04737 <span class="comment">  //get all the nodes in the histogram </span>
<a name="l04738"></a>04738 <span class="comment">  SPSnodePtrs histNodes;</span>
<a name="l04739"></a>04739 <span class="comment">  SPSnodePtrsItr histNodeIt;</span>
<a name="l04740"></a>04740 <span class="comment">  getSubPaving()-&gt;getAllNodes(histNodes); </span>
<a name="l04741"></a>04741 <span class="comment"></span>
<a name="l04742"></a>04742 <span class="comment">  size_t n = getSubPaving()-&gt;getRootCounter(); </span>
<a name="l04743"></a>04743 <span class="comment">  //traverse the tree and get the heights </span>
<a name="l04744"></a>04744 <span class="comment">  for (histNodeIt = histNodes.begin(); histNodeIt &lt; histNodes.end(); </span>
<a name="l04745"></a>04745 <span class="comment">      histNodeIt++) {</span>
<a name="l04746"></a>04746 <span class="comment">    //get the height at each node</span>
<a name="l04747"></a>04747 <span class="comment">    RangeCollectionClass&lt;real&gt; height((*histNodeIt)-&gt;getCounter()/</span>
<a name="l04748"></a>04748 <span class="comment">                    ((*histNodeIt)-&gt;nodeVolume()*n));</span>
<a name="l04749"></a>04749 <span class="comment">    heightHist.push_back(height);</span>
<a name="l04750"></a>04750 <span class="comment">  }</span>
<a name="l04751"></a>04751 <span class="comment"></span>
<a name="l04752"></a>04752 <span class="comment">  //allocate ranges for histNode</span>
<a name="l04753"></a>04753 <span class="comment">  histMap.allocateRanges(heightHist, 0);</span>
<a name="l04754"></a>04754 <span class="comment"></span>
<a name="l04755"></a>04755 <span class="comment">  return nodeEst.getMappedSPIAE(histMap);</span>
<a name="l04756"></a>04756 <span class="comment">}</span>
<a name="l04757"></a>04757 <span class="comment">*/</span>
<a name="l04758"></a>04758 
<a name="l04759"></a>04759 <span class="comment">// gloria&#39;s addition</span>
<a name="l04760"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae7e68baa3f16fafe3774df1f570aadcc">04760</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6a4b39b06259e03b84b5131299334416">AdaptiveHistogram::prioritySplitWithTotalVar</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest,
<a name="l04761"></a>04761                                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l04762"></a>04762                                 <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l04763"></a>04763                                 <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB, 
<a name="l04764"></a>04764                       <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> StopVal,
<a name="l04765"></a>04765                       vector&lt;AdaptiveHistogram&gt;&amp; HistAtValley, <span class="keywordtype">int</span> simNum)
<a name="l04766"></a>04766 {
<a name="l04767"></a>04767     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l04768"></a>04768 
<a name="l04769"></a>04769     gsl_rng * rgsl = NULL;
<a name="l04770"></a>04770 
<a name="l04771"></a>04771     <span class="keywordflow">try</span> {
<a name="l04772"></a>04772         <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l04773"></a>04773         <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l04774"></a>04774         <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l04775"></a>04775         <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l04776"></a>04776         gsl_rng_env_setup();
<a name="l04777"></a>04777         tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l04778"></a>04778         rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l04779"></a>04779 
<a name="l04780"></a>04780         retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6a4b39b06259e03b84b5131299334416">prioritySplitWithTotalVar</a>(compTest, he, logging,
<a name="l04781"></a>04781                                     minChildPoints, minVolB, rgsl, maxLeafNodes, 
<a name="l04782"></a>04782                                     StopVal, HistAtValley, simNum);
<a name="l04783"></a>04783         gsl_rng_free (rgsl);
<a name="l04784"></a>04784     }
<a name="l04785"></a>04785 
<a name="l04786"></a>04786     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l04787"></a>04787         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l04788"></a>04788         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l04789"></a>04789         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory in priority split.  Orginal error: &quot;</span>
<a name="l04790"></a>04790                                      + oldmsg;
<a name="l04791"></a>04791         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l04792"></a>04792         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l04793"></a>04793     }
<a name="l04794"></a>04794     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l04795"></a>04795         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l04796"></a>04796         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l04797"></a>04797         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error in priority split.  Orginal error: &quot;</span>
<a name="l04798"></a>04798                                     + oldmsg;
<a name="l04799"></a>04799         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l04800"></a>04800         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l04801"></a>04801     }
<a name="l04802"></a>04802     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l04803"></a>04803         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l04804"></a>04804         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l04805"></a>04805         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in priority split.  Orginal error: &quot;</span>
<a name="l04806"></a>04806                                     + oldmsg;
<a name="l04807"></a>04807         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l04808"></a>04808         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l04809"></a>04809     }
<a name="l04810"></a>04810     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l04811"></a>04811         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l04812"></a>04812         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l04813"></a>04813         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in priority split.  Orginal error: &quot;</span> + oldmsg;
<a name="l04814"></a>04814         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l04815"></a>04815         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l04816"></a>04816     }
<a name="l04817"></a>04817 
<a name="l04818"></a>04818     <span class="keywordflow">return</span> retValue;
<a name="l04819"></a>04819 }
<a name="l04820"></a>04820 
<a name="l04821"></a>04821 
<a name="l04822"></a>04822 <span class="comment">// gloria addition</span>
<a name="l04823"></a>04823 <span class="comment">// method to make a leaf node histogram into a multi-node histogram</span>
<a name="l04824"></a>04824 <span class="comment">// by prioritising which node to split first</span>
<a name="l04825"></a>04825 <span class="comment">// keeps splitting until the function object he returns true</span>
<a name="l04826"></a>04826 <span class="comment">// or until there are no more splittable nodes</span>
<a name="l04827"></a>04827 <span class="comment">// outputs to a log file if logging required</span>
<a name="l04828"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acab027b9f4718b0ba077b142375a05cb">04828</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a6a4b39b06259e03b84b5131299334416">AdaptiveHistogram::prioritySplitWithTotalVar</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest,
<a name="l04829"></a>04829                                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l04830"></a>04830                                 <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l04831"></a>04831                                 <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB,
<a name="l04832"></a>04832                                 gsl_rng * rgsl, <span class="keywordtype">size_t</span> maxLeafNodes, <span class="keywordtype">int</span> StopVal,
<a name="l04833"></a>04833                                 vector&lt;AdaptiveHistogram&gt;&amp; HistAtValley, <span class="keywordtype">int</span> simNum)
<a name="l04834"></a>04834 {    
<a name="l04835"></a>04835     <span class="keywordtype">bool</span> cancontinue = <span class="keyword">false</span>;
<a name="l04836"></a>04836     <span class="keywordtype">bool</span> TooManyLeaves = <span class="keyword">false</span>;
<a name="l04837"></a>04837     <span class="keywordtype">bool</span> shouldStop = <span class="keyword">false</span>;
<a name="l04838"></a>04838     <span class="keywordtype">int</span> flagStop = 0;
<a name="l04839"></a>04839     vector&lt;double&gt; TotalVarDist;
<a name="l04840"></a>04840     <span class="keywordtype">int</span> Prev = 1;
<a name="l04841"></a>04841     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> probValley;
<a name="l04842"></a>04842     <span class="keywordtype">size_t</span> split = 0;
<a name="l04843"></a>04843     
<a name="l04844"></a>04844     <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>) {
<a name="l04845"></a>04845             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No root paving for prioritySplit&quot;</span>);
<a name="l04846"></a>04846     }
<a name="l04847"></a>04847 
<a name="l04848"></a>04848     <span class="keywordflow">try</span> {
<a name="l04849"></a>04849         <span class="keywordtype">bool</span> volChecking = <span class="keyword">false</span>; <span class="comment">// record if we need to check volume before split</span>
<a name="l04850"></a>04850         <span class="keywordtype">double</span> minVol = -1.0; <span class="comment">// minimum volume (used only if checking)</span>
<a name="l04851"></a>04851         <span class="keywordtype">size_t</span> n; <span class="comment">// for number of points in histogram</span>
<a name="l04852"></a>04852 
<a name="l04853"></a>04853         <span class="keywordtype">int</span> i = 0;
<a name="l04854"></a>04854         std::string baseFileName = <span class="stringliteral">&quot;&quot;</span>;
<a name="l04855"></a>04855         std::string s = <span class="stringliteral">&quot;&quot;</span>;
<a name="l04856"></a>04856         <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l04857"></a>04857             <span class="comment">// pass to log output to keep track of splits</span>
<a name="l04858"></a>04858             baseFileName = <span class="stringliteral">&quot;pqOutput&quot;</span>;
<a name="l04859"></a>04859             s = <a class="code" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609" title="Construct a unique filename from base and timestamp number.">getUniqueFilename</a>(baseFileName);
<a name="l04860"></a>04860         }
<a name="l04861"></a>04861 
<a name="l04862"></a>04862         <span class="comment">// make volChecking true if minVolB is &gt; 0.0</span>
<a name="l04863"></a>04863         <span class="keywordflow">if</span> (minVolB &gt; 0.0) {
<a name="l04864"></a>04864             <span class="comment">// minimum volume of a splittable node is minVolB(log n)^2/n</span>
<a name="l04865"></a>04865             minVol = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a0ef2d251d61753086a358bdd9bda057f" title="get the value of the minimum volume for a splittable node.">getMinVol</a>(minVolB);
<a name="l04866"></a>04866            volChecking = <span class="keyword">true</span>;
<a name="l04867"></a>04867         }
<a name="l04868"></a>04868 
<a name="l04869"></a>04869         <span class="comment">// a multiset for the queue (key values are not necessarily unique)</span>
<a name="l04870"></a>04870         multiset&lt;SPSnode*, MyCompare&gt; pq((<a class="code" href="classMyCompare.shtml">MyCompare</a>(compTest)));
<a name="l04871"></a>04871 
<a name="l04872"></a>04872         n = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>(); <span class="comment">// number of points in histogram</span>
<a name="l04873"></a>04873 
<a name="l04874"></a>04874         <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l04875"></a>04875              <span class="comment">// Start log file with filename and timestamp</span>
<a name="l04876"></a>04876             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad847a4add7e72eac564daa44835dba5b" title="Opening line of a txt log file.">outputLogStart</a>(s);
<a name="l04877"></a>04877             <span class="comment">// log the current state of the histogram</span>
<a name="l04878"></a>04878             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">outputLog</a>(s, i);
<a name="l04879"></a>04879             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a602b8b4081d3cae20308aa6644a83fa9" title="Add AIC EMP score to log file.">outputLogEMPAIC</a>(s); <span class="comment">// add AIC scores</span>
<a name="l04880"></a>04880             i++;
<a name="l04881"></a>04881         }
<a name="l04882"></a>04882 
<a name="l04883"></a>04883         <span class="comment">// put nodes into the starting set IF they meet minVol test AND IF either</span>
<a name="l04884"></a>04884         <span class="comment">// there are enough points in the whole node</span>
<a name="l04885"></a>04885                 <span class="comment">// and minChildCountIfSplit is 0 (ie all points go to one child)</span>
<a name="l04886"></a>04886         <span class="comment">// or the minChildCountIfSplit test passed</span>
<a name="l04887"></a>04887 
<a name="l04888"></a>04888         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l04889"></a>04889             <span class="comment">// check to insert a copy of the rootPaving pointer into the set</span>
<a name="l04890"></a>04890             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>, volChecking, minVol,
<a name="l04891"></a>04891                 minChildPoints)) {
<a name="l04892"></a>04892                     pq.insert(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>);
<a name="l04893"></a>04893             }
<a name="l04894"></a>04894         }
<a name="l04895"></a>04895         <span class="keywordflow">else</span> { <span class="comment">// root is not a leaf</span>
<a name="l04896"></a>04896             <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
<a name="l04897"></a>04897             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l04898"></a>04898             <span class="comment">// check to insert each of the leaves into the set</span>
<a name="l04899"></a>04899             <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> sit;
<a name="l04900"></a>04900             <span class="keywordflow">for</span> (sit = leaves.begin(); sit &lt; leaves.end(); sit++) {
<a name="l04901"></a>04901                 <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>((*sit), volChecking, minVol,
<a name="l04902"></a>04902                 minChildPoints)) {
<a name="l04903"></a>04903                     pq.insert(*sit);
<a name="l04904"></a>04904                 }
<a name="l04905"></a>04905             }
<a name="l04906"></a>04906         }
<a name="l04907"></a>04907 
<a name="l04908"></a>04908         cancontinue = (!pq.empty());
<a name="l04909"></a>04909       
<a name="l04910"></a>04910         <span class="keywordtype">bool</span> bigEnough = cancontinue;
<a name="l04911"></a>04911        TooManyLeaves = (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &gt; maxLeafNodes);
<a name="l04912"></a>04912 
<a name="l04913"></a>04913         <span class="keywordflow">if</span>(!cancontinue) {
<a name="l04914"></a>04914             std::cout &lt;&lt; <span class="stringliteral">&quot;No splittable leaves to split - aborting&quot;</span> &lt;&lt; std::endl;
<a name="l04915"></a>04915         }
<a name="l04916"></a>04916 
<a name="l04917"></a>04917         <span class="comment">// split until the HistEvalObj he () operator returns true</span>
<a name="l04918"></a>04918         <span class="comment">// we only put splittable nodes into the set, so we don&#39;t have to check</span>
<a name="l04919"></a>04919         <span class="comment">// that they are splittable when we take them out</span>
<a name="l04920"></a>04920         <span class="keywordflow">while</span> (bigEnough &amp;&amp; !he(<span class="keyword">this</span>) &amp;&amp; !TooManyLeaves) {
<a name="l04921"></a>04921             
<a name="l04922"></a>04922             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* largest = *(pq.rbegin ()); <span class="comment">// the last largest in the set</span>
<a name="l04923"></a>04923             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* chosenLargest;
<a name="l04924"></a>04924             
<a name="l04925"></a>04925             <span class="comment">// find if there are any more equal to largest around</span>
<a name="l04926"></a>04926             multiset&lt;SPSnode*, MyCompare&gt;::iterator mit;
<a name="l04927"></a>04927             pair&lt;multiset&lt;SPSnode*, MyCompare&gt;::iterator,
<a name="l04928"></a>04928                 multiset&lt;SPSnode*, MyCompare&gt;::iterator&gt; equalLargest;
<a name="l04929"></a>04929 
<a name="l04930"></a>04930             equalLargest = pq.equal_range(largest); <span class="comment">// everything that = largest</span>
<a name="l04931"></a>04931             <span class="keywordtype">size_t</span> numberLargest = pq.count(largest); <span class="comment">// number of =largest</span>
<a name="l04932"></a>04932 
<a name="l04933"></a>04933             <span class="keywordflow">if</span> (numberLargest &gt; 1) {
<a name="l04934"></a>04934 
<a name="l04935"></a>04935                 <span class="comment">// draw a random number in [0,1)</span>
<a name="l04936"></a>04936                 <span class="keywordtype">double</span> rand = gsl_rng_uniform(rgsl);
<a name="l04937"></a>04937 
<a name="l04938"></a>04938                 real sum = 0.0;
<a name="l04939"></a>04939 
<a name="l04940"></a>04940                 <span class="comment">// random selection of the =largest node to chose</span>
<a name="l04941"></a>04941                 <span class="keywordflow">for</span> (mit=equalLargest.first; mit!=equalLargest.second; ++mit) {
<a name="l04942"></a>04942 
<a name="l04943"></a>04943                     sum += 1.0/(1.0*numberLargest);
<a name="l04944"></a>04944                     <span class="keywordflow">if</span> (rand &lt; sum) {
<a name="l04945"></a>04945 
<a name="l04946"></a>04946                         <span class="keywordflow">break</span>;
<a name="l04947"></a>04947                     }
<a name="l04948"></a>04948                 }
<a name="l04949"></a>04949                 chosenLargest = *(mit); <span class="comment">// the chosen largest in the set</span>
<a name="l04950"></a>04950                 pq.erase(mit);<span class="comment">// take the iterator to chosen largest out of the set</span>
<a name="l04951"></a>04951             }
<a name="l04952"></a>04952 
<a name="l04953"></a>04953             <span class="keywordflow">else</span> {
<a name="l04954"></a>04954 
<a name="l04955"></a>04955                 chosenLargest = *(pq.rbegin ()); <span class="comment">// the only largest</span>
<a name="l04956"></a>04956                 multiset&lt;SPSnode*, MyCompare&gt;::iterator it = pq.end();
<a name="l04957"></a>04957                 it--;
<a name="l04958"></a>04958                 pq.erase(it);<span class="comment">// take this largest out of the set</span>
<a name="l04959"></a>04959             }
<a name="l04960"></a>04960 
<a name="l04961"></a>04961             <span class="comment">// accumulate the changes in scaled EMP sums that will result</span>
<a name="l04962"></a>04962             <span class="comment">// from this expansion</span>
<a name="l04963"></a>04963             <span class="comment">//updateScaledEMPSumCOPERR(chosenLargest-&gt;getSplitChangeEMPCOPERR(n));</span>
<a name="l04964"></a>04964             <span class="comment">//updateScaledEMPSumAIC(chosenLargest-&gt;getSplitChangeEMPAIC());</span>
<a name="l04965"></a>04965 
<a name="l04966"></a>04966             <span class="comment">// split the biggest one and divide up its data</span>
<a name="l04967"></a>04967            cout &lt;&lt; <span class="stringliteral">&quot;===============&quot;</span> &lt;&lt; endl;
<a name="l04968"></a>04968            cout &lt;&lt; <span class="stringliteral">&quot;chosenLArgest: &quot;</span> &lt;&lt; chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a930afc65b88ca963bb94d849a0e8c3db" title="Get the node name.">getNodeName</a>() &lt;&lt; <span class="stringliteral">&quot;\t&quot;</span> &lt;&lt; chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>() &lt;&lt; endl;
<a name="l04969"></a>04969            <a class="code" href="namespacesubpavings.shtml#a6bce1a57598248196dd6b3e6010e724a" title="Expand a leaf node to have two child nodes.">Expand</a>(chosenLargest);
<a name="l04970"></a>04970            cout &lt;&lt; <span class="stringliteral">&quot;===============&quot;</span> &lt;&lt; endl;
<a name="l04971"></a>04971            
<a name="l04972"></a>04972             <span class="comment">// add the new child names to the creation string</span>
<a name="l04973"></a>04973             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a> += chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l04974"></a>04974 
<a name="l04975"></a>04975             <span class="comment">// but only put the children into the container if they can be</span>
<a name="l04976"></a>04976             <span class="comment">// split, which means IF the child meets the min vol test AND IF</span>
<a name="l04977"></a>04977             <span class="comment">// either there are enough points in the whole child and</span>
<a name="l04978"></a>04978                 <span class="comment">// the child&#39;s minChildCountIfSplit is 0 (ie all points go to</span>
<a name="l04979"></a>04979                 <span class="comment">// one child of the child)</span>
<a name="l04980"></a>04980             <span class="comment">// or the child&#39;s minChildCountIfSplit test is passed</span>
<a name="l04981"></a>04981 
<a name="l04982"></a>04982             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>(),
<a name="l04983"></a>04983                     volChecking, minVol, minChildPoints)) {
<a name="l04984"></a>04984                 <span class="comment">// insert the new left child into the multiset</span>
<a name="l04985"></a>04985                 
<a name="l04986"></a>04986                 pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l04987"></a>04987             }
<a name="l04988"></a>04988 
<a name="l04989"></a>04989             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>(),
<a name="l04990"></a>04990                     volChecking, minVol, minChildPoints)) {
<a name="l04991"></a>04991                 <span class="comment">// insert the new right child into the multiset</span>
<a name="l04992"></a>04992                
<a name="l04993"></a>04993                 pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l04994"></a>04994             }
<a name="l04995"></a>04995 
<a name="l04996"></a>04996             <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l04997"></a>04997                 <span class="comment">// To add current state of histogram to log file</span>
<a name="l04998"></a>04998                 <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">outputLog</a>(s, i);
<a name="l04999"></a>04999                 <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a602b8b4081d3cae20308aa6644a83fa9" title="Add AIC EMP score to log file.">outputLogEMPAIC</a>(s); <span class="comment">// add AIC scores</span>
<a name="l05000"></a>05000                 i++;
<a name="l05001"></a>05001             }
<a name="l05002"></a>05002 
<a name="l05003"></a>05003 
<a name="l05004"></a>05004         <span class="comment">// get the total variation distance</span>
<a name="l05005"></a>05005         <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
<a name="l05006"></a>05006         <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> leavesIt;
<a name="l05007"></a>05007         <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l05008"></a>05008 
<a name="l05009"></a>05009         <span class="keywordtype">double</span> totalVarDist = 0;
<a name="l05010"></a>05010         <span class="keywordtype">double</span> FUnif = 1.0/leaves.size()*1.0;
<a name="l05011"></a>05011         <span class="keywordflow">for</span> (leavesIt = leaves.begin(); leavesIt &lt; leaves.end(); leavesIt++) {
<a name="l05012"></a>05012           <span class="keywordtype">double</span> leafVol = (*leavesIt)-&gt;nodeVolume();
<a name="l05013"></a>05013           <span class="comment">//get the total variation distance</span>
<a name="l05014"></a>05014           <span class="comment">//calculate \mu_n - \mu</span>
<a name="l05015"></a>05015                <span class="keywordtype">double</span> fhat = ((*leavesIt)-&gt;getCounter())/leafVol/n;
<a name="l05016"></a>05016                <span class="keywordtype">double</span> diffMu = fabs(fhat*leafVol - FUnif);
<a name="l05017"></a>05017                <span class="comment">//cout &lt;&lt; &quot;previous: &quot; &lt;&lt; totalVarDist &lt;&lt; &quot;\t current: &quot; &lt;&lt; diffMu &lt;&lt; endl;</span>
<a name="l05018"></a>05018           totalVarDist += diffMu;
<a name="l05019"></a>05019           <span class="comment">//totalVarDist = (diffMu &gt; totalVarDist) ? diffMu : totalVarDist; </span>
<a name="l05020"></a>05020         }
<a name="l05021"></a>05021         split++;
<a name="l05022"></a>05022         TotalVarDist.push_back(totalVarDist);
<a name="l05023"></a>05023         <span class="comment">//cout &lt;&lt; &quot;---------Split &quot; &lt;&lt; split &lt;&lt; &quot;: &quot; &lt;&lt; totalVarDist &lt;&lt; &quot;--------------&quot; &lt;&lt; endl;</span>
<a name="l05024"></a>05024 
<a name="l05025"></a>05025         <span class="keywordflow">if</span> (split == 1) { probValley = *<span class="keyword">this</span>; } <span class="comment">// keep the second state</span>
<a name="l05026"></a>05026 
<a name="l05027"></a>05027         <span class="comment">// start the checks after 1 split</span>
<a name="l05028"></a>05028         <span class="keywordflow">if</span> ( split &gt; 1 ) {
<a name="l05029"></a>05029           <span class="comment">// use the total var distance as stopping criteria</span>
<a name="l05030"></a>05030           <span class="keywordtype">size_t</span> vecSize = TotalVarDist.size();
<a name="l05031"></a>05031           shouldStop = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a438e2252f954f0556fa2bd7c2e105dbe">checkStopCrit</a>(TotalVarDist[vecSize-1], TotalVarDist[vecSize-2], Prev);
<a name="l05032"></a>05032           <span class="keywordflow">if</span> (shouldStop) { 
<a name="l05033"></a>05033             flagStop++; 
<a name="l05034"></a>05034             HistAtValley.push_back(probValley); <span class="comment">//keep this histogram</span>
<a name="l05035"></a>05035           }
<a name="l05036"></a>05036           <span class="keywordflow">if</span> (flagStop == StopVal) { 
<a name="l05037"></a>05037             cout &lt;&lt; <span class="stringliteral">&quot;Stopping criteria met. There are &quot;</span> &lt;&lt; StopVal &lt;&lt; <span class="stringliteral">&quot; valleys.&quot;</span> &lt;&lt; endl;
<a name="l05038"></a>05038             <span class="keywordflow">break</span>; 
<a name="l05039"></a>05039           }
<a name="l05040"></a>05040           <span class="keywordflow">if</span> (Prev == 1) <span class="comment">// keep this histogram if prev = 1 </span>
<a name="l05041"></a>05041             { probValley = *<span class="keyword">this</span>; }
<a name="l05042"></a>05042         }
<a name="l05043"></a>05043         
<a name="l05044"></a>05044             bigEnough = (!pq.empty());
<a name="l05045"></a>05045             <span class="keywordflow">if</span> (!bigEnough)
<a name="l05046"></a>05046                 std::cout &lt;&lt; <span class="stringliteral">&quot;Terminated splitting: no splittable nodes left&quot;</span>
<a name="l05047"></a>05047                     &lt;&lt; std::endl;
<a name="l05048"></a>05048 
<a name="l05049"></a>05049         <span class="comment">// check if number of leaf nodes in subpaving &gt; maxLeafNodes</span>
<a name="l05050"></a>05050         <span class="comment">// maximum number of leaf nodes allowed</span>
<a name="l05051"></a>05051         <span class="comment">//n^B, A+B &gt; 1, 0  &lt; A &lt; 1, 0 &lt; B &lt; 1 - refer Prop. 1 in PQ paper</span>
<a name="l05052"></a>05052         TooManyLeaves = (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &gt; maxLeafNodes);
<a name="l05053"></a>05053         <span class="keywordflow">if</span> ( TooManyLeaves) {
<a name="l05054"></a>05054           std::cout &lt;&lt; <span class="stringliteral">&quot;Terminated splitting: maximum number of leaf nodes = &quot;</span>&lt;&lt; maxLeafNodes &lt;&lt; <span class="stringliteral">&quot; reached&quot;</span>
<a name="l05055"></a>05055                           &lt;&lt; std::endl;
<a name="l05056"></a>05056         }  
<a name="l05057"></a>05057       } <span class="comment">// end of while loop</span>
<a name="l05058"></a>05058 
<a name="l05059"></a>05059       <span class="comment">//output the total variation distance for plotting purposes</span>
<a name="l05060"></a>05060       ofstream oss;         <span class="comment">// ofstream object</span>
<a name="l05061"></a>05061       oss &lt;&lt; scientific;  <span class="comment">// set formatting for input to oss</span>
<a name="l05062"></a>05062       oss.precision(5);
<a name="l05063"></a>05063       std::ostringstream stm;
<a name="l05064"></a>05064       stm &lt;&lt; simNum;
<a name="l05065"></a>05065       <span class="keywordtype">string</span> FileName = <span class="stringliteral">&quot;PQTotalVariationOutput&quot;</span>;
<a name="l05066"></a>05066       FileName += stm.str();
<a name="l05067"></a>05067       FileName += <span class="stringliteral">&quot;.txt&quot;</span>;
<a name="l05068"></a>05068       oss.open(FileName.c_str());
<a name="l05069"></a>05069       <span class="keywordflow">for</span> (<span class="keywordtype">size_t</span> j=0; j &lt; TotalVarDist.size(); j++) {
<a name="l05070"></a>05070         oss &lt;&lt; TotalVarDist[j] &lt;&lt; endl;
<a name="l05071"></a>05071       }
<a name="l05072"></a>05072       oss &lt;&lt; flush;
<a name="l05073"></a>05073       oss.close();
<a name="l05074"></a>05074       cout &lt;&lt; <span class="stringliteral">&quot;Total variation distance output to &quot;</span> &lt;&lt; FileName &lt;&lt; endl;
<a name="l05075"></a>05075 
<a name="l05076"></a>05076       <span class="keywordflow">if</span> (cancontinue &amp;&amp; (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>)) {
<a name="l05077"></a>05077             <span class="comment">// log the leaf levels line</span>
<a name="l05078"></a>05078             <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aca69edc461799f9d867d7eea6cb76f8e">getLeafLevelsString</a>());
<a name="l05079"></a>05079       }
<a name="l05080"></a>05080 
<a name="l05081"></a>05081         <span class="comment">// EMPSums will have been adjusted during the splitting process</span>
<a name="l05082"></a>05082    }
<a name="l05083"></a>05083 
<a name="l05084"></a>05084     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l05085"></a>05085         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l05086"></a>05086         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory iin priority split.  Orginal error: &quot;</span>
<a name="l05087"></a>05087                                     + oldmsg;
<a name="l05088"></a>05088         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l05089"></a>05089         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l05090"></a>05090     }
<a name="l05091"></a>05091     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l05092"></a>05092         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l05093"></a>05093         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error in priority split.  Orginal error: &quot;</span>
<a name="l05094"></a>05094                                     + oldmsg;
<a name="l05095"></a>05095         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l05096"></a>05096         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l05097"></a>05097     }
<a name="l05098"></a>05098     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l05099"></a>05099         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l05100"></a>05100         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in priority split.  Orginal error: &quot;</span>
<a name="l05101"></a>05101                                     + oldmsg;
<a name="l05102"></a>05102         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l05103"></a>05103         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l05104"></a>05104     }
<a name="l05105"></a>05105     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l05106"></a>05106         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l05107"></a>05107         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in priority split.  Orginal error: &quot;</span> + oldmsg;
<a name="l05108"></a>05108         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l05109"></a>05109         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l05110"></a>05110     }
<a name="l05111"></a>05111 
<a name="l05112"></a>05112     <span class="keywordflow">return</span> (cancontinue);
<a name="l05113"></a>05113 }
<a name="l05114"></a>05114 
<a name="l05115"></a>05115 <span class="comment">//new</span>
<a name="l05116"></a>05116 <span class="comment">//gloria addition</span>
<a name="l05117"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ab4acf5596236ac6fa272cb3abe80bee8">05117</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">AdaptiveHistogram::prioritySplitMCMC</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest,
<a name="l05118"></a>05118                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l05119"></a>05119                             <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l05120"></a>05120                             <span class="keywordtype">size_t</span> minChildPoints, 
<a name="l05121"></a>05121                             <span class="keywordtype">double</span> minVolB, 
<a name="l05122"></a>05122                             <span class="keywordtype">size_t</span> maxLeafNodes, 
<a name="l05123"></a>05123                             std::vector&lt;real&gt;&amp; Posterior,
<a name="l05124"></a>05124                             <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>&amp; logPrior)
<a name="l05125"></a>05125 {
<a name="l05126"></a>05126     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l05127"></a>05127     gsl_rng * rgsl = NULL;
<a name="l05128"></a>05128 
<a name="l05129"></a>05129     <span class="keywordflow">try</span> {
<a name="l05130"></a>05130         <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l05131"></a>05131         <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l05132"></a>05132         <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l05133"></a>05133         <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l05134"></a>05134         gsl_rng_env_setup();
<a name="l05135"></a>05135         tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l05136"></a>05136         rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l05137"></a>05137 
<a name="l05138"></a>05138         retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">prioritySplitMCMC</a>(compTest, he, logging,
<a name="l05139"></a>05139                                     minChildPoints, minVolB, rgsl, maxLeafNodes,
<a name="l05140"></a>05140                                     Posterior, logPrior);
<a name="l05141"></a>05141         gsl_rng_free (rgsl);
<a name="l05142"></a>05142     }
<a name="l05143"></a>05143 
<a name="l05144"></a>05144     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l05145"></a>05145         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l05146"></a>05146         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l05147"></a>05147         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory in priority split.  Orginal error: &quot;</span>
<a name="l05148"></a>05148                                      + oldmsg;
<a name="l05149"></a>05149         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l05150"></a>05150         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l05151"></a>05151     }
<a name="l05152"></a>05152     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l05153"></a>05153         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l05154"></a>05154         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l05155"></a>05155         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error in priority split.  Orginal error: &quot;</span>
<a name="l05156"></a>05156                                     + oldmsg;
<a name="l05157"></a>05157         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l05158"></a>05158         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l05159"></a>05159     }
<a name="l05160"></a>05160     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l05161"></a>05161         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l05162"></a>05162         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l05163"></a>05163         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in priority split.  Orginal error: &quot;</span>
<a name="l05164"></a>05164                                     + oldmsg;
<a name="l05165"></a>05165         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l05166"></a>05166         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l05167"></a>05167     }
<a name="l05168"></a>05168     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l05169"></a>05169         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l05170"></a>05170         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l05171"></a>05171         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in priority split.  Orginal error: &quot;</span> + oldmsg;
<a name="l05172"></a>05172         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l05173"></a>05173         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l05174"></a>05174     }
<a name="l05175"></a>05175 
<a name="l05176"></a>05176     <span class="keywordflow">return</span> retValue;
<a name="l05177"></a>05177 }
<a name="l05178"></a>05178 
<a name="l05179"></a>05179 
<a name="l05180"></a>05180 <span class="comment">// gat41</span>
<a name="l05181"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a5e8e56baf547e75fe1701b455fa92efb">05181</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afa5a767156398a6d29db12fcbf0a46c7">AdaptiveHistogram::prioritySplitMCMC</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest,
<a name="l05182"></a>05182                                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l05183"></a>05183                                 <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l05184"></a>05184                                 <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB,
<a name="l05185"></a>05185                                 gsl_rng * rgsl, <span class="keywordtype">size_t</span> maxLeafNodes,
<a name="l05186"></a>05186                                 std::vector&lt;real&gt;&amp; Posterior,
<a name="l05187"></a>05187                                 <a class="code" href="classsubpavings_1_1LogMCMCPrior.shtml" title="Abstract class for MCMC priors.">LogMCMCPrior</a>&amp; logPrior)
<a name="l05188"></a>05188 {   
<a name="l05189"></a>05189     <span class="keywordtype">bool</span> cancontinue = <span class="keyword">false</span>;
<a name="l05190"></a>05190     <span class="keywordtype">bool</span> TooManyLeaves = <span class="keyword">false</span>;
<a name="l05191"></a>05191     
<a name="l05192"></a>05192     real deltaL = 0;
<a name="l05193"></a>05193     real deltaP = 0;
<a name="l05194"></a>05194     <span class="keywordtype">int</span> removeBox = 0;
<a name="l05195"></a>05195     
<a name="l05196"></a>05196     <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>) {
<a name="l05197"></a>05197             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No root paving for prioritySplit&quot;</span>);
<a name="l05198"></a>05198     }
<a name="l05199"></a>05199 
<a name="l05200"></a>05200     <span class="keywordflow">try</span> {
<a name="l05201"></a>05201 
<a name="l05202"></a>05202         <span class="keywordtype">bool</span> volChecking = <span class="keyword">false</span>; <span class="comment">// record if we need to check volume before split</span>
<a name="l05203"></a>05203         <span class="keywordtype">double</span> minVol = -1.0; <span class="comment">// minimum volume (used only if checking)</span>
<a name="l05204"></a>05204         <span class="keywordtype">size_t</span> n; <span class="comment">// for number of points in histogram</span>
<a name="l05205"></a>05205 
<a name="l05206"></a>05206         <span class="keywordtype">int</span> i = 0;
<a name="l05207"></a>05207         std::string baseFileName = <span class="stringliteral">&quot;&quot;</span>;
<a name="l05208"></a>05208         std::string s = <span class="stringliteral">&quot;&quot;</span>;
<a name="l05209"></a>05209         <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l05210"></a>05210             <span class="comment">// pass to log output to keep track of splits</span>
<a name="l05211"></a>05211             baseFileName = <span class="stringliteral">&quot;pqOutput&quot;</span>;
<a name="l05212"></a>05212             s = <a class="code" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609" title="Construct a unique filename from base and timestamp number.">getUniqueFilename</a>(baseFileName);
<a name="l05213"></a>05213         }
<a name="l05214"></a>05214 
<a name="l05215"></a>05215         <span class="comment">// make volChecking true if minVolB is &gt; 0.0</span>
<a name="l05216"></a>05216         <span class="keywordflow">if</span> (minVolB &gt; 0.0) {
<a name="l05217"></a>05217             <span class="comment">// minimum volume of a splittable node is minVolB(log n)^2/n</span>
<a name="l05218"></a>05218             minVol = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a0ef2d251d61753086a358bdd9bda057f" title="get the value of the minimum volume for a splittable node.">getMinVol</a>(minVolB);
<a name="l05219"></a>05219            volChecking = <span class="keyword">true</span>;
<a name="l05220"></a>05220         }
<a name="l05221"></a>05221 
<a name="l05222"></a>05222         <span class="comment">// a multiset for the queue (key values are not necessarily unique)</span>
<a name="l05223"></a>05223         multiset&lt;SPSnode*, MyCompare&gt; pq((<a class="code" href="classMyCompare.shtml">MyCompare</a>(compTest)));
<a name="l05224"></a>05224 
<a name="l05225"></a>05225         n = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>(); <span class="comment">// number of points in histogram</span>
<a name="l05226"></a>05226 
<a name="l05227"></a>05227         <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l05228"></a>05228              <span class="comment">// Start log file with filename and timestamp</span>
<a name="l05229"></a>05229             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad847a4add7e72eac564daa44835dba5b" title="Opening line of a txt log file.">outputLogStart</a>(s);
<a name="l05230"></a>05230             <span class="comment">// log the current state of the histogram</span>
<a name="l05231"></a>05231             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">outputLog</a>(s, i);
<a name="l05232"></a>05232             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a602b8b4081d3cae20308aa6644a83fa9" title="Add AIC EMP score to log file.">outputLogEMPAIC</a>(s); <span class="comment">// add AIC scores</span>
<a name="l05233"></a>05233             i++;
<a name="l05234"></a>05234         }
<a name="l05235"></a>05235 
<a name="l05236"></a>05236         <span class="comment">// put nodes into the starting set IF they meet minVol test AND IF either</span>
<a name="l05237"></a>05237         <span class="comment">// there are enough points in the whole node</span>
<a name="l05238"></a>05238                 <span class="comment">// and minChildCountIfSplit is 0 (ie all points go to one child)</span>
<a name="l05239"></a>05239         <span class="comment">// or the minChildCountIfSplit test passed</span>
<a name="l05240"></a>05240 
<a name="l05241"></a>05241         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l05242"></a>05242             <span class="comment">// check to insert a copy of the rootPaving pointer into the set</span>
<a name="l05243"></a>05243             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>, volChecking, minVol,
<a name="l05244"></a>05244                 minChildPoints)) {
<a name="l05245"></a>05245                     pq.insert(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>);
<a name="l05246"></a>05246             }
<a name="l05247"></a>05247         }
<a name="l05248"></a>05248         <span class="keywordflow">else</span> { <span class="comment">// root is not a leaf</span>
<a name="l05249"></a>05249             <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
<a name="l05250"></a>05250             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l05251"></a>05251             <span class="comment">// check to insert each of the leaves into the set</span>
<a name="l05252"></a>05252             <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> sit;
<a name="l05253"></a>05253             <span class="keywordflow">for</span> (sit = leaves.begin(); sit &lt; leaves.end(); sit++) {
<a name="l05254"></a>05254                 <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>((*sit), volChecking, minVol,
<a name="l05255"></a>05255                 minChildPoints)) {
<a name="l05256"></a>05256                     pq.insert(*sit);
<a name="l05257"></a>05257                 }
<a name="l05258"></a>05258             }
<a name="l05259"></a>05259         }
<a name="l05260"></a>05260 
<a name="l05261"></a>05261       <span class="comment">// get the log-likelihood</span>
<a name="l05262"></a>05262       <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves; <span class="comment">// set up empty container for leaf node pointers</span>
<a name="l05263"></a>05263       <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> it; <span class="comment">// and an iterator over the container</span>
<a name="l05264"></a>05264       <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves); <span class="comment">// fill the container</span>
<a name="l05265"></a>05265         <span class="keywordflow">for</span>(it = leaves.begin(); it &lt; leaves.end(); it++) {
<a name="l05266"></a>05266         <span class="comment">//cout &lt;&lt; (*it)-&gt;getNodeName() &lt;&lt; &quot;\t&quot; &lt;&lt; (*it)-&gt;getCounter() &lt;&lt; endl; </span>
<a name="l05267"></a>05267         deltaL += (*it)-&gt;getLogLik(n);
<a name="l05268"></a>05268       }
<a name="l05269"></a>05269 
<a name="l05270"></a>05270       <span class="comment">// use the prior distribution object to find the prior </span>
<a name="l05271"></a>05271       deltaP = logPrior(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>()-1);
<a name="l05272"></a>05272       <span class="comment">// posterior is proportional to likelihood * prior</span>
<a name="l05273"></a>05273       real deltaPi = deltaL + deltaP;
<a name="l05274"></a>05274       <span class="comment">// push back into vector</span>
<a name="l05275"></a>05275       Posterior.push_back(deltaPi);
<a name="l05276"></a>05276 
<a name="l05277"></a>05277       cancontinue = (!pq.empty());
<a name="l05278"></a>05278         
<a name="l05279"></a>05279         <span class="keywordtype">bool</span> bigEnough = cancontinue;
<a name="l05280"></a>05280         TooManyLeaves = (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &gt; maxLeafNodes);
<a name="l05281"></a>05281 
<a name="l05282"></a>05282         <span class="keywordflow">if</span>(!cancontinue) {
<a name="l05283"></a>05283             std::cout &lt;&lt; <span class="stringliteral">&quot;No splittable leaves to split - aborting&quot;</span> &lt;&lt; std::endl;
<a name="l05284"></a>05284         }
<a name="l05285"></a>05285 
<a name="l05286"></a>05286         <span class="comment">// split until the HistEvalObj he () operator returns true</span>
<a name="l05287"></a>05287         <span class="comment">// we only put splittable nodes into the set, so we don&#39;t have to check</span>
<a name="l05288"></a>05288         <span class="comment">// that they are splittable when we take them out</span>
<a name="l05289"></a>05289         <span class="keywordflow">while</span> (bigEnough &amp;&amp; !he(<span class="keyword">this</span>) &amp;&amp; !TooManyLeaves) {
<a name="l05290"></a>05290             
<a name="l05291"></a>05291             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* largest = *(pq.rbegin ()); <span class="comment">// the last largest in the set</span>
<a name="l05292"></a>05292             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* chosenLargest;
<a name="l05293"></a>05293             
<a name="l05294"></a>05294             <span class="comment">// find if there are any more equal to largest around</span>
<a name="l05295"></a>05295             multiset&lt;SPSnode*, MyCompare&gt;::iterator mit;
<a name="l05296"></a>05296             pair&lt;multiset&lt;SPSnode*, MyCompare&gt;::iterator,
<a name="l05297"></a>05297                 multiset&lt;SPSnode*, MyCompare&gt;::iterator&gt; equalLargest;
<a name="l05298"></a>05298 
<a name="l05299"></a>05299             equalLargest = pq.equal_range(largest); <span class="comment">// everything that = largest</span>
<a name="l05300"></a>05300             <span class="keywordtype">size_t</span> numberLargest = pq.count(largest); <span class="comment">// number of =largest</span>
<a name="l05301"></a>05301 
<a name="l05302"></a>05302             <span class="keywordflow">if</span> (numberLargest &gt; 1) {
<a name="l05303"></a>05303 
<a name="l05304"></a>05304                 <span class="comment">// draw a random number in [0,1)</span>
<a name="l05305"></a>05305                 <span class="keywordtype">double</span> rand = gsl_rng_uniform(rgsl);
<a name="l05306"></a>05306 
<a name="l05307"></a>05307                 real sum = 0.0;
<a name="l05308"></a>05308 
<a name="l05309"></a>05309                 <span class="comment">// random selection of the =largest node to chose</span>
<a name="l05310"></a>05310                 <span class="keywordflow">for</span> (mit=equalLargest.first; mit!=equalLargest.second; ++mit) {
<a name="l05311"></a>05311 
<a name="l05312"></a>05312                     sum += 1.0/(1.0*numberLargest);
<a name="l05313"></a>05313                     <span class="keywordflow">if</span> (rand &lt; sum) {
<a name="l05314"></a>05314 
<a name="l05315"></a>05315                         <span class="keywordflow">break</span>;
<a name="l05316"></a>05316                     }
<a name="l05317"></a>05317                 }
<a name="l05318"></a>05318                 chosenLargest = *(mit); <span class="comment">// the chosen largest in the set</span>
<a name="l05319"></a>05319                 pq.erase(mit);<span class="comment">// take the iterator to chosen largest out of the set</span>
<a name="l05320"></a>05320             }
<a name="l05321"></a>05321 
<a name="l05322"></a>05322             <span class="keywordflow">else</span> {
<a name="l05323"></a>05323 
<a name="l05324"></a>05324                 chosenLargest = *(pq.rbegin ()); <span class="comment">// the only largest</span>
<a name="l05325"></a>05325                 multiset&lt;SPSnode*, MyCompare&gt;::iterator it = pq.end();
<a name="l05326"></a>05326                 it--;
<a name="l05327"></a>05327                 pq.erase(it);<span class="comment">// take this largest out of the set</span>
<a name="l05328"></a>05328             }
<a name="l05329"></a>05329 
<a name="l05330"></a>05330             <span class="comment">// accumulate the changes in scaled EMP sums that will result</span>
<a name="l05331"></a>05331             <span class="comment">// from this expansion</span>
<a name="l05332"></a>05332             <span class="comment">//updateScaledEMPSumCOPERR(chosenLargest-&gt;getSplitChangeEMPCOPERR(n));</span>
<a name="l05333"></a>05333             <span class="comment">//updateScaledEMPSumAIC(chosenLargest-&gt;getSplitChangeEMPAIC());</span>
<a name="l05334"></a>05334 
<a name="l05335"></a>05335             <span class="comment">// split the biggest one and divide up its data</span>
<a name="l05336"></a>05336              <a class="code" href="namespacesubpavings.shtml#a6bce1a57598248196dd6b3e6010e724a" title="Expand a leaf node to have two child nodes.">Expand</a>(chosenLargest);
<a name="l05337"></a>05337              
<a name="l05338"></a>05338         <span class="comment">// get the log-likelihood for the children node </span>
<a name="l05339"></a>05339         real changeL = chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a45f10ce1371120a0c1be29fa0ad8bac5" title="Get this leaf node&#39;s contribution to loglikelihood.">getLogLik</a>(n);
<a name="l05340"></a>05340         changeL += chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>()-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a45f10ce1371120a0c1be29fa0ad8bac5" title="Get this leaf node&#39;s contribution to loglikelihood.">getLogLik</a>(n);
<a name="l05341"></a>05341 
<a name="l05342"></a>05342         <span class="comment">// compute the likelihood * prior to get posterior</span>
<a name="l05343"></a>05343         <span class="keywordtype">size_t</span> realNumLeaves = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>(); 
<a name="l05344"></a>05344         
<a name="l05345"></a>05345         <span class="comment">//cout &lt;&lt; &quot;---------------------------------------&quot; &lt;&lt; endl;</span>
<a name="l05346"></a>05346         <span class="comment">//cout &lt;&lt; &quot;Number of leaves &quot; &lt;&lt; realNumLeaves &lt;&lt; endl;</span>
<a name="l05347"></a>05347 
<a name="l05348"></a>05348         <span class="comment">// log likelihood</span>
<a name="l05349"></a>05349         deltaL = deltaL - chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a45f10ce1371120a0c1be29fa0ad8bac5" title="Get this leaf node&#39;s contribution to loglikelihood.">getLogLik</a>(n) + changeL; 
<a name="l05350"></a>05350 
<a name="l05351"></a>05351         <span class="comment">// use the prior distribution object to find the prior </span>
<a name="l05352"></a>05352         deltaP = logPrior(realNumLeaves-1);
<a name="l05353"></a>05353         
<a name="l05354"></a>05354         <span class="comment">//cout &lt;&lt; deltaL &lt;&lt; &quot;\t&quot; &lt;&lt; deltaP &lt;&lt; endl;</span>
<a name="l05355"></a>05355         
<a name="l05356"></a>05356         <span class="comment">// posterior is proportional to likelihood * prior</span>
<a name="l05357"></a>05357         real deltaPi = deltaL + deltaP;
<a name="l05358"></a>05358         
<a name="l05359"></a>05359         <span class="comment">// push back into vector</span>
<a name="l05360"></a>05360         Posterior.push_back(deltaPi);
<a name="l05361"></a>05361 
<a name="l05362"></a>05362             <span class="comment">// add the new child names to the creation string</span>
<a name="l05363"></a>05363             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a> += chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l05364"></a>05364 
<a name="l05365"></a>05365             <span class="comment">// but only put the children into the container if they can be</span>
<a name="l05366"></a>05366             <span class="comment">// split, which means IF the child meets the min vol test AND IF</span>
<a name="l05367"></a>05367             <span class="comment">// either there are enough points in the whole child and</span>
<a name="l05368"></a>05368                 <span class="comment">// the child&#39;s minChildCountIfSplit is 0 (ie all points go to</span>
<a name="l05369"></a>05369                 <span class="comment">// one child of the child)</span>
<a name="l05370"></a>05370             <span class="comment">// or the child&#39;s minChildCountIfSplit test is passed</span>
<a name="l05371"></a>05371 
<a name="l05372"></a>05372             <span class="keywordflow">if</span> (((chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>())-&gt;getCounter() &gt; removeBox) &amp;&amp;
<a name="l05373"></a>05373              <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>(),
<a name="l05374"></a>05374                   volChecking, minVol, minChildPoints)) {
<a name="l05375"></a>05375                 <span class="comment">// insert the new left child into the multiset</span>
<a name="l05376"></a>05376                 
<a name="l05377"></a>05377                 pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l05378"></a>05378             }
<a name="l05379"></a>05379 
<a name="l05380"></a>05380             <span class="keywordflow">if</span> ( ((chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>())-&gt;getCounter() &gt; removeBox) &amp;&amp;
<a name="l05381"></a>05381                  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>(),
<a name="l05382"></a>05382                     volChecking, minVol, minChildPoints)) {
<a name="l05383"></a>05383                 <span class="comment">// insert the new right child into the multiset</span>
<a name="l05384"></a>05384                
<a name="l05385"></a>05385                 pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l05386"></a>05386             }
<a name="l05387"></a>05387 
<a name="l05388"></a>05388             <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l05389"></a>05389                 <span class="comment">// To add current state of histogram to log file</span>
<a name="l05390"></a>05390                 <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">outputLog</a>(s, i);
<a name="l05391"></a>05391                 <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a602b8b4081d3cae20308aa6644a83fa9" title="Add AIC EMP score to log file.">outputLogEMPAIC</a>(s); <span class="comment">// add AIC scores</span>
<a name="l05392"></a>05392                 i++;
<a name="l05393"></a>05393             }
<a name="l05394"></a>05394 
<a name="l05395"></a>05395             bigEnough = (!pq.empty());
<a name="l05396"></a>05396             <span class="keywordflow">if</span> (!bigEnough)
<a name="l05397"></a>05397                 std::cout &lt;&lt; <span class="stringliteral">&quot;Terminated splitting: no splittable nodes left&quot;</span>
<a name="l05398"></a>05398                     &lt;&lt; std::endl;
<a name="l05399"></a>05399         
<a name="l05400"></a>05400         
<a name="l05401"></a>05401         <span class="comment">// check if number of leaf nodes in subpaving &gt; maxLeafNodes</span>
<a name="l05402"></a>05402         <span class="comment">// maximum number of leaf nodes allowed</span>
<a name="l05403"></a>05403         <span class="comment">//n^B, A+B &gt; 1, 0  &lt; A &lt; 1, 0 &lt; B &lt; 1 - refer Prop. 1 in PQ paper</span>
<a name="l05404"></a>05404         TooManyLeaves = (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &gt; maxLeafNodes);
<a name="l05405"></a>05405         <span class="keywordflow">if</span> ( TooManyLeaves) {
<a name="l05406"></a>05406           std::cout &lt;&lt; <span class="stringliteral">&quot;Terminated splitting: maximum number of leaf nodes = &quot;</span>&lt;&lt; maxLeafNodes &lt;&lt; <span class="stringliteral">&quot; reached&quot;</span>
<a name="l05407"></a>05407                           &lt;&lt; std::endl;
<a name="l05408"></a>05408         }
<a name="l05409"></a>05409       
<a name="l05410"></a>05410       }
<a name="l05411"></a>05411           
<a name="l05412"></a>05412 
<a name="l05413"></a>05413           
<a name="l05414"></a>05414           <span class="keywordflow">if</span> (cancontinue &amp;&amp; (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>)) {
<a name="l05415"></a>05415             <span class="comment">// log the leaf levels line</span>
<a name="l05416"></a>05416             <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aca69edc461799f9d867d7eea6cb76f8e">getLeafLevelsString</a>());
<a name="l05417"></a>05417           }
<a name="l05418"></a>05418 
<a name="l05419"></a>05419           <span class="comment">// EMPSums will have been adjusted during the splitting process</span>
<a name="l05420"></a>05420    }
<a name="l05421"></a>05421 
<a name="l05422"></a>05422     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l05423"></a>05423         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l05424"></a>05424         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory iin priority split.  Orginal error: &quot;</span>
<a name="l05425"></a>05425                                     + oldmsg;
<a name="l05426"></a>05426         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l05427"></a>05427         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l05428"></a>05428     }
<a name="l05429"></a>05429     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l05430"></a>05430         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l05431"></a>05431         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error in priority split.  Orginal error: &quot;</span>
<a name="l05432"></a>05432                                     + oldmsg;
<a name="l05433"></a>05433         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l05434"></a>05434         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l05435"></a>05435     }
<a name="l05436"></a>05436     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l05437"></a>05437         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l05438"></a>05438         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in priority split.  Orginal error: &quot;</span>
<a name="l05439"></a>05439                                     + oldmsg;
<a name="l05440"></a>05440         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l05441"></a>05441         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l05442"></a>05442     }
<a name="l05443"></a>05443     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l05444"></a>05444         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l05445"></a>05445         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in priority split.  Orginal error: &quot;</span> + oldmsg;
<a name="l05446"></a>05446         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l05447"></a>05447         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l05448"></a>05448     }
<a name="l05449"></a>05449 
<a name="l05450"></a>05450     <span class="keywordflow">return</span> (cancontinue);
<a name="l05451"></a>05451 }
<a name="l05452"></a>05452 
<a name="l05453"></a>05453 <span class="comment">//new</span>
<a name="l05454"></a>05454 <span class="comment">//gloria addition</span>
<a name="l05455"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afee0931f38335b1d797680a0c9b6cfe5">05455</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1dffa971cfc56ec37449ce285a596365">AdaptiveHistogram::prioritySplitGet</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest,
<a name="l05456"></a>05456                             <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l05457"></a>05457                             <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l05458"></a>05458                             <span class="keywordtype">size_t</span> minChildPoints, 
<a name="l05459"></a>05459                             <span class="keywordtype">double</span> minVolB, 
<a name="l05460"></a>05460                             <span class="keywordtype">size_t</span> maxLeafNodes, 
<a name="l05461"></a>05461                           std::vector&lt;AdaptiveHistogram&gt;&amp; <a class="code" href="CatalanCoeff_8hpp.shtml#ac525a0f6dc3802f95ee1ea51f9be6826">States</a>, 
<a name="l05462"></a>05462                           std::vector&lt;size_t&gt;&amp; Sampled)
<a name="l05463"></a>05463 {
<a name="l05464"></a>05464     <span class="keywordtype">bool</span> retValue = <span class="keyword">false</span>;
<a name="l05465"></a>05465     gsl_rng * rgsl = NULL;
<a name="l05466"></a>05466 
<a name="l05467"></a>05467     <span class="keywordflow">try</span> {
<a name="l05468"></a>05468         <span class="comment">// set up a random number generator for uniform rvs</span>
<a name="l05469"></a>05469         <span class="keyword">const</span> gsl_rng_type * tgsl;
<a name="l05470"></a>05470         <span class="comment">// set the library variables *gsl_rng_default and</span>
<a name="l05471"></a>05471         <span class="comment">// gsl_rng_default_seed to default environmental vars</span>
<a name="l05472"></a>05472         gsl_rng_env_setup();
<a name="l05473"></a>05473         tgsl = gsl_rng_default; <span class="comment">// make tgsl the default type</span>
<a name="l05474"></a>05474         rgsl = gsl_rng_alloc (tgsl); <span class="comment">// set up with default seed</span>
<a name="l05475"></a>05475 
<a name="l05476"></a>05476         retValue = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1dffa971cfc56ec37449ce285a596365">prioritySplitGet</a>(compTest, he, logging,
<a name="l05477"></a>05477                                     minChildPoints, minVolB, rgsl, maxLeafNodes,
<a name="l05478"></a>05478                                     States, Sampled);
<a name="l05479"></a>05479         gsl_rng_free (rgsl);
<a name="l05480"></a>05480     }
<a name="l05481"></a>05481 
<a name="l05482"></a>05482     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l05483"></a>05483         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l05484"></a>05484         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l05485"></a>05485         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory in priority split.  Orginal error: &quot;</span>
<a name="l05486"></a>05486                                      + oldmsg;
<a name="l05487"></a>05487         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l05488"></a>05488         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l05489"></a>05489     }
<a name="l05490"></a>05490     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l05491"></a>05491         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l05492"></a>05492         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l05493"></a>05493         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error in priority split.  Orginal error: &quot;</span>
<a name="l05494"></a>05494                                     + oldmsg;
<a name="l05495"></a>05495         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l05496"></a>05496         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l05497"></a>05497     }
<a name="l05498"></a>05498     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l05499"></a>05499         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l05500"></a>05500         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l05501"></a>05501         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in priority split.  Orginal error: &quot;</span>
<a name="l05502"></a>05502                                     + oldmsg;
<a name="l05503"></a>05503         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l05504"></a>05504         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l05505"></a>05505     }
<a name="l05506"></a>05506     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l05507"></a>05507         <span class="keywordflow">if</span> (NULL != rgsl) gsl_rng_free(rgsl); <span class="comment">// free the random number generator</span>
<a name="l05508"></a>05508         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l05509"></a>05509         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in priority split.  Orginal error: &quot;</span> + oldmsg;
<a name="l05510"></a>05510         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l05511"></a>05511         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l05512"></a>05512     }
<a name="l05513"></a>05513 
<a name="l05514"></a>05514     <span class="keywordflow">return</span> retValue;
<a name="l05515"></a>05515 }
<a name="l05516"></a>05516 
<a name="l05517"></a>05517 
<a name="l05518"></a>05518 <span class="comment">// gat41</span>
<a name="l05519"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a36a5db0649767e9045cf985f52f985ca">05519</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1dffa971cfc56ec37449ce285a596365">AdaptiveHistogram::prioritySplitGet</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1NodeCompObj.shtml" title="A Virtual class providing a way to compare spsnodes.">NodeCompObj</a>&amp; compTest,
<a name="l05520"></a>05520                                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistEvalObj.shtml" title="A Virtual class providing a way to stop histogram changes.">HistEvalObj</a>&amp; he,
<a name="l05521"></a>05521                                 <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089" title="Define a type LOGGING_LEVEL.">LOGGING_LEVEL</a> logging,
<a name="l05522"></a>05522                                 <span class="keywordtype">size_t</span> minChildPoints, <span class="keywordtype">double</span> minVolB,
<a name="l05523"></a>05523                                 gsl_rng * rgsl, <span class="keywordtype">size_t</span> maxLeafNodes,
<a name="l05524"></a>05524                       std::vector&lt;AdaptiveHistogram&gt;&amp; <a class="code" href="CatalanCoeff_8hpp.shtml#ac525a0f6dc3802f95ee1ea51f9be6826">States</a>, 
<a name="l05525"></a>05525                                 std::vector&lt;size_t&gt;&amp; Sampled)
<a name="l05526"></a>05526 {   
<a name="l05527"></a>05527     <span class="keywordtype">bool</span> cancontinue = <span class="keyword">false</span>;
<a name="l05528"></a>05528     <span class="keywordtype">bool</span> TooManyLeaves = <span class="keyword">false</span>;
<a name="l05529"></a>05529     
<a name="l05530"></a>05530     <span class="keywordtype">int</span> removeBox = 0;
<a name="l05531"></a>05531     
<a name="l05532"></a>05532     <span class="keywordflow">if</span> (NULL == <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>) {
<a name="l05533"></a>05533             <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(<span class="stringliteral">&quot;No root paving for prioritySplit&quot;</span>);
<a name="l05534"></a>05534     }
<a name="l05535"></a>05535 
<a name="l05536"></a>05536     <span class="keywordflow">try</span> {
<a name="l05537"></a>05537 
<a name="l05538"></a>05538         <span class="keywordtype">bool</span> volChecking = <span class="keyword">false</span>; <span class="comment">// record if we need to check volume before split</span>
<a name="l05539"></a>05539         <span class="keywordtype">double</span> minVol = -1.0; <span class="comment">// minimum volume (used only if checking)</span>
<a name="l05540"></a>05540         <span class="keywordtype">size_t</span> n; <span class="comment">// for number of points in histogram</span>
<a name="l05541"></a>05541 
<a name="l05542"></a>05542         <span class="keywordtype">int</span> i = 0;
<a name="l05543"></a>05543         std::string baseFileName = <span class="stringliteral">&quot;&quot;</span>;
<a name="l05544"></a>05544         std::string s = <span class="stringliteral">&quot;&quot;</span>;
<a name="l05545"></a>05545         <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l05546"></a>05546             <span class="comment">// pass to log output to keep track of splits</span>
<a name="l05547"></a>05547             baseFileName = <span class="stringliteral">&quot;pqOutput&quot;</span>;
<a name="l05548"></a>05548             s = <a class="code" href="namespacesubpavings.shtml#ae23d4a36711d5b768cacab3fdb72b609" title="Construct a unique filename from base and timestamp number.">getUniqueFilename</a>(baseFileName);
<a name="l05549"></a>05549         }
<a name="l05550"></a>05550 
<a name="l05551"></a>05551         <span class="comment">// make volChecking true if minVolB is &gt; 0.0</span>
<a name="l05552"></a>05552         <span class="keywordflow">if</span> (minVolB &gt; 0.0) {
<a name="l05553"></a>05553             <span class="comment">// minimum volume of a splittable node is minVolB(log n)^2/n</span>
<a name="l05554"></a>05554             minVol = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a0ef2d251d61753086a358bdd9bda057f" title="get the value of the minimum volume for a splittable node.">getMinVol</a>(minVolB);
<a name="l05555"></a>05555            volChecking = <span class="keyword">true</span>;
<a name="l05556"></a>05556         }
<a name="l05557"></a>05557 
<a name="l05558"></a>05558         <span class="comment">// a multiset for the queue (key values are not necessarily unique)</span>
<a name="l05559"></a>05559         multiset&lt;SPSnode*, MyCompare&gt; pq((<a class="code" href="classMyCompare.shtml">MyCompare</a>(compTest)));
<a name="l05560"></a>05560 
<a name="l05561"></a>05561         n = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#ab4bee06d1b314b064d88842ba720d4a3" title="Accessor for the counter.">getCounter</a>(); <span class="comment">// number of points in histogram</span>
<a name="l05562"></a>05562 
<a name="l05563"></a>05563         <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l05564"></a>05564              <span class="comment">// Start log file with filename and timestamp</span>
<a name="l05565"></a>05565             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad847a4add7e72eac564daa44835dba5b" title="Opening line of a txt log file.">outputLogStart</a>(s);
<a name="l05566"></a>05566             <span class="comment">// log the current state of the histogram</span>
<a name="l05567"></a>05567             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">outputLog</a>(s, i);
<a name="l05568"></a>05568             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a602b8b4081d3cae20308aa6644a83fa9" title="Add AIC EMP score to log file.">outputLogEMPAIC</a>(s); <span class="comment">// add AIC scores</span>
<a name="l05569"></a>05569             i++;
<a name="l05570"></a>05570         }
<a name="l05571"></a>05571 
<a name="l05572"></a>05572         <span class="comment">// put nodes into the starting set IF they meet minVol test AND IF either</span>
<a name="l05573"></a>05573         <span class="comment">// there are enough points in the whole node</span>
<a name="l05574"></a>05574                 <span class="comment">// and minChildCountIfSplit is 0 (ie all points go to one child)</span>
<a name="l05575"></a>05575         <span class="comment">// or the minChildCountIfSplit test passed</span>
<a name="l05576"></a>05576 
<a name="l05577"></a>05577         <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#af5ad3b1f3ca82ba135c491e99c53eda7" title="Check if this SPnode is a leaf.">isLeaf</a>()) {
<a name="l05578"></a>05578             <span class="comment">// check to insert a copy of the rootPaving pointer into the set</span>
<a name="l05579"></a>05579             <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>, volChecking, minVol,
<a name="l05580"></a>05580                 minChildPoints)) {
<a name="l05581"></a>05581                     pq.insert(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>);
<a name="l05582"></a>05582             }
<a name="l05583"></a>05583         }
<a name="l05584"></a>05584         <span class="keywordflow">else</span> { <span class="comment">// root is not a leaf</span>
<a name="l05585"></a>05585             <a class="code" href="namespacesubpavings.shtml#ad23942a388da964ca7487e496d0f2923" title="Define type SPSnodePtrs as container of pointers to SPSnodes.">SPSnodePtrs</a> leaves;
<a name="l05586"></a>05586             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#a6a833240b503da0e2b640782e8671954" title="Return a reference to all descendent leaf nodes.">getLeaves</a>(leaves);
<a name="l05587"></a>05587             <span class="comment">// check to insert each of the leaves into the set</span>
<a name="l05588"></a>05588             <a class="code" href="namespacesubpavings.shtml#a3d06253195e32236cc10b1c2050073c9" title="Define type SPSnodePtrsItr as an iterator over SPSnodePtrs.">SPSnodePtrsItr</a> sit;
<a name="l05589"></a>05589             <span class="keywordflow">for</span> (sit = leaves.begin(); sit &lt; leaves.end(); sit++) {
<a name="l05590"></a>05590                 <span class="keywordflow">if</span> (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>((*sit), volChecking, minVol,
<a name="l05591"></a>05591                 minChildPoints)) {
<a name="l05592"></a>05592                     pq.insert(*sit);
<a name="l05593"></a>05593                 }
<a name="l05594"></a>05594             }
<a name="l05595"></a>05595         }
<a name="l05596"></a>05596 
<a name="l05597"></a>05597       cancontinue = (!pq.empty());
<a name="l05598"></a>05598         
<a name="l05599"></a>05599         <span class="keywordtype">bool</span> bigEnough = cancontinue;
<a name="l05600"></a>05600         TooManyLeaves = (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &gt; maxLeafNodes);
<a name="l05601"></a>05601 
<a name="l05602"></a>05602         <span class="keywordflow">if</span>(!cancontinue) {
<a name="l05603"></a>05603             std::cout &lt;&lt; <span class="stringliteral">&quot;No splittable leaves to split - aborting&quot;</span> &lt;&lt; std::endl;
<a name="l05604"></a>05604         }
<a name="l05605"></a>05605 
<a name="l05606"></a>05606         <span class="comment">// split until the HistEvalObj he () operator returns true</span>
<a name="l05607"></a>05607         <span class="comment">// we only put splittable nodes into the set, so we don&#39;t have to check</span>
<a name="l05608"></a>05608         <span class="comment">// that they are splittable when we take them out</span>
<a name="l05609"></a>05609         <span class="keywordflow">while</span> (bigEnough &amp;&amp; !he(<span class="keyword">this</span>) &amp;&amp; !TooManyLeaves) {
<a name="l05610"></a>05610             
<a name="l05611"></a>05611             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* largest = *(pq.rbegin ()); <span class="comment">// the last largest in the set</span>
<a name="l05612"></a>05612             <a class="code" href="classsubpavings_1_1SPSnode.shtml" title="A derived class based on SPnode for processing sample data.">SPSnode</a>* chosenLargest;
<a name="l05613"></a>05613             
<a name="l05614"></a>05614             <span class="comment">// find if there are any more equal to largest around</span>
<a name="l05615"></a>05615             multiset&lt;SPSnode*, MyCompare&gt;::iterator mit;
<a name="l05616"></a>05616             pair&lt;multiset&lt;SPSnode*, MyCompare&gt;::iterator,
<a name="l05617"></a>05617                 multiset&lt;SPSnode*, MyCompare&gt;::iterator&gt; equalLargest;
<a name="l05618"></a>05618 
<a name="l05619"></a>05619             equalLargest = pq.equal_range(largest); <span class="comment">// everything that = largest</span>
<a name="l05620"></a>05620             <span class="keywordtype">size_t</span> numberLargest = pq.count(largest); <span class="comment">// number of =largest</span>
<a name="l05621"></a>05621 
<a name="l05622"></a>05622             <span class="keywordflow">if</span> (numberLargest &gt; 1) {
<a name="l05623"></a>05623 
<a name="l05624"></a>05624                 <span class="comment">// draw a random number in [0,1)</span>
<a name="l05625"></a>05625                 <span class="keywordtype">double</span> rand = gsl_rng_uniform(rgsl);
<a name="l05626"></a>05626 
<a name="l05627"></a>05627                 real sum = 0.0;
<a name="l05628"></a>05628 
<a name="l05629"></a>05629                 <span class="comment">// random selection of the =largest node to chose</span>
<a name="l05630"></a>05630                 <span class="keywordflow">for</span> (mit=equalLargest.first; mit!=equalLargest.second; ++mit) {
<a name="l05631"></a>05631 
<a name="l05632"></a>05632                     sum += 1.0/(1.0*numberLargest);
<a name="l05633"></a>05633                     <span class="keywordflow">if</span> (rand &lt; sum) {
<a name="l05634"></a>05634 
<a name="l05635"></a>05635                         <span class="keywordflow">break</span>;
<a name="l05636"></a>05636                     }
<a name="l05637"></a>05637                 }
<a name="l05638"></a>05638                 chosenLargest = *(mit); <span class="comment">// the chosen largest in the set</span>
<a name="l05639"></a>05639                 pq.erase(mit);<span class="comment">// take the iterator to chosen largest out of the set</span>
<a name="l05640"></a>05640             }
<a name="l05641"></a>05641 
<a name="l05642"></a>05642             <span class="keywordflow">else</span> {
<a name="l05643"></a>05643 
<a name="l05644"></a>05644                 chosenLargest = *(pq.rbegin ()); <span class="comment">// the only largest</span>
<a name="l05645"></a>05645                 multiset&lt;SPSnode*, MyCompare&gt;::iterator it = pq.end();
<a name="l05646"></a>05646                 it--;
<a name="l05647"></a>05647                 pq.erase(it);<span class="comment">// take this largest out of the set</span>
<a name="l05648"></a>05648             }
<a name="l05649"></a>05649 
<a name="l05650"></a>05650             <span class="comment">// accumulate the changes in scaled EMP sums that will result</span>
<a name="l05651"></a>05651             <span class="comment">// from this expansion</span>
<a name="l05652"></a>05652             <span class="comment">//updateScaledEMPSumCOPERR(chosenLargest-&gt;getSplitChangeEMPCOPERR(n));</span>
<a name="l05653"></a>05653             <span class="comment">//updateScaledEMPSumAIC(chosenLargest-&gt;getSplitChangeEMPAIC());</span>
<a name="l05654"></a>05654 
<a name="l05655"></a>05655         <span class="comment">// collect the needed states here</span>
<a name="l05656"></a>05656         <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() == (Sampled[0]+1) ) {
<a name="l05657"></a>05657           States.push_back(*<span class="keyword">this</span>);
<a name="l05658"></a>05658         }
<a name="l05659"></a>05659         <span class="keywordflow">else</span> <span class="keywordflow">if</span> ( <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() == (Sampled[1]+1) ) {
<a name="l05660"></a>05660           States.push_back(*<span class="keyword">this</span>);
<a name="l05661"></a>05661           <span class="keywordflow">break</span>;
<a name="l05662"></a>05662         }
<a name="l05663"></a>05663 
<a name="l05664"></a>05664             <span class="comment">// split the biggest one and divide up its data</span>
<a name="l05665"></a>05665              <a class="code" href="namespacesubpavings.shtml#a6bce1a57598248196dd6b3e6010e724a" title="Expand a leaf node to have two child nodes.">Expand</a>(chosenLargest);
<a name="l05666"></a>05666 
<a name="l05667"></a>05667             <span class="comment">// add the new child names to the creation string</span>
<a name="l05668"></a>05668             <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a> += chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPnode.shtml#a0e7556ec8e2ba5174777c0f6b32573d5" title="Gets a string of child nodes names.">getChildNodeNames</a>();
<a name="l05669"></a>05669 
<a name="l05670"></a>05670             <span class="comment">// but only put the children into the container if they can be</span>
<a name="l05671"></a>05671             <span class="comment">// split, which means IF the child meets the min vol test AND IF</span>
<a name="l05672"></a>05672             <span class="comment">// either there are enough points in the whole child and</span>
<a name="l05673"></a>05673                 <span class="comment">// the child&#39;s minChildCountIfSplit is 0 (ie all points go to</span>
<a name="l05674"></a>05674                 <span class="comment">// one child of the child)</span>
<a name="l05675"></a>05675             <span class="comment">// or the child&#39;s minChildCountIfSplit test is passed</span>
<a name="l05676"></a>05676 
<a name="l05677"></a>05677             <span class="keywordflow">if</span> (((chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>())-&gt;getCounter() &gt; removeBox) &amp;&amp;
<a name="l05678"></a>05678              <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>(),
<a name="l05679"></a>05679                   volChecking, minVol, minChildPoints)) {
<a name="l05680"></a>05680                 <span class="comment">// insert the new left child into the multiset</span>
<a name="l05681"></a>05681                 
<a name="l05682"></a>05682                 pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#af7588b657e2819dd5dda525e08143ffc" title="Accessor for the left child of a node.">getLeftChild</a>());
<a name="l05683"></a>05683             }
<a name="l05684"></a>05684 
<a name="l05685"></a>05685             <span class="keywordflow">if</span> ( ((chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>())-&gt;getCounter() &gt; removeBox) &amp;&amp;
<a name="l05686"></a>05686                  <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8a997f746bf62c847990542daf7c5a6a" title="Method to do checking for whether a node is splittable.">checkNodeCountForSplit</a>(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>(),
<a name="l05687"></a>05687                     volChecking, minVol, minChildPoints)) {
<a name="l05688"></a>05688                 <span class="comment">// insert the new right child into the multiset</span>
<a name="l05689"></a>05689                
<a name="l05690"></a>05690                 pq.insert(chosenLargest-&gt;<a class="code" href="classsubpavings_1_1SPSnode.shtml#acc7d3e22be28d76da5c8c228aaaa95c7" title="Accessor for the right child of a node.">getRightChild</a>());
<a name="l05691"></a>05691             }
<a name="l05692"></a>05692 
<a name="l05693"></a>05693             <span class="keywordflow">if</span> (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>) {
<a name="l05694"></a>05694                 <span class="comment">// To add current state of histogram to log file</span>
<a name="l05695"></a>05695                 <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a8e1ee4de108b97c04c38ccb16c392e5f" title="Append current state of histogram to a txt log file.">outputLog</a>(s, i);
<a name="l05696"></a>05696                 <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a602b8b4081d3cae20308aa6644a83fa9" title="Add AIC EMP score to log file.">outputLogEMPAIC</a>(s); <span class="comment">// add AIC scores</span>
<a name="l05697"></a>05697                 i++;
<a name="l05698"></a>05698             }
<a name="l05699"></a>05699 
<a name="l05700"></a>05700             bigEnough = (!pq.empty());
<a name="l05701"></a>05701             <span class="keywordflow">if</span> (!bigEnough)
<a name="l05702"></a>05702                 std::cout &lt;&lt; <span class="stringliteral">&quot;Terminated splitting: no splittable nodes left&quot;</span>
<a name="l05703"></a>05703                     &lt;&lt; std::endl;
<a name="l05704"></a>05704         
<a name="l05705"></a>05705         
<a name="l05706"></a>05706         <span class="comment">// check if number of leaf nodes in subpaving &gt; maxLeafNodes</span>
<a name="l05707"></a>05707         <span class="comment">// maximum number of leaf nodes allowed</span>
<a name="l05708"></a>05708         <span class="comment">//n^B, A+B &gt; 1, 0  &lt; A &lt; 1, 0 &lt; B &lt; 1 - refer Prop. 1 in PQ paper</span>
<a name="l05709"></a>05709         TooManyLeaves = (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ae4a71d928009eda0a6332f20fd951e35" title="Gets number of leaf nodes in the root paving.">getRootLeaves</a>() &gt; maxLeafNodes);
<a name="l05710"></a>05710         <span class="keywordflow">if</span> ( TooManyLeaves) {
<a name="l05711"></a>05711           std::cout &lt;&lt; <span class="stringliteral">&quot;Terminated splitting: maximum number of leaf nodes = &quot;</span>&lt;&lt; maxLeafNodes &lt;&lt; <span class="stringliteral">&quot; reached&quot;</span>
<a name="l05712"></a>05712                           &lt;&lt; std::endl;
<a name="l05713"></a>05713         }
<a name="l05714"></a>05714       
<a name="l05715"></a>05715       }
<a name="l05716"></a>05716           
<a name="l05717"></a>05717 
<a name="l05718"></a>05718           
<a name="l05719"></a>05719           <span class="keywordflow">if</span> (cancontinue &amp;&amp; (logging != <a class="code" href="namespacesubpavings.shtml#aef8e51096b59ecaf1a1e9b2ee24b6089a1e5eba048e2496b2450d63fc2e9d1737">NOLOG</a>)) {
<a name="l05720"></a>05720             <span class="comment">// log the leaf levels line</span>
<a name="l05721"></a>05721             <a class="code" href="namespacesubpavings.shtml#aa5b5b66715568bc59cafea064eb8b1a7" title="Append a line to a txt file.">outputFile</a>(s, <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aca69edc461799f9d867d7eea6cb76f8e">getLeafLevelsString</a>());
<a name="l05722"></a>05722           }
<a name="l05723"></a>05723 
<a name="l05724"></a>05724           <span class="comment">// EMPSums will have been adjusted during the splitting process</span>
<a name="l05725"></a>05725    }
<a name="l05726"></a>05726 
<a name="l05727"></a>05727     <span class="keywordflow">catch</span> (bad_alloc&amp; ba) {
<a name="l05728"></a>05728         <span class="keywordtype">string</span> oldmsg(ba.what());
<a name="l05729"></a>05729         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error allocating memory iin priority split.  Orginal error: &quot;</span>
<a name="l05730"></a>05730                                     + oldmsg;
<a name="l05731"></a>05731         std::cout &lt;&lt; msg &lt;&lt; std::endl;
<a name="l05732"></a>05732         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l05733"></a>05733     }
<a name="l05734"></a>05734     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>&amp; e) {
<a name="l05735"></a>05735         <span class="keywordtype">string</span> oldmsg(e.<a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">what</a>());
<a name="l05736"></a>05736         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;HistException error in priority split.  Orginal error: &quot;</span>
<a name="l05737"></a>05737                                     + oldmsg;
<a name="l05738"></a>05738         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l05739"></a>05739         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l05740"></a>05740     }
<a name="l05741"></a>05741     <span class="keywordflow">catch</span> (<a class="code" href="classsubpavings_1_1SPnodeException.shtml">SPnodeException</a>&amp; spe) {
<a name="l05742"></a>05742         <span class="keywordtype">string</span> oldmsg(spe.<a class="code" href="classsubpavings_1_1SPnodeException.shtml#a56f1039ade7b3e954b2f30fcfac4bf2e">what</a>());
<a name="l05743"></a>05743         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;SPnodeException in priority split.  Orginal error: &quot;</span>
<a name="l05744"></a>05744                                     + oldmsg;
<a name="l05745"></a>05745         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l05746"></a>05746         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l05747"></a>05747     }
<a name="l05748"></a>05748     <span class="keywordflow">catch</span> (exception&amp; e) {
<a name="l05749"></a>05749         <span class="keywordtype">string</span> oldmsg(e.what());
<a name="l05750"></a>05750         <span class="keywordtype">string</span> msg = <span class="stringliteral">&quot;Error in priority split.  Orginal error: &quot;</span> + oldmsg;
<a name="l05751"></a>05751         std::cerr &lt;&lt; msg &lt;&lt; std::endl;
<a name="l05752"></a>05752         <span class="keywordflow">throw</span> <a class="code" href="classsubpavings_1_1HistException.shtml">HistException</a>(msg);
<a name="l05753"></a>05753     }
<a name="l05754"></a>05754 
<a name="l05755"></a>05755     <span class="keywordflow">return</span> (cancontinue);
<a name="l05756"></a>05756 }
<a name="l05757"></a>05757 
<a name="l05758"></a>05758 
<a name="l05759"></a>05759 
<a name="l05760"></a>05760 
<a name="l05761"></a>05761 <span class="comment">// check whether we can stop splitting using some stopping criteria</span>
<a name="l05762"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a438e2252f954f0556fa2bd7c2e105dbe">05762</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a438e2252f954f0556fa2bd7c2e105dbe">AdaptiveHistogram::checkStopCrit</a>(<span class="keywordtype">double</span> stopCritCurrent, <span class="keywordtype">double</span> stopCritPrevious, <span class="keywordtype">int</span>&amp; Prev)
<a name="l05763"></a>05763 {
<a name="l05764"></a>05764   <span class="keywordtype">bool</span> valley = <span class="keyword">false</span>;
<a name="l05765"></a>05765   <span class="comment">//cout &lt;&lt; &quot;current: &quot; &lt;&lt; stopCritCurrent &lt;&lt; &quot;\t previous: &quot; &lt;&lt; stopCritPrevious &lt;&lt; endl;</span>
<a name="l05766"></a>05766   <span class="comment">//cout &lt;&lt; &quot;Prev before checks: &quot; &lt;&lt; Prev &lt;&lt; endl;</span>
<a name="l05767"></a>05767   
<a name="l05768"></a>05768   <span class="comment">// check if it is a local minimum</span>
<a name="l05769"></a>05769   <span class="keywordflow">if</span> ( (stopCritCurrent &gt; stopCritPrevious) &amp;&amp; (Prev == 1) ) {
<a name="l05770"></a>05770     <span class="comment">//cout &lt;&lt; &quot;larger: &quot; &lt;&lt; (stopCritCurrent &gt; stopCritPrevious) &lt;&lt; &quot;\t Prev: &quot; &lt;&lt; Prev &lt;&lt; endl;</span>
<a name="l05771"></a>05771     <span class="comment">//cout &lt;&lt; &quot;!!! Local minima previously !!! &quot; &lt;&lt; endl;</span>
<a name="l05772"></a>05772     Prev = 0;
<a name="l05773"></a>05773     valley = <span class="keyword">true</span>;
<a name="l05774"></a>05774   }
<a name="l05775"></a>05775   
<a name="l05776"></a>05776   <span class="comment">// check if stopCrit is decreasing</span>
<a name="l05777"></a>05777   <span class="keywordflow">else</span> <span class="keywordflow">if</span> (stopCritCurrent &lt; stopCritPrevious) {
<a name="l05778"></a>05778     Prev = 1;
<a name="l05779"></a>05779     valley = <span class="keyword">false</span>;
<a name="l05780"></a>05780   }
<a name="l05781"></a>05781 
<a name="l05782"></a>05782   <span class="keywordflow">else</span> { 
<a name="l05783"></a>05783     valley = <span class="keyword">false</span>; }
<a name="l05784"></a>05784 
<a name="l05785"></a>05785   <span class="comment">//cout &lt;&lt; &quot;Prev after checks: &quot; &lt;&lt; Prev &lt;&lt; endl;</span>
<a name="l05786"></a>05786   <span class="keywordflow">return</span> valley;
<a name="l05787"></a>05787 }
<a name="l05788"></a>05788 
<a name="l05789"></a>05789 <span class="comment">//src_trunk_0701</span>
<a name="l05790"></a><a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a809928eec642c22761a2f9b3b8061d47">05790</a> <span class="keywordtype">void</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a809928eec642c22761a2f9b3b8061d47" title="Swap the contents of this and another histogram.">AdaptiveHistogram::swap</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; adh) <span class="comment">// throw()</span>
<a name="l05791"></a>05791 {
<a name="l05792"></a>05792   <span class="comment">//std::swap(label, adh.label);</span>
<a name="l05793"></a>05793   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a809928eec642c22761a2f9b3b8061d47" title="Swap the contents of this and another histogram.">std::swap</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb02d0a6fe2258620130b97b7901e214" title="A container for all sample data passed to this.">dataCollection</a>, adh.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#afb02d0a6fe2258620130b97b7901e214" title="A container for all sample data passed to this.">dataCollection</a>); <span class="comment">// use stl specialisation of swap</span>
<a name="l05794"></a>05794     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a809928eec642c22761a2f9b3b8061d47" title="Swap the contents of this and another histogram.">std::swap</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3f9319019a75ea477804d02762602d17" title="Controls whether all available statistics are maintained in the rootPaving. If set to false (default)...">holdAllStats</a>, adh.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a3f9319019a75ea477804d02762602d17" title="Controls whether all available statistics are maintained in the rootPaving. If set to false (default)...">holdAllStats</a>);
<a name="l05795"></a>05795   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a809928eec642c22761a2f9b3b8061d47" title="Swap the contents of this and another histogram.">std::swap</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a>, adh.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a1211a42d1f428d73db9ba3c035239c59" title="A string showing the order of creation of the rootPaving.">creationString</a>);
<a name="l05796"></a>05796     
<a name="l05797"></a>05797   <span class="comment">// cxsc don&#39;t seem to have a swap for dot precisions</span>
<a name="l05798"></a>05798     dotprecision tempCOPERR(adh.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acd3c0bacd5148b82188cc129b3a59e96" title="A value for the unscaled EMP part of COPERR score.">scaledEMPSumCOPERR</a>);
<a name="l05799"></a>05799   adh.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acd3c0bacd5148b82188cc129b3a59e96" title="A value for the unscaled EMP part of COPERR score.">scaledEMPSumCOPERR</a> = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acd3c0bacd5148b82188cc129b3a59e96" title="A value for the unscaled EMP part of COPERR score.">scaledEMPSumCOPERR</a>;
<a name="l05800"></a>05800   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#acd3c0bacd5148b82188cc129b3a59e96" title="A value for the unscaled EMP part of COPERR score.">scaledEMPSumCOPERR</a> = tempCOPERR;
<a name="l05801"></a>05801   
<a name="l05802"></a>05802   dotprecision tempAIC(adh.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad5748390a25f398475bb60575f0e9a89" title="A value for the unscaled EMP part of AIC score.">scaledEMPSumAIC</a>);
<a name="l05803"></a>05803   adh.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad5748390a25f398475bb60575f0e9a89" title="A value for the unscaled EMP part of AIC score.">scaledEMPSumAIC</a> = <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad5748390a25f398475bb60575f0e9a89" title="A value for the unscaled EMP part of AIC score.">scaledEMPSumAIC</a>;
<a name="l05804"></a>05804   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#ad5748390a25f398475bb60575f0e9a89" title="A value for the unscaled EMP part of AIC score.">scaledEMPSumAIC</a> = tempAIC;
<a name="l05805"></a>05805   
<a name="l05806"></a>05806   <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a809928eec642c22761a2f9b3b8061d47" title="Swap the contents of this and another histogram.">std::swap</a>(<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>, adh.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a88a104768020c02deb2a7df9e2b4cb3a" title="Pointer to the root node of the subpaving tree.">rootPaving</a>); <span class="comment">// just swap the pointers</span>
<a name="l05807"></a>05807 }
<a name="l05808"></a>05808 
<a name="l05809"></a>05809 
<a name="l05810"></a>05810 
<a name="l05811"></a>05811 
<a name="l05812"></a>05812 <span class="comment">// ------------    implementation of HistDescription class -----------------</span>
<a name="l05813"></a>05813 <span class="comment">// ----------  private methods</span>
<a name="l05814"></a>05814 
<a name="l05815"></a>05815 <span class="comment">// ----------  public methods:</span>
<a name="l05816"></a>05816 
<a name="l05817"></a>05817 <span class="comment">// Copy assignment operator.</span>
<a name="l05818"></a><a class="code" href="classsubpavings_1_1HistDescription.shtml#a6982d4933571625373952ffe5f7e9d4f">05818</a> <a class="code" href="classsubpavings_1_1HistDescription.shtml" title="A class for the histogram description.">HistDescription</a>&amp; <a class="code" href="classsubpavings_1_1HistDescription.shtml#a6982d4933571625373952ffe5f7e9d4f" title="Copy assignment operator.">HistDescription::operator=</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistDescription.shtml" title="A class for the histogram description.">HistDescription</a>&amp; rhs)
<a name="l05819"></a>05819 {
<a name="l05820"></a>05820     <a class="code" href="classsubpavings_1_1HistDescription.shtml#a05dabb27d7e43834ac9a8a99d8237538">depthString</a> = rhs.<a class="code" href="classsubpavings_1_1HistDescription.shtml#a05dabb27d7e43834ac9a8a99d8237538">depthString</a>;
<a name="l05821"></a>05821     <a class="code" href="classsubpavings_1_1HistDescription.shtml#a3f246c1b82fb69929ec3761480c934b9">goodString</a> = rhs.<a class="code" href="classsubpavings_1_1HistDescription.shtml#a3f246c1b82fb69929ec3761480c934b9">goodString</a>;
<a name="l05822"></a>05822     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l05823"></a>05823 }
<a name="l05824"></a>05824 
<a name="l05825"></a>05825 <span class="comment">//  Get the first level in the description.</span>
<a name="l05826"></a><a class="code" href="classsubpavings_1_1HistDescription.shtml#a8f53638ba1ddc56e63174d18510d92af">05826</a> <span class="keywordtype">int</span> <a class="code" href="classsubpavings_1_1HistDescription.shtml#a8f53638ba1ddc56e63174d18510d92af" title="Get the first level in the description.">HistDescription::peekFirst</a>()<span class="keyword"> const</span>
<a name="l05827"></a>05827 <span class="keyword"></span>{
<a name="l05828"></a>05828     <span class="comment">// parse string to get first level out</span>
<a name="l05829"></a>05829     std::string sep = <span class="stringliteral">&quot;, &quot;</span>;
<a name="l05830"></a>05830     <span class="keywordtype">size_t</span> startpos = <a class="code" href="classsubpavings_1_1HistDescription.shtml#a05dabb27d7e43834ac9a8a99d8237538">depthString</a>.find_first_not_of(sep);
<a name="l05831"></a>05831     <span class="keywordtype">size_t</span> endpos = std::string::npos;
<a name="l05832"></a>05832     <span class="keywordtype">size_t</span> newstartpos = std::string::npos;
<a name="l05833"></a>05833     <span class="keywordtype">int</span> depth = 0;
<a name="l05834"></a>05834     std::string str = <span class="stringliteral">&quot;&quot;</span>;
<a name="l05835"></a>05835     <span class="keywordflow">if</span> (startpos != std::string::npos) {
<a name="l05836"></a>05836         endpos = <a class="code" href="classsubpavings_1_1HistDescription.shtml#a05dabb27d7e43834ac9a8a99d8237538">depthString</a>.find_first_of(sep, startpos);
<a name="l05837"></a>05837         <span class="comment">//not the last digit</span>
<a name="l05838"></a>05838         <span class="keywordflow">if</span> (endpos != std::string::npos) {
<a name="l05839"></a>05839             str = <a class="code" href="classsubpavings_1_1HistDescription.shtml#a05dabb27d7e43834ac9a8a99d8237538">depthString</a>.substr(startpos, endpos-startpos);
<a name="l05840"></a>05840         }
<a name="l05841"></a>05841         <span class="comment">//last digit</span>
<a name="l05842"></a>05842         <span class="keywordflow">else</span> {
<a name="l05843"></a>05843             str = <a class="code" href="classsubpavings_1_1HistDescription.shtml#a05dabb27d7e43834ac9a8a99d8237538">depthString</a>.substr(startpos);
<a name="l05844"></a>05844         }
<a name="l05845"></a>05845     }
<a name="l05846"></a>05846     depth = atoi(str.c_str()); <span class="comment">// 0 if not valid integer</span>
<a name="l05847"></a>05847     <span class="keywordflow">if</span> (depth == 0) {
<a name="l05848"></a>05848         <a class="code" href="classsubpavings_1_1HistDescription.shtml#a3f246c1b82fb69929ec3761480c934b9">goodString</a> = <span class="keyword">false</span>;
<a name="l05849"></a>05849     }
<a name="l05850"></a>05850 
<a name="l05851"></a>05851     <span class="keywordflow">return</span> depth; <span class="comment">// 0 if not valid integer</span>
<a name="l05852"></a>05852 }
<a name="l05853"></a>05853 
<a name="l05854"></a>05854 <span class="comment">//  Strip off the first level in the description.</span>
<a name="l05855"></a><a class="code" href="classsubpavings_1_1HistDescription.shtml#a493c821ce318a6a4d950ea73c1f7ff11">05855</a> <span class="keywordtype">bool</span> <a class="code" href="classsubpavings_1_1HistDescription.shtml#a493c821ce318a6a4d950ea73c1f7ff11" title="Strip off the first level in the description.">HistDescription::popFirst</a>()
<a name="l05856"></a>05856 {
<a name="l05857"></a>05857     <span class="keywordtype">bool</span> stripped = <span class="keyword">false</span>;
<a name="l05858"></a>05858     <span class="comment">// parse string to get first level out</span>
<a name="l05859"></a>05859     std::string sep = <span class="stringliteral">&quot;, &quot;</span>;
<a name="l05860"></a>05860     <span class="keywordtype">size_t</span> startpos = <a class="code" href="classsubpavings_1_1HistDescription.shtml#a05dabb27d7e43834ac9a8a99d8237538">depthString</a>.find_first_not_of(sep);
<a name="l05861"></a>05861     <span class="keywordtype">size_t</span> endpos = std::string::npos;
<a name="l05862"></a>05862     <span class="keywordtype">size_t</span> newstartpos = std::string::npos;
<a name="l05863"></a>05863     <span class="keywordflow">if</span> (startpos != std::string::npos) {
<a name="l05864"></a>05864         endpos = <a class="code" href="classsubpavings_1_1HistDescription.shtml#a05dabb27d7e43834ac9a8a99d8237538">depthString</a>.find_first_of(sep, startpos);
<a name="l05865"></a>05865         <span class="comment">//not the last digit</span>
<a name="l05866"></a>05866         <span class="keywordflow">if</span> (endpos != std::string::npos) {
<a name="l05867"></a>05867             newstartpos = <a class="code" href="classsubpavings_1_1HistDescription.shtml#a05dabb27d7e43834ac9a8a99d8237538">depthString</a>.find_first_not_of(sep,
<a name="l05868"></a>05868                                                     endpos + 1);
<a name="l05869"></a>05869         }
<a name="l05870"></a>05870 
<a name="l05871"></a>05871         <span class="keywordflow">if</span> (newstartpos != std::string::npos) {
<a name="l05872"></a>05872             <a class="code" href="classsubpavings_1_1HistDescription.shtml#a05dabb27d7e43834ac9a8a99d8237538">depthString</a> = <a class="code" href="classsubpavings_1_1HistDescription.shtml#a05dabb27d7e43834ac9a8a99d8237538">depthString</a>.substr(newstartpos);
<a name="l05873"></a>05873         }
<a name="l05874"></a>05874         <span class="keywordflow">else</span> <a class="code" href="classsubpavings_1_1HistDescription.shtml#a05dabb27d7e43834ac9a8a99d8237538">depthString</a> = <span class="stringliteral">&quot;&quot;</span>;
<a name="l05875"></a>05875         stripped = <span class="keyword">true</span>;
<a name="l05876"></a>05876     }
<a name="l05877"></a>05877 
<a name="l05878"></a>05878     <span class="keywordflow">return</span> stripped;
<a name="l05879"></a>05879 }
<a name="l05880"></a>05880 
<a name="l05881"></a>05881 <span class="comment">// Output the HistDescription object.</span>
<a name="l05882"></a><a class="code" href="namespacesubpavings.shtml#a7b0c2cba5230c058d175234c14d4f3af">05882</a> std::ostream &amp; <a class="code" href="namespacesubpavings.shtml#a7b0c2cba5230c058d175234c14d4f3af" title="Output the HistDescription object.">operator&lt;&lt;</a>(std::ostream &amp;os,
<a name="l05883"></a>05883                                 <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistDescription.shtml" title="A class for the histogram description.">HistDescription</a>&amp; hd)
<a name="l05884"></a>05884 {
<a name="l05885"></a>05885     os &lt;&lt; hd.<a class="code" href="classsubpavings_1_1HistDescription.shtml#a35a0b15e904f1987b6603c7ffeb22f75" title="Get the depthString.">getDepthString</a>();
<a name="l05886"></a>05886     <span class="keywordflow">return</span> os;
<a name="l05887"></a>05887 }
<a name="l05888"></a>05888 
<a name="l05889"></a>05889 <span class="comment">// Comparison operator for the histogram description.</span>
<a name="l05890"></a><a class="code" href="namespacesubpavings.shtml#a91aca11d8ef070d592dcd968dd82d89d">05890</a> <span class="keywordtype">bool</span> <a class="code" href="namespacesubpavings.shtml#a91aca11d8ef070d592dcd968dd82d89d" title="Comparison operator for the histogram description.">operator&lt;</a>(<span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistDescription.shtml" title="A class for the histogram description.">HistDescription</a>&amp; lhs,
<a name="l05891"></a>05891                         <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1HistDescription.shtml" title="A class for the histogram description.">HistDescription</a>&amp; rhs)
<a name="l05892"></a>05892 {
<a name="l05893"></a>05893     <span class="keywordflow">return</span> lhs.<a class="code" href="classsubpavings_1_1HistDescription.shtml#a35a0b15e904f1987b6603c7ffeb22f75" title="Get the depthString.">getDepthString</a>() &lt; rhs.<a class="code" href="classsubpavings_1_1HistDescription.shtml#a35a0b15e904f1987b6603c7ffeb22f75" title="Get the depthString.">getDepthString</a>();
<a name="l05894"></a>05894 }
<a name="l05895"></a>05895 
<a name="l05896"></a>05896 <span class="comment">// -----------  end of implementation of HistDescription class ---------------</span>
<a name="l05897"></a>05897 
<a name="l05898"></a>05898 
<a name="l05899"></a>05899 <span class="comment">// ----------------------------- non member functions</span>
<a name="l05900"></a>05900 
<a name="l05901"></a>05901 <span class="comment">//Output all boxes in AdaptiveHistogram adh</span>
<a name="l05902"></a><a class="code" href="namespacesubpavings.shtml#aa76489a659f3ddc671bcd47d227baad1">05902</a> std::ostream &amp; <a class="code" href="namespacesubpavings.shtml#a7b0c2cba5230c058d175234c14d4f3af" title="Output the HistDescription object.">operator&lt;&lt;</a>(std::ostream &amp;os, <span class="keyword">const</span> <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a>&amp; adh)
<a name="l05903"></a>05903 {
<a name="l05904"></a>05904     os &lt;&lt; (adh.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#aecbdfe366fa381c0b3f7a7b00447dedb" title="Return a pointer to the SPSnode this manages.">getSubPaving</a>())-&gt;nodesAllOutput(os, 1) &lt;&lt; std::endl;
<a name="l05905"></a>05905 
<a name="l05906"></a>05906     <span class="keywordflow">return</span> os;
<a name="l05907"></a>05907 }
<a name="l05908"></a>05908 
<a name="l05909"></a>05909 <span class="comment">// Full specializations of the templates in std namespace can be added in std namespace.</span>
<a name="l05910"></a>05910 <span class="keyword">template</span> &lt;&gt;
<a name="l05911"></a>05911 <span class="keywordtype">void</span> std::swap (<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> &amp; a1, 
<a name="l05912"></a>05912     <a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml" title="A wrapper or manager for an SPSnode aka StatsSubPaving in conjunction with massive amounts of sample ...">AdaptiveHistogram</a> &amp; a2) <span class="comment">// throw ()</span>
<a name="l05913"></a>05913 {
<a name="l05914"></a>05914   a1.<a class="code" href="classsubpavings_1_1AdaptiveHistogram.shtml#a809928eec642c22761a2f9b3b8061d47" title="Swap the contents of this and another histogram.">swap</a>(a2);
<a name="l05915"></a>05915 }
<a name="l05916"></a>05916 
<a name="l05917"></a>05917 
<a name="l05918"></a>05918 <span class="comment">// ----------------------------- Histogram exceptions definitions</span>
<a name="l05919"></a>05919 
<a name="l05920"></a><a class="code" href="classsubpavings_1_1HistException.shtml#a30a3ad6d38a4913062edf162382fbe54">05920</a> <a class="code" href="classsubpavings_1_1HistException.shtml#a30a3ad6d38a4913062edf162382fbe54">HistException::HistException</a>(std::string ss) : s(ss) {}
<a name="l05921"></a><a class="code" href="classsubpavings_1_1HistException.shtml#acdc02a56739daf196a7d44e48951d83c">05921</a> <a class="code" href="classsubpavings_1_1HistException.shtml#acdc02a56739daf196a7d44e48951d83c">HistException::~HistException</a> () throw () {}
<a name="l05922"></a><a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">05922</a> <span class="keyword">const</span> <span class="keywordtype">char</span>* <a class="code" href="classsubpavings_1_1HistException.shtml#a08b10aa1f131d863b2260fca714afdbe">HistException::what</a>() <span class="keyword">const</span> throw() { <span class="keywordflow">return</span> <a class="code" href="classsubpavings_1_1HistException.shtml#a0fa63652ca7c257562f3c590805d5d06">s</a>.c_str(); }
</pre></div></div><!-- contents -->
</div>
  <div id="nav-path" class="navpath">
    <ul>
      <li class="navelem"><a class="el" href="adaptivehistogram_8cpp.shtml">adaptivehistogram.cpp</a>      </li>

    <li class="footer">Generated on Mon Sep 28 2015 15:58:10 for MRS: A C++ Class Library for Statistical Set Processing by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.6.1 </li>
   </ul>
 </div>


</body>
</html>
