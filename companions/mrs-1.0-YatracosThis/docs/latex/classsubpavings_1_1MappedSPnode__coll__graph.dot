digraph G
{
  edge [fontname="FreeSans",fontsize="10",labelfontname="FreeSans",labelfontsize="10"];
  node [fontname="FreeSans",fontsize="10",shape=record];
  Node1 [label="{subpavings::MappedSPnode\< T \>\n||+ ~MappedSPnode()\l+ MappedSPnode()\l+ MappedSPnode()\l+ MappedSPnode()\l+ MappedSPnode()\l+ MappedSPnode()\l+ MappedSPnode()\l+ MappedSPnode()\l+ operator=()\l+ getParent()\land 8 more...* range\l* slice()\l* acceptSPExpandVisitor()\l* acceptSPValueVisitor()\l* operator+=()\l* operator+()\l* operator+=()\l* operator+()\l* operator-=()\l* operator-()\land 29 more...}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled" fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node2 [label="{subpavings::SPnode\n|# theBox\l# dimension\l# label\l# parent\l# leftChild\l# rightChild\l# nodeName\l|+ SPnode()\l+ SPnode()\l+ SPnode()\l+ SPnode()\l+ SPnode()\l+ SPnode()\l+ ~SPnode()\l+ operator=()\l+ recursiveRename()\l+ isSplittableNode()\land 49 more...+ getParent()\l+ getLeftChild()\l+ getRightChild()\l+ leavesOutputTabs()\l+ leavesOutputTabs()\l+ nodesAllOutput()\l+ nodesAllOutput()\l+ vecLeafBoxOuterJacket()\l+ spLeafBoxOuterJacket()\l+ volOuterJacket()\l+ vecLeafBoxIntersection()\l+ spLeafBoxIntersection()\l+ volIntersection()\l+ vecLeafBoxDifference()\l+ vecBoxNodeDifference()\l+ spLeafBoxDifference()\l+ volDifference()\l+ makeTreeFromLeaves()\l+ makeTreeFromVoxels()\l+ vtkPaving()\l# splitLeft()\l# _reshapeToUnion()\l- constructor_error_handler()\l* getParent()\l* getLeftChild()\l* getRightChild()\l* leavesOutputTabs()\l* leavesOutputTabs()\l* nodesAllOutput()\l* nodesAllOutput()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$classsubpavings_1_1SPnode.shtml",tooltip="SPnodes are nodes in the representation of a subpaving as a binary tree."];
  Node2 -> Node2 [color="grey25",fontsize="10",style="solid",label=" rightChild\nparent\nleftChild" ,arrowhead="odiamond"];
  Node3 -> Node2 [color="grey25",fontsize="10",style="solid",label=" nodeName" ,arrowhead="odiamond"];
  Node3 [label="{std::string\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip="STL class."];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal"];
  Node4 [label="{std::basic_string\< char \>\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled",tooltip="STL class."];
  Node5 -> Node1 [color="grey25",fontsize="10",style="solid",label=" range" ,arrowhead="odiamond"];
  Node5 [label="{T\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
}
